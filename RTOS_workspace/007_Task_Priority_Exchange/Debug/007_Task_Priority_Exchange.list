
007_Task_Priority_Exchange.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007810  08007810  00008810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007990  08007990  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007990  08007990  00008990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007998  08007998  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007998  08007998  00008998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800799c  0800799c  0000899c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080079a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          0001449c  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144b8  200144b8  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fe5  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031e4  00000000  00000000  0001d031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00020218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f06  00000000  00000000  00021598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023168  00000000  00000000  0002249e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001681c  00000000  00000000  00045606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7cee  00000000  00000000  0005be22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133b10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000516c  00000000  00000000  00133b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ef  00000000  00000000  00138cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077f8 	.word	0x080077f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080077f8 	.word	0x080077f8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ee4 	.word	0x20012ee4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbdb 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f855 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8bd 	bl	80006e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(250000);
 8000566:	4821      	ldr	r0, [pc, #132]	@ (80005ec <main+0x98>)
 8000568:	f004 fea0 	bl	80052ac <SEGGER_UART_init>

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800056c:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <main+0x9c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1f      	ldr	r2, [pc, #124]	@ (80005f0 <main+0x9c>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000578:	f004 fc52 	bl	8004e20 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(red_task_handler, "LED_red_task", 200, NULL, 2, &red_task_handle);
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <main+0xa0>)
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	491b      	ldr	r1, [pc, #108]	@ (80005f8 <main+0xa4>)
 800058a:	481c      	ldr	r0, [pc, #112]	@ (80005fc <main+0xa8>)
 800058c:	f002 fc76 	bl	8002e7c <xTaskCreate>
 8000590:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00b      	beq.n	80005b0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x58>

  status = xTaskCreate(green_task_handler, "LED_green_task", 200, NULL, 3, &green_task_handle);
 80005b0:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <main+0xac>)
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2303      	movs	r3, #3
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	22c8      	movs	r2, #200	@ 0xc8
 80005bc:	4911      	ldr	r1, [pc, #68]	@ (8000604 <main+0xb0>)
 80005be:	4812      	ldr	r0, [pc, #72]	@ (8000608 <main+0xb4>)
 80005c0:	f002 fc5c 	bl	8002e7c <xTaskCreate>
 80005c4:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00b      	beq.n	80005e4 <main+0x90>
        __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	607b      	str	r3, [r7, #4]
    }
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x8c>

  vTaskStartScheduler();
 80005e4:	f002 fe8a 	bl	80032fc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x94>
 80005ec:	0003d090 	.word	0x0003d090
 80005f0:	e0001000 	.word	0xe0001000
 80005f4:	2000003c 	.word	0x2000003c
 80005f8:	08007810 	.word	0x08007810
 80005fc:	080009dd 	.word	0x080009dd
 8000600:	20000038 	.word	0x20000038
 8000604:	08007820 	.word	0x08007820
 8000608:	080009ad 	.word	0x080009ad

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 f8b2 	bl	8007784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	@ 0xa8
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fe7b 	bl	800138c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 fa26 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f8dc 	bl	800187c <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 fa0f 	bl	8000aec <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	4ba6      	ldr	r3, [pc, #664]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4aa5      	ldr	r2, [pc, #660]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4ba3      	ldr	r3, [pc, #652]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	4b9f      	ldr	r3, [pc, #636]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a9e      	ldr	r2, [pc, #632]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b9c      	ldr	r3, [pc, #624]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b98      	ldr	r3, [pc, #608]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a97      	ldr	r2, [pc, #604]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b95      	ldr	r3, [pc, #596]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b91      	ldr	r3, [pc, #580]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a90      	ldr	r2, [pc, #576]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b8e      	ldr	r3, [pc, #568]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b8a      	ldr	r3, [pc, #552]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a89      	ldr	r2, [pc, #548]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b87      	ldr	r3, [pc, #540]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b83      	ldr	r3, [pc, #524]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a82      	ldr	r2, [pc, #520]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b80      	ldr	r3, [pc, #512]	@ (8000994 <MX_GPIO_Init+0x2b4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2108      	movs	r1, #8
 80007a2:	487d      	ldr	r0, [pc, #500]	@ (8000998 <MX_GPIO_Init+0x2b8>)
 80007a4:	f000 fd9a 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2101      	movs	r1, #1
 80007ac:	487b      	ldr	r0, [pc, #492]	@ (800099c <MX_GPIO_Init+0x2bc>)
 80007ae:	f000 fd95 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007b2:	2200      	movs	r2, #0
 80007b4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007b8:	4879      	ldr	r0, [pc, #484]	@ (80009a0 <MX_GPIO_Init+0x2c0>)
 80007ba:	f000 fd8f 	bl	80012dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007be:	2308      	movs	r3, #8
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4870      	ldr	r0, [pc, #448]	@ (8000998 <MX_GPIO_Init+0x2b8>)
 80007d6:	f000 fbe5 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007da:	2301      	movs	r3, #1
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	486a      	ldr	r0, [pc, #424]	@ (800099c <MX_GPIO_Init+0x2bc>)
 80007f2:	f000 fbd7 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000806:	2305      	movs	r3, #5
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4862      	ldr	r0, [pc, #392]	@ (800099c <MX_GPIO_Init+0x2bc>)
 8000812:	f000 fbc7 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_Pin */
  GPIO_InitStruct.Pin = PA0_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PA0_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	485e      	ldr	r0, [pc, #376]	@ (80009a4 <MX_GPIO_Init+0x2c4>)
 800082c:	f000 fbba 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000830:	2310      	movs	r3, #16
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000840:	2306      	movs	r3, #6
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4856      	ldr	r0, [pc, #344]	@ (80009a4 <MX_GPIO_Init+0x2c4>)
 800084c:	f000 fbaa 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000850:	23e0      	movs	r3, #224	@ 0xe0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000860:	2305      	movs	r3, #5
 8000862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	484e      	ldr	r0, [pc, #312]	@ (80009a4 <MX_GPIO_Init+0x2c4>)
 800086c:	f000 fb9a 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4849      	ldr	r0, [pc, #292]	@ (80009a8 <MX_GPIO_Init+0x2c8>)
 8000884:	f000 fb8e 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4840      	ldr	r0, [pc, #256]	@ (80009a8 <MX_GPIO_Init+0x2c8>)
 80008a6:	f000 fb7d 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4837      	ldr	r0, [pc, #220]	@ (80009a0 <MX_GPIO_Init+0x2c0>)
 80008c4:	f000 fb6e 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008da:	2306      	movs	r3, #6
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	482d      	ldr	r0, [pc, #180]	@ (800099c <MX_GPIO_Init+0x2bc>)
 80008e6:	f000 fb5d 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4829      	ldr	r0, [pc, #164]	@ (80009a4 <MX_GPIO_Init+0x2c4>)
 8000900:	f000 fb50 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000904:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000916:	230a      	movs	r3, #10
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4820      	ldr	r0, [pc, #128]	@ (80009a4 <MX_GPIO_Init+0x2c4>)
 8000922:	f000 fb3f 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0x2c0>)
 800093a:	f000 fb33 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800093e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000944:	2312      	movs	r3, #18
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000950:	2304      	movs	r3, #4
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4813      	ldr	r0, [pc, #76]	@ (80009a8 <MX_GPIO_Init+0x2c8>)
 800095c:	f000 fb22 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000964:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <MX_GPIO_Init+0x2b8>)
 8000976:	f000 fb15 	bl	8000fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2106      	movs	r1, #6
 800097e:	2006      	movs	r0, #6
 8000980:	f000 fae6 	bl	8000f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000984:	2006      	movs	r0, #6
 8000986:	f000 faff 	bl	8000f88 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400

080009ac <green_task_handler>:

/* USER CODE BEGIN 4 */
static void green_task_handler(void* parameters)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80009b4:	4807      	ldr	r0, [pc, #28]	@ (80009d4 <green_task_handler+0x28>)
 80009b6:	f006 fe37 	bl	8007628 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <green_task_handler+0x2c>)
 80009c0:	f000 fca5 	bl	800130e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c8:	f000 f9e6 	bl	8000d98 <HAL_Delay>
		switch_priority();
 80009cc:	f000 f81e 	bl	8000a0c <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80009d0:	bf00      	nop
 80009d2:	e7ef      	b.n	80009b4 <green_task_handler+0x8>
 80009d4:	08007830 	.word	0x08007830
 80009d8:	40020c00 	.word	0x40020c00

080009dc <red_task_handler>:
	}
}
static void red_task_handler(void* parameters)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80009e4:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <red_task_handler+0x28>)
 80009e6:	f006 fe1f 	bl	8007628 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80009ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <red_task_handler+0x2c>)
 80009f0:	f000 fc8d 	bl	800130e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80009f4:	2064      	movs	r0, #100	@ 0x64
 80009f6:	f000 f9cf 	bl	8000d98 <HAL_Delay>
		switch_priority();
 80009fa:	f000 f807 	bl	8000a0c <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80009fe:	bf00      	nop
 8000a00:	e7f0      	b.n	80009e4 <red_task_handler+0x8>
 8000a02:	bf00      	nop
 8000a04:	08007844 	.word	0x08007844
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <switch_priority>:
	}
}

void switch_priority(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	xTaskHandle curr;

	if(swp == 1)
 8000a12:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <switch_priority+0x90>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d13c      	bne.n	8000a94 <switch_priority+0x88>
	{
		portENTER_CRITICAL();
 8000a1a:	f003 febf 	bl	800479c <vPortEnterCritical>
		swp = 0;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <switch_priority+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
		portEXIT_CRITICAL();
 8000a24:	f003 feec 	bl	8004800 <vPortExitCritical>

		uint8_t green_priority;
		uint8_t red_priority;

		SEGGER_SYSVIEW_PrintfTarget("Exchange priority");
 8000a28:	481d      	ldr	r0, [pc, #116]	@ (8000aa0 <switch_priority+0x94>)
 8000a2a:	f006 fdfd 	bl	8007628 <SEGGER_SYSVIEW_PrintfTarget>

		green_priority = uxTaskPriorityGet(green_task_handle);
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <switch_priority+0x98>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fb86 	bl	8003144 <uxTaskPriorityGet>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
		red_priority = uxTaskPriorityGet(red_task_handle);
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <switch_priority+0x9c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fb7f 	bl	8003144 <uxTaskPriorityGet>
 8000a46:	4603      	mov	r3, r0
 8000a48:	71bb      	strb	r3, [r7, #6]

		curr = xTaskGetCurrentTaskHandle();
 8000a4a:	f003 f8ad 	bl	8003ba8 <xTaskGetCurrentTaskHandle>
 8000a4e:	6038      	str	r0, [r7, #0]

		if(curr == green_task_handle)
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <switch_priority+0x98>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d10e      	bne.n	8000a78 <switch_priority+0x6c>
		{
			vTaskPrioritySet(green_task_handle, red_priority);
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <switch_priority+0x98>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	79ba      	ldrb	r2, [r7, #6]
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fb88 	bl	8003178 <vTaskPrioritySet>
			vTaskPrioritySet(red_task_handle, green_priority);
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <switch_priority+0x9c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	79fa      	ldrb	r2, [r7, #7]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fb81 	bl	8003178 <vTaskPrioritySet>
			vTaskPrioritySet(green_task_handle, red_priority);

		}

	}
}
 8000a76:	e00d      	b.n	8000a94 <switch_priority+0x88>
			vTaskPrioritySet(red_task_handle, green_priority);
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <switch_priority+0x9c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fb79 	bl	8003178 <vTaskPrioritySet>
			vTaskPrioritySet(green_task_handle, red_priority);
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <switch_priority+0x98>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	79ba      	ldrb	r2, [r7, #6]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fb72 	bl	8003178 <vTaskPrioritySet>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000040 	.word	0x20000040
 8000aa0:	08007858 	.word	0x08007858
 8000aa4:	20000038 	.word	0x20000038
 8000aa8:	2000003c 	.word	0x2000003c

08000aac <button_interrupt_handler>:

void button_interrupt_handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000ab0:	f006 fb12 	bl	80070d8 <SEGGER_SYSVIEW_RecordEnterISR>

	swp = 1;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <button_interrupt_handler+0x18>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]

	traceISR_EXIT();
 8000aba:	f006 fb4f 	bl	800715c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000040 	.word	0x20000040

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ada:	f000 f93d 	bl	8000d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40001000 	.word	0x40001000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b36:	f003 fdb1 	bl	800469c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b68:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f888 	bl	8001c94 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8e:	f001 f86d 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
 8000b92:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b96:	f001 f869 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <HAL_InitTick+0xe8>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	0c9b      	lsrs	r3, r3, #18
 8000baa:	3b01      	subs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <HAL_InitTick+0xf0>)
 8000bb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd4:	4817      	ldr	r0, [pc, #92]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bd6:	f001 f88f 	bl	8001cf8 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11b      	bne.n	8000c20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be8:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bea:	f001 f8df 	bl	8001dac <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bfc:	2036      	movs	r0, #54	@ 0x36
 8000bfe:	f000 f9c3 	bl	8000f88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d808      	bhi.n	8000c1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2036      	movs	r0, #54	@ 0x36
 8000c0e:	f000 f99f 	bl	8000f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_InitTick+0xf4>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e002      	b.n	8000c20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3738      	adds	r7, #56	@ 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000044 	.word	0x20000044
 8000c38:	40001000 	.word	0x40001000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000c7a:	f7ff ff17 	bl	8000aac <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PA0_Pin);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fb60 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <TIM6_DAC_IRQHandler+0x10>)
 8000c8e:	f001 f8fd 	bl	8001e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000044 	.word	0x20000044

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f006 fd51 	bl	8007794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc2f 	bl	8000554 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d04:	080079a0 	.word	0x080079a0
  ldr r2, =_sbss
 8000d08:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d0c:	200144b8 	.word	0x200144b8

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f8fc 	bl	8000f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f7ff ff00 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fed6 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	2000008c 	.word	0x2000008c

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000008c 	.word	0x2000008c

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	@ (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	@ 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff4c 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f62:	f7ff ff61 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	f7ff ffb1 	bl	8000ed4 <NVIC_EncodePriority>
 8000f72:	4602      	mov	r2, r0
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff80 	bl	8000e80 <__NVIC_SetPriority>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff54 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	@ 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e16b      	b.n	8001298 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 815a 	bne.w	8001292 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d005      	beq.n	8000ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d130      	bne.n	8001058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b03      	cmp	r3, #3
 8001062:	d017      	beq.n	8001094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d123      	bne.n	80010e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	69b9      	ldr	r1, [r7, #24]
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80b4 	beq.w	8001292 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b60      	ldr	r3, [pc, #384]	@ (80012b0 <HAL_GPIO_Init+0x30c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a5f      	ldr	r2, [pc, #380]	@ (80012b0 <HAL_GPIO_Init+0x30c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b5d      	ldr	r3, [pc, #372]	@ (80012b0 <HAL_GPIO_Init+0x30c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001146:	4a5b      	ldr	r2, [pc, #364]	@ (80012b4 <HAL_GPIO_Init+0x310>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a52      	ldr	r2, [pc, #328]	@ (80012b8 <HAL_GPIO_Init+0x314>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d02b      	beq.n	80011ca <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a51      	ldr	r2, [pc, #324]	@ (80012bc <HAL_GPIO_Init+0x318>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d025      	beq.n	80011c6 <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a50      	ldr	r2, [pc, #320]	@ (80012c0 <HAL_GPIO_Init+0x31c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d01f      	beq.n	80011c2 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	@ (80012c4 <HAL_GPIO_Init+0x320>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x21a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4e      	ldr	r2, [pc, #312]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x216>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4d      	ldr	r2, [pc, #308]	@ (80012cc <HAL_GPIO_Init+0x328>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x212>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4c      	ldr	r2, [pc, #304]	@ (80012d0 <HAL_GPIO_Init+0x32c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x20e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4b      	ldr	r2, [pc, #300]	@ (80012d4 <HAL_GPIO_Init+0x330>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x20a>
 80011aa:	2307      	movs	r3, #7
 80011ac:	e00e      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011ae:	2308      	movs	r3, #8
 80011b0:	e00c      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e00a      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x228>
 80011ca:	2300      	movs	r3, #0
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	f002 0203 	and.w	r2, r2, #3
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011dc:	4935      	ldr	r1, [pc, #212]	@ (80012b4 <HAL_GPIO_Init+0x310>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120e:	4a32      	ldr	r2, [pc, #200]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001214:	4b30      	ldr	r3, [pc, #192]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001238:	4a27      	ldr	r2, [pc, #156]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123e:	4b26      	ldr	r3, [pc, #152]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001262:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128c:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <HAL_GPIO_Init+0x334>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b0f      	cmp	r3, #15
 800129c:	f67f ae90 	bls.w	8000fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40021400 	.word	0x40021400
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40021c00 	.word	0x40021c00
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001320:	887a      	ldrh	r2, [r7, #2]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43d9      	mvns	r1, r3
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	400b      	ands	r3, r1
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f806 	bl	8001374 <HAL_GPIO_EXTI_Callback>
  }
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e267      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d075      	beq.n	8001496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013aa:	4b88      	ldr	r3, [pc, #544]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d00c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b85      	ldr	r3, [pc, #532]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d112      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4b82      	ldr	r3, [pc, #520]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013ce:	d10b      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	4b7e      	ldr	r3, [pc, #504]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d05b      	beq.n	8001494 <HAL_RCC_OscConfig+0x108>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d157      	bne.n	8001494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e242      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x74>
 80013f2:	4b76      	ldr	r3, [pc, #472]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a75      	ldr	r2, [pc, #468]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xb0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x98>
 800140a:	4b70      	ldr	r3, [pc, #448]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6f      	ldr	r2, [pc, #444]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b6d      	ldr	r3, [pc, #436]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6c      	ldr	r2, [pc, #432]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xb0>
 8001424:	4b69      	ldr	r3, [pc, #420]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a68      	ldr	r2, [pc, #416]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b66      	ldr	r3, [pc, #408]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a65      	ldr	r2, [pc, #404]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fc9c 	bl	8000d80 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fc98 	bl	8000d80 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e207      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b5b      	ldr	r3, [pc, #364]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xc0>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fc88 	bl	8000d80 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fc84 	bl	8000d80 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e1f3      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0xe8>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d063      	beq.n	800156a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014a2:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d11c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e1c7      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4937      	ldr	r1, [pc, #220]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	e03a      	b.n	800156a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <HAL_RCC_OscConfig+0x244>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fc3d 	bl	8000d80 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fc39 	bl	8000d80 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e1a8      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4925      	ldr	r1, [pc, #148]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <HAL_RCC_OscConfig+0x244>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc1c 	bl	8000d80 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fc18 	bl	8000d80 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e187      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d036      	beq.n	80015e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d016      	beq.n	80015ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_RCC_OscConfig+0x248>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fbfc 	bl	8000d80 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fbf8 	bl	8000d80 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e167      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80015a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x200>
 80015aa:	e01b      	b.n	80015e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_RCC_OscConfig+0x248>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fbe5 	bl	8000d80 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	e00e      	b.n	80015d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fbe1 	bl	8000d80 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d907      	bls.n	80015d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e150      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
 80015cc:	40023800 	.word	0x40023800
 80015d0:	42470000 	.word	0x42470000
 80015d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b88      	ldr	r3, [pc, #544]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ea      	bne.n	80015ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8097 	beq.w	8001720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b81      	ldr	r3, [pc, #516]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10f      	bne.n	8001622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a7c      	ldr	r2, [pc, #496]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b7a      	ldr	r3, [pc, #488]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b77      	ldr	r3, [pc, #476]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d118      	bne.n	8001660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b74      	ldr	r3, [pc, #464]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a73      	ldr	r2, [pc, #460]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff fba1 	bl	8000d80 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff fb9d 	bl	8000d80 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e10c      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b6a      	ldr	r3, [pc, #424]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x2ea>
 8001668:	4b64      	ldr	r3, [pc, #400]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800166c:	4a63      	ldr	r2, [pc, #396]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6713      	str	r3, [r2, #112]	@ 0x70
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x324>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x30c>
 800167e:	4b5f      	ldr	r3, [pc, #380]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001682:	4a5e      	ldr	r2, [pc, #376]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6713      	str	r3, [r2, #112]	@ 0x70
 800168a:	4b5c      	ldr	r3, [pc, #368]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168e:	4a5b      	ldr	r2, [pc, #364]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6713      	str	r3, [r2, #112]	@ 0x70
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x324>
 8001698:	4b58      	ldr	r3, [pc, #352]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169c:	4a57      	ldr	r2, [pc, #348]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a4:	4b55      	ldr	r3, [pc, #340]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a8:	4a54      	ldr	r2, [pc, #336]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d015      	beq.n	80016e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff fb62 	bl	8000d80 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff fb5e 	bl	8000d80 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0cb      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	4b49      	ldr	r3, [pc, #292]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0ee      	beq.n	80016c0 <HAL_RCC_OscConfig+0x334>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fb4c 	bl	8000d80 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fb48 	bl	8000d80 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0b5      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a38      	ldr	r2, [pc, #224]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800171a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80a1 	beq.w	800186c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d05c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d141      	bne.n	80017c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fb1c 	bl	8000d80 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff fb18 	bl	8000d80 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e087      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	491b      	ldr	r1, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff faf1 	bl	8000d80 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff faed 	bl	8000d80 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e05c      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x416>
 80017c0:	e054      	b.n	800186c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fada 	bl	8000d80 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fad6 	bl	8000d80 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e045      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x444>
 80017ee:	e03d      	b.n	800186c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e038      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000
 8001804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_RCC_OscConfig+0x4ec>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d028      	beq.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d121      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d11a      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800183e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001840:	4293      	cmp	r3, r2
 8001842:	d111      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	085b      	lsrs	r3, r3, #1
 8001850:	3b01      	subs	r3, #1
 8001852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d107      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0cc      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b68      	ldr	r3, [pc, #416]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d90c      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b65      	ldr	r3, [pc, #404]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b63      	ldr	r3, [pc, #396]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b8      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d0:	4b59      	ldr	r3, [pc, #356]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a58      	ldr	r2, [pc, #352]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a52      	ldr	r2, [pc, #328]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b50      	ldr	r3, [pc, #320]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	494d      	ldr	r1, [pc, #308]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d044      	beq.n	800199c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b47      	ldr	r3, [pc, #284]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d119      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e07f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d003      	beq.n	800193a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	2b03      	cmp	r3, #3
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e067      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195a:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 0203 	bic.w	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4934      	ldr	r1, [pc, #208]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800196c:	f7ff fa08 	bl	8000d80 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	e00a      	b.n	800198a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff fa04 	bl	8000d80 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e04f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 020c 	and.w	r2, r3, #12
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	429a      	cmp	r2, r3
 800199a:	d1eb      	bne.n	8001974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d20c      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e032      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4916      	ldr	r1, [pc, #88]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	490e      	ldr	r1, [pc, #56]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a02:	f000 f821 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	490a      	ldr	r1, [pc, #40]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	5ccb      	ldrb	r3, [r1, r3]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f890 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08007950 	.word	0x08007950
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a4c:	b094      	sub	sp, #80	@ 0x50
 8001a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a60:	4b79      	ldr	r3, [pc, #484]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d00d      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x40>
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	f200 80e1 	bhi.w	8001c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x34>
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a7a:	e0db      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b73      	ldr	r3, [pc, #460]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a80:	e0db      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a82:	4b73      	ldr	r3, [pc, #460]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a86:	e0d8      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a88:	4b6f      	ldr	r3, [pc, #444]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a92:	4b6d      	ldr	r3, [pc, #436]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001aba:	4622      	mov	r2, r4
 8001abc:	462b      	mov	r3, r5
 8001abe:	f04f 0000 	mov.w	r0, #0
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	0159      	lsls	r1, r3, #5
 8001ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001acc:	0150      	lsls	r0, r2, #5
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	1a51      	subs	r1, r2, r1
 8001ad6:	6139      	str	r1, [r7, #16]
 8001ad8:	4629      	mov	r1, r5
 8001ada:	eb63 0301 	sbc.w	r3, r3, r1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aec:	4659      	mov	r1, fp
 8001aee:	018b      	lsls	r3, r1, #6
 8001af0:	4651      	mov	r1, sl
 8001af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001af6:	4651      	mov	r1, sl
 8001af8:	018a      	lsls	r2, r1, #6
 8001afa:	4651      	mov	r1, sl
 8001afc:	ebb2 0801 	subs.w	r8, r2, r1
 8001b00:	4659      	mov	r1, fp
 8001b02:	eb63 0901 	sbc.w	r9, r3, r1
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4699      	mov	r9, r3
 8001b1e:	4623      	mov	r3, r4
 8001b20:	eb18 0303 	adds.w	r3, r8, r3
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	462b      	mov	r3, r5
 8001b28:	eb49 0303 	adc.w	r3, r9, r3
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	024b      	lsls	r3, r1, #9
 8001b3e:	4621      	mov	r1, r4
 8001b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b44:	4621      	mov	r1, r4
 8001b46:	024a      	lsls	r2, r1, #9
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b4e:	2200      	movs	r2, #0
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b58:	f7fe fb84 	bl	8000264 <__aeabi_uldivmod>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4613      	mov	r3, r2
 8001b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b64:	e058      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4611      	mov	r1, r2
 8001b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b80:	4642      	mov	r2, r8
 8001b82:	464b      	mov	r3, r9
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	0159      	lsls	r1, r3, #5
 8001b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b92:	0150      	lsls	r0, r2, #5
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4641      	mov	r1, r8
 8001b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b9e:	4649      	mov	r1, r9
 8001ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	00eb      	lsls	r3, r5, #3
 8001bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bce:	00e2      	lsls	r2, r4, #3
 8001bd0:	4614      	mov	r4, r2
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	4643      	mov	r3, r8
 8001bd6:	18e3      	adds	r3, r4, r3
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	464b      	mov	r3, r9
 8001bdc:	eb45 0303 	adc.w	r3, r5, r3
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bee:	4629      	mov	r1, r5
 8001bf0:	028b      	lsls	r3, r1, #10
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	028a      	lsls	r2, r1, #10
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c02:	2200      	movs	r2, #0
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	61fa      	str	r2, [r7, #28]
 8001c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c0c:	f7fe fb2a 	bl	8000264 <__aeabi_uldivmod>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4613      	mov	r3, r2
 8001c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	3301      	adds	r3, #1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c32:	e002      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3750      	adds	r7, #80	@ 0x50
 8001c40:	46bd      	mov	sp, r7
 8001c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	007a1200 	.word	0x007a1200

08001c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000000 	.word	0x20000000

08001c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c70:	f7ff fff0 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0a9b      	lsrs	r3, r3, #10
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	@ (8001c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08007960 	.word	0x08007960

08001c94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_RCC_GetClockConfig+0x60>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0207 	and.w	r2, r3, #7
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40023c00 	.word	0x40023c00

08001cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e041      	b.n	8001d8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f839 	bl	8001d96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f000 f9c0 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d001      	beq.n	8001dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e04e      	b.n	8001e62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a23      	ldr	r2, [pc, #140]	@ (8001e70 <HAL_TIM_Base_Start_IT+0xc4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d022      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dee:	d01d      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e74 <HAL_TIM_Base_Start_IT+0xc8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d018      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00e      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a18      	ldr	r2, [pc, #96]	@ (8001e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d111      	bne.n	8001e50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d010      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4e:	e007      	b.n	8001e60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	40010400 	.word	0x40010400
 8001e84:	40014000 	.word	0x40014000
 8001e88:	40001800 	.word	0x40001800

08001e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d020      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0202 	mvn.w	r2, #2
 8001ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8d2 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8c4 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8d5 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0204 	mvn.w	r2, #4
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8ac 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f89e 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8af 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0208 	mvn.w	r2, #8
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f886 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f878 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f889 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d020      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0210 	mvn.w	r2, #16
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f860 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f852 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f863 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0201 	mvn.w	r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fd68 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f906 	bl	8002228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f834 	bl	80020a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0220 	mvn.w	r2, #32
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8d8 	bl	8002214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a46      	ldr	r2, [pc, #280]	@ (80021e8 <TIM_Base_SetConfig+0x12c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020da:	d00f      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a43      	ldr	r2, [pc, #268]	@ (80021ec <TIM_Base_SetConfig+0x130>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00b      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a42      	ldr	r2, [pc, #264]	@ (80021f0 <TIM_Base_SetConfig+0x134>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a41      	ldr	r2, [pc, #260]	@ (80021f4 <TIM_Base_SetConfig+0x138>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a40      	ldr	r2, [pc, #256]	@ (80021f8 <TIM_Base_SetConfig+0x13c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d108      	bne.n	800210e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a35      	ldr	r2, [pc, #212]	@ (80021e8 <TIM_Base_SetConfig+0x12c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211c:	d027      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a32      	ldr	r2, [pc, #200]	@ (80021ec <TIM_Base_SetConfig+0x130>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d023      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a31      	ldr	r2, [pc, #196]	@ (80021f0 <TIM_Base_SetConfig+0x134>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a30      	ldr	r2, [pc, #192]	@ (80021f4 <TIM_Base_SetConfig+0x138>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2f      	ldr	r2, [pc, #188]	@ (80021f8 <TIM_Base_SetConfig+0x13c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d017      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2e      	ldr	r2, [pc, #184]	@ (80021fc <TIM_Base_SetConfig+0x140>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2d      	ldr	r2, [pc, #180]	@ (8002200 <TIM_Base_SetConfig+0x144>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00f      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2c      	ldr	r2, [pc, #176]	@ (8002204 <TIM_Base_SetConfig+0x148>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2b      	ldr	r2, [pc, #172]	@ (8002208 <TIM_Base_SetConfig+0x14c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2a      	ldr	r2, [pc, #168]	@ (800220c <TIM_Base_SetConfig+0x150>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a29      	ldr	r2, [pc, #164]	@ (8002210 <TIM_Base_SetConfig+0x154>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a10      	ldr	r2, [pc, #64]	@ (80021e8 <TIM_Base_SetConfig+0x12c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <TIM_Base_SetConfig+0xf8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <TIM_Base_SetConfig+0x13c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f023 0201 	bic.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]
  }
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40010400 	.word	0x40010400
 80021fc:	40014000 	.word	0x40014000
 8002200:	40014400 	.word	0x40014400
 8002204:	40014800 	.word	0x40014800
 8002208:	40001800 	.word	0x40001800
 800220c:	40001c00 	.word	0x40001c00
 8002210:	40002000 	.word	0x40002000

08002214 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0208 	add.w	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 0208 	add.w	r2, r3, #8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 0208 	add.w	r2, r3, #8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d103      	bne.n	80022fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e00c      	b.n	8002318 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3308      	adds	r3, #8
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e002      	b.n	800230c <vListInsert+0x2e>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d2f6      	bcs.n	8002306 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6852      	ldr	r2, [r2, #4]
 8002370:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d103      	bne.n	8002384 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <xQueueGenericReset+0x2c>
        __asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	60bb      	str	r3, [r7, #8]
    }
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80023d0:	f002 f9e4 	bl	800479c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	441a      	add	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002400:	3b01      	subs	r3, #1
 8002402:	68f9      	ldr	r1, [r7, #12]
 8002404:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	441a      	add	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	22ff      	movs	r2, #255	@ 0xff
 8002414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	22ff      	movs	r2, #255	@ 0xff
 800241c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d114      	bne.n	8002450 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01a      	beq.n	8002464 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3310      	adds	r3, #16
 8002432:	4618      	mov	r0, r3
 8002434:	f001 fa14 	bl	8003860 <xTaskRemoveFromEventList>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <xQueueGenericReset+0xd0>)
 8002440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	e009      	b.n	8002464 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3310      	adds	r3, #16
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fef1 	bl	800223c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3324      	adds	r3, #36	@ 0x24
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff feec 	bl	800223c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002464:	f002 f9cc 	bl	8004800 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	@ 0x30
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <xQueueGenericCreate+0x2c>
        __asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	61bb      	str	r3, [r7, #24]
    }
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <xQueueGenericCreate+0x4a>
 80024b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d101      	bne.n	80024c6 <xQueueGenericCreate+0x4e>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <xQueueGenericCreate+0x50>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <xQueueGenericCreate+0x6c>
        __asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	617b      	str	r3, [r7, #20]
    }
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80024ea:	d90b      	bls.n	8002504 <xQueueGenericCreate+0x8c>
        __asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	613b      	str	r3, [r7, #16]
    }
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	3350      	adds	r3, #80	@ 0x50
 8002508:	4618      	mov	r0, r3
 800250a:	f002 fa79 	bl	8004a00 <pvPortMalloc>
 800250e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3350      	adds	r3, #80	@ 0x50
 800251e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4613      	mov	r3, r2
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f805 	bl	800253c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002532:	6a3b      	ldr	r3, [r7, #32]
    }
 8002534:	4618      	mov	r0, r3
 8002536:	3728      	adds	r7, #40	@ 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d103      	bne.n	8002558 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e002      	b.n	800255e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800256a:	2101      	movs	r1, #1
 800256c:	69b8      	ldr	r0, [r7, #24]
 800256e:	f7ff ff19 	bl	80023a4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	68f9      	ldr	r1, [r7, #12]
 8002580:	2073      	movs	r0, #115	@ 0x73
 8002582:	f004 f9d7 	bl	8006934 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b090      	sub	sp, #64	@ 0x40
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800259e:	2300      	movs	r3, #0
 80025a0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <xQueueGenericSend+0x34>
        __asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <xQueueGenericSend+0x42>
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <xQueueGenericSend+0x46>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <xQueueGenericSend+0x48>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <xQueueGenericSend+0x64>
        __asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d103      	bne.n	8002602 <xQueueGenericSend+0x72>
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <xQueueGenericSend+0x76>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <xQueueGenericSend+0x78>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <xQueueGenericSend+0x94>
        __asm volatile
 800260c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	623b      	str	r3, [r7, #32]
    }
 800261e:	bf00      	nop
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002624:	f001 fad0 	bl	8003bc8 <xTaskGetSchedulerState>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <xQueueGenericSend+0xa4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <xQueueGenericSend+0xa8>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <xQueueGenericSend+0xaa>
 8002638:	2300      	movs	r3, #0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10b      	bne.n	8002656 <xQueueGenericSend+0xc6>
        __asm volatile
 800263e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002642:	f383 8811 	msr	BASEPRI, r3
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	61fb      	str	r3, [r7, #28]
    }
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	e7fd      	b.n	8002652 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002656:	f002 f8a1 	bl	800479c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800265a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800265e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <xQueueGenericSend+0xdc>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d136      	bne.n	80026da <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	4618      	mov	r0, r3
 8002670:	f004 feee 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	460b      	mov	r3, r1
 800267e:	4601      	mov	r1, r0
 8002680:	205a      	movs	r0, #90	@ 0x5a
 8002682:	f004 f9cd 	bl	8006a20 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800268c:	f000 fa80 	bl	8002b90 <prvCopyDataToQueue>
 8002690:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	2b00      	cmp	r3, #0
 8002698:	d010      	beq.n	80026bc <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800269a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269c:	3324      	adds	r3, #36	@ 0x24
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 f8de 	bl	8003860 <xTaskRemoveFromEventList>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d013      	beq.n	80026d2 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80026aa:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <xQueueGenericSend+0x250>)
 80026ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	e00a      	b.n	80026d2 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80026bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80026c2:	4b47      	ldr	r3, [pc, #284]	@ (80027e0 <xQueueGenericSend+0x250>)
 80026c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80026d2:	f002 f895 	bl	8004800 <vPortExitCritical>
                return pdPASS;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e07d      	b.n	80027d6 <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d110      	bne.n	8002702 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026e0:	f002 f88e 	bl	8004800 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 feb2 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	4601      	mov	r1, r0
 80026f8:	205a      	movs	r0, #90	@ 0x5a
 80026fa:	f004 f991 	bl	8006a20 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	e069      	b.n	80027d6 <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4618      	mov	r0, r3
 800270e:	f001 f90f 	bl	8003930 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002712:	2301      	movs	r3, #1
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002716:	f002 f873 	bl	8004800 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800271a:	f000 fe51 	bl	80033c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800271e:	f002 f83d 	bl	800479c <vPortEnterCritical>
 8002722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002728:	b25b      	sxtb	r3, r3
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d103      	bne.n	8002738 <xQueueGenericSend+0x1a8>
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800273e:	b25b      	sxtb	r3, r3
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d103      	bne.n	800274e <xQueueGenericSend+0x1be>
 8002746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800274e:	f002 f857 	bl	8004800 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002752:	1d3a      	adds	r2, r7, #4
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f8fe 	bl	800395c <xTaskCheckForTimeOut>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d124      	bne.n	80027b0 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002766:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002768:	f000 fb0a 	bl	8002d80 <prvIsQueueFull>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d018      	beq.n	80027a4 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002774:	3310      	adds	r3, #16
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f001 f81a 	bl	80037b4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002780:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002782:	f000 fa95 	bl	8002cb0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002786:	f000 fe29 	bl	80033dc <xTaskResumeAll>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f47f af62 	bne.w	8002656 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002792:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <xQueueGenericSend+0x250>)
 8002794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	e758      	b.n	8002656 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027a6:	f000 fa83 	bl	8002cb0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027aa:	f000 fe17 	bl	80033dc <xTaskResumeAll>
 80027ae:	e752      	b.n	8002656 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80027b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027b2:	f000 fa7d 	bl	8002cb0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027b6:	f000 fe11 	bl	80033dc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80027ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 fe47 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	460b      	mov	r3, r1
 80027cc:	4601      	mov	r1, r0
 80027ce:	205a      	movs	r0, #90	@ 0x5a
 80027d0:	f004 f926 	bl	8006a20 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80027d4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3738      	adds	r7, #56	@ 0x38
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000ed04 	.word	0xe000ed04

080027e4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b090      	sub	sp, #64	@ 0x40
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80027f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <xQueueGenericSendFromISR+0x3e>
 800281a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <xQueueGenericSendFromISR+0x42>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <xQueueGenericSendFromISR+0x44>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d103      	bne.n	8002852 <xQueueGenericSendFromISR+0x6e>
 800284a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <xQueueGenericSendFromISR+0x72>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <xQueueGenericSendFromISR+0x74>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	623b      	str	r3, [r7, #32]
    }
 800286e:	bf00      	nop
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002874:	f002 f882 	bl	800497c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002878:	f3ef 8211 	mrs	r2, BASEPRI
 800287c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	61fa      	str	r2, [r7, #28]
 800288e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002890:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	429a      	cmp	r2, r3
 800289e:	d302      	bcc.n	80028a6 <xQueueGenericSendFromISR+0xc2>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d149      	bne.n	800293a <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 fdc9 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 80028be:	4601      	mov	r1, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	2060      	movs	r0, #96	@ 0x60
 80028c6:	f003 ffdb 	bl	8006880 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028d0:	f000 f95e 	bl	8002b90 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80028d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d112      	bne.n	8002904 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d026      	beq.n	8002934 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e8:	3324      	adds	r3, #36	@ 0x24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 ffb8 	bl	8003860 <xTaskRemoveFromEventList>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01e      	beq.n	8002934 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e017      	b.n	8002934 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002904:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002908:	2b7f      	cmp	r3, #127	@ 0x7f
 800290a:	d10b      	bne.n	8002924 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	617b      	str	r3, [r7, #20]
    }
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002924:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002928:	3301      	adds	r3, #1
 800292a:	b2db      	uxtb	r3, r3
 800292c:	b25a      	sxtb	r2, r3
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002934:	2301      	movs	r3, #1
 8002936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8002938:	e00b      	b.n	8002952 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fd87 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002942:	4601      	mov	r1, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	461a      	mov	r2, r3
 8002948:	2060      	movs	r0, #96	@ 0x60
 800294a:	f003 ff99 	bl	8006880 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800294e:	2300      	movs	r3, #0
 8002950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002954:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800295c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800295e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002960:	4618      	mov	r0, r3
 8002962:	3740      	adds	r7, #64	@ 0x40
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b08f      	sub	sp, #60	@ 0x3c
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10b      	bne.n	800299a <xQueueReceive+0x32>
        __asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	623b      	str	r3, [r7, #32]
    }
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	e7fd      	b.n	8002996 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <xQueueReceive+0x40>
 80029a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <xQueueReceive+0x44>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <xQueueReceive+0x46>
 80029ac:	2300      	movs	r3, #0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10b      	bne.n	80029ca <xQueueReceive+0x62>
        __asm volatile
 80029b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b6:	f383 8811 	msr	BASEPRI, r3
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	61fb      	str	r3, [r7, #28]
    }
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	e7fd      	b.n	80029c6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029ca:	f001 f8fd 	bl	8003bc8 <xTaskGetSchedulerState>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <xQueueReceive+0x72>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <xQueueReceive+0x76>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueReceive+0x78>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <xQueueReceive+0x94>
        __asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	61bb      	str	r3, [r7, #24]
    }
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80029fc:	f001 fece 	bl	800479c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02f      	beq.n	8002a6c <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a10:	f000 f928 	bl	8002c64 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 fd1a 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f004 fd16 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	9100      	str	r1, [sp, #0]
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	205c      	movs	r0, #92	@ 0x5c
 8002a30:	f003 fff6 	bl	8006a20 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	1e5a      	subs	r2, r3, #1
 8002a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00f      	beq.n	8002a64 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a46:	3310      	adds	r3, #16
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 ff09 	bl	8003860 <xTaskRemoveFromEventList>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a54:	4b4d      	ldr	r3, [pc, #308]	@ (8002b8c <xQueueReceive+0x224>)
 8002a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a64:	f001 fecc 	bl	8004800 <vPortExitCritical>
                return pdPASS;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e08a      	b.n	8002b82 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d113      	bne.n	8002a9a <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a72:	f001 fec5 	bl	8004800 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 fce9 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	2000      	movs	r0, #0
 8002a82:	f004 fce5 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	9100      	str	r1, [sp, #0]
 8002a8e:	4621      	mov	r1, r4
 8002a90:	205c      	movs	r0, #92	@ 0x5c
 8002a92:	f003 ffc5 	bl	8006a20 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e073      	b.n	8002b82 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002aa0:	f107 0310 	add.w	r3, r7, #16
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 ff43 	bl	8003930 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002aae:	f001 fea7 	bl	8004800 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ab2:	f000 fc85 	bl	80033c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ab6:	f001 fe71 	bl	800479c <vPortEnterCritical>
 8002aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ac0:	b25b      	sxtb	r3, r3
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac6:	d103      	bne.n	8002ad0 <xQueueReceive+0x168>
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d103      	bne.n	8002ae6 <xQueueReceive+0x17e>
 8002ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ae6:	f001 fe8b 	bl	8004800 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002aea:	1d3a      	adds	r2, r7, #4
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 ff32 	bl	800395c <xTaskCheckForTimeOut>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d124      	bne.n	8002b48 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b00:	f000 f928 	bl	8002d54 <prvIsQueueEmpty>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d018      	beq.n	8002b3c <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	3324      	adds	r3, #36	@ 0x24
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fe4e 	bl	80037b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b1a:	f000 f8c9 	bl	8002cb0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b1e:	f000 fc5d 	bl	80033dc <xTaskResumeAll>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f af69 	bne.w	80029fc <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002b2a:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <xQueueReceive+0x224>)
 8002b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	e75f      	b.n	80029fc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b3e:	f000 f8b7 	bl	8002cb0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b42:	f000 fc4b 	bl	80033dc <xTaskResumeAll>
 8002b46:	e759      	b.n	80029fc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b4a:	f000 f8b1 	bl	8002cb0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b4e:	f000 fc45 	bl	80033dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b54:	f000 f8fe 	bl	8002d54 <prvIsQueueEmpty>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f43f af4e 	beq.w	80029fc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 fc74 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f004 fc70 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002b70:	4602      	mov	r2, r0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2101      	movs	r1, #1
 8002b76:	9100      	str	r1, [sp, #0]
 8002b78:	4621      	mov	r1, r4
 8002b7a:	205c      	movs	r0, #92	@ 0x5c
 8002b7c:	f003 ff50 	bl	8006a20 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002b80:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3734      	adds	r7, #52	@ 0x34
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000ed04 	.word	0xe000ed04

08002b90 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d14d      	bne.n	8002c52 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f822 	bl	8003c04 <xTaskPriorityDisinherit>
 8002bc0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	e043      	b.n	8002c52 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d119      	bne.n	8002c04 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6858      	ldr	r0, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	f004 fdfe 	bl	80077dc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	441a      	add	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d32b      	bcc.n	8002c52 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	e026      	b.n	8002c52 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68d8      	ldr	r0, [r3, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	f004 fde4 	bl	80077dc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	425b      	negs	r3, r3
 8002c1e:	441a      	add	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d207      	bcs.n	8002c40 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	425b      	negs	r3, r3
 8002c3a:	441a      	add	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d105      	bne.n	8002c52 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002c5a:	697b      	ldr	r3, [r7, #20]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	441a      	add	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d303      	bcc.n	8002c98 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68d9      	ldr	r1, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6838      	ldr	r0, [r7, #0]
 8002ca4:	f004 fd9a 	bl	80077dc <memcpy>
    }
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cb8:	f001 fd70 	bl	800479c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cc2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cc4:	e011      	b.n	8002cea <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3324      	adds	r3, #36	@ 0x24
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fdc4 	bl	8003860 <xTaskRemoveFromEventList>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002cde:	f000 fea5 	bl	8003a2c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	dce9      	bgt.n	8002cc6 <prvUnlockQueue+0x16>
 8002cf2:	e000      	b.n	8002cf6 <prvUnlockQueue+0x46>
                        break;
 8002cf4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	22ff      	movs	r2, #255	@ 0xff
 8002cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002cfe:	f001 fd7f 	bl	8004800 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d02:	f001 fd4b 	bl	800479c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d0c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d0e:	e011      	b.n	8002d34 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d012      	beq.n	8002d3e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3310      	adds	r3, #16
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fd9f 	bl	8003860 <xTaskRemoveFromEventList>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d28:	f000 fe80 	bl	8003a2c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d2c:	7bbb      	ldrb	r3, [r7, #14]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	dce9      	bgt.n	8002d10 <prvUnlockQueue+0x60>
 8002d3c:	e000      	b.n	8002d40 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d3e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	22ff      	movs	r2, #255	@ 0xff
 8002d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002d48:	f001 fd5a 	bl	8004800 <vPortExitCritical>
}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d5c:	f001 fd1e 	bl	800479c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e001      	b.n	8002d72 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d72:	f001 fd45 	bl	8004800 <vPortExitCritical>

    return xReturn;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d88:	f001 fd08 	bl	800479c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d102      	bne.n	8002d9e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e001      	b.n	8002da2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002da2:	f001 fd2d 	bl	8004800 <vPortExitCritical>

    return xReturn;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e01e      	b.n	8002dfe <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dc0:	4a13      	ldr	r2, [pc, #76]	@ (8002e10 <vQueueAddToRegistry+0x60>)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d115      	bne.n	8002df8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002dcc:	4910      	ldr	r1, [pc, #64]	@ (8002e10 <vQueueAddToRegistry+0x60>)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002e10 <vQueueAddToRegistry+0x60>)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f004 fb33 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 8002dea:	4601      	mov	r1, r0
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	2071      	movs	r0, #113	@ 0x71
 8002df2:	f003 fd45 	bl	8006880 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002df6:	e006      	b.n	8002e06 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b07      	cmp	r3, #7
 8002e02:	d9dd      	bls.n	8002dc0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000090 	.word	0x20000090

08002e14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e24:	f001 fcba 	bl	800479c <vPortEnterCritical>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d103      	bne.n	8002e3e <vQueueWaitForMessageRestricted+0x2a>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d103      	bne.n	8002e54 <vQueueWaitForMessageRestricted+0x40>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e54:	f001 fcd4 	bl	8004800 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3324      	adds	r3, #36	@ 0x24
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fcc9 	bl	8003800 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff1e 	bl	8002cb0 <prvUnlockQueue>
    }
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08c      	sub	sp, #48	@ 0x30
 8002e80:	af04      	add	r7, sp, #16
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 fdb5 	bl	8004a00 <pvPortMalloc>
 8002e96:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e9e:	2058      	movs	r0, #88	@ 0x58
 8002ea0:	f001 fdae 	bl	8004a00 <pvPortMalloc>
 8002ea4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eb2:	e005      	b.n	8002ec0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002eb4:	6978      	ldr	r0, [r7, #20]
 8002eb6:	f001 fe85 	bl	8004bc4 <vPortFree>
 8002eba:	e001      	b.n	8002ec0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d013      	beq.n	8002eee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9303      	str	r3, [sp, #12]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	9302      	str	r3, [sp, #8]
 8002ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f80e 	bl	8002efe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ee2:	69f8      	ldr	r0, [r7, #28]
 8002ee4:	f000 f8a2 	bl	800302c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e002      	b.n	8002ef4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
    }
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b088      	sub	sp, #32
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	21a5      	movs	r1, #165	@ 0xa5
 8002f18:	f004 fc34 	bl	8007784 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f26:	3b01      	subs	r3, #1
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f023 0307 	bic.w	r3, r3, #7
 8002f34:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	617b      	str	r3, [r7, #20]
    }
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01f      	beq.n	8002f9e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e012      	b.n	8002f8a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	7819      	ldrb	r1, [r3, #0]
 8002f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	3334      	adds	r3, #52	@ 0x34
 8002f74:	460a      	mov	r2, r1
 8002f76:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	2b09      	cmp	r3, #9
 8002f8e:	d9e9      	bls.n	8002f64 <prvInitialiseNewTask+0x66>
 8002f90:	e000      	b.n	8002f94 <prvInitialiseNewTask+0x96>
            {
                break;
 8002f92:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002f9c:	e003      	b.n	8002fa6 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d901      	bls.n	8002fb0 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fac:	2304      	movs	r3, #4
 8002fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fba:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff f958 	bl	800227c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fce:	3318      	adds	r3, #24
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f953 	bl	800227c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fda:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fde:	f1c3 0205 	rsb	r2, r3, #5
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fea:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	3350      	adds	r3, #80	@ 0x50
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f004 fbc5 	bl	8007784 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	3354      	adds	r3, #84	@ 0x54
 8002ffe:	2201      	movs	r2, #1
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f004 fbbe 	bl	8007784 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	68f9      	ldr	r1, [r7, #12]
 800300c:	69b8      	ldr	r0, [r7, #24]
 800300e:	f001 fa11 	bl	8004434 <pxPortInitialiseStack>
 8003012:	4602      	mov	r2, r0
 8003014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003016:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003022:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003024:	bf00      	nop
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800302c:	b5b0      	push	{r4, r5, r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af02      	add	r7, sp, #8
 8003032:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003034:	f001 fbb2 	bl	800479c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003038:	4b3b      	ldr	r3, [pc, #236]	@ (8003128 <prvAddNewTaskToReadyList+0xfc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a3a      	ldr	r2, [pc, #232]	@ (8003128 <prvAddNewTaskToReadyList+0xfc>)
 8003040:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003042:	4b3a      	ldr	r3, [pc, #232]	@ (800312c <prvAddNewTaskToReadyList+0x100>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800304a:	4a38      	ldr	r2, [pc, #224]	@ (800312c <prvAddNewTaskToReadyList+0x100>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003050:	4b35      	ldr	r3, [pc, #212]	@ (8003128 <prvAddNewTaskToReadyList+0xfc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d110      	bne.n	800307a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003058:	f000 fd0c 	bl	8003a74 <prvInitialiseTaskLists>
 800305c:	e00d      	b.n	800307a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800305e:	4b34      	ldr	r3, [pc, #208]	@ (8003130 <prvAddNewTaskToReadyList+0x104>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003066:	4b31      	ldr	r3, [pc, #196]	@ (800312c <prvAddNewTaskToReadyList+0x100>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	429a      	cmp	r2, r3
 8003072:	d802      	bhi.n	800307a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003074:	4a2d      	ldr	r2, [pc, #180]	@ (800312c <prvAddNewTaskToReadyList+0x100>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800307a:	4b2e      	ldr	r3, [pc, #184]	@ (8003134 <prvAddNewTaskToReadyList+0x108>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3301      	adds	r3, #1
 8003080:	4a2c      	ldr	r2, [pc, #176]	@ (8003134 <prvAddNewTaskToReadyList+0x108>)
 8003082:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003084:	4b2b      	ldr	r3, [pc, #172]	@ (8003134 <prvAddNewTaskToReadyList+0x108>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <prvAddNewTaskToReadyList+0x94>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4618      	mov	r0, r3
 8003096:	f004 f8b5 	bl	8007204 <SEGGER_SYSVIEW_OnTaskCreate>
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	461d      	mov	r5, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461c      	mov	r4, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	1ae3      	subs	r3, r4, r3
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	462b      	mov	r3, r5
 80030bc:	f001 ff52 	bl	8004f64 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f004 f922 	bl	800730c <SEGGER_SYSVIEW_OnTaskStartReady>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <prvAddNewTaskToReadyList+0x10c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	4a18      	ldr	r2, [pc, #96]	@ (8003138 <prvAddNewTaskToReadyList+0x10c>)
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4a15      	ldr	r2, [pc, #84]	@ (800313c <prvAddNewTaskToReadyList+0x110>)
 80030e8:	441a      	add	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7ff f8d0 	bl	8002296 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030f6:	f001 fb83 	bl	8004800 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <prvAddNewTaskToReadyList+0x104>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003102:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <prvAddNewTaskToReadyList+0x100>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310c:	429a      	cmp	r2, r3
 800310e:	d207      	bcs.n	8003120 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <prvAddNewTaskToReadyList+0x114>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bdb0      	pop	{r4, r5, r7, pc}
 8003128:	200001a8 	.word	0x200001a8
 800312c:	200000d0 	.word	0x200000d0
 8003130:	200001b4 	.word	0x200001b4
 8003134:	200001c4 	.word	0x200001c4
 8003138:	200001b0 	.word	0x200001b0
 800313c:	200000d4 	.word	0x200000d4
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 800314c:	f001 fb26 	bl	800479c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <uxTaskPriorityGet+0x18>
 8003156:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <uxTaskPriorityGet+0x30>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	e000      	b.n	800315e <uxTaskPriorityGet+0x1a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8003166:	f001 fb4b 	bl	8004800 <vPortExitCritical>

        return uxReturn;
 800316a:	68bb      	ldr	r3, [r7, #8]
    }
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200000d0 	.word	0x200000d0

08003178 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	@ 0x28
 800317c:	af02      	add	r7, sp, #8
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d90b      	bls.n	80031a4 <vTaskPrioritySet+0x2c>
        __asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	60fb      	str	r3, [r7, #12]
    }
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d901      	bls.n	80031ae <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031aa:	2304      	movs	r3, #4
 80031ac:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80031ae:	f001 faf5 	bl	800479c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <vTaskPrioritySet+0x46>
 80031b8:	4b4c      	ldr	r3, [pc, #304]	@ (80032ec <vTaskPrioritySet+0x174>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	e000      	b.n	80031c0 <vTaskPrioritySet+0x48>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 f943 	bl	8007450 <SEGGER_SYSVIEW_ShrinkId>
 80031ca:	4603      	mov	r3, r0
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	2028      	movs	r0, #40	@ 0x28
 80031d2:	f003 fb55 	bl	8006880 <SEGGER_SYSVIEW_RecordU32x2>
 80031d6:	69b8      	ldr	r0, [r7, #24]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	461a      	mov	r2, r3
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	f001 ff22 	bl	8005034 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f4:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d06f      	beq.n	80032de <vTaskPrioritySet+0x166>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	429a      	cmp	r2, r3
 8003204:	d90d      	bls.n	8003222 <vTaskPrioritySet+0xaa>
                {
                    if( pxTCB != pxCurrentTCB )
 8003206:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <vTaskPrioritySet+0x174>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	429a      	cmp	r2, r3
 800320e:	d00f      	beq.n	8003230 <vTaskPrioritySet+0xb8>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003210:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <vTaskPrioritySet+0x174>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d309      	bcc.n	8003230 <vTaskPrioritySet+0xb8>
                        {
                            xYieldRequired = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	e006      	b.n	8003230 <vTaskPrioritySet+0xb8>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8003222:	4b32      	ldr	r3, [pc, #200]	@ (80032ec <vTaskPrioritySet+0x174>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	429a      	cmp	r2, r3
 800322a:	d101      	bne.n	8003230 <vTaskPrioritySet+0xb8>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800322c:	2301      	movs	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	429a      	cmp	r2, r3
 8003240:	d102      	bne.n	8003248 <vTaskPrioritySet+0xd0>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	62da      	str	r2, [r3, #44]	@ 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	649a      	str	r2, [r3, #72]	@ 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db04      	blt.n	8003260 <vTaskPrioritySet+0xe8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f1c3 0205 	rsb	r2, r3, #5
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6959      	ldr	r1, [r3, #20]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4a20      	ldr	r2, [pc, #128]	@ (80032f0 <vTaskPrioritySet+0x178>)
 8003270:	4413      	add	r3, r2
 8003272:	4299      	cmp	r1, r3
 8003274:	d128      	bne.n	80032c8 <vTaskPrioritySet+0x150>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	3304      	adds	r3, #4
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f868 	bl	8002350 <uxListRemove>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <vTaskPrioritySet+0x122>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003286:	2201      	movs	r2, #1
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43da      	mvns	r2, r3
 8003290:	4b18      	ldr	r3, [pc, #96]	@ (80032f4 <vTaskPrioritySet+0x17c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4013      	ands	r3, r2
 8003296:	4a17      	ldr	r2, [pc, #92]	@ (80032f4 <vTaskPrioritySet+0x17c>)
 8003298:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	2201      	movs	r2, #1
 80032a0:	409a      	lsls	r2, r3
 80032a2:	4b14      	ldr	r3, [pc, #80]	@ (80032f4 <vTaskPrioritySet+0x17c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	4a12      	ldr	r2, [pc, #72]	@ (80032f4 <vTaskPrioritySet+0x17c>)
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <vTaskPrioritySet+0x178>)
 80032ba:	441a      	add	r2, r3
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f7fe ffe7 	bl	8002296 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <vTaskPrioritySet+0x166>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 80032ce:	4b0a      	ldr	r3, [pc, #40]	@ (80032f8 <vTaskPrioritySet+0x180>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80032de:	f001 fa8f 	bl	8004800 <vPortExitCritical>
    }
 80032e2:	bf00      	nop
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200000d0 	.word	0x200000d0
 80032f0:	200000d4 	.word	0x200000d4
 80032f4:	200001b0 	.word	0x200001b0
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003302:	4b27      	ldr	r3, [pc, #156]	@ (80033a0 <vTaskStartScheduler+0xa4>)
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	2300      	movs	r3, #0
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2300      	movs	r3, #0
 800330c:	2282      	movs	r2, #130	@ 0x82
 800330e:	4925      	ldr	r1, [pc, #148]	@ (80033a4 <vTaskStartScheduler+0xa8>)
 8003310:	4825      	ldr	r0, [pc, #148]	@ (80033a8 <vTaskStartScheduler+0xac>)
 8003312:	f7ff fdb3 	bl	8002e7c <xTaskCreate>
 8003316:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800331e:	f000 fd6b 	bl	8003df8 <xTimerCreateTimerTask>
 8003322:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d124      	bne.n	8003374 <vTaskStartScheduler+0x78>
        __asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	60bb      	str	r3, [r7, #8]
    }
 800333c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800333e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <vTaskStartScheduler+0xb0>)
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003346:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <vTaskStartScheduler+0xb4>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800334c:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <vTaskStartScheduler+0xb8>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003352:	4b19      	ldr	r3, [pc, #100]	@ (80033b8 <vTaskStartScheduler+0xbc>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b12      	ldr	r3, [pc, #72]	@ (80033a0 <vTaskStartScheduler+0xa4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d102      	bne.n	8003364 <vTaskStartScheduler+0x68>
 800335e:	f003 ff35 	bl	80071cc <SEGGER_SYSVIEW_OnIdle>
 8003362:	e004      	b.n	800336e <vTaskStartScheduler+0x72>
 8003364:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <vTaskStartScheduler+0xbc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f003 ff8d 	bl	8007288 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800336e:	f001 f8f1 	bl	8004554 <xPortStartScheduler>
 8003372:	e00f      	b.n	8003394 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d10b      	bne.n	8003394 <vTaskStartScheduler+0x98>
        __asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	607b      	str	r3, [r7, #4]
    }
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <vTaskStartScheduler+0xc0>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200001cc 	.word	0x200001cc
 80033a4:	0800786c 	.word	0x0800786c
 80033a8:	08003a45 	.word	0x08003a45
 80033ac:	200001c8 	.word	0x200001c8
 80033b0:	200001b4 	.word	0x200001b4
 80033b4:	200001ac 	.word	0x200001ac
 80033b8:	200000d0 	.word	0x200000d0
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80033c4:	4b04      	ldr	r3, [pc, #16]	@ (80033d8 <vTaskSuspendAll+0x18>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	4a03      	ldr	r2, [pc, #12]	@ (80033d8 <vTaskSuspendAll+0x18>)
 80033cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	200001d0 	.word	0x200001d0

080033dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80033ea:	4b44      	ldr	r3, [pc, #272]	@ (80034fc <xTaskResumeAll+0x120>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <xTaskResumeAll+0x2e>
        __asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	603b      	str	r3, [r7, #0]
    }
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	e7fd      	b.n	8003406 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800340a:	f001 f9c7 	bl	800479c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800340e:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <xTaskResumeAll+0x120>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3b01      	subs	r3, #1
 8003414:	4a39      	ldr	r2, [pc, #228]	@ (80034fc <xTaskResumeAll+0x120>)
 8003416:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003418:	4b38      	ldr	r3, [pc, #224]	@ (80034fc <xTaskResumeAll+0x120>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d165      	bne.n	80034ec <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003420:	4b37      	ldr	r3, [pc, #220]	@ (8003500 <xTaskResumeAll+0x124>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d061      	beq.n	80034ec <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003428:	e032      	b.n	8003490 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800342a:	4b36      	ldr	r3, [pc, #216]	@ (8003504 <xTaskResumeAll+0x128>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3318      	adds	r3, #24
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe ff8a 	bl	8002350 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3304      	adds	r3, #4
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe ff85 	bl	8002350 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4618      	mov	r0, r3
 800344a:	f003 ff5f 	bl	800730c <SEGGER_SYSVIEW_OnTaskStartReady>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	2201      	movs	r2, #1
 8003454:	409a      	lsls	r2, r3
 8003456:	4b2c      	ldr	r3, [pc, #176]	@ (8003508 <xTaskResumeAll+0x12c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	4a2a      	ldr	r2, [pc, #168]	@ (8003508 <xTaskResumeAll+0x12c>)
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4a27      	ldr	r2, [pc, #156]	@ (800350c <xTaskResumeAll+0x130>)
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f7fe ff0d 	bl	8002296 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003480:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <xTaskResumeAll+0x134>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800348a:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <xTaskResumeAll+0x138>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003490:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <xTaskResumeAll+0x128>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1c8      	bne.n	800342a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800349e:	f000 fb67 	bl	8003b70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <xTaskResumeAll+0x13c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80034ae:	f000 f859 	bl	8003564 <xTaskIncrementTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80034b8:	4b16      	ldr	r3, [pc, #88]	@ (8003514 <xTaskResumeAll+0x138>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f1      	bne.n	80034ae <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80034ca:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <xTaskResumeAll+0x13c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80034d0:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <xTaskResumeAll+0x138>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <xTaskResumeAll+0x140>)
 80034de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80034ec:	f001 f988 	bl	8004800 <vPortExitCritical>

    return xAlreadyYielded;
 80034f0:	68bb      	ldr	r3, [r7, #8]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200001d0 	.word	0x200001d0
 8003500:	200001a8 	.word	0x200001a8
 8003504:	20000168 	.word	0x20000168
 8003508:	200001b0 	.word	0x200001b0
 800350c:	200000d4 	.word	0x200000d4
 8003510:	200000d0 	.word	0x200000d0
 8003514:	200001bc 	.word	0x200001bc
 8003518:	200001b8 	.word	0x200001b8
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003526:	4b05      	ldr	r3, [pc, #20]	@ (800353c <xTaskGetTickCount+0x1c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800352c:	687b      	ldr	r3, [r7, #4]
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	200001ac 	.word	0x200001ac

08003540 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003546:	f001 fa19 	bl	800497c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800354e:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <xTaskGetTickCountFromISR+0x20>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003554:	683b      	ldr	r3, [r7, #0]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200001ac 	.word	0x200001ac

08003564 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800356e:	4b51      	ldr	r3, [pc, #324]	@ (80036b4 <xTaskIncrementTick+0x150>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8093 	bne.w	800369e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003578:	4b4f      	ldr	r3, [pc, #316]	@ (80036b8 <xTaskIncrementTick+0x154>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003580:	4a4d      	ldr	r2, [pc, #308]	@ (80036b8 <xTaskIncrementTick+0x154>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d121      	bne.n	80035d0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800358c:	4b4b      	ldr	r3, [pc, #300]	@ (80036bc <xTaskIncrementTick+0x158>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <xTaskIncrementTick+0x4a>
        __asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	603b      	str	r3, [r7, #0]
    }
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <xTaskIncrementTick+0x46>
 80035ae:	4b43      	ldr	r3, [pc, #268]	@ (80036bc <xTaskIncrementTick+0x158>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	4b42      	ldr	r3, [pc, #264]	@ (80036c0 <xTaskIncrementTick+0x15c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a40      	ldr	r2, [pc, #256]	@ (80036bc <xTaskIncrementTick+0x158>)
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4a40      	ldr	r2, [pc, #256]	@ (80036c0 <xTaskIncrementTick+0x15c>)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b40      	ldr	r3, [pc, #256]	@ (80036c4 <xTaskIncrementTick+0x160>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	4a3e      	ldr	r2, [pc, #248]	@ (80036c4 <xTaskIncrementTick+0x160>)
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	f000 fad0 	bl	8003b70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035d0:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <xTaskIncrementTick+0x164>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d34c      	bcc.n	8003674 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035da:	4b38      	ldr	r3, [pc, #224]	@ (80036bc <xTaskIncrementTick+0x158>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d104      	bne.n	80035ee <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e4:	4b38      	ldr	r3, [pc, #224]	@ (80036c8 <xTaskIncrementTick+0x164>)
 80035e6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ea:	601a      	str	r2, [r3, #0]
                    break;
 80035ec:	e042      	b.n	8003674 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ee:	4b33      	ldr	r3, [pc, #204]	@ (80036bc <xTaskIncrementTick+0x158>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d203      	bcs.n	800360e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003606:	4a30      	ldr	r2, [pc, #192]	@ (80036c8 <xTaskIncrementTick+0x164>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800360c:	e032      	b.n	8003674 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3304      	adds	r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fe9c 	bl	8002350 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d004      	beq.n	800362a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	3318      	adds	r3, #24
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe fe93 	bl	8002350 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f003 fe6d 	bl	800730c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	2201      	movs	r2, #1
 8003638:	409a      	lsls	r2, r3
 800363a:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <xTaskIncrementTick+0x168>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	4a22      	ldr	r2, [pc, #136]	@ (80036cc <xTaskIncrementTick+0x168>)
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4a1f      	ldr	r2, [pc, #124]	@ (80036d0 <xTaskIncrementTick+0x16c>)
 8003652:	441a      	add	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f7fe fe1b 	bl	8002296 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <xTaskIncrementTick+0x170>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	429a      	cmp	r2, r3
 800366c:	d3b5      	bcc.n	80035da <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800366e:	2301      	movs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003672:	e7b2      	b.n	80035da <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <xTaskIncrementTick+0x170>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367a:	4915      	ldr	r1, [pc, #84]	@ (80036d0 <xTaskIncrementTick+0x16c>)
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d901      	bls.n	8003690 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003690:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <xTaskIncrementTick+0x174>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e004      	b.n	80036a8 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800369e:	4b0f      	ldr	r3, [pc, #60]	@ (80036dc <xTaskIncrementTick+0x178>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	4a0d      	ldr	r2, [pc, #52]	@ (80036dc <xTaskIncrementTick+0x178>)
 80036a6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80036a8:	697b      	ldr	r3, [r7, #20]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200001d0 	.word	0x200001d0
 80036b8:	200001ac 	.word	0x200001ac
 80036bc:	20000160 	.word	0x20000160
 80036c0:	20000164 	.word	0x20000164
 80036c4:	200001c0 	.word	0x200001c0
 80036c8:	200001c8 	.word	0x200001c8
 80036cc:	200001b0 	.word	0x200001b0
 80036d0:	200000d4 	.word	0x200000d4
 80036d4:	200000d0 	.word	0x200000d0
 80036d8:	200001bc 	.word	0x200001bc
 80036dc:	200001b8 	.word	0x200001b8

080036e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036e6:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <vTaskSwitchContext+0xbc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80036ee:	4b2c      	ldr	r3, [pc, #176]	@ (80037a0 <vTaskSwitchContext+0xc0>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80036f4:	e04e      	b.n	8003794 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80036f6:	4b2a      	ldr	r3, [pc, #168]	@ (80037a0 <vTaskSwitchContext+0xc0>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036fc:	4b29      	ldr	r3, [pc, #164]	@ (80037a4 <vTaskSwitchContext+0xc4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	f1c3 031f 	rsb	r3, r3, #31
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	4925      	ldr	r1, [pc, #148]	@ (80037a8 <vTaskSwitchContext+0xc8>)
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <vTaskSwitchContext+0x5e>
        __asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	607b      	str	r3, [r7, #4]
    }
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	e7fd      	b.n	800373a <vTaskSwitchContext+0x5a>
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4a17      	ldr	r2, [pc, #92]	@ (80037a8 <vTaskSwitchContext+0xc8>)
 800374a:	4413      	add	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3308      	adds	r3, #8
 8003760:	429a      	cmp	r2, r3
 8003762:	d104      	bne.n	800376e <vTaskSwitchContext+0x8e>
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <vTaskSwitchContext+0xcc>)
 8003776:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <vTaskSwitchContext+0xcc>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <vTaskSwitchContext+0xd0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d102      	bne.n	800378a <vTaskSwitchContext+0xaa>
 8003784:	f003 fd22 	bl	80071cc <SEGGER_SYSVIEW_OnIdle>
}
 8003788:	e004      	b.n	8003794 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800378a:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <vTaskSwitchContext+0xcc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f003 fd7a 	bl	8007288 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003794:	bf00      	nop
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200001d0 	.word	0x200001d0
 80037a0:	200001bc 	.word	0x200001bc
 80037a4:	200001b0 	.word	0x200001b0
 80037a8:	200000d4 	.word	0x200000d4
 80037ac:	200000d0 	.word	0x200000d0
 80037b0:	200001cc 	.word	0x200001cc

080037b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	60fb      	str	r3, [r7, #12]
    }
 80037d6:	bf00      	nop
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037dc:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <vTaskPlaceOnEventList+0x48>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3318      	adds	r3, #24
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fe fd7a 	bl	80022de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037ea:	2101      	movs	r1, #1
 80037ec:	6838      	ldr	r0, [r7, #0]
 80037ee:	f000 fa8b 	bl	8003d08 <prvAddCurrentTaskToDelayedList>
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200000d0 	.word	0x200000d0

08003800 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	617b      	str	r3, [r7, #20]
    }
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	e7fd      	b.n	8003826 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800382a:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <vTaskPlaceOnEventListRestricted+0x5c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3318      	adds	r3, #24
 8003830:	4619      	mov	r1, r3
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7fe fd2f 	bl	8002296 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003844:	2024      	movs	r0, #36	@ 0x24
 8003846:	f002 ffc1 	bl	80067cc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	68b8      	ldr	r0, [r7, #8]
 800384e:	f000 fa5b 	bl	8003d08 <prvAddCurrentTaskToDelayedList>
    }
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200000d0 	.word	0x200000d0

08003860 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	60fb      	str	r3, [r7, #12]
    }
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3318      	adds	r3, #24
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fd5c 	bl	8002350 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003898:	4b1f      	ldr	r3, [pc, #124]	@ (8003918 <xTaskRemoveFromEventList+0xb8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d120      	bne.n	80038e2 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fd53 	bl	8002350 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 fd2d 	bl	800730c <SEGGER_SYSVIEW_OnTaskStartReady>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	2201      	movs	r2, #1
 80038b8:	409a      	lsls	r2, r3
 80038ba:	4b18      	ldr	r3, [pc, #96]	@ (800391c <xTaskRemoveFromEventList+0xbc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	4a16      	ldr	r2, [pc, #88]	@ (800391c <xTaskRemoveFromEventList+0xbc>)
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4a13      	ldr	r2, [pc, #76]	@ (8003920 <xTaskRemoveFromEventList+0xc0>)
 80038d2:	441a      	add	r2, r3
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f7fe fcdb 	bl	8002296 <vListInsertEnd>
 80038e0:	e005      	b.n	80038ee <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3318      	adds	r3, #24
 80038e6:	4619      	mov	r1, r3
 80038e8:	480e      	ldr	r0, [pc, #56]	@ (8003924 <xTaskRemoveFromEventList+0xc4>)
 80038ea:	f7fe fcd4 	bl	8002296 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <xTaskRemoveFromEventList+0xc8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d905      	bls.n	8003908 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003900:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <xTaskRemoveFromEventList+0xcc>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	e001      	b.n	800390c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800390c:	697b      	ldr	r3, [r7, #20]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200001d0 	.word	0x200001d0
 800391c:	200001b0 	.word	0x200001b0
 8003920:	200000d4 	.word	0x200000d4
 8003924:	20000168 	.word	0x20000168
 8003928:	200000d0 	.word	0x200000d0
 800392c:	200001bc 	.word	0x200001bc

08003930 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <vTaskInternalSetTimeOutState+0x24>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <vTaskInternalSetTimeOutState+0x28>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	605a      	str	r2, [r3, #4]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	200001c0 	.word	0x200001c0
 8003958:	200001ac 	.word	0x200001ac

0800395c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	613b      	str	r3, [r7, #16]
    }
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	60fb      	str	r3, [r7, #12]
    }
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	e7fd      	b.n	800399e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80039a2:	f000 fefb 	bl	800479c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <xTaskCheckForTimeOut+0xc8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d102      	bne.n	80039c6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	e026      	b.n	8003a14 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <xTaskCheckForTimeOut+0xcc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d00a      	beq.n	80039e8 <xTaskCheckForTimeOut+0x8c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d305      	bcc.n	80039e8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e015      	b.n	8003a14 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d20b      	bcs.n	8003a0a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad2      	subs	r2, r2, r3
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff ff96 	bl	8003930 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e004      	b.n	8003a14 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a14:	f000 fef4 	bl	8004800 <vPortExitCritical>

    return xReturn;
 8003a18:	69fb      	ldr	r3, [r7, #28]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200001ac 	.word	0x200001ac
 8003a28:	200001c0 	.word	0x200001c0

08003a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a30:	4b03      	ldr	r3, [pc, #12]	@ (8003a40 <vTaskMissedYield+0x14>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	200001bc 	.word	0x200001bc

08003a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a4c:	f000 f852 	bl	8003af4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <prvIdleTask+0x28>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d9f9      	bls.n	8003a4c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <prvIdleTask+0x2c>)
 8003a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a68:	e7f0      	b.n	8003a4c <prvIdleTask+0x8>
 8003a6a:	bf00      	nop
 8003a6c:	200000d4 	.word	0x200000d4
 8003a70:	e000ed04 	.word	0xe000ed04

08003a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	e00c      	b.n	8003a9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <prvInitialiseTaskLists+0x60>)
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fbd4 	bl	800223c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3301      	adds	r3, #1
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d9ef      	bls.n	8003a80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003aa0:	480d      	ldr	r0, [pc, #52]	@ (8003ad8 <prvInitialiseTaskLists+0x64>)
 8003aa2:	f7fe fbcb 	bl	800223c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003aa6:	480d      	ldr	r0, [pc, #52]	@ (8003adc <prvInitialiseTaskLists+0x68>)
 8003aa8:	f7fe fbc8 	bl	800223c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003aac:	480c      	ldr	r0, [pc, #48]	@ (8003ae0 <prvInitialiseTaskLists+0x6c>)
 8003aae:	f7fe fbc5 	bl	800223c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003ab2:	480c      	ldr	r0, [pc, #48]	@ (8003ae4 <prvInitialiseTaskLists+0x70>)
 8003ab4:	f7fe fbc2 	bl	800223c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ab8:	480b      	ldr	r0, [pc, #44]	@ (8003ae8 <prvInitialiseTaskLists+0x74>)
 8003aba:	f7fe fbbf 	bl	800223c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003abe:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <prvInitialiseTaskLists+0x78>)
 8003ac0:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <prvInitialiseTaskLists+0x64>)
 8003ac2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <prvInitialiseTaskLists+0x7c>)
 8003ac6:	4a05      	ldr	r2, [pc, #20]	@ (8003adc <prvInitialiseTaskLists+0x68>)
 8003ac8:	601a      	str	r2, [r3, #0]
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200000d4 	.word	0x200000d4
 8003ad8:	20000138 	.word	0x20000138
 8003adc:	2000014c 	.word	0x2000014c
 8003ae0:	20000168 	.word	0x20000168
 8003ae4:	2000017c 	.word	0x2000017c
 8003ae8:	20000194 	.word	0x20000194
 8003aec:	20000160 	.word	0x20000160
 8003af0:	20000164 	.word	0x20000164

08003af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003afa:	e019      	b.n	8003b30 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003afc:	f000 fe4e 	bl	800479c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b00:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <prvCheckTasksWaitingTermination+0x50>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fc1f 	bl	8002350 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <prvCheckTasksWaitingTermination+0x54>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <prvCheckTasksWaitingTermination+0x54>)
 8003b1a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <prvCheckTasksWaitingTermination+0x58>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	4a0a      	ldr	r2, [pc, #40]	@ (8003b4c <prvCheckTasksWaitingTermination+0x58>)
 8003b24:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003b26:	f000 fe6b 	bl	8004800 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f810 	bl	8003b50 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b30:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <prvCheckTasksWaitingTermination+0x58>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e1      	bne.n	8003afc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	2000017c 	.word	0x2000017c
 8003b48:	200001a8 	.word	0x200001a8
 8003b4c:	20000190 	.word	0x20000190

08003b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f831 	bl	8004bc4 <vPortFree>
                vPortFree( pxTCB );
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f001 f82e 	bl	8004bc4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <prvResetNextTaskUnblockTime+0x30>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <prvResetNextTaskUnblockTime+0x34>)
 8003b80:	f04f 32ff 	mov.w	r2, #4294967295
 8003b84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b86:	e005      	b.n	8003b94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b88:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <prvResetNextTaskUnblockTime+0x30>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a04      	ldr	r2, [pc, #16]	@ (8003ba4 <prvResetNextTaskUnblockTime+0x34>)
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000160 	.word	0x20000160
 8003ba4:	200001c8 	.word	0x200001c8

08003ba8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003bae:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <xTaskGetCurrentTaskHandle+0x1c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003bb4:	687b      	ldr	r3, [r7, #4]
    }
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	200000d0 	.word	0x200000d0

08003bc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003bce:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <xTaskGetSchedulerState+0x34>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	e008      	b.n	8003bee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bdc:	4b08      	ldr	r3, [pc, #32]	@ (8003c00 <xTaskGetSchedulerState+0x38>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003be4:	2302      	movs	r3, #2
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	e001      	b.n	8003bee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003bee:	687b      	ldr	r3, [r7, #4]
    }
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	200001b4 	.word	0x200001b4
 8003c00:	200001d0 	.word	0x200001d0

08003c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d06a      	beq.n	8003cf0 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c1a:	4b38      	ldr	r3, [pc, #224]	@ (8003cfc <xTaskPriorityDisinherit+0xf8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d00b      	beq.n	8003c3c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60fb      	str	r3, [r7, #12]
    }
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	e7fd      	b.n	8003c38 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60bb      	str	r3, [r7, #8]
    }
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
 8003c5a:	e7fd      	b.n	8003c58 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c60:	1e5a      	subs	r2, r3, #1
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d03e      	beq.n	8003cf0 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d13a      	bne.n	8003cf0 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fb66 	bl	8002350 <uxListRemove>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	2201      	movs	r2, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43da      	mvns	r2, r3
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <xTaskPriorityDisinherit+0xfc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <xTaskPriorityDisinherit+0xfc>)
 8003c9e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	204a      	movs	r0, #74	@ 0x4a
 8003ca6:	f002 fdaf 	bl	8006808 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	f1c3 0205 	rsb	r2, r3, #5
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d00 <xTaskPriorityDisinherit+0xfc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8003d00 <xTaskPriorityDisinherit+0xfc>)
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4a09      	ldr	r2, [pc, #36]	@ (8003d04 <xTaskPriorityDisinherit+0x100>)
 8003cde:	441a      	add	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f7fe fad5 	bl	8002296 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cf0:	697b      	ldr	r3, [r7, #20]
    }
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200000d0 	.word	0x200000d0
 8003d00:	200001b0 	.word	0x200001b0
 8003d04:	200000d4 	.word	0x200000d4

08003d08 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d12:	4b32      	ldr	r3, [pc, #200]	@ (8003ddc <prvAddCurrentTaskToDelayedList+0xd4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d18:	4b31      	ldr	r3, [pc, #196]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fb16 	bl	8002350 <uxListRemove>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	2201      	movs	r2, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	4a29      	ldr	r2, [pc, #164]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d110      	bne.n	8003d6c <prvAddCurrentTaskToDelayedList+0x64>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003d50:	4b23      	ldr	r3, [pc, #140]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	211b      	movs	r1, #27
 8003d56:	4618      	mov	r0, r3
 8003d58:	f003 fb1a 	bl	8007390 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d5c:	4b20      	ldr	r3, [pc, #128]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4820      	ldr	r0, [pc, #128]	@ (8003de8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003d66:	f7fe fa96 	bl	8002296 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d6a:	e032      	b.n	8003dd2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d74:	4b1a      	ldr	r3, [pc, #104]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d20f      	bcs.n	8003da4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003d84:	4b16      	ldr	r3, [pc, #88]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2104      	movs	r1, #4
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 fb00 	bl	8007390 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d90:	4b16      	ldr	r3, [pc, #88]	@ (8003dec <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe fa9e 	bl	80022de <vListInsert>
}
 8003da2:	e016      	b.n	8003dd2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003da4:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2104      	movs	r1, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 faf0 	bl	8007390 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db0:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f7fe fa8e 	bl	80022de <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d202      	bcs.n	8003dd2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003dcc:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200001ac 	.word	0x200001ac
 8003de0:	200000d0 	.word	0x200000d0
 8003de4:	200001b0 	.word	0x200001b0
 8003de8:	20000194 	.word	0x20000194
 8003dec:	20000164 	.word	0x20000164
 8003df0:	20000160 	.word	0x20000160
 8003df4:	200001c8 	.word	0x200001c8

08003df8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e02:	f000 fae1 	bl	80043c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e06:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <xTimerCreateTimerTask+0x58>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e0e:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <xTimerCreateTimerTask+0x5c>)
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	2302      	movs	r3, #2
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e1c:	490e      	ldr	r1, [pc, #56]	@ (8003e58 <xTimerCreateTimerTask+0x60>)
 8003e1e:	480f      	ldr	r0, [pc, #60]	@ (8003e5c <xTimerCreateTimerTask+0x64>)
 8003e20:	f7ff f82c 	bl	8002e7c <xTaskCreate>
 8003e24:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10b      	bne.n	8003e44 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	603b      	str	r3, [r7, #0]
    }
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003e44:	687b      	ldr	r3, [r7, #4]
    }
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000204 	.word	0x20000204
 8003e54:	20000208 	.word	0x20000208
 8003e58:	08007874 	.word	0x08007874
 8003e5c:	08003f99 	.word	0x08003f99

08003e60 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <xTimerGenericCommand+0x30>
        __asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	623b      	str	r3, [r7, #32]
    }
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003e90:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <xTimerGenericCommand+0x98>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02a      	beq.n	8003eee <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	dc18      	bgt.n	8003edc <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003eaa:	f7ff fe8d 	bl	8003bc8 <xTaskGetSchedulerState>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d109      	bne.n	8003ec8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003eb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ef8 <xTimerGenericCommand+0x98>)
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	f107 0114 	add.w	r1, r7, #20
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec0:	f7fe fb66 	bl	8002590 <xQueueGenericSend>
 8003ec4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ec6:	e012      	b.n	8003eee <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <xTimerGenericCommand+0x98>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	f107 0114 	add.w	r1, r7, #20
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f7fe fb5c 	bl	8002590 <xQueueGenericSend>
 8003ed8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003eda:	e008      	b.n	8003eee <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <xTimerGenericCommand+0x98>)
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	f107 0114 	add.w	r1, r7, #20
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	f7fe fc7c 	bl	80027e4 <xQueueGenericSendFromISR>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3728      	adds	r7, #40	@ 0x28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000204 	.word	0x20000204

08003efc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f06:	4b23      	ldr	r3, [pc, #140]	@ (8003f94 <prvProcessExpiredTimer+0x98>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fa1b 	bl	8002350 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d023      	beq.n	8003f70 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	18d1      	adds	r1, r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f000 f8d5 	bl	80040e4 <prvInsertTimerInActiveList>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff ff88 	bl	8003e60 <xTimerGenericCommand>
 8003f50:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d114      	bne.n	8003f82 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	60fb      	str	r3, [r7, #12]
    }
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	4798      	blx	r3
    }
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200001fc 	.word	0x200001fc

08003f98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fa0:	f107 0308 	add.w	r3, r7, #8
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f859 	bl	800405c <prvGetNextExpireTime>
 8003faa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f805 	bl	8003fc0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fb6:	f000 f8d7 	bl	8004168 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fba:	bf00      	nop
 8003fbc:	e7f0      	b.n	8003fa0 <prvTimerTask+0x8>
	...

08003fc0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fca:	f7ff f9f9 	bl	80033c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fce:	f107 0308 	add.w	r3, r7, #8
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f866 	bl	80040a4 <prvSampleTimeNow>
 8003fd8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d130      	bne.n	8004042 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <prvProcessTimerOrBlockTask+0x3c>
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d806      	bhi.n	8003ffc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fee:	f7ff f9f5 	bl	80033dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff81 	bl	8003efc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ffa:	e024      	b.n	8004046 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004002:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <prvProcessTimerOrBlockTask+0x90>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <prvProcessTimerOrBlockTask+0x50>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <prvProcessTimerOrBlockTask+0x52>
 8004010:	2300      	movs	r3, #0
 8004012:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004014:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <prvProcessTimerOrBlockTask+0x94>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4619      	mov	r1, r3
 8004022:	f7fe fef7 	bl	8002e14 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004026:	f7ff f9d9 	bl	80033dc <xTaskResumeAll>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004030:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <prvProcessTimerOrBlockTask+0x98>)
 8004032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
    }
 8004040:	e001      	b.n	8004046 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004042:	f7ff f9cb 	bl	80033dc <xTaskResumeAll>
    }
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000200 	.word	0x20000200
 8004054:	20000204 	.word	0x20000204
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004064:	4b0e      	ldr	r3, [pc, #56]	@ (80040a0 <prvGetNextExpireTime+0x44>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <prvGetNextExpireTime+0x16>
 800406e:	2201      	movs	r2, #1
 8004070:	e000      	b.n	8004074 <prvGetNextExpireTime+0x18>
 8004072:	2200      	movs	r2, #0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004080:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <prvGetNextExpireTime+0x44>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e001      	b.n	8004090 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004090:	68fb      	ldr	r3, [r7, #12]
    }
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	200001fc 	.word	0x200001fc

080040a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80040ac:	f7ff fa38 	bl	8003520 <xTaskGetTickCount>
 80040b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040b2:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <prvSampleTimeNow+0x3c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d205      	bcs.n	80040c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040bc:	f000 f91e 	bl	80042fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e002      	b.n	80040ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040ce:	4a04      	ldr	r2, [pc, #16]	@ (80040e0 <prvSampleTimeNow+0x3c>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040d4:	68fb      	ldr	r3, [r7, #12]
    }
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	2000020c 	.word	0x2000020c

080040e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d812      	bhi.n	8004130 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004118:	2301      	movs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	e01b      	b.n	8004156 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <prvInsertTimerInActiveList+0x7c>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3304      	adds	r3, #4
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f7fe f8d8 	bl	80022de <vListInsert>
 800412e:	e012      	b.n	8004156 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d206      	bcs.n	8004146 <prvInsertTimerInActiveList+0x62>
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e007      	b.n	8004156 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004146:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <prvInsertTimerInActiveList+0x80>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3304      	adds	r3, #4
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f7fe f8c4 	bl	80022de <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004156:	697b      	ldr	r3, [r7, #20]
    }
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000200 	.word	0x20000200
 8004164:	200001fc 	.word	0x200001fc

08004168 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	@ 0x30
 800416c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800416e:	e0b2      	b.n	80042d6 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f2c0 80af 	blt.w	80042d6 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800417c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	3304      	adds	r3, #4
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe f8e1 	bl	8002350 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff87 	bl	80040a4 <prvSampleTimeNow>
 8004196:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b09      	cmp	r3, #9
 800419c:	f200 8098 	bhi.w	80042d0 <prvProcessReceivedCommands+0x168>
 80041a0:	a201      	add	r2, pc, #4	@ (adr r2, 80041a8 <prvProcessReceivedCommands+0x40>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041d1 	.word	0x080041d1
 80041b0:	080041d1 	.word	0x080041d1
 80041b4:	08004247 	.word	0x08004247
 80041b8:	0800425b 	.word	0x0800425b
 80041bc:	080042a7 	.word	0x080042a7
 80041c0:	080041d1 	.word	0x080041d1
 80041c4:	080041d1 	.word	0x080041d1
 80041c8:	08004247 	.word	0x08004247
 80041cc:	0800425b 	.word	0x0800425b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	18d1      	adds	r1, r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041f0:	f7ff ff78 	bl	80040e4 <prvInsertTimerInActiveList>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d06c      	beq.n	80042d4 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004200:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d061      	beq.n	80042d4 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	441a      	add	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2300      	movs	r3, #0
 800421e:	2100      	movs	r1, #0
 8004220:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004222:	f7ff fe1d 	bl	8003e60 <xTimerGenericCommand>
 8004226:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d152      	bne.n	80042d4 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	61bb      	str	r3, [r7, #24]
    }
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	b2da      	uxtb	r2, r3
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004258:	e03d      	b.n	80042d6 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	b2da      	uxtb	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	617b      	str	r3, [r7, #20]
    }
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	e7fd      	b.n	800428e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	18d1      	adds	r1, r2, r3
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	6a3a      	ldr	r2, [r7, #32]
 800429e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042a0:	f7ff ff20 	bl	80040e4 <prvInsertTimerInActiveList>
                        break;
 80042a4:	e017      	b.n	80042d6 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80042b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042b6:	f000 fc85 	bl	8004bc4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042ba:	e00c      	b.n	80042d6 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80042ce:	e002      	b.n	80042d6 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80042d0:	bf00      	nop
 80042d2:	e000      	b.n	80042d6 <prvProcessReceivedCommands+0x16e>
                        break;
 80042d4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042d6:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <prvProcessReceivedCommands+0x190>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f107 0108 	add.w	r1, r7, #8
 80042de:	2200      	movs	r2, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fb41 	bl	8002968 <xQueueReceive>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f af41 	bne.w	8004170 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	3728      	adds	r7, #40	@ 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000204 	.word	0x20000204

080042fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004302:	e049      	b.n	8004398 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004304:	4b2e      	ldr	r3, [pc, #184]	@ (80043c0 <prvSwitchTimerLists+0xc4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430e:	4b2c      	ldr	r3, [pc, #176]	@ (80043c0 <prvSwitchTimerLists+0xc4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe f817 	bl	8002350 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02f      	beq.n	8004398 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	429a      	cmp	r2, r3
 8004348:	d90e      	bls.n	8004368 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004356:	4b1a      	ldr	r3, [pc, #104]	@ (80043c0 <prvSwitchTimerLists+0xc4>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fd ffbc 	bl	80022de <vListInsert>
 8004366:	e017      	b.n	8004398 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004368:	2300      	movs	r3, #0
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2300      	movs	r3, #0
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	2100      	movs	r1, #0
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fd74 	bl	8003e60 <xTimerGenericCommand>
 8004378:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	603b      	str	r3, [r7, #0]
    }
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004398:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <prvSwitchTimerLists+0xc4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1b0      	bne.n	8004304 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80043a2:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <prvSwitchTimerLists+0xc4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <prvSwitchTimerLists+0xc8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a04      	ldr	r2, [pc, #16]	@ (80043c0 <prvSwitchTimerLists+0xc4>)
 80043ae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043b0:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <prvSwitchTimerLists+0xc8>)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	6013      	str	r3, [r2, #0]
    }
 80043b6:	bf00      	nop
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200001fc 	.word	0x200001fc
 80043c4:	20000200 	.word	0x20000200

080043c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043cc:	f000 f9e6 	bl	800479c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043d0:	4b12      	ldr	r3, [pc, #72]	@ (800441c <prvCheckForValidListAndQueue+0x54>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11d      	bne.n	8004414 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80043d8:	4811      	ldr	r0, [pc, #68]	@ (8004420 <prvCheckForValidListAndQueue+0x58>)
 80043da:	f7fd ff2f 	bl	800223c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043de:	4811      	ldr	r0, [pc, #68]	@ (8004424 <prvCheckForValidListAndQueue+0x5c>)
 80043e0:	f7fd ff2c 	bl	800223c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043e4:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <prvCheckForValidListAndQueue+0x60>)
 80043e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004420 <prvCheckForValidListAndQueue+0x58>)
 80043e8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <prvCheckForValidListAndQueue+0x64>)
 80043ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004424 <prvCheckForValidListAndQueue+0x5c>)
 80043ee:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80043f0:	2200      	movs	r2, #0
 80043f2:	210c      	movs	r1, #12
 80043f4:	200a      	movs	r0, #10
 80043f6:	f7fe f83f 	bl	8002478 <xQueueGenericCreate>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4a07      	ldr	r2, [pc, #28]	@ (800441c <prvCheckForValidListAndQueue+0x54>)
 80043fe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004400:	4b06      	ldr	r3, [pc, #24]	@ (800441c <prvCheckForValidListAndQueue+0x54>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <prvCheckForValidListAndQueue+0x54>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4908      	ldr	r1, [pc, #32]	@ (8004430 <prvCheckForValidListAndQueue+0x68>)
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fcce 	bl	8002db0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004414:	f000 f9f4 	bl	8004800 <vPortExitCritical>
    }
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000204 	.word	0x20000204
 8004420:	200001d4 	.word	0x200001d4
 8004424:	200001e8 	.word	0x200001e8
 8004428:	200001fc 	.word	0x200001fc
 800442c:	20000200 	.word	0x20000200
 8004430:	0800787c 	.word	0x0800787c

08004434 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3b04      	subs	r3, #4
 8004444:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800444c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b04      	subs	r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b04      	subs	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004464:	4a0c      	ldr	r2, [pc, #48]	@ (8004498 <pxPortInitialiseStack+0x64>)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3b14      	subs	r3, #20
 800446e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3b04      	subs	r3, #4
 800447a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f06f 0202 	mvn.w	r2, #2
 8004482:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3b20      	subs	r3, #32
 8004488:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	0800449d 	.word	0x0800449d

0800449c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044a6:	4b13      	ldr	r3, [pc, #76]	@ (80044f4 <prvTaskExitError+0x58>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d00b      	beq.n	80044c8 <prvTaskExitError+0x2c>
        __asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
    }
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <prvTaskExitError+0x28>
        __asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60bb      	str	r3, [r7, #8]
    }
 80044da:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044dc:	bf00      	nop
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0fc      	beq.n	80044de <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000010 	.word	0x20000010
	...

08004500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <pxCurrentTCBConst2>)
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	6808      	ldr	r0, [r1, #0]
 8004506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450a:	f380 8809 	msr	PSP, r0
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f380 8811 	msr	BASEPRI, r0
 800451a:	4770      	bx	lr
 800451c:	f3af 8000 	nop.w

08004520 <pxCurrentTCBConst2>:
 8004520:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop

08004528 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004528:	4808      	ldr	r0, [pc, #32]	@ (800454c <prvPortStartFirstTask+0x24>)
 800452a:	6800      	ldr	r0, [r0, #0]
 800452c:	6800      	ldr	r0, [r0, #0]
 800452e:	f380 8808 	msr	MSP, r0
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f380 8814 	msr	CONTROL, r0
 800453a:	b662      	cpsie	i
 800453c:	b661      	cpsie	f
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	df00      	svc	0
 8004548:	bf00      	nop
 800454a:	0000      	.short	0x0000
 800454c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop

08004554 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800455a:	4b47      	ldr	r3, [pc, #284]	@ (8004678 <xPortStartScheduler+0x124>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a47      	ldr	r2, [pc, #284]	@ (800467c <xPortStartScheduler+0x128>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d10b      	bne.n	800457c <xPortStartScheduler+0x28>
        __asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	613b      	str	r3, [r7, #16]
    }
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800457c:	4b3e      	ldr	r3, [pc, #248]	@ (8004678 <xPortStartScheduler+0x124>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a3f      	ldr	r2, [pc, #252]	@ (8004680 <xPortStartScheduler+0x12c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10b      	bne.n	800459e <xPortStartScheduler+0x4a>
        __asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	60fb      	str	r3, [r7, #12]
    }
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	e7fd      	b.n	800459a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800459e:	4b39      	ldr	r3, [pc, #228]	@ (8004684 <xPortStartScheduler+0x130>)
 80045a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	22ff      	movs	r2, #255	@ 0xff
 80045ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <xPortStartScheduler+0x134>)
 80045c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045c6:	4b31      	ldr	r3, [pc, #196]	@ (800468c <xPortStartScheduler+0x138>)
 80045c8:	2207      	movs	r2, #7
 80045ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045cc:	e009      	b.n	80045e2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80045ce:	4b2f      	ldr	r3, [pc, #188]	@ (800468c <xPortStartScheduler+0x138>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	4a2d      	ldr	r2, [pc, #180]	@ (800468c <xPortStartScheduler+0x138>)
 80045d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ea:	2b80      	cmp	r3, #128	@ 0x80
 80045ec:	d0ef      	beq.n	80045ce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ee:	4b27      	ldr	r3, [pc, #156]	@ (800468c <xPortStartScheduler+0x138>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1c3 0307 	rsb	r3, r3, #7
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d00b      	beq.n	8004612 <xPortStartScheduler+0xbe>
        __asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	60bb      	str	r3, [r7, #8]
    }
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	e7fd      	b.n	800460e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004612:	4b1e      	ldr	r3, [pc, #120]	@ (800468c <xPortStartScheduler+0x138>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	4a1c      	ldr	r2, [pc, #112]	@ (800468c <xPortStartScheduler+0x138>)
 800461a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800461c:	4b1b      	ldr	r3, [pc, #108]	@ (800468c <xPortStartScheduler+0x138>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004624:	4a19      	ldr	r2, [pc, #100]	@ (800468c <xPortStartScheduler+0x138>)
 8004626:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004630:	4b17      	ldr	r3, [pc, #92]	@ (8004690 <xPortStartScheduler+0x13c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a16      	ldr	r2, [pc, #88]	@ (8004690 <xPortStartScheduler+0x13c>)
 8004636:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800463a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800463c:	4b14      	ldr	r3, [pc, #80]	@ (8004690 <xPortStartScheduler+0x13c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a13      	ldr	r2, [pc, #76]	@ (8004690 <xPortStartScheduler+0x13c>)
 8004642:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004646:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004648:	f000 f968 	bl	800491c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800464c:	4b11      	ldr	r3, [pc, #68]	@ (8004694 <xPortStartScheduler+0x140>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004652:	f000 f987 	bl	8004964 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <xPortStartScheduler+0x144>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a0f      	ldr	r2, [pc, #60]	@ (8004698 <xPortStartScheduler+0x144>)
 800465c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004660:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004662:	f7ff ff61 	bl	8004528 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004666:	f7ff f83b 	bl	80036e0 <vTaskSwitchContext>
    prvTaskExitError();
 800466a:	f7ff ff17 	bl	800449c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	e000ed00 	.word	0xe000ed00
 800467c:	410fc271 	.word	0x410fc271
 8004680:	410fc270 	.word	0x410fc270
 8004684:	e000e400 	.word	0xe000e400
 8004688:	20000210 	.word	0x20000210
 800468c:	20000214 	.word	0x20000214
 8004690:	e000ed20 	.word	0xe000ed20
 8004694:	20000010 	.word	0x20000010
 8004698:	e000ef34 	.word	0xe000ef34

0800469c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046a2:	4b38      	ldr	r3, [pc, #224]	@ (8004784 <vInitPrioGroupValue+0xe8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a38      	ldr	r2, [pc, #224]	@ (8004788 <vInitPrioGroupValue+0xec>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d10b      	bne.n	80046c4 <vInitPrioGroupValue+0x28>
        __asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	613b      	str	r3, [r7, #16]
    }
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004784 <vInitPrioGroupValue+0xe8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	@ (800478c <vInitPrioGroupValue+0xf0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d10b      	bne.n	80046e6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60fb      	str	r3, [r7, #12]
    }
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <vInitPrioGroupValue+0xf4>)
 80046e8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	22ff      	movs	r2, #255	@ 0xff
 80046f6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b22      	ldr	r3, [pc, #136]	@ (8004794 <vInitPrioGroupValue+0xf8>)
 800470c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800470e:	4b22      	ldr	r3, [pc, #136]	@ (8004798 <vInitPrioGroupValue+0xfc>)
 8004710:	2207      	movs	r2, #7
 8004712:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004714:	e009      	b.n	800472a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004716:	4b20      	ldr	r3, [pc, #128]	@ (8004798 <vInitPrioGroupValue+0xfc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <vInitPrioGroupValue+0xfc>)
 800471e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b80      	cmp	r3, #128	@ 0x80
 8004734:	d0ef      	beq.n	8004716 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004736:	4b18      	ldr	r3, [pc, #96]	@ (8004798 <vInitPrioGroupValue+0xfc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f1c3 0307 	rsb	r3, r3, #7
 800473e:	2b04      	cmp	r3, #4
 8004740:	d00b      	beq.n	800475a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60bb      	str	r3, [r7, #8]
    }
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800475a:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <vInitPrioGroupValue+0xfc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	4a0d      	ldr	r2, [pc, #52]	@ (8004798 <vInitPrioGroupValue+0xfc>)
 8004762:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004764:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <vInitPrioGroupValue+0xfc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800476c:	4a0a      	ldr	r2, [pc, #40]	@ (8004798 <vInitPrioGroupValue+0xfc>)
 800476e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000ed00 	.word	0xe000ed00
 8004788:	410fc271 	.word	0x410fc271
 800478c:	410fc270 	.word	0x410fc270
 8004790:	e000e400 	.word	0xe000e400
 8004794:	20000210 	.word	0x20000210
 8004798:	20000214 	.word	0x20000214

0800479c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
        __asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	607b      	str	r3, [r7, #4]
    }
 80047b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047b6:	4b10      	ldr	r3, [pc, #64]	@ (80047f8 <vPortEnterCritical+0x5c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3301      	adds	r3, #1
 80047bc:	4a0e      	ldr	r2, [pc, #56]	@ (80047f8 <vPortEnterCritical+0x5c>)
 80047be:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047c0:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <vPortEnterCritical+0x5c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d110      	bne.n	80047ea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047c8:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <vPortEnterCritical+0x60>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <vPortEnterCritical+0x4e>
        __asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	603b      	str	r3, [r7, #0]
    }
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	e7fd      	b.n	80047e6 <vPortEnterCritical+0x4a>
    }
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000010 	.word	0x20000010
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004806:	4b12      	ldr	r3, [pc, #72]	@ (8004850 <vPortExitCritical+0x50>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <vPortExitCritical+0x26>
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
    }
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <vPortExitCritical+0x50>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	4a08      	ldr	r2, [pc, #32]	@ (8004850 <vPortExitCritical+0x50>)
 800482e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004830:	4b07      	ldr	r3, [pc, #28]	@ (8004850 <vPortExitCritical+0x50>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <vPortExitCritical+0x44>
 8004838:	2300      	movs	r3, #0
 800483a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f383 8811 	msr	BASEPRI, r3
    }
 8004842:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	20000010 	.word	0x20000010
	...

08004860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004860:	f3ef 8009 	mrs	r0, PSP
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <pxCurrentTCBConst>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f01e 0f10 	tst.w	lr, #16
 8004870:	bf08      	it	eq
 8004872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487a:	6010      	str	r0, [r2, #0]
 800487c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004884:	f380 8811 	msr	BASEPRI, r0
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f7fe ff26 	bl	80036e0 <vTaskSwitchContext>
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f380 8811 	msr	BASEPRI, r0
 800489c:	bc09      	pop	{r0, r3}
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	6808      	ldr	r0, [r1, #0]
 80048a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a6:	f01e 0f10 	tst.w	lr, #16
 80048aa:	bf08      	it	eq
 80048ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048b0:	f380 8809 	msr	PSP, r0
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	f3af 8000 	nop.w

080048c0 <pxCurrentTCBConst>:
 80048c0:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop

080048c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
        __asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	607b      	str	r3, [r7, #4]
    }
 80048e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048e2:	f002 fbf9 	bl	80070d8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80048e6:	f7fe fe3d 	bl	8003564 <xTaskIncrementTick>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80048f0:	f002 fc50 	bl	8007194 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048f4:	4b08      	ldr	r3, [pc, #32]	@ (8004918 <SysTick_Handler+0x50>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e001      	b.n	8004902 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80048fe:	f002 fc2d 	bl	800715c <SEGGER_SYSVIEW_RecordExitISR>
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f383 8811 	msr	BASEPRI, r3
    }
 800490c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004920:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004926:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <vPortSetupTimerInterrupt+0x38>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800492c:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <vPortSetupTimerInterrupt+0x3c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0a      	ldr	r2, [pc, #40]	@ (800495c <vPortSetupTimerInterrupt+0x40>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	4a09      	ldr	r2, [pc, #36]	@ (8004960 <vPortSetupTimerInterrupt+0x44>)
 800493a:	3b01      	subs	r3, #1
 800493c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800493e:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e010 	.word	0xe000e010
 8004954:	e000e018 	.word	0xe000e018
 8004958:	20000000 	.word	0x20000000
 800495c:	10624dd3 	.word	0x10624dd3
 8004960:	e000e014 	.word	0xe000e014

08004964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004974 <vPortEnableVFP+0x10>
 8004968:	6801      	ldr	r1, [r0, #0]
 800496a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800496e:	6001      	str	r1, [r0, #0]
 8004970:	4770      	bx	lr
 8004972:	0000      	.short	0x0000
 8004974:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop

0800497c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d915      	bls.n	80049ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800498e:	4a18      	ldr	r2, [pc, #96]	@ (80049f0 <vPortValidateInterruptPriority+0x74>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004998:	4b16      	ldr	r3, [pc, #88]	@ (80049f4 <vPortValidateInterruptPriority+0x78>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	7afa      	ldrb	r2, [r7, #11]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d20b      	bcs.n	80049ba <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	607b      	str	r3, [r7, #4]
    }
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	e7fd      	b.n	80049b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049ba:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <vPortValidateInterruptPriority+0x7c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049c2:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <vPortValidateInterruptPriority+0x80>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d90b      	bls.n	80049e2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	603b      	str	r3, [r7, #0]
    }
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	e7fd      	b.n	80049de <vPortValidateInterruptPriority+0x62>
    }
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000e3f0 	.word	0xe000e3f0
 80049f4:	20000210 	.word	0x20000210
 80049f8:	e000ed0c 	.word	0xe000ed0c
 80049fc:	20000214 	.word	0x20000214

08004a00 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	@ 0x28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004a0c:	f7fe fcd8 	bl	80033c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a10:	4b66      	ldr	r3, [pc, #408]	@ (8004bac <pvPortMalloc+0x1ac>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a18:	f000 f938 	bl	8004c8c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a1c:	4b64      	ldr	r3, [pc, #400]	@ (8004bb0 <pvPortMalloc+0x1b0>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f040 80a9 	bne.w	8004b7c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d02e      	beq.n	8004a8e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004a30:	2208      	movs	r2, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d228      	bcs.n	8004a8e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d022      	beq.n	8004a94 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	3308      	adds	r3, #8
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d215      	bcs.n	8004a88 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	3308      	adds	r3, #8
 8004a64:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d011      	beq.n	8004a94 <pvPortMalloc+0x94>
        __asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	617b      	str	r3, [r7, #20]
    }
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a8c:	e002      	b.n	8004a94 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	e000      	b.n	8004a96 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a94:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d06f      	beq.n	8004b7c <pvPortMalloc+0x17c>
 8004a9c:	4b45      	ldr	r3, [pc, #276]	@ (8004bb4 <pvPortMalloc+0x1b4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d86a      	bhi.n	8004b7c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004aa6:	4b44      	ldr	r3, [pc, #272]	@ (8004bb8 <pvPortMalloc+0x1b8>)
 8004aa8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004aaa:	4b43      	ldr	r3, [pc, #268]	@ (8004bb8 <pvPortMalloc+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ab0:	e004      	b.n	8004abc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d903      	bls.n	8004ace <pvPortMalloc+0xce>
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f1      	bne.n	8004ab2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ace:	4b37      	ldr	r3, [pc, #220]	@ (8004bac <pvPortMalloc+0x1ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d051      	beq.n	8004b7c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2208      	movs	r2, #8
 8004ade:	4413      	add	r3, r2
 8004ae0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	1ad2      	subs	r2, r2, r3
 8004af2:	2308      	movs	r3, #8
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d920      	bls.n	8004b3c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4413      	add	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <pvPortMalloc+0x124>
        __asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	613b      	str	r3, [r7, #16]
    }
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1ad2      	subs	r2, r2, r3
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b36:	69b8      	ldr	r0, [r7, #24]
 8004b38:	f000 f90a 	bl	8004d50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <pvPortMalloc+0x1b4>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb4 <pvPortMalloc+0x1b4>)
 8004b48:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb4 <pvPortMalloc+0x1b4>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <pvPortMalloc+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d203      	bcs.n	8004b5e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b56:	4b17      	ldr	r3, [pc, #92]	@ (8004bb4 <pvPortMalloc+0x1b4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	@ (8004bbc <pvPortMalloc+0x1bc>)
 8004b5c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <pvPortMalloc+0x1b0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b72:	4b13      	ldr	r3, [pc, #76]	@ (8004bc0 <pvPortMalloc+0x1c0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	4a11      	ldr	r2, [pc, #68]	@ (8004bc0 <pvPortMalloc+0x1c0>)
 8004b7a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b7c:	f7fe fc2e 	bl	80033dc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <pvPortMalloc+0x1a2>
        __asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	60fb      	str	r3, [r7, #12]
    }
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <pvPortMalloc+0x19e>
    return pvReturn;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3728      	adds	r7, #40	@ 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20012e20 	.word	0x20012e20
 8004bb0:	20012e34 	.word	0x20012e34
 8004bb4:	20012e24 	.word	0x20012e24
 8004bb8:	20012e18 	.word	0x20012e18
 8004bbc:	20012e28 	.word	0x20012e28
 8004bc0:	20012e2c 	.word	0x20012e2c

08004bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04f      	beq.n	8004c76 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	425b      	negs	r3, r3
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4413      	add	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	4b25      	ldr	r3, [pc, #148]	@ (8004c80 <vPortFree+0xbc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <vPortFree+0x46>
        __asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	60fb      	str	r3, [r7, #12]
    }
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <vPortFree+0x66>
        __asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60bb      	str	r3, [r7, #8]
    }
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4b14      	ldr	r3, [pc, #80]	@ (8004c80 <vPortFree+0xbc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01e      	beq.n	8004c76 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11a      	bne.n	8004c76 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	4b0e      	ldr	r3, [pc, #56]	@ (8004c80 <vPortFree+0xbc>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004c50:	f7fe fbb6 	bl	80033c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <vPortFree+0xc0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <vPortFree+0xc0>)
 8004c60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c62:	6938      	ldr	r0, [r7, #16]
 8004c64:	f000 f874 	bl	8004d50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c68:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <vPortFree+0xc4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	4a06      	ldr	r2, [pc, #24]	@ (8004c88 <vPortFree+0xc4>)
 8004c70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c72:	f7fe fbb3 	bl	80033dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20012e34 	.word	0x20012e34
 8004c84:	20012e24 	.word	0x20012e24
 8004c88:	20012e30 	.word	0x20012e30

08004c8c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c92:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004c96:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004c98:	4b27      	ldr	r3, [pc, #156]	@ (8004d38 <prvHeapInit+0xac>)
 8004c9a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3307      	adds	r3, #7
 8004caa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0307 	bic.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	4a1f      	ldr	r2, [pc, #124]	@ (8004d38 <prvHeapInit+0xac>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d3c <prvHeapInit+0xb0>)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004cca:	4b1c      	ldr	r3, [pc, #112]	@ (8004d3c <prvHeapInit+0xb0>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004cd8:	2208      	movs	r2, #8
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <prvHeapInit+0xb4>)
 8004cec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cee:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <prvHeapInit+0xb4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cf6:	4b12      	ldr	r3, [pc, #72]	@ (8004d40 <prvHeapInit+0xb4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	1ad2      	subs	r2, r2, r3
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <prvHeapInit+0xb4>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4a0a      	ldr	r2, [pc, #40]	@ (8004d44 <prvHeapInit+0xb8>)
 8004d1a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a09      	ldr	r2, [pc, #36]	@ (8004d48 <prvHeapInit+0xbc>)
 8004d22:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d24:	4b09      	ldr	r3, [pc, #36]	@ (8004d4c <prvHeapInit+0xc0>)
 8004d26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d2a:	601a      	str	r2, [r3, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	20000218 	.word	0x20000218
 8004d3c:	20012e18 	.word	0x20012e18
 8004d40:	20012e20 	.word	0x20012e20
 8004d44:	20012e28 	.word	0x20012e28
 8004d48:	20012e24 	.word	0x20012e24
 8004d4c:	20012e34 	.word	0x20012e34

08004d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d58:	4b28      	ldr	r3, [pc, #160]	@ (8004dfc <prvInsertBlockIntoFreeList+0xac>)
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e002      	b.n	8004d64 <prvInsertBlockIntoFreeList+0x14>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d8f7      	bhi.n	8004d5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4413      	add	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d108      	bne.n	8004d92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	441a      	add	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d118      	bne.n	8004dd8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <prvInsertBlockIntoFreeList+0xb0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d00d      	beq.n	8004dce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e008      	b.n	8004de0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dce:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e003      	b.n	8004de0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d002      	beq.n	8004dee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20012e18 	.word	0x20012e18
 8004e00:	20012e20 	.word	0x20012e20

08004e04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e08:	4803      	ldr	r0, [pc, #12]	@ (8004e18 <_cbSendSystemDesc+0x14>)
 8004e0a:	f002 f90f 	bl	800702c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e0e:	4803      	ldr	r0, [pc, #12]	@ (8004e1c <_cbSendSystemDesc+0x18>)
 8004e10:	f002 f90c 	bl	800702c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e14:	bf00      	nop
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	08007884 	.word	0x08007884
 8004e1c:	080078c8 	.word	0x080078c8

08004e20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004e24:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e2a:	6819      	ldr	r1, [r3, #0]
 8004e2c:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <SEGGER_SYSVIEW_Conf+0x24>)
 8004e2e:	4a06      	ldr	r2, [pc, #24]	@ (8004e48 <SEGGER_SYSVIEW_Conf+0x28>)
 8004e30:	f001 fc78 	bl	8006724 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004e34:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004e38:	f001 fcb8 	bl	80067ac <SEGGER_SYSVIEW_SetRAMBase>
}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000000 	.word	0x20000000
 8004e44:	08004e05 	.word	0x08004e05
 8004e48:	08007968 	.word	0x08007968

08004e4c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	e033      	b.n	8004ec0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e58:	491e      	ldr	r1, [pc, #120]	@ (8004ed4 <_cbSendTaskList+0x88>)
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	491a      	ldr	r1, [pc, #104]	@ (8004ed4 <_cbSendTaskList+0x88>)
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3304      	adds	r3, #4
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	4c16      	ldr	r4, [pc, #88]	@ (8004ed4 <_cbSendTaskList+0x88>)
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4423      	add	r3, r4
 8004e88:	3308      	adds	r3, #8
 8004e8a:	681c      	ldr	r4, [r3, #0]
 8004e8c:	4d11      	ldr	r5, [pc, #68]	@ (8004ed4 <_cbSendTaskList+0x88>)
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	442b      	add	r3, r5
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	681d      	ldr	r5, [r3, #0]
 8004e9e:	4e0d      	ldr	r6, [pc, #52]	@ (8004ed4 <_cbSendTaskList+0x88>)
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4433      	add	r3, r6
 8004eac:	3310      	adds	r3, #16
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	f000 f92d 	bl	8005114 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	607b      	str	r3, [r7, #4]
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <_cbSendTaskList+0x8c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d3c6      	bcc.n	8004e58 <_cbSendTaskList+0xc>
  }
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed4:	20012e38 	.word	0x20012e38
 8004ed8:	20012ed8 	.word	0x20012ed8

08004edc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ee4:	f7fe fb2c 	bl	8003540 <xTaskGetTickCountFromISR>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2200      	movs	r2, #0
 8004eec:	469a      	mov	sl, r3
 8004eee:	4693      	mov	fp, r2
 8004ef0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ef4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	f04f 0a00 	mov.w	sl, #0
 8004f00:	f04f 0b00 	mov.w	fp, #0
 8004f04:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004f08:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004f0c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004f10:	4652      	mov	r2, sl
 8004f12:	465b      	mov	r3, fp
 8004f14:	1a14      	subs	r4, r2, r0
 8004f16:	eb63 0501 	sbc.w	r5, r3, r1
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	00ab      	lsls	r3, r5, #2
 8004f24:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004f28:	00a2      	lsls	r2, r4, #2
 8004f2a:	4614      	mov	r4, r2
 8004f2c:	461d      	mov	r5, r3
 8004f2e:	eb14 0800 	adds.w	r8, r4, r0
 8004f32:	eb45 0901 	adc.w	r9, r5, r1
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4a:	4690      	mov	r8, r2
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f52:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f72:	2205      	movs	r2, #5
 8004f74:	492b      	ldr	r1, [pc, #172]	@ (8005024 <SYSVIEW_AddTask+0xc0>)
 8004f76:	68b8      	ldr	r0, [r7, #8]
 8004f78:	f002 fbf4 	bl	8007764 <memcmp>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04b      	beq.n	800501a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f82:	4b29      	ldr	r3, [pc, #164]	@ (8005028 <SYSVIEW_AddTask+0xc4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b07      	cmp	r3, #7
 8004f88:	d903      	bls.n	8004f92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f8a:	4828      	ldr	r0, [pc, #160]	@ (800502c <SYSVIEW_AddTask+0xc8>)
 8004f8c:	f002 fb60 	bl	8007650 <SEGGER_SYSVIEW_Warn>
    return;
 8004f90:	e044      	b.n	800501c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f92:	4b25      	ldr	r3, [pc, #148]	@ (8005028 <SYSVIEW_AddTask+0xc4>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4926      	ldr	r1, [pc, #152]	@ (8005030 <SYSVIEW_AddTask+0xcc>)
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004fa6:	4b20      	ldr	r3, [pc, #128]	@ (8005028 <SYSVIEW_AddTask+0xc4>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4921      	ldr	r1, [pc, #132]	@ (8005030 <SYSVIEW_AddTask+0xcc>)
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005028 <SYSVIEW_AddTask+0xc4>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	491b      	ldr	r1, [pc, #108]	@ (8005030 <SYSVIEW_AddTask+0xcc>)
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3308      	adds	r3, #8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004fd2:	4b15      	ldr	r3, [pc, #84]	@ (8005028 <SYSVIEW_AddTask+0xc4>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4916      	ldr	r1, [pc, #88]	@ (8005030 <SYSVIEW_AddTask+0xcc>)
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8005028 <SYSVIEW_AddTask+0xc4>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4910      	ldr	r1, [pc, #64]	@ (8005030 <SYSVIEW_AddTask+0xcc>)
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <SYSVIEW_AddTask+0xc4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	4a08      	ldr	r2, [pc, #32]	@ (8005028 <SYSVIEW_AddTask+0xc4>)
 8005006:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f87e 	bl	8005114 <SYSVIEW_SendTaskInfo>
 8005018:	e000      	b.n	800501c <SYSVIEW_AddTask+0xb8>
    return;
 800501a:	bf00      	nop

}
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	080078d8 	.word	0x080078d8
 8005028:	20012ed8 	.word	0x20012ed8
 800502c:	080078e0 	.word	0x080078e0
 8005030:	20012e38 	.word	0x20012e38

08005034 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005042:	2205      	movs	r2, #5
 8005044:	4930      	ldr	r1, [pc, #192]	@ (8005108 <SYSVIEW_UpdateTask+0xd4>)
 8005046:	68b8      	ldr	r0, [r7, #8]
 8005048:	f002 fb8c 	bl	8007764 <memcmp>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d056      	beq.n	8005100 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	e00d      	b.n	8005074 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8005058:	492c      	ldr	r1, [pc, #176]	@ (800510c <SYSVIEW_UpdateTask+0xd8>)
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	429a      	cmp	r2, r3
 800506c:	d008      	beq.n	8005080 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	3301      	adds	r3, #1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	4b26      	ldr	r3, [pc, #152]	@ (8005110 <SYSVIEW_UpdateTask+0xdc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	429a      	cmp	r2, r3
 800507c:	d3ec      	bcc.n	8005058 <SYSVIEW_UpdateTask+0x24>
 800507e:	e000      	b.n	8005082 <SYSVIEW_UpdateTask+0x4e>
      break;
 8005080:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8005082:	4b23      	ldr	r3, [pc, #140]	@ (8005110 <SYSVIEW_UpdateTask+0xdc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	429a      	cmp	r2, r3
 800508a:	d230      	bcs.n	80050ee <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 800508c:	491f      	ldr	r1, [pc, #124]	@ (800510c <SYSVIEW_UpdateTask+0xd8>)
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	3304      	adds	r3, #4
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80050a0:	491a      	ldr	r1, [pc, #104]	@ (800510c <SYSVIEW_UpdateTask+0xd8>)
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	3308      	adds	r3, #8
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 80050b4:	4915      	ldr	r1, [pc, #84]	@ (800510c <SYSVIEW_UpdateTask+0xd8>)
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	330c      	adds	r3, #12
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 80050c8:	4910      	ldr	r1, [pc, #64]	@ (800510c <SYSVIEW_UpdateTask+0xd8>)
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	3310      	adds	r3, #16
 80050d8:	6a3a      	ldr	r2, [r7, #32]
 80050da:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f814 	bl	8005114 <SYSVIEW_SendTaskInfo>
 80050ec:	e009      	b.n	8005102 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff ff33 	bl	8004f64 <SYSVIEW_AddTask>
 80050fe:	e000      	b.n	8005102 <SYSVIEW_UpdateTask+0xce>
    return;
 8005100:	bf00      	nop
  }
}
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	080078d8 	.word	0x080078d8
 800510c:	20012e38 	.word	0x20012e38
 8005110:	20012ed8 	.word	0x20012ed8

08005114 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	@ 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005122:	f107 0314 	add.w	r3, r7, #20
 8005126:	2214      	movs	r2, #20
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f002 fb2a 	bl	8007784 <memset>
  TaskInfo.TaskID     = TaskID;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005144:	f107 0314 	add.w	r3, r7, #20
 8005148:	4618      	mov	r0, r3
 800514a:	f001 fe77 	bl	8006e3c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800514e:	bf00      	nop
 8005150:	3728      	adds	r7, #40	@ 0x28
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <__NVIC_EnableIRQ>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005166:	2b00      	cmp	r3, #0
 8005168:	db0b      	blt.n	8005182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	f003 021f 	and.w	r2, r3, #31
 8005170:	4907      	ldr	r1, [pc, #28]	@ (8005190 <__NVIC_EnableIRQ+0x38>)
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	2001      	movs	r0, #1
 800517a:	fa00 f202 	lsl.w	r2, r0, r2
 800517e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	e000e100 	.word	0xe000e100

08005194 <__NVIC_SetPriority>:
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	6039      	str	r1, [r7, #0]
 800519e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	db0a      	blt.n	80051be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	490c      	ldr	r1, [pc, #48]	@ (80051e0 <__NVIC_SetPriority+0x4c>)
 80051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b2:	0112      	lsls	r2, r2, #4
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	440b      	add	r3, r1
 80051b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80051bc:	e00a      	b.n	80051d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	4908      	ldr	r1, [pc, #32]	@ (80051e4 <__NVIC_SetPriority+0x50>)
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	3b04      	subs	r3, #4
 80051cc:	0112      	lsls	r2, r2, #4
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	440b      	add	r3, r1
 80051d2:	761a      	strb	r2, [r3, #24]
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	e000e100 	.word	0xe000e100
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80051ee:	f002 fa8b 	bl	8007708 <SEGGER_SYSVIEW_IsStarted>
 80051f2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80051fa:	f001 fca3 	bl	8006b44 <SEGGER_SYSVIEW_Start>
  }
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005212:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <_cbOnUARTRx+0x3c>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b03      	cmp	r3, #3
 8005218:	d806      	bhi.n	8005228 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800521a:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <_cbOnUARTRx+0x3c>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	3301      	adds	r3, #1
 8005220:	b2da      	uxtb	r2, r3
 8005222:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <_cbOnUARTRx+0x3c>)
 8005224:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005226:	e009      	b.n	800523c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005228:	f7ff ffde 	bl	80051e8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800522c:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <_cbOnUARTRx+0x3c>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4618      	mov	r0, r3
 8005232:	1dfb      	adds	r3, r7, #7
 8005234:	2201      	movs	r2, #1
 8005236:	4619      	mov	r1, r3
 8005238:	f000 fb9a 	bl	8005970 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800523c:	bf00      	nop
}
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000014 	.word	0x20000014

08005248 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005250:	4b14      	ldr	r3, [pc, #80]	@ (80052a4 <_cbOnUARTTx+0x5c>)
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b03      	cmp	r3, #3
 8005256:	d80f      	bhi.n	8005278 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005258:	4b12      	ldr	r3, [pc, #72]	@ (80052a4 <_cbOnUARTTx+0x5c>)
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	461a      	mov	r2, r3
 800525e:	4b12      	ldr	r3, [pc, #72]	@ (80052a8 <_cbOnUARTTx+0x60>)
 8005260:	5c9a      	ldrb	r2, [r3, r2]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005266:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <_cbOnUARTTx+0x5c>)
 8005268:	785b      	ldrb	r3, [r3, #1]
 800526a:	3301      	adds	r3, #1
 800526c:	b2da      	uxtb	r2, r3
 800526e:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <_cbOnUARTTx+0x5c>)
 8005270:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005272:	2301      	movs	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005276:	e00f      	b.n	8005298 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005278:	4b0a      	ldr	r3, [pc, #40]	@ (80052a4 <_cbOnUARTTx+0x5c>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fa19 	bl	80056b8 <SEGGER_RTT_ReadUpBufferNoLock>
 8005286:	4603      	mov	r3, r0
 8005288:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	da02      	bge.n	8005296 <_cbOnUARTTx+0x4e>
    r = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e000      	b.n	8005298 <_cbOnUARTTx+0x50>
  }
Done:
 8005296:	bf00      	nop
  return r;
 8005298:	68fb      	ldr	r3, [r7, #12]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000014 	.word	0x20000014
 80052a8:	08007970 	.word	0x08007970

080052ac <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80052b4:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <SEGGER_UART_init+0x1c>)
 80052b6:	4905      	ldr	r1, [pc, #20]	@ (80052cc <SEGGER_UART_init+0x20>)
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f863 	bl	8005384 <HIF_UART_Init>
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	08005209 	.word	0x08005209
 80052cc:	08005249 	.word	0x08005249

080052d0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80052d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005350 <USART2_IRQHandler+0x80>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d011      	beq.n	800530a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80052e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <USART2_IRQHandler+0x84>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 030b 	and.w	r3, r3, #11
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d108      	bne.n	800530a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80052f8:	4b17      	ldr	r3, [pc, #92]	@ (8005358 <USART2_IRQHandler+0x88>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005300:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <USART2_IRQHandler+0x88>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	79fa      	ldrb	r2, [r7, #7]
 8005306:	4610      	mov	r0, r2
 8005308:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01a      	beq.n	800534a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005314:	4b11      	ldr	r3, [pc, #68]	@ (800535c <USART2_IRQHandler+0x8c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d015      	beq.n	8005348 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800531c:	4b0f      	ldr	r3, [pc, #60]	@ (800535c <USART2_IRQHandler+0x8c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	1dfa      	adds	r2, r7, #7
 8005322:	4610      	mov	r0, r2
 8005324:	4798      	blx	r3
 8005326:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800532e:	4b0c      	ldr	r3, [pc, #48]	@ (8005360 <USART2_IRQHandler+0x90>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a0b      	ldr	r2, [pc, #44]	@ (8005360 <USART2_IRQHandler+0x90>)
 8005334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e006      	b.n	800534a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800533c:	4b04      	ldr	r3, [pc, #16]	@ (8005350 <USART2_IRQHandler+0x80>)
 800533e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005340:	79fa      	ldrb	r2, [r7, #7]
 8005342:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <USART2_IRQHandler+0x84>)
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e000      	b.n	800534a <USART2_IRQHandler+0x7a>
      return;
 8005348:	bf00      	nop
    }
  }
}
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40004400 	.word	0x40004400
 8005354:	40004404 	.word	0x40004404
 8005358:	20012edc 	.word	0x20012edc
 800535c:	20012ee0 	.word	0x20012ee0
 8005360:	4000440c 	.word	0x4000440c

08005364 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005368:	4b05      	ldr	r3, [pc, #20]	@ (8005380 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a04      	ldr	r2, [pc, #16]	@ (8005380 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800536e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005372:	6013      	str	r3, [r2, #0]
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	4000440c 	.word	0x4000440c

08005384 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005390:	4b2e      	ldr	r3, [pc, #184]	@ (800544c <HIF_UART_Init+0xc8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2d      	ldr	r2, [pc, #180]	@ (800544c <HIF_UART_Init+0xc8>)
 8005396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800539a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800539c:	4b2c      	ldr	r3, [pc, #176]	@ (8005450 <HIF_UART_Init+0xcc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005450 <HIF_UART_Init+0xcc>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80053a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005454 <HIF_UART_Init+0xd0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053b4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80053bc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80053be:	4a25      	ldr	r2, [pc, #148]	@ (8005454 <HIF_UART_Init+0xd0>)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80053c4:	4b24      	ldr	r3, [pc, #144]	@ (8005458 <HIF_UART_Init+0xd4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053d0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80053d8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80053da:	4a1f      	ldr	r2, [pc, #124]	@ (8005458 <HIF_UART_Init+0xd4>)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80053e0:	4b1e      	ldr	r3, [pc, #120]	@ (800545c <HIF_UART_Init+0xd8>)
 80053e2:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80053e6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80053e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005460 <HIF_UART_Init+0xdc>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80053ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <HIF_UART_Init+0xe0>)
 80053f0:	2280      	movs	r2, #128	@ 0x80
 80053f2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80053fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005468 <HIF_UART_Init+0xe4>)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	3301      	adds	r3, #1
 8005404:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005412:	d302      	bcc.n	800541a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005414:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005418:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	4a11      	ldr	r2, [pc, #68]	@ (800546c <HIF_UART_Init+0xe8>)
 8005426:	b29b      	uxth	r3, r3
 8005428:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800542a:	4a11      	ldr	r2, [pc, #68]	@ (8005470 <HIF_UART_Init+0xec>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005430:	4a10      	ldr	r2, [pc, #64]	@ (8005474 <HIF_UART_Init+0xf0>)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005436:	2106      	movs	r1, #6
 8005438:	2026      	movs	r0, #38	@ 0x26
 800543a:	f7ff feab 	bl	8005194 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800543e:	2026      	movs	r0, #38	@ 0x26
 8005440:	f7ff fe8a 	bl	8005158 <__NVIC_EnableIRQ>
}
 8005444:	bf00      	nop
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40023840 	.word	0x40023840
 8005450:	40023830 	.word	0x40023830
 8005454:	40020020 	.word	0x40020020
 8005458:	40020000 	.word	0x40020000
 800545c:	4000440c 	.word	0x4000440c
 8005460:	40004410 	.word	0x40004410
 8005464:	40004414 	.word	0x40004414
 8005468:	0501bd00 	.word	0x0501bd00
 800546c:	40004408 	.word	0x40004408
 8005470:	20012edc 	.word	0x20012edc
 8005474:	20012ee0 	.word	0x20012ee0

08005478 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800547e:	4b24      	ldr	r3, [pc, #144]	@ (8005510 <_DoInit+0x98>)
 8005480:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2203      	movs	r2, #3
 8005486:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2203      	movs	r2, #3
 800548c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a20      	ldr	r2, [pc, #128]	@ (8005514 <_DoInit+0x9c>)
 8005492:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a20      	ldr	r2, [pc, #128]	@ (8005518 <_DoInit+0xa0>)
 8005498:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054a0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a17      	ldr	r2, [pc, #92]	@ (8005514 <_DoInit+0x9c>)
 80054b8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a17      	ldr	r2, [pc, #92]	@ (800551c <_DoInit+0xa4>)
 80054be:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2210      	movs	r2, #16
 80054c4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3307      	adds	r3, #7
 80054dc:	4a10      	ldr	r2, [pc, #64]	@ (8005520 <_DoInit+0xa8>)
 80054de:	6810      	ldr	r0, [r2, #0]
 80054e0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054e2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005524 <_DoInit+0xac>)
 80054ea:	6810      	ldr	r0, [r2, #0]
 80054ec:	6018      	str	r0, [r3, #0]
 80054ee:	8891      	ldrh	r1, [r2, #4]
 80054f0:	7992      	ldrb	r2, [r2, #6]
 80054f2:	8099      	strh	r1, [r3, #4]
 80054f4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054f6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005500:	f3bf 8f5f 	dmb	sy
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20012ee4 	.word	0x20012ee4
 8005514:	08007930 	.word	0x08007930
 8005518:	20012f8c 	.word	0x20012f8c
 800551c:	2001338c 	.word	0x2001338c
 8005520:	0800793c 	.word	0x0800793c
 8005524:	08007940 	.word	0x08007940

08005528 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	@ 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005534:	2300      	movs	r3, #0
 8005536:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	429a      	cmp	r2, r3
 800554a:	d905      	bls.n	8005558 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
 8005556:	e007      	b.n	8005568 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	1acb      	subs	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	3b01      	subs	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005572:	4293      	cmp	r3, r2
 8005574:	bf28      	it	cs
 8005576:	4613      	movcs	r3, r2
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800557a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4293      	cmp	r3, r2
 8005580:	bf28      	it	cs
 8005582:	4613      	movcs	r3, r2
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	6978      	ldr	r0, [r7, #20]
 8005596:	f002 f921 	bl	80077dc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	4413      	add	r3, r2
 80055a0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	4413      	add	r3, r2
 80055a8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	4413      	add	r3, r2
 80055b8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d101      	bne.n	80055c8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055c8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1b2      	bne.n	800553e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80055d8:	6a3b      	ldr	r3, [r7, #32]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3728      	adds	r7, #40	@ 0x28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b088      	sub	sp, #32
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d911      	bls.n	800562a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	6938      	ldr	r0, [r7, #16]
 8005616:	f002 f8e1 	bl	80077dc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800561a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	441a      	add	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005628:	e01f      	b.n	800566a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	6938      	ldr	r0, [r7, #16]
 800563e:	f002 f8cd 	bl	80077dc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4413      	add	r3, r2
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4619      	mov	r1, r3
 800565a:	6938      	ldr	r0, [r7, #16]
 800565c:	f002 f8be 	bl	80077dc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005660:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	60da      	str	r2, [r3, #12]
}
 800566a:	bf00      	nop
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	429a      	cmp	r2, r3
 800568c:	d808      	bhi.n	80056a0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad2      	subs	r2, r2, r3
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	3b01      	subs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e004      	b.n	80056aa <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80056aa:	697b      	ldr	r3, [r7, #20]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08c      	sub	sp, #48	@ 0x30
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80056c4:	4b3e      	ldr	r3, [pc, #248]	@ (80057c0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056c6:	623b      	str	r3, [r7, #32]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80056d2:	f7ff fed1 	bl	8005478 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	4613      	mov	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4a37      	ldr	r2, [pc, #220]	@ (80057c0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056e4:	4413      	add	r3, r2
 80056e6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	429a      	cmp	r2, r3
 8005702:	d92b      	bls.n	800575c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4293      	cmp	r3, r2
 8005714:	bf28      	it	cs
 8005716:	4613      	movcs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	4413      	add	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	6939      	ldr	r1, [r7, #16]
 8005728:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800572a:	f002 f857 	bl	80077dc <memcpy>
    NumBytesRead += NumBytesRem;
 800572e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	4413      	add	r3, r2
 8005734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005754:	429a      	cmp	r2, r3
 8005756:	d101      	bne.n	800575c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005758:	2300      	movs	r3, #0
 800575a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4293      	cmp	r3, r2
 800576a:	bf28      	it	cs
 800576c:	4613      	movcs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d019      	beq.n	80057aa <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	4413      	add	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	6939      	ldr	r1, [r7, #16]
 8005784:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005786:	f002 f829 	bl	80077dc <memcpy>
    NumBytesRead += NumBytesRem;
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057b4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3730      	adds	r7, #48	@ 0x30
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20012ee4 	.word	0x20012ee4

080057c4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08c      	sub	sp, #48	@ 0x30
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80057d0:	4b3e      	ldr	r3, [pc, #248]	@ (80058cc <SEGGER_RTT_ReadNoLock+0x108>)
 80057d2:	623b      	str	r3, [r7, #32]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <SEGGER_RTT_ReadNoLock+0x1e>
 80057de:	f7ff fe4b 	bl	8005478 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4613      	mov	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	3360      	adds	r3, #96	@ 0x60
 80057ee:	4a37      	ldr	r2, [pc, #220]	@ (80058cc <SEGGER_RTT_ReadNoLock+0x108>)
 80057f0:	4413      	add	r3, r2
 80057f2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005804:	2300      	movs	r3, #0
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	429a      	cmp	r2, r3
 800580e:	d92b      	bls.n	8005868 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4293      	cmp	r3, r2
 8005820:	bf28      	it	cs
 8005822:	4613      	movcs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582c:	4413      	add	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	6939      	ldr	r1, [r7, #16]
 8005834:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005836:	f001 ffd1 	bl	80077dc <memcpy>
    NumBytesRead += NumBytesRem;
 800583a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005860:	429a      	cmp	r2, r3
 8005862:	d101      	bne.n	8005868 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005864:	2300      	movs	r3, #0
 8005866:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4293      	cmp	r3, r2
 8005876:	bf28      	it	cs
 8005878:	4613      	movcs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d019      	beq.n	80058b6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	4413      	add	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005892:	f001 ffa3 	bl	80077dc <memcpy>
    NumBytesRead += NumBytesRem;
 8005896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800589e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80058b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058c0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80058c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3730      	adds	r7, #48	@ 0x30
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20012ee4 	.word	0x20012ee4

080058d0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	3360      	adds	r3, #96	@ 0x60
 80058ec:	4a1f      	ldr	r2, [pc, #124]	@ (800596c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80058ee:	4413      	add	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d029      	beq.n	800594e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d82e      	bhi.n	800595c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005902:	2b01      	cmp	r3, #1
 8005904:	d013      	beq.n	800592e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005906:	e029      	b.n	800595c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005908:	6978      	ldr	r0, [r7, #20]
 800590a:	f7ff feb2 	bl	8005672 <_GetAvailWriteSpace>
 800590e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	d202      	bcs.n	800591e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800591c:	e021      	b.n	8005962 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	69b9      	ldr	r1, [r7, #24]
 8005926:	6978      	ldr	r0, [r7, #20]
 8005928:	f7ff fe5b 	bl	80055e2 <_WriteNoCheck>
    break;
 800592c:	e019      	b.n	8005962 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800592e:	6978      	ldr	r0, [r7, #20]
 8005930:	f7ff fe9f 	bl	8005672 <_GetAvailWriteSpace>
 8005934:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4293      	cmp	r3, r2
 800593c:	bf28      	it	cs
 800593e:	4613      	movcs	r3, r2
 8005940:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	69b9      	ldr	r1, [r7, #24]
 8005946:	6978      	ldr	r0, [r7, #20]
 8005948:	f7ff fe4b 	bl	80055e2 <_WriteNoCheck>
    break;
 800594c:	e009      	b.n	8005962 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	6978      	ldr	r0, [r7, #20]
 8005954:	f7ff fde8 	bl	8005528 <_WriteBlocking>
 8005958:	61f8      	str	r0, [r7, #28]
    break;
 800595a:	e002      	b.n	8005962 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800595c:	2300      	movs	r3, #0
 800595e:	61fb      	str	r3, [r7, #28]
    break;
 8005960:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005962:	69fb      	ldr	r3, [r7, #28]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20012ee4 	.word	0x20012ee4

08005970 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800597c:	4b0e      	ldr	r3, [pc, #56]	@ (80059b8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800598a:	f7ff fd75 	bl	8005478 <_DoInit>
  SEGGER_RTT_LOCK();
 800598e:	f3ef 8311 	mrs	r3, BASEPRI
 8005992:	f04f 0120 	mov.w	r1, #32
 8005996:	f381 8811 	msr	BASEPRI, r1
 800599a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff ff95 	bl	80058d0 <SEGGER_RTT_WriteDownBufferNoLock>
 80059a6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80059ae:	697b      	ldr	r3, [r7, #20]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20012ee4 	.word	0x20012ee4

080059bc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059ca:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <SEGGER_RTT_AllocUpBuffer+0x20>
 80059d8:	f7ff fd4e 	bl	8005478 <_DoInit>
  SEGGER_RTT_LOCK();
 80059dc:	f3ef 8311 	mrs	r3, BASEPRI
 80059e0:	f04f 0120 	mov.w	r1, #32
 80059e4:	f381 8811 	msr	BASEPRI, r1
 80059e8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059ea:	4b35      	ldr	r3, [pc, #212]	@ (8005ac0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059ec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	440b      	add	r3, r1
 8005a02:	3304      	adds	r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	dbeb      	blt.n	80059f2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a1a:	e000      	b.n	8005a1e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a1c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	da3f      	bge.n	8005aa8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a28:	6939      	ldr	r1, [r7, #16]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	4613      	mov	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a3c:	6939      	ldr	r1, [r7, #16]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	4613      	mov	r3, r2
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a52:	6939      	ldr	r1, [r7, #16]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	440b      	add	r3, r1
 8005a60:	3320      	adds	r3, #32
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	440b      	add	r3, r1
 8005a74:	3328      	adds	r3, #40	@ 0x28
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a7a:	6939      	ldr	r1, [r7, #16]
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	4413      	add	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	440b      	add	r3, r1
 8005a88:	3324      	adds	r3, #36	@ 0x24
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a8e:	6939      	ldr	r1, [r7, #16]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	440b      	add	r3, r1
 8005a9c:	332c      	adds	r3, #44	@ 0x2c
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005aa2:	f3bf 8f5f 	dmb	sy
 8005aa6:	e002      	b.n	8005aae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20012ee4 	.word	0x20012ee4

08005ac4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005ad2:	4b33      	ldr	r3, [pc, #204]	@ (8005ba0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ae0:	f7ff fcca 	bl	8005478 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ae6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	461a      	mov	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d24d      	bcs.n	8005b90 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005af4:	f3ef 8311 	mrs	r3, BASEPRI
 8005af8:	f04f 0120 	mov.w	r1, #32
 8005afc:	f381 8811 	msr	BASEPRI, r1
 8005b00:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d031      	beq.n	8005b6c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005b08:	6979      	ldr	r1, [r7, #20]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	440b      	add	r3, r1
 8005b16:	3360      	adds	r3, #96	@ 0x60
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	440b      	add	r3, r1
 8005b2a:	3364      	adds	r3, #100	@ 0x64
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4613      	mov	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	4413      	add	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	440b      	add	r3, r1
 8005b3e:	3368      	adds	r3, #104	@ 0x68
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005b44:	6979      	ldr	r1, [r7, #20]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	440b      	add	r3, r1
 8005b52:	3370      	adds	r3, #112	@ 0x70
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	4413      	add	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	440b      	add	r3, r1
 8005b66:	336c      	adds	r3, #108	@ 0x6c
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005b6c:	6979      	ldr	r1, [r7, #20]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4613      	mov	r3, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4413      	add	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	440b      	add	r3, r1
 8005b7a:	3374      	adds	r3, #116	@ 0x74
 8005b7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b7e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b80:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	e002      	b.n	8005b96 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005b96:	69fb      	ldr	r3, [r7, #28]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20012ee4 	.word	0x20012ee4

08005ba4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bb4:	e002      	b.n	8005bbc <_EncodeStr+0x18>
    Len++;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f6      	bne.n	8005bb6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d901      	bls.n	8005bd4 <_EncodeStr+0x30>
    Len = Limit;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2bfe      	cmp	r3, #254	@ 0xfe
 8005bd8:	d806      	bhi.n	8005be8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	60fa      	str	r2, [r7, #12]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e011      	b.n	8005c0c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	60fa      	str	r2, [r7, #12]
 8005bee:	22ff      	movs	r2, #255	@ 0xff
 8005bf0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	60fa      	str	r2, [r7, #12]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	0a19      	lsrs	r1, r3, #8
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	60fa      	str	r2, [r7, #12]
 8005c08:	b2ca      	uxtb	r2, r1
 8005c0a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c10:	e00a      	b.n	8005c28 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	1c53      	adds	r3, r2, #1
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	60f9      	str	r1, [r7, #12]
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
    n++;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	3301      	adds	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d3f0      	bcc.n	8005c12 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005c30:	68fb      	ldr	r3, [r7, #12]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3304      	adds	r3, #4
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c5e:	4b35      	ldr	r3, [pc, #212]	@ (8005d34 <_HandleIncomingPacket+0xdc>)
 8005c60:	7e1b      	ldrb	r3, [r3, #24]
 8005c62:	4618      	mov	r0, r3
 8005c64:	1cfb      	adds	r3, r7, #3
 8005c66:	2201      	movs	r2, #1
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f7ff fdab 	bl	80057c4 <SEGGER_RTT_ReadNoLock>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd59      	ble.n	8005d2c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	2b80      	cmp	r3, #128	@ 0x80
 8005c7c:	d032      	beq.n	8005ce4 <_HandleIncomingPacket+0x8c>
 8005c7e:	2b80      	cmp	r3, #128	@ 0x80
 8005c80:	dc42      	bgt.n	8005d08 <_HandleIncomingPacket+0xb0>
 8005c82:	2b07      	cmp	r3, #7
 8005c84:	dc16      	bgt.n	8005cb4 <_HandleIncomingPacket+0x5c>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dd3e      	ble.n	8005d08 <_HandleIncomingPacket+0xb0>
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d83b      	bhi.n	8005d08 <_HandleIncomingPacket+0xb0>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <_HandleIncomingPacket+0x40>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cbb 	.word	0x08005cbb
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc7 	.word	0x08005cc7
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cb6:	d034      	beq.n	8005d22 <_HandleIncomingPacket+0xca>
 8005cb8:	e026      	b.n	8005d08 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005cba:	f000 ff43 	bl	8006b44 <SEGGER_SYSVIEW_Start>
      break;
 8005cbe:	e035      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005cc0:	f000 fffc 	bl	8006cbc <SEGGER_SYSVIEW_Stop>
      break;
 8005cc4:	e032      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005cc6:	f001 f9d5 	bl	8007074 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cca:	e02f      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ccc:	f001 f99a 	bl	8007004 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005cd0:	e02c      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005cd2:	f001 f819 	bl	8006d08 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005cd6:	e029      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005cd8:	f001 fc68 	bl	80075ac <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cdc:	e026      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cde:	f001 fc47 	bl	8007570 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005ce2:	e023      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ce4:	4b13      	ldr	r3, [pc, #76]	@ (8005d34 <_HandleIncomingPacket+0xdc>)
 8005ce6:	7e1b      	ldrb	r3, [r3, #24]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	1cfb      	adds	r3, r7, #3
 8005cec:	2201      	movs	r2, #1
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f7ff fd68 	bl	80057c4 <SEGGER_RTT_ReadNoLock>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dd13      	ble.n	8005d26 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 fbb5 	bl	8007470 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d06:	e00e      	b.n	8005d26 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	b25b      	sxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da0c      	bge.n	8005d2a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d10:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <_HandleIncomingPacket+0xdc>)
 8005d12:	7e1b      	ldrb	r3, [r3, #24]
 8005d14:	4618      	mov	r0, r3
 8005d16:	1cfb      	adds	r3, r7, #3
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f7ff fd52 	bl	80057c4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d20:	e003      	b.n	8005d2a <_HandleIncomingPacket+0xd2>
      break;
 8005d22:	bf00      	nop
 8005d24:	e002      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
      break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <_HandleIncomingPacket+0xd4>
      break;
 8005d2a:	bf00      	nop
    }
  }
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	200143a4 	.word	0x200143a4

08005d38 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	@ 0x30
 8005d3c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d3e:	2301      	movs	r3, #1
 8005d40:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	3301      	adds	r3, #1
 8005d46:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d4c:	4b32      	ldr	r3, [pc, #200]	@ (8005e18 <_TrySendOverflowPacket+0xe0>)
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d52:	e00b      	b.n	8005d6c <_TrySendOverflowPacket+0x34>
 8005d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d68:	09db      	lsrs	r3, r3, #7
 8005d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d70:	d8f0      	bhi.n	8005d54 <_TrySendOverflowPacket+0x1c>
 8005d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d80:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d82:	4b26      	ldr	r3, [pc, #152]	@ (8005e1c <_TrySendOverflowPacket+0xe4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d88:	4b23      	ldr	r3, [pc, #140]	@ (8005e18 <_TrySendOverflowPacket+0xe0>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	623b      	str	r3, [r7, #32]
 8005d9a:	e00b      	b.n	8005db4 <_TrySendOverflowPacket+0x7c>
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	1c59      	adds	r1, r3, #1
 8005da4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005da6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	09db      	lsrs	r3, r3, #7
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db8:	d8f0      	bhi.n	8005d9c <_TrySendOverflowPacket+0x64>
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005dca:	4b13      	ldr	r3, [pc, #76]	@ (8005e18 <_TrySendOverflowPacket+0xe0>)
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	1d3b      	adds	r3, r7, #4
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	1d3b      	adds	r3, r7, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f7fa f9f8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005de0:	4603      	mov	r3, r0
 8005de2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005de4:	f7ff fabe 	bl	8005364 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005dee:	4a0a      	ldr	r2, [pc, #40]	@ (8005e18 <_TrySendOverflowPacket+0xe0>)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005df4:	4b08      	ldr	r3, [pc, #32]	@ (8005e18 <_TrySendOverflowPacket+0xe0>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <_TrySendOverflowPacket+0xe0>)
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	e004      	b.n	8005e0c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e02:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <_TrySendOverflowPacket+0xe0>)
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	3301      	adds	r3, #1
 8005e08:	4a03      	ldr	r2, [pc, #12]	@ (8005e18 <_TrySendOverflowPacket+0xe0>)
 8005e0a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e0c:	693b      	ldr	r3, [r7, #16]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3730      	adds	r7, #48	@ 0x30
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	200143a4 	.word	0x200143a4
 8005e1c:	e0001004 	.word	0xe0001004

08005e20 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	@ 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d010      	beq.n	8005e56 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e34:	4b6b      	ldr	r3, [pc, #428]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80a5 	beq.w	8005f88 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e3e:	4b69      	ldr	r3, [pc, #420]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d109      	bne.n	8005e5a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e46:	f7ff ff77 	bl	8005d38 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e4a:	4b66      	ldr	r3, [pc, #408]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	f040 809c 	bne.w	8005f8c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005e54:	e001      	b.n	8005e5a <_SendPacket+0x3a>
    goto Send;
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <_SendPacket+0x3c>
Send:
 8005e5a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b1f      	cmp	r3, #31
 8005e60:	d809      	bhi.n	8005e76 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e62:	4b60      	ldr	r3, [pc, #384]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005e64:	69da      	ldr	r2, [r3, #28]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 808d 	bne.w	8005f90 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b17      	cmp	r3, #23
 8005e7a:	d807      	bhi.n	8005e8c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e03d      	b.n	8005f08 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e98:	d912      	bls.n	8005ec0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	09da      	lsrs	r2, r3, #7
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	3a01      	subs	r2, #1
 8005eb2:	60fa      	str	r2, [r7, #12]
 8005eb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	e006      	b.n	8005ece <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ed2:	d912      	bls.n	8005efa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	09da      	lsrs	r2, r3, #7
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	3a01      	subs	r2, #1
 8005eec:	60fa      	str	r2, [r7, #12]
 8005eee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	e006      	b.n	8005f08 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f08:	4b37      	ldr	r3, [pc, #220]	@ (8005fe8 <_SendPacket+0x1c8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f0e:	4b35      	ldr	r3, [pc, #212]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	623b      	str	r3, [r7, #32]
 8005f20:	e00b      	b.n	8005f3a <_SendPacket+0x11a>
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	1c59      	adds	r1, r3, #1
 8005f2a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	09db      	lsrs	r3, r3, #7
 8005f38:	623b      	str	r3, [r7, #32]
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f3e:	d8f0      	bhi.n	8005f22 <_SendPacket+0x102>
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f50:	4b24      	ldr	r3, [pc, #144]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	4618      	mov	r0, r3
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	f7fa f936 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f64:	4603      	mov	r3, r0
 8005f66:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f68:	f7ff f9fc 	bl	8005364 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f72:	4a1c      	ldr	r2, [pc, #112]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	60d3      	str	r3, [r2, #12]
 8005f78:	e00b      	b.n	8005f92 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	4b18      	ldr	r3, [pc, #96]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e004      	b.n	8005f92 <_SendPacket+0x172>
    goto SendDone;
 8005f88:	bf00      	nop
 8005f8a:	e002      	b.n	8005f92 <_SendPacket+0x172>
      goto SendDone;
 8005f8c:	bf00      	nop
 8005f8e:	e000      	b.n	8005f92 <_SendPacket+0x172>
      goto SendDone;
 8005f90:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f92:	4b14      	ldr	r3, [pc, #80]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005f94:	7e1b      	ldrb	r3, [r3, #24]
 8005f96:	4619      	mov	r1, r3
 8005f98:	4a14      	ldr	r2, [pc, #80]	@ (8005fec <_SendPacket+0x1cc>)
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	440b      	add	r3, r1
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	336c      	adds	r3, #108	@ 0x6c
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005faa:	7e1b      	ldrb	r3, [r3, #24]
 8005fac:	4618      	mov	r0, r3
 8005fae:	490f      	ldr	r1, [pc, #60]	@ (8005fec <_SendPacket+0x1cc>)
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	4403      	add	r3, r0
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	440b      	add	r3, r1
 8005fba:	3370      	adds	r3, #112	@ 0x70
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d00b      	beq.n	8005fda <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005fc2:	4b08      	ldr	r3, [pc, #32]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005fc4:	789b      	ldrb	r3, [r3, #2]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d107      	bne.n	8005fda <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005fca:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005fd0:	f7ff fe42 	bl	8005c58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005fd4:	4b03      	ldr	r3, [pc, #12]	@ (8005fe4 <_SendPacket+0x1c4>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005fda:	bf00      	nop
 8005fdc:	3728      	adds	r7, #40	@ 0x28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200143a4 	.word	0x200143a4
 8005fe8:	e0001004 	.word	0xe0001004
 8005fec:	20012ee4 	.word	0x20012ee4

08005ff0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	@ 0x28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	3301      	adds	r3, #1
 8006006:	2b80      	cmp	r3, #128	@ 0x80
 8006008:	d80a      	bhi.n	8006020 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6051      	str	r1, [r2, #4]
 8006014:	78fa      	ldrb	r2, [r7, #3]
 8006016:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b80      	cmp	r3, #128	@ 0x80
 8006026:	d15a      	bne.n	80060de <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	623b      	str	r3, [r7, #32]
 8006048:	e00b      	b.n	8006062 <_StoreChar+0x72>
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	1c59      	adds	r1, r3, #1
 8006052:	6279      	str	r1, [r7, #36]	@ 0x24
 8006054:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	09db      	lsrs	r3, r3, #7
 8006060:	623b      	str	r3, [r7, #32]
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	2b7f      	cmp	r3, #127	@ 0x7f
 8006066:	d8f0      	bhi.n	800604a <_StoreChar+0x5a>
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	627a      	str	r2, [r7, #36]	@ 0x24
 800606e:	6a3a      	ldr	r2, [r7, #32]
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	2300      	movs	r3, #0
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	e00b      	b.n	800609a <_StoreChar+0xaa>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	1c59      	adds	r1, r3, #1
 800608a:	61f9      	str	r1, [r7, #28]
 800608c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	09db      	lsrs	r3, r3, #7
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b7f      	cmp	r3, #127	@ 0x7f
 800609e:	d8f0      	bhi.n	8006082 <_StoreChar+0x92>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	61fa      	str	r2, [r7, #28]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	221a      	movs	r2, #26
 80060b6:	6939      	ldr	r1, [r7, #16]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff feb1 	bl	8005e20 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fdbb 	bl	8005c3e <_PreparePacket>
 80060c8:	4602      	mov	r2, r0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
  }
}
 80060de:	bf00      	nop
 80060e0:	3728      	adds	r7, #40	@ 0x28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	@ 0x28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80060fa:	2301      	movs	r3, #1
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80060fe:	2301      	movs	r3, #1
 8006100:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006102:	e007      	b.n	8006114 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006104:	6a3a      	ldr	r2, [r7, #32]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	623b      	str	r3, [r7, #32]
    Width++;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	3301      	adds	r3, #1
 8006112:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d2f3      	bcs.n	8006104 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	429a      	cmp	r2, r3
 8006122:	d901      	bls.n	8006128 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d000      	beq.n	8006134 <_PrintUnsigned+0x4c>
 8006132:	e01f      	b.n	8006174 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01c      	beq.n	8006174 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800613a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <_PrintUnsigned+0x68>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d102      	bne.n	8006150 <_PrintUnsigned+0x68>
        c = '0';
 800614a:	2330      	movs	r3, #48	@ 0x30
 800614c:	76fb      	strb	r3, [r7, #27]
 800614e:	e001      	b.n	8006154 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006150:	2320      	movs	r3, #32
 8006152:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006154:	e007      	b.n	8006166 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	3b01      	subs	r3, #1
 800615a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800615c:	7efb      	ldrb	r3, [r7, #27]
 800615e:	4619      	mov	r1, r3
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff ff45 	bl	8005ff0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <_PrintUnsigned+0x8c>
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	429a      	cmp	r2, r3
 8006172:	d3f0      	bcc.n	8006156 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d903      	bls.n	8006182 <_PrintUnsigned+0x9a>
      NumDigits--;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	e009      	b.n	8006196 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d200      	bcs.n	8006196 <_PrintUnsigned+0xae>
        break;
 8006194:	e005      	b.n	80061a2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061a0:	e7e8      	b.n	8006174 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80061ba:	4a15      	ldr	r2, [pc, #84]	@ (8006210 <_PrintUnsigned+0x128>)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	4619      	mov	r1, r3
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff ff13 	bl	8005ff0 <_StoreChar>
    Digit /= Base;
 80061ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e3      	bne.n	80061a2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80061da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d011      	beq.n	8006208 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00e      	beq.n	8006208 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061ea:	e006      	b.n	80061fa <_PrintUnsigned+0x112>
        FieldWidth--;
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	3b01      	subs	r3, #1
 80061f0:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80061f2:	2120      	movs	r1, #32
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fefb 	bl	8005ff0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <_PrintUnsigned+0x120>
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	429a      	cmp	r2, r3
 8006206:	d3f1      	bcc.n	80061ec <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006208:	bf00      	nop
 800620a:	3728      	adds	r7, #40	@ 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	08007980 	.word	0x08007980

08006214 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	bfb8      	it	lt
 8006228:	425b      	neglt	r3, r3
 800622a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800622c:	2301      	movs	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006230:	e007      	b.n	8006242 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	fb92 f3f3 	sdiv	r3, r2, r3
 800623a:	613b      	str	r3, [r7, #16]
    Width++;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	3301      	adds	r3, #1
 8006240:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	daf3      	bge.n	8006232 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	429a      	cmp	r2, r3
 8006250:	d901      	bls.n	8006256 <_PrintInt+0x42>
    Width = NumDigits;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <_PrintInt+0x5e>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	db04      	blt.n	800626c <_PrintInt+0x58>
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <_PrintInt+0x5e>
    FieldWidth--;
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	3b01      	subs	r3, #1
 8006270:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <_PrintInt+0x6e>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d016      	beq.n	80062b0 <_PrintInt+0x9c>
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d111      	bne.n	80062b0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00e      	beq.n	80062b0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006292:	e006      	b.n	80062a2 <_PrintInt+0x8e>
        FieldWidth--;
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	3b01      	subs	r3, #1
 8006298:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800629a:	2120      	movs	r1, #32
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fea7 	bl	8005ff0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <_PrintInt+0x9c>
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d3f1      	bcc.n	8006294 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da07      	bge.n	80062c6 <_PrintInt+0xb2>
    v = -v;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	425b      	negs	r3, r3
 80062ba:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80062bc:	212d      	movs	r1, #45	@ 0x2d
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff fe96 	bl	8005ff0 <_StoreChar>
 80062c4:	e008      	b.n	80062d8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80062d0:	212b      	movs	r1, #43	@ 0x2b
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7ff fe8c 	bl	8005ff0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d019      	beq.n	8006316 <_PrintInt+0x102>
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d114      	bne.n	8006316 <_PrintInt+0x102>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d111      	bne.n	8006316 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062f8:	e006      	b.n	8006308 <_PrintInt+0xf4>
        FieldWidth--;
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006300:	2130      	movs	r1, #48	@ 0x30
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff fe74 	bl	8005ff0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <_PrintInt+0x102>
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	429a      	cmp	r2, r3
 8006314:	d3f1      	bcc.n	80062fa <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff fedf 	bl	80060e8 <_PrintUnsigned>
}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b098      	sub	sp, #96	@ 0x60
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006340:	f3ef 8311 	mrs	r3, BASEPRI
 8006344:	f04f 0120 	mov.w	r1, #32
 8006348:	f381 8811 	msr	BASEPRI, r1
 800634c:	633b      	str	r3, [r7, #48]	@ 0x30
 800634e:	48b7      	ldr	r0, [pc, #732]	@ (800662c <_VPrintTarget+0x2f8>)
 8006350:	f7ff fc75 	bl	8005c3e <_PreparePacket>
 8006354:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006356:	4bb5      	ldr	r3, [pc, #724]	@ (800662c <_VPrintTarget+0x2f8>)
 8006358:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800635a:	2300      	movs	r3, #0
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800635e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006360:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	3301      	adds	r3, #1
 8006366:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800637a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8183 	beq.w	800668a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006384:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006388:	2b25      	cmp	r3, #37	@ 0x25
 800638a:	f040 8170 	bne.w	800666e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800638e:	2300      	movs	r3, #0
 8006390:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006392:	2301      	movs	r3, #1
 8006394:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800639e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063a2:	3b23      	subs	r3, #35	@ 0x23
 80063a4:	2b0d      	cmp	r3, #13
 80063a6:	d83f      	bhi.n	8006428 <_VPrintTarget+0xf4>
 80063a8:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <_VPrintTarget+0x7c>)
 80063aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ae:	bf00      	nop
 80063b0:	08006419 	.word	0x08006419
 80063b4:	08006429 	.word	0x08006429
 80063b8:	08006429 	.word	0x08006429
 80063bc:	08006429 	.word	0x08006429
 80063c0:	08006429 	.word	0x08006429
 80063c4:	08006429 	.word	0x08006429
 80063c8:	08006429 	.word	0x08006429
 80063cc:	08006429 	.word	0x08006429
 80063d0:	08006409 	.word	0x08006409
 80063d4:	08006429 	.word	0x08006429
 80063d8:	080063e9 	.word	0x080063e9
 80063dc:	08006429 	.word	0x08006429
 80063e0:	08006429 	.word	0x08006429
 80063e4:	080063f9 	.word	0x080063f9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80063e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e01a      	b.n	800642e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80063f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063fa:	f043 0302 	orr.w	r3, r3, #2
 80063fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e012      	b.n	800642e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800640a:	f043 0304 	orr.w	r3, r3, #4
 800640e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	e00a      	b.n	800642e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800641a:	f043 0308 	orr.w	r3, r3, #8
 800641e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e002      	b.n	800642e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006428:	2300      	movs	r3, #0
 800642a:	653b      	str	r3, [r7, #80]	@ 0x50
 800642c:	bf00      	nop
        }
      } while (v);
 800642e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1b0      	bne.n	8006396 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006434:	2300      	movs	r3, #0
 8006436:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006440:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006444:	2b2f      	cmp	r3, #47	@ 0x2f
 8006446:	d912      	bls.n	800646e <_VPrintTarget+0x13a>
 8006448:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800644c:	2b39      	cmp	r3, #57	@ 0x39
 800644e:	d80e      	bhi.n	800646e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	461a      	mov	r2, r3
 8006462:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006466:	4413      	add	r3, r2
 8006468:	3b30      	subs	r3, #48	@ 0x30
 800646a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 800646c:	e7e4      	b.n	8006438 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800646e:	2300      	movs	r3, #0
 8006470:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800647a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800647e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006480:	d11d      	bne.n	80064be <_VPrintTarget+0x18a>
        sFormat++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006490:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006494:	2b2f      	cmp	r3, #47	@ 0x2f
 8006496:	d912      	bls.n	80064be <_VPrintTarget+0x18a>
 8006498:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800649c:	2b39      	cmp	r3, #57	@ 0x39
 800649e:	d80e      	bhi.n	80064be <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80064a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	461a      	mov	r2, r3
 80064b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064b6:	4413      	add	r3, r2
 80064b8:	3b30      	subs	r3, #48	@ 0x30
 80064ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80064bc:	e7e4      	b.n	8006488 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80064c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064ca:	2b6c      	cmp	r3, #108	@ 0x6c
 80064cc:	d003      	beq.n	80064d6 <_VPrintTarget+0x1a2>
 80064ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064d2:	2b68      	cmp	r3, #104	@ 0x68
 80064d4:	d107      	bne.n	80064e6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80064e4:	e7ef      	b.n	80064c6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80064e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064ea:	2b25      	cmp	r3, #37	@ 0x25
 80064ec:	f000 80b3 	beq.w	8006656 <_VPrintTarget+0x322>
 80064f0:	2b25      	cmp	r3, #37	@ 0x25
 80064f2:	f2c0 80b7 	blt.w	8006664 <_VPrintTarget+0x330>
 80064f6:	2b78      	cmp	r3, #120	@ 0x78
 80064f8:	f300 80b4 	bgt.w	8006664 <_VPrintTarget+0x330>
 80064fc:	2b58      	cmp	r3, #88	@ 0x58
 80064fe:	f2c0 80b1 	blt.w	8006664 <_VPrintTarget+0x330>
 8006502:	3b58      	subs	r3, #88	@ 0x58
 8006504:	2b20      	cmp	r3, #32
 8006506:	f200 80ad 	bhi.w	8006664 <_VPrintTarget+0x330>
 800650a:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <_VPrintTarget+0x1dc>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006607 	.word	0x08006607
 8006514:	08006665 	.word	0x08006665
 8006518:	08006665 	.word	0x08006665
 800651c:	08006665 	.word	0x08006665
 8006520:	08006665 	.word	0x08006665
 8006524:	08006665 	.word	0x08006665
 8006528:	08006665 	.word	0x08006665
 800652c:	08006665 	.word	0x08006665
 8006530:	08006665 	.word	0x08006665
 8006534:	08006665 	.word	0x08006665
 8006538:	08006665 	.word	0x08006665
 800653c:	08006595 	.word	0x08006595
 8006540:	080065bb 	.word	0x080065bb
 8006544:	08006665 	.word	0x08006665
 8006548:	08006665 	.word	0x08006665
 800654c:	08006665 	.word	0x08006665
 8006550:	08006665 	.word	0x08006665
 8006554:	08006665 	.word	0x08006665
 8006558:	08006665 	.word	0x08006665
 800655c:	08006665 	.word	0x08006665
 8006560:	08006665 	.word	0x08006665
 8006564:	08006665 	.word	0x08006665
 8006568:	08006665 	.word	0x08006665
 800656c:	08006665 	.word	0x08006665
 8006570:	08006631 	.word	0x08006631
 8006574:	08006665 	.word	0x08006665
 8006578:	08006665 	.word	0x08006665
 800657c:	08006665 	.word	0x08006665
 8006580:	08006665 	.word	0x08006665
 8006584:	080065e1 	.word	0x080065e1
 8006588:	08006665 	.word	0x08006665
 800658c:	08006665 	.word	0x08006665
 8006590:	08006607 	.word	0x08006607
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	1d19      	adds	r1, r3, #4
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6011      	str	r1, [r2, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80065a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 80065a8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80065ac:	f107 0314 	add.w	r3, r7, #20
 80065b0:	4611      	mov	r1, r2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff fd1c 	bl	8005ff0 <_StoreChar>
        break;
 80065b8:	e055      	b.n	8006666 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	1d19      	adds	r1, r3, #4
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6011      	str	r1, [r2, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065c8:	f107 0014 	add.w	r0, r7, #20
 80065cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d6:	220a      	movs	r2, #10
 80065d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065da:	f7ff fe1b 	bl	8006214 <_PrintInt>
        break;
 80065de:	e042      	b.n	8006666 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	1d19      	adds	r1, r3, #4
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6011      	str	r1, [r2, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065f0:	f107 0014 	add.w	r0, r7, #20
 80065f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065fe:	220a      	movs	r2, #10
 8006600:	f7ff fd72 	bl	80060e8 <_PrintUnsigned>
        break;
 8006604:	e02f      	b.n	8006666 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	1d19      	adds	r1, r3, #4
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6011      	str	r1, [r2, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006614:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006616:	f107 0014 	add.w	r0, r7, #20
 800661a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006624:	2210      	movs	r2, #16
 8006626:	f7ff fd5f 	bl	80060e8 <_PrintUnsigned>
        break;
 800662a:	e01c      	b.n	8006666 <_VPrintTarget+0x332>
 800662c:	200143d4 	.word	0x200143d4
      case 'p':
        v = va_arg(*pParamList, int);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	1d19      	adds	r1, r3, #4
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6011      	str	r1, [r2, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800663e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006640:	f107 0014 	add.w	r0, r7, #20
 8006644:	2300      	movs	r3, #0
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	2308      	movs	r3, #8
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	2308      	movs	r3, #8
 800664e:	2210      	movs	r2, #16
 8006650:	f7ff fd4a 	bl	80060e8 <_PrintUnsigned>
        break;
 8006654:	e007      	b.n	8006666 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006656:	f107 0314 	add.w	r3, r7, #20
 800665a:	2125      	movs	r1, #37	@ 0x25
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fcc7 	bl	8005ff0 <_StoreChar>
        break;
 8006662:	e000      	b.n	8006666 <_VPrintTarget+0x332>
      default:
        break;
 8006664:	bf00      	nop
      }
      sFormat++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e007      	b.n	800667e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800666e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006672:	f107 0314 	add.w	r3, r7, #20
 8006676:	4611      	mov	r1, r2
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff fcb9 	bl	8005ff0 <_StoreChar>
    }
  } while (*sFormat);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f47f ae72 	bne.w	800636c <_VPrintTarget+0x38>
 8006688:	e000      	b.n	800668c <_VPrintTarget+0x358>
      break;
 800668a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d041      	beq.n	8006716 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	643b      	str	r3, [r7, #64]	@ 0x40
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a2:	e00b      	b.n	80066bc <_VPrintTarget+0x388>
 80066a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	6439      	str	r1, [r7, #64]	@ 0x40
 80066ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b8:	09db      	lsrs	r3, r3, #7
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066be:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c0:	d8f0      	bhi.n	80066a4 <_VPrintTarget+0x370>
 80066c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80066c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066d6:	2300      	movs	r3, #0
 80066d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066da:	e00b      	b.n	80066f4 <_VPrintTarget+0x3c0>
 80066dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e2:	1c59      	adds	r1, r3, #1
 80066e4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f0:	09db      	lsrs	r3, r3, #7
 80066f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80066f8:	d8f0      	bhi.n	80066dc <_VPrintTarget+0x3a8>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006700:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	69b9      	ldr	r1, [r7, #24]
 800670e:	221a      	movs	r2, #26
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fb85 	bl	8005e20 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800671c:	bf00      	nop
 800671e:	3758      	adds	r7, #88	@ 0x58
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006732:	2300      	movs	r3, #0
 8006734:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006738:	4917      	ldr	r1, [pc, #92]	@ (8006798 <SEGGER_SYSVIEW_Init+0x74>)
 800673a:	4818      	ldr	r0, [pc, #96]	@ (800679c <SEGGER_SYSVIEW_Init+0x78>)
 800673c:	f7ff f93e 	bl	80059bc <SEGGER_RTT_AllocUpBuffer>
 8006740:	4603      	mov	r3, r0
 8006742:	b2da      	uxtb	r2, r3
 8006744:	4b16      	ldr	r3, [pc, #88]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006746:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006748:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800674a:	785a      	ldrb	r2, [r3, #1]
 800674c:	4b14      	ldr	r3, [pc, #80]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800674e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006750:	4b13      	ldr	r3, [pc, #76]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006752:	7e1b      	ldrb	r3, [r3, #24]
 8006754:	4618      	mov	r0, r3
 8006756:	2300      	movs	r3, #0
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2308      	movs	r3, #8
 800675c:	4a11      	ldr	r2, [pc, #68]	@ (80067a4 <SEGGER_SYSVIEW_Init+0x80>)
 800675e:	490f      	ldr	r1, [pc, #60]	@ (800679c <SEGGER_SYSVIEW_Init+0x78>)
 8006760:	f7ff f9b0 	bl	8005ac4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006764:	4b0e      	ldr	r3, [pc, #56]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006766:	2200      	movs	r2, #0
 8006768:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800676a:	4b0f      	ldr	r3, [pc, #60]	@ (80067a8 <SEGGER_SYSVIEW_Init+0x84>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a0c      	ldr	r2, [pc, #48]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006770:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006772:	4a0b      	ldr	r2, [pc, #44]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006778:	4a09      	ldr	r2, [pc, #36]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800677e:	4a08      	ldr	r2, [pc, #32]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006784:	4a06      	ldr	r2, [pc, #24]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800678a:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	2001339c 	.word	0x2001339c
 800679c:	08007948 	.word	0x08007948
 80067a0:	200143a4 	.word	0x200143a4
 80067a4:	2001439c 	.word	0x2001439c
 80067a8:	e0001004 	.word	0xe0001004

080067ac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80067b4:	4a04      	ldr	r2, [pc, #16]	@ (80067c8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6113      	str	r3, [r2, #16]
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	200143a4 	.word	0x200143a4

080067cc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067d4:	f3ef 8311 	mrs	r3, BASEPRI
 80067d8:	f04f 0120 	mov.w	r1, #32
 80067dc:	f381 8811 	msr	BASEPRI, r1
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	4808      	ldr	r0, [pc, #32]	@ (8006804 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80067e4:	f7ff fa2b 	bl	8005c3e <_PreparePacket>
 80067e8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68b8      	ldr	r0, [r7, #8]
 80067f0:	f7ff fb16 	bl	8005e20 <_SendPacket>
  RECORD_END();
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f383 8811 	msr	BASEPRI, r3
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	200143d4 	.word	0x200143d4

08006808 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006812:	f3ef 8311 	mrs	r3, BASEPRI
 8006816:	f04f 0120 	mov.w	r1, #32
 800681a:	f381 8811 	msr	BASEPRI, r1
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	4816      	ldr	r0, [pc, #88]	@ (800687c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006822:	f7ff fa0c 	bl	8005c3e <_PreparePacket>
 8006826:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	e00b      	b.n	800684e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	1c59      	adds	r1, r3, #1
 800683e:	61f9      	str	r1, [r7, #28]
 8006840:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	09db      	lsrs	r3, r3, #7
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b7f      	cmp	r3, #127	@ 0x7f
 8006852:	d8f0      	bhi.n	8006836 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	61fa      	str	r2, [r7, #28]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	6938      	ldr	r0, [r7, #16]
 800686a:	f7ff fad9 	bl	8005e20 <_SendPacket>
  RECORD_END();
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f383 8811 	msr	BASEPRI, r3
}
 8006874:	bf00      	nop
 8006876:	3720      	adds	r7, #32
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200143d4 	.word	0x200143d4

08006880 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b08c      	sub	sp, #48	@ 0x30
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800688c:	f3ef 8311 	mrs	r3, BASEPRI
 8006890:	f04f 0120 	mov.w	r1, #32
 8006894:	f381 8811 	msr	BASEPRI, r1
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	4825      	ldr	r0, [pc, #148]	@ (8006930 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800689c:	f7ff f9cf 	bl	8005c3e <_PreparePacket>
 80068a0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068ae:	e00b      	b.n	80068c8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80068b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b6:	1c59      	adds	r1, r3, #1
 80068b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	09db      	lsrs	r3, r3, #7
 80068c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80068cc:	d8f0      	bhi.n	80068b0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80068ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	e00b      	b.n	8006900 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	1c59      	adds	r1, r3, #1
 80068f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80068f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	09db      	lsrs	r3, r3, #7
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b7f      	cmp	r3, #127	@ 0x7f
 8006904:	d8f0      	bhi.n	80068e8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	627a      	str	r2, [r7, #36]	@ 0x24
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	6979      	ldr	r1, [r7, #20]
 800691a:	69b8      	ldr	r0, [r7, #24]
 800691c:	f7ff fa80 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f383 8811 	msr	BASEPRI, r3
}
 8006926:	bf00      	nop
 8006928:	3730      	adds	r7, #48	@ 0x30
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	200143d4 	.word	0x200143d4

08006934 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b08e      	sub	sp, #56	@ 0x38
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006942:	f3ef 8311 	mrs	r3, BASEPRI
 8006946:	f04f 0120 	mov.w	r1, #32
 800694a:	f381 8811 	msr	BASEPRI, r1
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	4832      	ldr	r0, [pc, #200]	@ (8006a1c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006952:	f7ff f974 	bl	8005c3e <_PreparePacket>
 8006956:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	633b      	str	r3, [r7, #48]	@ 0x30
 8006964:	e00b      	b.n	800697e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	b2da      	uxtb	r2, r3
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	1c59      	adds	r1, r3, #1
 800696e:	6379      	str	r1, [r7, #52]	@ 0x34
 8006970:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	09db      	lsrs	r3, r3, #7
 800697c:	633b      	str	r3, [r7, #48]	@ 0x30
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	2b7f      	cmp	r3, #127	@ 0x7f
 8006982:	d8f0      	bhi.n	8006966 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	637a      	str	r2, [r7, #52]	@ 0x34
 800698a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006992:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800699c:	e00b      	b.n	80069b6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800699e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a4:	1c59      	adds	r1, r3, #1
 80069a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80069a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	09db      	lsrs	r3, r3, #7
 80069b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80069ba:	d8f0      	bhi.n	800699e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	623b      	str	r3, [r7, #32]
 80069d4:	e00b      	b.n	80069ee <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	1c59      	adds	r1, r3, #1
 80069de:	6279      	str	r1, [r7, #36]	@ 0x24
 80069e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	09db      	lsrs	r3, r3, #7
 80069ec:	623b      	str	r3, [r7, #32]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80069f2:	d8f0      	bhi.n	80069d6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80069fa:	6a3a      	ldr	r2, [r7, #32]
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	6979      	ldr	r1, [r7, #20]
 8006a08:	69b8      	ldr	r0, [r7, #24]
 8006a0a:	f7ff fa09 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f383 8811 	msr	BASEPRI, r3
}
 8006a14:	bf00      	nop
 8006a16:	3738      	adds	r7, #56	@ 0x38
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200143d4 	.word	0x200143d4

08006a20 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b090      	sub	sp, #64	@ 0x40
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a32:	f04f 0120 	mov.w	r1, #32
 8006a36:	f381 8811 	msr	BASEPRI, r1
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	4840      	ldr	r0, [pc, #256]	@ (8006b40 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006a3e:	f7ff f8fe 	bl	8005c3e <_PreparePacket>
 8006a42:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a50:	e00b      	b.n	8006a6a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a58:	1c59      	adds	r1, r3, #1
 8006a5a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	09db      	lsrs	r3, r3, #7
 8006a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a6e:	d8f0      	bhi.n	8006a52 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a88:	e00b      	b.n	8006aa2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a90:	1c59      	adds	r1, r3, #1
 8006a92:	6379      	str	r1, [r7, #52]	@ 0x34
 8006a94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	09db      	lsrs	r3, r3, #7
 8006aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa6:	d8f0      	bhi.n	8006a8a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	637a      	str	r2, [r7, #52]	@ 0x34
 8006aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ac0:	e00b      	b.n	8006ada <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac8:	1c59      	adds	r1, r3, #1
 8006aca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006acc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad6:	09db      	lsrs	r3, r3, #7
 8006ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ade:	d8f0      	bhi.n	8006ac2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	e00b      	b.n	8006b12 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	1c59      	adds	r1, r3, #1
 8006b02:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	09db      	lsrs	r3, r3, #7
 8006b10:	623b      	str	r3, [r7, #32]
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b16:	d8f0      	bhi.n	8006afa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	6979      	ldr	r1, [r7, #20]
 8006b2c:	69b8      	ldr	r0, [r7, #24]
 8006b2e:	f7ff f977 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	f383 8811 	msr	BASEPRI, r3
}
 8006b38:	bf00      	nop
 8006b3a:	3740      	adds	r7, #64	@ 0x40
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	200143d4 	.word	0x200143d4

08006b44 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08c      	sub	sp, #48	@ 0x30
 8006b48:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006b4a:	4b59      	ldr	r3, [pc, #356]	@ (8006cb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006b50:	f3ef 8311 	mrs	r3, BASEPRI
 8006b54:	f04f 0120 	mov.w	r1, #32
 8006b58:	f381 8811 	msr	BASEPRI, r1
 8006b5c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006b5e:	4b54      	ldr	r3, [pc, #336]	@ (8006cb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	220a      	movs	r2, #10
 8006b64:	4953      	ldr	r1, [pc, #332]	@ (8006cb4 <SEGGER_SYSVIEW_Start+0x170>)
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7f9 fb32 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006b72:	f7fe fbf7 	bl	8005364 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006b76:	200a      	movs	r0, #10
 8006b78:	f7ff fe28 	bl	80067cc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b80:	f04f 0120 	mov.w	r1, #32
 8006b84:	f381 8811 	msr	BASEPRI, r1
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	484b      	ldr	r0, [pc, #300]	@ (8006cb8 <SEGGER_SYSVIEW_Start+0x174>)
 8006b8c:	f7ff f857 	bl	8005c3e <_PreparePacket>
 8006b90:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b9a:	4b45      	ldr	r3, [pc, #276]	@ (8006cb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ba0:	e00b      	b.n	8006bba <SEGGER_SYSVIEW_Start+0x76>
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	1c59      	adds	r1, r3, #1
 8006baa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006bac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	09db      	lsrs	r3, r3, #7
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bbe:	d8f0      	bhi.n	8006ba2 <SEGGER_SYSVIEW_Start+0x5e>
 8006bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bd4:	4b36      	ldr	r3, [pc, #216]	@ (8006cb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	623b      	str	r3, [r7, #32]
 8006bda:	e00b      	b.n	8006bf4 <SEGGER_SYSVIEW_Start+0xb0>
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	1c59      	adds	r1, r3, #1
 8006be4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006be6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	09db      	lsrs	r3, r3, #7
 8006bf2:	623b      	str	r3, [r7, #32]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bf8:	d8f0      	bhi.n	8006bdc <SEGGER_SYSVIEW_Start+0x98>
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	4b28      	ldr	r3, [pc, #160]	@ (8006cb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	e00b      	b.n	8006c2e <SEGGER_SYSVIEW_Start+0xea>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	1c59      	adds	r1, r3, #1
 8006c1e:	61f9      	str	r1, [r7, #28]
 8006c20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	09db      	lsrs	r3, r3, #7
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c32:	d8f0      	bhi.n	8006c16 <SEGGER_SYSVIEW_Start+0xd2>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	61fa      	str	r2, [r7, #28]
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	e00b      	b.n	8006c66 <SEGGER_SYSVIEW_Start+0x122>
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	6179      	str	r1, [r7, #20]
 8006c58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c6a:	d8f0      	bhi.n	8006c4e <SEGGER_SYSVIEW_Start+0x10a>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	617a      	str	r2, [r7, #20]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c7c:	2218      	movs	r2, #24
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff f8cd 	bl	8005e20 <_SendPacket>
      RECORD_END();
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c8c:	4b08      	ldr	r3, [pc, #32]	@ (8006cb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006c94:	4b06      	ldr	r3, [pc, #24]	@ (8006cb0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c98:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006c9a:	f000 f9eb 	bl	8007074 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006c9e:	f000 f9b1 	bl	8007004 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006ca2:	f000 fc83 	bl	80075ac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006ca6:	bf00      	nop
 8006ca8:	3730      	adds	r7, #48	@ 0x30
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	200143a4 	.word	0x200143a4
 8006cb4:	08007974 	.word	0x08007974
 8006cb8:	200143d4 	.word	0x200143d4

08006cbc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc6:	f04f 0120 	mov.w	r1, #32
 8006cca:	f381 8811 	msr	BASEPRI, r1
 8006cce:	607b      	str	r3, [r7, #4]
 8006cd0:	480b      	ldr	r0, [pc, #44]	@ (8006d00 <SEGGER_SYSVIEW_Stop+0x44>)
 8006cd2:	f7fe ffb4 	bl	8005c3e <_PreparePacket>
 8006cd6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d04 <SEGGER_SYSVIEW_Stop+0x48>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ce0:	220b      	movs	r2, #11
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6838      	ldr	r0, [r7, #0]
 8006ce6:	f7ff f89b 	bl	8005e20 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006cea:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <SEGGER_SYSVIEW_Stop+0x48>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f383 8811 	msr	BASEPRI, r3
}
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200143d4 	.word	0x200143d4
 8006d04:	200143a4 	.word	0x200143a4

08006d08 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08c      	sub	sp, #48	@ 0x30
 8006d0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d12:	f04f 0120 	mov.w	r1, #32
 8006d16:	f381 8811 	msr	BASEPRI, r1
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	4845      	ldr	r0, [pc, #276]	@ (8006e34 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006d1e:	f7fe ff8e 	bl	8005c3e <_PreparePacket>
 8006d22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d2c:	4b42      	ldr	r3, [pc, #264]	@ (8006e38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d32:	e00b      	b.n	8006d4c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	1c59      	adds	r1, r3, #1
 8006d3c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	09db      	lsrs	r3, r3, #7
 8006d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d50:	d8f0      	bhi.n	8006d34 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d66:	4b34      	ldr	r3, [pc, #208]	@ (8006e38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	623b      	str	r3, [r7, #32]
 8006d6c:	e00b      	b.n	8006d86 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	1c59      	adds	r1, r3, #1
 8006d76:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	09db      	lsrs	r3, r3, #7
 8006d84:	623b      	str	r3, [r7, #32]
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d8a:	d8f0      	bhi.n	8006d6e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	4b25      	ldr	r3, [pc, #148]	@ (8006e38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	e00b      	b.n	8006dc0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	1c59      	adds	r1, r3, #1
 8006db0:	61f9      	str	r1, [r7, #28]
 8006db2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	09db      	lsrs	r3, r3, #7
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dc4:	d8f0      	bhi.n	8006da8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	61fa      	str	r2, [r7, #28]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	e00b      	b.n	8006df8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	1c59      	adds	r1, r3, #1
 8006de8:	6179      	str	r1, [r7, #20]
 8006dea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	09db      	lsrs	r3, r3, #7
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dfc:	d8f0      	bhi.n	8006de0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	617a      	str	r2, [r7, #20]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006e0e:	2218      	movs	r2, #24
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	68b8      	ldr	r0, [r7, #8]
 8006e14:	f7ff f804 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006e1e:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006e26:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	4798      	blx	r3
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	3730      	adds	r7, #48	@ 0x30
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	200143d4 	.word	0x200143d4
 8006e38:	200143a4 	.word	0x200143a4

08006e3c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b092      	sub	sp, #72	@ 0x48
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006e44:	f3ef 8311 	mrs	r3, BASEPRI
 8006e48:	f04f 0120 	mov.w	r1, #32
 8006e4c:	f381 8811 	msr	BASEPRI, r1
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	486a      	ldr	r0, [pc, #424]	@ (8006ffc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006e54:	f7fe fef3 	bl	8005c3e <_PreparePacket>
 8006e58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b66      	ldr	r3, [pc, #408]	@ (8007000 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e6e:	e00b      	b.n	8006e88 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e76:	1c59      	adds	r1, r3, #1
 8006e78:	6479      	str	r1, [r7, #68]	@ 0x44
 8006e7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e84:	09db      	lsrs	r3, r3, #7
 8006e86:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e8c:	d8f0      	bhi.n	8006e70 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ea8:	e00b      	b.n	8006ec2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eb0:	1c59      	adds	r1, r3, #1
 8006eb2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006eb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	09db      	lsrs	r3, r3, #7
 8006ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec6:	d8f0      	bhi.n	8006eaa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ece:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7fe fe5f 	bl	8005ba4 <_EncodeStr>
 8006ee6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006ee8:	2209      	movs	r2, #9
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	6938      	ldr	r0, [r7, #16]
 8006eee:	f7fe ff97 	bl	8005e20 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b40      	ldr	r3, [pc, #256]	@ (8007000 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f06:	e00b      	b.n	8006f20 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0e:	1c59      	adds	r1, r3, #1
 8006f10:	6379      	str	r1, [r7, #52]	@ 0x34
 8006f12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	09db      	lsrs	r3, r3, #7
 8006f1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f24:	d8f0      	bhi.n	8006f08 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	637a      	str	r2, [r7, #52]	@ 0x34
 8006f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f40:	e00b      	b.n	8006f5a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f48:	1c59      	adds	r1, r3, #1
 8006f4a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	09db      	lsrs	r3, r3, #7
 8006f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f5e:	d8f0      	bhi.n	8006f42 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	701a      	strb	r2, [r3, #0]
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	623b      	str	r3, [r7, #32]
 8006f7a:	e00b      	b.n	8006f94 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	1c59      	adds	r1, r3, #1
 8006f84:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	09db      	lsrs	r3, r3, #7
 8006f92:	623b      	str	r3, [r7, #32]
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f98:	d8f0      	bhi.n	8006f7c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fa0:	6a3a      	ldr	r2, [r7, #32]
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	e00b      	b.n	8006fcc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	1c59      	adds	r1, r3, #1
 8006fbc:	61f9      	str	r1, [r7, #28]
 8006fbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	09db      	lsrs	r3, r3, #7
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fd0:	d8f0      	bhi.n	8006fb4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	61fa      	str	r2, [r7, #28]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006fe2:	2215      	movs	r2, #21
 8006fe4:	68f9      	ldr	r1, [r7, #12]
 8006fe6:	6938      	ldr	r0, [r7, #16]
 8006fe8:	f7fe ff1a 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f383 8811 	msr	BASEPRI, r3
}
 8006ff2:	bf00      	nop
 8006ff4:	3748      	adds	r7, #72	@ 0x48
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200143d4 	.word	0x200143d4
 8007000:	200143a4 	.word	0x200143a4

08007004 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007008:	4b07      	ldr	r3, [pc, #28]	@ (8007028 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007010:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800701a:	4b03      	ldr	r3, [pc, #12]	@ (8007028 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	4798      	blx	r3
  }
}
 8007022:	bf00      	nop
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	200143a4 	.word	0x200143a4

0800702c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007034:	f3ef 8311 	mrs	r3, BASEPRI
 8007038:	f04f 0120 	mov.w	r1, #32
 800703c:	f381 8811 	msr	BASEPRI, r1
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	480b      	ldr	r0, [pc, #44]	@ (8007070 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007044:	f7fe fdfb 	bl	8005c3e <_PreparePacket>
 8007048:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800704a:	2280      	movs	r2, #128	@ 0x80
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	6938      	ldr	r0, [r7, #16]
 8007050:	f7fe fda8 	bl	8005ba4 <_EncodeStr>
 8007054:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007056:	220e      	movs	r2, #14
 8007058:	68f9      	ldr	r1, [r7, #12]
 800705a:	6938      	ldr	r0, [r7, #16]
 800705c:	f7fe fee0 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f383 8811 	msr	BASEPRI, r3
}
 8007066:	bf00      	nop
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200143d4 	.word	0x200143d4

08007074 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800707a:	4b15      	ldr	r3, [pc, #84]	@ (80070d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01a      	beq.n	80070b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007082:	4b13      	ldr	r3, [pc, #76]	@ (80070d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d015      	beq.n	80070b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800708c:	4b10      	ldr	r3, [pc, #64]	@ (80070d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4798      	blx	r3
 8007094:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007098:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800709a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	000a      	movs	r2, r1
 80070a8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80070aa:	4613      	mov	r3, r2
 80070ac:	461a      	mov	r2, r3
 80070ae:	4621      	mov	r1, r4
 80070b0:	200d      	movs	r0, #13
 80070b2:	f7ff fbe5 	bl	8006880 <SEGGER_SYSVIEW_RecordU32x2>
 80070b6:	e006      	b.n	80070c6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80070b8:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4619      	mov	r1, r3
 80070be:	200c      	movs	r0, #12
 80070c0:	f7ff fba2 	bl	8006808 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd90      	pop	{r4, r7, pc}
 80070ce:	bf00      	nop
 80070d0:	200143a4 	.word	0x200143a4
 80070d4:	e0001004 	.word	0xe0001004

080070d8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070de:	f3ef 8311 	mrs	r3, BASEPRI
 80070e2:	f04f 0120 	mov.w	r1, #32
 80070e6:	f381 8811 	msr	BASEPRI, r1
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	4819      	ldr	r0, [pc, #100]	@ (8007154 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80070ee:	f7fe fda6 	bl	8005c3e <_PreparePacket>
 80070f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80070f8:	4b17      	ldr	r3, [pc, #92]	@ (8007158 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007100:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	e00b      	b.n	8007124 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	b2da      	uxtb	r2, r3
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	6179      	str	r1, [r7, #20]
 8007116:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	09db      	lsrs	r3, r3, #7
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b7f      	cmp	r3, #127	@ 0x7f
 8007128:	d8f0      	bhi.n	800710c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	617a      	str	r2, [r7, #20]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800713a:	2202      	movs	r2, #2
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	68b8      	ldr	r0, [r7, #8]
 8007140:	f7fe fe6e 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f383 8811 	msr	BASEPRI, r3
}
 800714a:	bf00      	nop
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	200143d4 	.word	0x200143d4
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007162:	f3ef 8311 	mrs	r3, BASEPRI
 8007166:	f04f 0120 	mov.w	r1, #32
 800716a:	f381 8811 	msr	BASEPRI, r1
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	4807      	ldr	r0, [pc, #28]	@ (8007190 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007172:	f7fe fd64 	bl	8005c3e <_PreparePacket>
 8007176:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007178:	2203      	movs	r2, #3
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6838      	ldr	r0, [r7, #0]
 800717e:	f7fe fe4f 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f383 8811 	msr	BASEPRI, r3
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	200143d4 	.word	0x200143d4

08007194 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800719a:	f3ef 8311 	mrs	r3, BASEPRI
 800719e:	f04f 0120 	mov.w	r1, #32
 80071a2:	f381 8811 	msr	BASEPRI, r1
 80071a6:	607b      	str	r3, [r7, #4]
 80071a8:	4807      	ldr	r0, [pc, #28]	@ (80071c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80071aa:	f7fe fd48 	bl	8005c3e <_PreparePacket>
 80071ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80071b0:	2212      	movs	r2, #18
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6838      	ldr	r0, [r7, #0]
 80071b6:	f7fe fe33 	bl	8005e20 <_SendPacket>
  RECORD_END();
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f383 8811 	msr	BASEPRI, r3
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	200143d4 	.word	0x200143d4

080071cc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071d2:	f3ef 8311 	mrs	r3, BASEPRI
 80071d6:	f04f 0120 	mov.w	r1, #32
 80071da:	f381 8811 	msr	BASEPRI, r1
 80071de:	607b      	str	r3, [r7, #4]
 80071e0:	4807      	ldr	r0, [pc, #28]	@ (8007200 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80071e2:	f7fe fd2c 	bl	8005c3e <_PreparePacket>
 80071e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80071e8:	2211      	movs	r2, #17
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6838      	ldr	r0, [r7, #0]
 80071ee:	f7fe fe17 	bl	8005e20 <_SendPacket>
  RECORD_END();
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f383 8811 	msr	BASEPRI, r3
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	200143d4 	.word	0x200143d4

08007204 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800720c:	f3ef 8311 	mrs	r3, BASEPRI
 8007210:	f04f 0120 	mov.w	r1, #32
 8007214:	f381 8811 	msr	BASEPRI, r1
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	4819      	ldr	r0, [pc, #100]	@ (8007280 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800721c:	f7fe fd0f 	bl	8005c3e <_PreparePacket>
 8007220:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007226:	4b17      	ldr	r3, [pc, #92]	@ (8007284 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	61bb      	str	r3, [r7, #24]
 8007238:	e00b      	b.n	8007252 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	1c59      	adds	r1, r3, #1
 8007242:	61f9      	str	r1, [r7, #28]
 8007244:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	09db      	lsrs	r3, r3, #7
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	2b7f      	cmp	r3, #127	@ 0x7f
 8007256:	d8f0      	bhi.n	800723a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	61fa      	str	r2, [r7, #28]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007268:	2208      	movs	r2, #8
 800726a:	68f9      	ldr	r1, [r7, #12]
 800726c:	6938      	ldr	r0, [r7, #16]
 800726e:	f7fe fdd7 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f383 8811 	msr	BASEPRI, r3
}
 8007278:	bf00      	nop
 800727a:	3720      	adds	r7, #32
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200143d4 	.word	0x200143d4
 8007284:	200143a4 	.word	0x200143a4

08007288 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007290:	f3ef 8311 	mrs	r3, BASEPRI
 8007294:	f04f 0120 	mov.w	r1, #32
 8007298:	f381 8811 	msr	BASEPRI, r1
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	4819      	ldr	r0, [pc, #100]	@ (8007304 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80072a0:	f7fe fccd 	bl	8005c3e <_PreparePacket>
 80072a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072aa:	4b17      	ldr	r3, [pc, #92]	@ (8007308 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	e00b      	b.n	80072d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	1c59      	adds	r1, r3, #1
 80072c6:	61f9      	str	r1, [r7, #28]
 80072c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	09db      	lsrs	r3, r3, #7
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80072da:	d8f0      	bhi.n	80072be <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	61fa      	str	r2, [r7, #28]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80072ec:	2204      	movs	r2, #4
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	6938      	ldr	r0, [r7, #16]
 80072f2:	f7fe fd95 	bl	8005e20 <_SendPacket>
  RECORD_END();
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f383 8811 	msr	BASEPRI, r3
}
 80072fc:	bf00      	nop
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	200143d4 	.word	0x200143d4
 8007308:	200143a4 	.word	0x200143a4

0800730c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007314:	f3ef 8311 	mrs	r3, BASEPRI
 8007318:	f04f 0120 	mov.w	r1, #32
 800731c:	f381 8811 	msr	BASEPRI, r1
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	4819      	ldr	r0, [pc, #100]	@ (8007388 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007324:	f7fe fc8b 	bl	8005c3e <_PreparePacket>
 8007328:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800732e:	4b17      	ldr	r3, [pc, #92]	@ (800738c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	61bb      	str	r3, [r7, #24]
 8007340:	e00b      	b.n	800735a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	1c59      	adds	r1, r3, #1
 800734a:	61f9      	str	r1, [r7, #28]
 800734c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	09db      	lsrs	r3, r3, #7
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b7f      	cmp	r3, #127	@ 0x7f
 800735e:	d8f0      	bhi.n	8007342 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	61fa      	str	r2, [r7, #28]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007370:	2206      	movs	r2, #6
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	6938      	ldr	r0, [r7, #16]
 8007376:	f7fe fd53 	bl	8005e20 <_SendPacket>
  RECORD_END();
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f383 8811 	msr	BASEPRI, r3
}
 8007380:	bf00      	nop
 8007382:	3720      	adds	r7, #32
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	200143d4 	.word	0x200143d4
 800738c:	200143a4 	.word	0x200143a4

08007390 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	@ 0x28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800739a:	f3ef 8311 	mrs	r3, BASEPRI
 800739e:	f04f 0120 	mov.w	r1, #32
 80073a2:	f381 8811 	msr	BASEPRI, r1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	4827      	ldr	r0, [pc, #156]	@ (8007448 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80073aa:	f7fe fc48 	bl	8005c3e <_PreparePacket>
 80073ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80073b4:	4b25      	ldr	r3, [pc, #148]	@ (800744c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	623b      	str	r3, [r7, #32]
 80073c6:	e00b      	b.n	80073e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ce:	1c59      	adds	r1, r3, #1
 80073d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80073d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	09db      	lsrs	r3, r3, #7
 80073de:	623b      	str	r3, [r7, #32]
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073e4:	d8f0      	bhi.n	80073c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	e00b      	b.n	8007418 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	b2da      	uxtb	r2, r3
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	1c59      	adds	r1, r3, #1
 8007408:	61f9      	str	r1, [r7, #28]
 800740a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	09db      	lsrs	r3, r3, #7
 8007416:	61bb      	str	r3, [r7, #24]
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b7f      	cmp	r3, #127	@ 0x7f
 800741c:	d8f0      	bhi.n	8007400 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	61fa      	str	r2, [r7, #28]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800742e:	2207      	movs	r2, #7
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	6938      	ldr	r0, [r7, #16]
 8007434:	f7fe fcf4 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f383 8811 	msr	BASEPRI, r3
}
 800743e:	bf00      	nop
 8007440:	3728      	adds	r7, #40	@ 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200143d4 	.word	0x200143d4
 800744c:	200143a4 	.word	0x200143a4

08007450 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007458:	4b04      	ldr	r3, [pc, #16]	@ (800746c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	1ad3      	subs	r3, r2, r3
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	200143a4 	.word	0x200143a4

08007470 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	@ 0x30
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800747a:	4b3b      	ldr	r3, [pc, #236]	@ (8007568 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d06d      	beq.n	800755e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007482:	4b39      	ldr	r3, [pc, #228]	@ (8007568 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007488:	2300      	movs	r3, #0
 800748a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800748c:	e008      	b.n	80074a0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800748e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d007      	beq.n	80074aa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	3301      	adds	r3, #1
 800749e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d3f2      	bcc.n	800748e <SEGGER_SYSVIEW_SendModule+0x1e>
 80074a8:	e000      	b.n	80074ac <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80074aa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d055      	beq.n	800755e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074b2:	f3ef 8311 	mrs	r3, BASEPRI
 80074b6:	f04f 0120 	mov.w	r1, #32
 80074ba:	f381 8811 	msr	BASEPRI, r1
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	482a      	ldr	r0, [pc, #168]	@ (800756c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80074c2:	f7fe fbbc 	bl	8005c3e <_PreparePacket>
 80074c6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	623b      	str	r3, [r7, #32]
 80074d4:	e00b      	b.n	80074ee <SEGGER_SYSVIEW_SendModule+0x7e>
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	1c59      	adds	r1, r3, #1
 80074de:	6279      	str	r1, [r7, #36]	@ 0x24
 80074e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	09db      	lsrs	r3, r3, #7
 80074ec:	623b      	str	r3, [r7, #32]
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80074f2:	d8f0      	bhi.n	80074d6 <SEGGER_SYSVIEW_SendModule+0x66>
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80074fa:	6a3a      	ldr	r2, [r7, #32]
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	61bb      	str	r3, [r7, #24]
 800750e:	e00b      	b.n	8007528 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	b2da      	uxtb	r2, r3
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	61f9      	str	r1, [r7, #28]
 800751a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	09db      	lsrs	r3, r3, #7
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b7f      	cmp	r3, #127	@ 0x7f
 800752c:	d8f0      	bhi.n	8007510 <SEGGER_SYSVIEW_SendModule+0xa0>
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	61fa      	str	r2, [r7, #28]
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800753e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2280      	movs	r2, #128	@ 0x80
 8007544:	4619      	mov	r1, r3
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7fe fb2c 	bl	8005ba4 <_EncodeStr>
 800754c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800754e:	2216      	movs	r2, #22
 8007550:	68f9      	ldr	r1, [r7, #12]
 8007552:	6938      	ldr	r0, [r7, #16]
 8007554:	f7fe fc64 	bl	8005e20 <_SendPacket>
      RECORD_END();
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800755e:	bf00      	nop
 8007560:	3730      	adds	r7, #48	@ 0x30
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	200143cc 	.word	0x200143cc
 800756c:	200143d4 	.word	0x200143d4

08007570 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007576:	4b0c      	ldr	r3, [pc, #48]	@ (80075a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00f      	beq.n	800759e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800757e:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f2      	bne.n	8007584 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200143cc 	.word	0x200143cc

080075ac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80075b2:	f3ef 8311 	mrs	r3, BASEPRI
 80075b6:	f04f 0120 	mov.w	r1, #32
 80075ba:	f381 8811 	msr	BASEPRI, r1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	4817      	ldr	r0, [pc, #92]	@ (8007620 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80075c2:	f7fe fb3c 	bl	8005c3e <_PreparePacket>
 80075c6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	4b14      	ldr	r3, [pc, #80]	@ (8007624 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	e00b      	b.n	80075f0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	1c59      	adds	r1, r3, #1
 80075e0:	6179      	str	r1, [r7, #20]
 80075e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	09db      	lsrs	r3, r3, #7
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80075f4:	d8f0      	bhi.n	80075d8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	617a      	str	r2, [r7, #20]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007606:	221b      	movs	r2, #27
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	68b8      	ldr	r0, [r7, #8]
 800760c:	f7fe fc08 	bl	8005e20 <_SendPacket>
  RECORD_END();
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f383 8811 	msr	BASEPRI, r3
}
 8007616:	bf00      	nop
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200143d4 	.word	0x200143d4
 8007624:	200143d0 	.word	0x200143d0

08007628 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007628:	b40f      	push	{r0, r1, r2, r3}
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007630:	f107 0314 	add.w	r3, r7, #20
 8007634:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007636:	1d3b      	adds	r3, r7, #4
 8007638:	461a      	mov	r2, r3
 800763a:	2100      	movs	r1, #0
 800763c:	6938      	ldr	r0, [r7, #16]
 800763e:	f7fe fe79 	bl	8006334 <_VPrintTarget>
  va_end(ParamList);
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800764c:	b004      	add	sp, #16
 800764e:	4770      	bx	lr

08007650 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	@ 0x28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007658:	f3ef 8311 	mrs	r3, BASEPRI
 800765c:	f04f 0120 	mov.w	r1, #32
 8007660:	f381 8811 	msr	BASEPRI, r1
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	4827      	ldr	r0, [pc, #156]	@ (8007704 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007668:	f7fe fae9 	bl	8005c3e <_PreparePacket>
 800766c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800766e:	2280      	movs	r2, #128	@ 0x80
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	6938      	ldr	r0, [r7, #16]
 8007674:	f7fe fa96 	bl	8005ba4 <_EncodeStr>
 8007678:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	627b      	str	r3, [r7, #36]	@ 0x24
 800767e:	2301      	movs	r3, #1
 8007680:	623b      	str	r3, [r7, #32]
 8007682:	e00b      	b.n	800769c <SEGGER_SYSVIEW_Warn+0x4c>
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	b2da      	uxtb	r2, r3
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	1c59      	adds	r1, r3, #1
 800768c:	6279      	str	r1, [r7, #36]	@ 0x24
 800768e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	09db      	lsrs	r3, r3, #7
 800769a:	623b      	str	r3, [r7, #32]
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2b7f      	cmp	r3, #127	@ 0x7f
 80076a0:	d8f0      	bhi.n	8007684 <SEGGER_SYSVIEW_Warn+0x34>
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80076a8:	6a3a      	ldr	r2, [r7, #32]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	2300      	movs	r3, #0
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	e00b      	b.n	80076d4 <SEGGER_SYSVIEW_Warn+0x84>
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	1c59      	adds	r1, r3, #1
 80076c4:	61f9      	str	r1, [r7, #28]
 80076c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	09db      	lsrs	r3, r3, #7
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80076d8:	d8f0      	bhi.n	80076bc <SEGGER_SYSVIEW_Warn+0x6c>
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	61fa      	str	r2, [r7, #28]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80076ea:	221a      	movs	r2, #26
 80076ec:	68f9      	ldr	r1, [r7, #12]
 80076ee:	6938      	ldr	r0, [r7, #16]
 80076f0:	f7fe fb96 	bl	8005e20 <_SendPacket>
  RECORD_END();
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f383 8811 	msr	BASEPRI, r3
}
 80076fa:	bf00      	nop
 80076fc:	3728      	adds	r7, #40	@ 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	200143d4 	.word	0x200143d4

08007708 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800770c:	4b13      	ldr	r3, [pc, #76]	@ (800775c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800770e:	7e1b      	ldrb	r3, [r3, #24]
 8007710:	4619      	mov	r1, r3
 8007712:	4a13      	ldr	r2, [pc, #76]	@ (8007760 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007714:	460b      	mov	r3, r1
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	440b      	add	r3, r1
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	4413      	add	r3, r2
 800771e:	336c      	adds	r3, #108	@ 0x6c
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b0e      	ldr	r3, [pc, #56]	@ (800775c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007724:	7e1b      	ldrb	r3, [r3, #24]
 8007726:	4618      	mov	r0, r3
 8007728:	490d      	ldr	r1, [pc, #52]	@ (8007760 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800772a:	4603      	mov	r3, r0
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	4403      	add	r3, r0
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	440b      	add	r3, r1
 8007734:	3370      	adds	r3, #112	@ 0x70
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d00b      	beq.n	8007754 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800773c:	4b07      	ldr	r3, [pc, #28]	@ (800775c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800773e:	789b      	ldrb	r3, [r3, #2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007744:	4b05      	ldr	r3, [pc, #20]	@ (800775c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007746:	2201      	movs	r2, #1
 8007748:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800774a:	f7fe fa85 	bl	8005c58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800774e:	4b03      	ldr	r3, [pc, #12]	@ (800775c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007750:	2200      	movs	r2, #0
 8007752:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007754:	4b01      	ldr	r3, [pc, #4]	@ (800775c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007756:	781b      	ldrb	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	bd80      	pop	{r7, pc}
 800775c:	200143a4 	.word	0x200143a4
 8007760:	20012ee4 	.word	0x20012ee4

08007764 <memcmp>:
 8007764:	b510      	push	{r4, lr}
 8007766:	3901      	subs	r1, #1
 8007768:	4402      	add	r2, r0
 800776a:	4290      	cmp	r0, r2
 800776c:	d101      	bne.n	8007772 <memcmp+0xe>
 800776e:	2000      	movs	r0, #0
 8007770:	e005      	b.n	800777e <memcmp+0x1a>
 8007772:	7803      	ldrb	r3, [r0, #0]
 8007774:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007778:	42a3      	cmp	r3, r4
 800777a:	d001      	beq.n	8007780 <memcmp+0x1c>
 800777c:	1b18      	subs	r0, r3, r4
 800777e:	bd10      	pop	{r4, pc}
 8007780:	3001      	adds	r0, #1
 8007782:	e7f2      	b.n	800776a <memcmp+0x6>

08007784 <memset>:
 8007784:	4402      	add	r2, r0
 8007786:	4603      	mov	r3, r0
 8007788:	4293      	cmp	r3, r2
 800778a:	d100      	bne.n	800778e <memset+0xa>
 800778c:	4770      	bx	lr
 800778e:	f803 1b01 	strb.w	r1, [r3], #1
 8007792:	e7f9      	b.n	8007788 <memset+0x4>

08007794 <__libc_init_array>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4d0d      	ldr	r5, [pc, #52]	@ (80077cc <__libc_init_array+0x38>)
 8007798:	4c0d      	ldr	r4, [pc, #52]	@ (80077d0 <__libc_init_array+0x3c>)
 800779a:	1b64      	subs	r4, r4, r5
 800779c:	10a4      	asrs	r4, r4, #2
 800779e:	2600      	movs	r6, #0
 80077a0:	42a6      	cmp	r6, r4
 80077a2:	d109      	bne.n	80077b8 <__libc_init_array+0x24>
 80077a4:	4d0b      	ldr	r5, [pc, #44]	@ (80077d4 <__libc_init_array+0x40>)
 80077a6:	4c0c      	ldr	r4, [pc, #48]	@ (80077d8 <__libc_init_array+0x44>)
 80077a8:	f000 f826 	bl	80077f8 <_init>
 80077ac:	1b64      	subs	r4, r4, r5
 80077ae:	10a4      	asrs	r4, r4, #2
 80077b0:	2600      	movs	r6, #0
 80077b2:	42a6      	cmp	r6, r4
 80077b4:	d105      	bne.n	80077c2 <__libc_init_array+0x2e>
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077bc:	4798      	blx	r3
 80077be:	3601      	adds	r6, #1
 80077c0:	e7ee      	b.n	80077a0 <__libc_init_array+0xc>
 80077c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c6:	4798      	blx	r3
 80077c8:	3601      	adds	r6, #1
 80077ca:	e7f2      	b.n	80077b2 <__libc_init_array+0x1e>
 80077cc:	08007998 	.word	0x08007998
 80077d0:	08007998 	.word	0x08007998
 80077d4:	08007998 	.word	0x08007998
 80077d8:	0800799c 	.word	0x0800799c

080077dc <memcpy>:
 80077dc:	440a      	add	r2, r1
 80077de:	4291      	cmp	r1, r2
 80077e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077e4:	d100      	bne.n	80077e8 <memcpy+0xc>
 80077e6:	4770      	bx	lr
 80077e8:	b510      	push	{r4, lr}
 80077ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f2:	4291      	cmp	r1, r2
 80077f4:	d1f9      	bne.n	80077ea <memcpy+0xe>
 80077f6:	bd10      	pop	{r4, pc}

080077f8 <_init>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	bf00      	nop
 80077fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fe:	bc08      	pop	{r3}
 8007800:	469e      	mov	lr, r3
 8007802:	4770      	bx	lr

08007804 <_fini>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr
