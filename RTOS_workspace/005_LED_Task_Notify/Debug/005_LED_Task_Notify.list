
005_LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08007c28  08007c28  00008c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e08  08007e08  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e08  08007e08  00008e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e10  08007e10  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e10  08007e10  00008e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e14  08007e14  00008e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007e18  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          000144a4  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144c0  200144c0  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d21  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003195  00000000  00000000  0001cd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0001ff08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee5  00000000  00000000  00021270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023163  00000000  00000000  00022155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016744  00000000  00000000  000452b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7c8e  00000000  00000000  0005b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013368a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005104  00000000  00000000  001336d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000e8  00000000  00000000  001387d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c10 	.word	0x08007c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007c10 	.word	0x08007c10

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eec 	.word	0x20012eec

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fc57 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f89b 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f903 	bl	800076c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(250000);
 8000566:	483d      	ldr	r0, [pc, #244]	@ (800065c <main+0x108>)
 8000568:	f005 f8ac 	bl	80056c4 <SEGGER_UART_init>

  //Enable the CYCCNT counter
    DWT_CTRL |= (1 << 0);
 800056c:	4b3c      	ldr	r3, [pc, #240]	@ (8000660 <main+0x10c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a3b      	ldr	r2, [pc, #236]	@ (8000660 <main+0x10c>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 8000578:	f004 fe12 	bl	80051a0 <SEGGER_SYSVIEW_Conf>

    status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 800057c:	4b39      	ldr	r3, [pc, #228]	@ (8000664 <main+0x110>)
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2303      	movs	r3, #3
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	4937      	ldr	r1, [pc, #220]	@ (8000668 <main+0x114>)
 800058a:	4838      	ldr	r0, [pc, #224]	@ (800066c <main+0x118>)
 800058c:	f002 fcc2 	bl	8002f14 <xTaskCreate>
 8000590:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00b      	beq.n	80005b0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x58>

    next_task_handle = ledg_task_handle;
 80005b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000664 <main+0x110>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a2e      	ldr	r2, [pc, #184]	@ (8000670 <main+0x11c>)
 80005b6:	6013      	str	r3, [r2, #0]

    status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000674 <main+0x120>)
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	@ 0xc8
 80005c4:	492c      	ldr	r1, [pc, #176]	@ (8000678 <main+0x124>)
 80005c6:	482d      	ldr	r0, [pc, #180]	@ (800067c <main+0x128>)
 80005c8:	f002 fca4 	bl	8002f14 <xTaskCreate>
 80005cc:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <main+0x98>
        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	60fb      	str	r3, [r7, #12]
    }
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x94>

    status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &ledr_task_handle);
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <main+0x12c>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	@ 0xc8
 80005f8:	4922      	ldr	r1, [pc, #136]	@ (8000684 <main+0x130>)
 80005fa:	4823      	ldr	r0, [pc, #140]	@ (8000688 <main+0x134>)
 80005fc:	f002 fc8a 	bl	8002f14 <xTaskCreate>
 8000600:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00b      	beq.n	8000620 <main+0xcc>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	60bb      	str	r3, [r7, #8]
    }
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0xc8>

    status = xTaskCreate(button_handler, "button_task", 200, NULL, 4 , &btn_task_handle);
 8000620:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <main+0x138>)
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2304      	movs	r3, #4
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	22c8      	movs	r2, #200	@ 0xc8
 800062c:	4918      	ldr	r1, [pc, #96]	@ (8000690 <main+0x13c>)
 800062e:	4819      	ldr	r0, [pc, #100]	@ (8000694 <main+0x140>)
 8000630:	f002 fc70 	bl	8002f14 <xTaskCreate>
 8000634:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d00b      	beq.n	8000654 <main+0x100>
        __asm volatile
 800063c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000640:	f383 8811 	msr	BASEPRI, r3
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	f3bf 8f4f 	dsb	sy
 800064c:	607b      	str	r3, [r7, #4]
    }
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <main+0xfc>

    //Start the FreeRTOS scheduler
     vTaskStartScheduler();
 8000654:	f002 fea6 	bl	80033a4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <main+0x104>
 800065c:	0003d090 	.word	0x0003d090
 8000660:	e0001000 	.word	0xe0001000
 8000664:	20000038 	.word	0x20000038
 8000668:	08007c28 	.word	0x08007c28
 800066c:	08000a29 	.word	0x08000a29
 8000670:	20000048 	.word	0x20000048
 8000674:	2000003c 	.word	0x2000003c
 8000678:	08007c38 	.word	0x08007c38
 800067c:	08000a99 	.word	0x08000a99
 8000680:	20000040 	.word	0x20000040
 8000684:	08007c48 	.word	0x08007c48
 8000688:	08000b09 	.word	0x08000b09
 800068c:	20000044 	.word	0x20000044
 8000690:	08007c58 	.word	0x08007c58
 8000694:	08000b81 	.word	0x08000b81

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 fa78 	bl	8007b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	@ 0xa8
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fe81 	bl	8001424 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 fa64 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f8e2 	bl	8001914 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 fa4d 	bl	8000bf4 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	@ 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4ba2      	ldr	r3, [pc, #648]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4aa1      	ldr	r2, [pc, #644]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b9f      	ldr	r3, [pc, #636]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b9b      	ldr	r3, [pc, #620]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a9a      	ldr	r2, [pc, #616]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b98      	ldr	r3, [pc, #608]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b94      	ldr	r3, [pc, #592]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a93      	ldr	r2, [pc, #588]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b91      	ldr	r3, [pc, #580]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b8d      	ldr	r3, [pc, #564]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a8c      	ldr	r2, [pc, #560]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b8a      	ldr	r3, [pc, #552]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b86      	ldr	r3, [pc, #536]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a85      	ldr	r2, [pc, #532]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b83      	ldr	r3, [pc, #524]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b7f      	ldr	r3, [pc, #508]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a7e      	ldr	r2, [pc, #504]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4879      	ldr	r0, [pc, #484]	@ (8000a14 <MX_GPIO_Init+0x2a8>)
 8000830:	f000 fdc4 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4877      	ldr	r0, [pc, #476]	@ (8000a18 <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fdbf 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000844:	4875      	ldr	r0, [pc, #468]	@ (8000a1c <MX_GPIO_Init+0x2b0>)
 8000846:	f000 fdb9 	bl	80013bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	486c      	ldr	r0, [pc, #432]	@ (8000a14 <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fbf7 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4866      	ldr	r0, [pc, #408]	@ (8000a18 <MX_GPIO_Init+0x2ac>)
 800087e:	f000 fbe9 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	485e      	ldr	r0, [pc, #376]	@ (8000a18 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fbd9 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	485a      	ldr	r0, [pc, #360]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fbcc 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008cc:	2306      	movs	r3, #6
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4852      	ldr	r0, [pc, #328]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fbbc 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008dc:	23e0      	movs	r3, #224	@ 0xe0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	484a      	ldr	r0, [pc, #296]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fbac 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fc:	2304      	movs	r3, #4
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4845      	ldr	r0, [pc, #276]	@ (8000a24 <MX_GPIO_Init+0x2b8>)
 8000910:	f000 fba0 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483c      	ldr	r0, [pc, #240]	@ (8000a24 <MX_GPIO_Init+0x2b8>)
 8000932:	f000 fb8f 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800093a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4833      	ldr	r0, [pc, #204]	@ (8000a1c <MX_GPIO_Init+0x2b0>)
 8000950:	f000 fb80 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000954:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000966:	2306      	movs	r3, #6
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4829      	ldr	r0, [pc, #164]	@ (8000a18 <MX_GPIO_Init+0x2ac>)
 8000972:	f000 fb6f 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4825      	ldr	r0, [pc, #148]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fb62 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000990:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009a2:	230a      	movs	r3, #10
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 80009ae:	f000 fb51 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <MX_GPIO_Init+0x2b0>)
 80009c6:	f000 fb45 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	@ (8000a24 <MX_GPIO_Init+0x2b8>)
 80009e8:	f000 fb34 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0x2a8>)
 8000a02:	f000 fb27 	bl	8001054 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	@ 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000a30:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <led_green_handler+0x5c>)
 8000a32:	f007 f805 	bl	8007a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3a:	4813      	ldr	r0, [pc, #76]	@ (8000a88 <led_green_handler+0x60>)
 8000a3c:	f000 fcd7 	bl	80013ee <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(1000));
 8000a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f003 f99f 	bl	8003d90 <xTaskGenericNotifyWait>
 8000a52:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1ea      	bne.n	8000a30 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000a5a:	f002 fd05 	bl	8003468 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <led_green_handler+0x64>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <led_green_handler+0x68>)
 8000a64:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a66:	f002 fd0d 	bl	8003484 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a70:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <led_green_handler+0x60>)
 8000a72:	f000 fca3 	bl	80013bc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000a76:	4807      	ldr	r0, [pc, #28]	@ (8000a94 <led_green_handler+0x6c>)
 8000a78:	f006 ffe2 	bl	8007a40 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f002 fbad 	bl	80031dc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000a82:	e7d5      	b.n	8000a30 <led_green_handler+0x8>
 8000a84:	08007c64 	.word	0x08007c64
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	2000003c 	.word	0x2000003c
 8000a90:	20000048 	.word	0x20000048
 8000a94:	08007c78 	.word	0x08007c78

08000a98 <led_orange_handler>:
		}
	}
}
static void led_orange_handler(void* parameters)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 8000aa0:	4814      	ldr	r0, [pc, #80]	@ (8000af4 <led_orange_handler+0x5c>)
 8000aa2:	f006 ffcd 	bl	8007a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000aa6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aaa:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <led_orange_handler+0x60>)
 8000aac:	f000 fc9f 	bl	80013ee <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(800));
 8000ab0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f003 f967 	bl	8003d90 <xTaskGenericNotifyWait>
 8000ac2:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1ea      	bne.n	8000aa0 <led_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000aca:	f002 fccd 	bl	8003468 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <led_orange_handler+0x64>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <led_orange_handler+0x68>)
 8000ad4:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ad6:	f002 fcd5 	bl	8003484 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ae0:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <led_orange_handler+0x60>)
 8000ae2:	f000 fc6b 	bl	80013bc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <led_orange_handler+0x6c>)
 8000ae8:	f006 ffaa 	bl	8007a40 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f002 fb75 	bl	80031dc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 8000af2:	e7d5      	b.n	8000aa0 <led_orange_handler+0x8>
 8000af4:	08007c90 	.word	0x08007c90
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	20000040 	.word	0x20000040
 8000b00:	20000048 	.word	0x20000048
 8000b04:	08007ca4 	.word	0x08007ca4

08000b08 <led_red_handler>:
		}
	}
}
static void led_red_handler(void* parameters)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000b10:	4816      	ldr	r0, [pc, #88]	@ (8000b6c <led_red_handler+0x64>)
 8000b12:	f006 ff95 	bl	8007a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b1a:	4815      	ldr	r0, [pc, #84]	@ (8000b70 <led_red_handler+0x68>)
 8000b1c:	f000 fc67 	bl	80013ee <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(400));
 8000b20:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f003 f92f 	bl	8003d90 <xTaskGenericNotifyWait>
 8000b32:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d1ea      	bne.n	8000b10 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000b3a:	f002 fc95 	bl	8003468 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <led_red_handler+0x6c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b44:	f002 fc9e 	bl	8003484 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b4e:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <led_red_handler+0x68>)
 8000b50:	f000 fc34 	bl	80013bc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000b54:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <led_red_handler+0x70>)
 8000b56:	f006 ff73 	bl	8007a40 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <led_red_handler+0x74>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fb3c 	bl	80031dc <vTaskDelete>
			vTaskDelete(NULL);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f002 fb39 	bl	80031dc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000b6a:	e7d1      	b.n	8000b10 <led_red_handler+0x8>
 8000b6c:	08007cbc 	.word	0x08007cbc
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	20000048 	.word	0x20000048
 8000b78:	08007cd0 	.word	0x08007cd0
 8000b7c:	20000044 	.word	0x20000044

08000b80 <button_handler>:
		}
	}
}

static void button_handler(void* parameters)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b90:	2101      	movs	r1, #1
 8000b92:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <button_handler+0x48>)
 8000b94:	f000 fbfa 	bl	800138c <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00b      	beq.n	8000bba <button_handler+0x3a>
		{
			if(! prev_read)
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d108      	bne.n	8000bba <button_handler+0x3a>
			{
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <button_handler+0x4c>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	2300      	movs	r3, #0
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f003 f975 	bl	8003ea4 <xTaskGenericNotify>
			}
		}
		prev_read = btn_read;
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f002 fbb6 	bl	8003330 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bc4:	e7e4      	b.n	8000b90 <button_handler+0x10>
 8000bc6:	bf00      	nop
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	20000048 	.word	0x20000048

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f000 f935 	bl	8000e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c16:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c3e:	f003 feed 	bl	8004a1c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	@ 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b33      	ldr	r3, [pc, #204]	@ (8000d34 <HAL_InitTick+0xe4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	4a32      	ldr	r2, [pc, #200]	@ (8000d34 <HAL_InitTick+0xe4>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c70:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <HAL_InitTick+0xe4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f850 	bl	8001d2c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d103      	bne.n	8000c9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c96:	f001 f835 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8000c9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c9c:	e004      	b.n	8000ca8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c9e:	f001 f831 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000caa:	4a23      	ldr	r2, [pc, #140]	@ (8000d38 <HAL_InitTick+0xe8>)
 8000cac:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb0:	0c9b      	lsrs	r3, r3, #18
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cb8:	4a21      	ldr	r2, [pc, #132]	@ (8000d40 <HAL_InitTick+0xf0>)
 8000cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <HAL_InitTick+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cdc:	4817      	ldr	r0, [pc, #92]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cde:	f001 f857 	bl	8001d90 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d11b      	bne.n	8000d28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cf0:	4812      	ldr	r0, [pc, #72]	@ (8000d3c <HAL_InitTick+0xec>)
 8000cf2:	f001 f8a7 	bl	8001e44 <HAL_TIM_Base_Start_IT>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d111      	bne.n	8000d28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d04:	2036      	movs	r0, #54	@ 0x36
 8000d06:	f000 f997 	bl	8001038 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d808      	bhi.n	8000d22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2036      	movs	r0, #54	@ 0x36
 8000d16:	f000 f973 	bl	8001000 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_InitTick+0xf4>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e002      	b.n	8000d28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3738      	adds	r7, #56	@ 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	2000004c 	.word	0x2000004c
 8000d40:	40001000 	.word	0x40001000
 8000d44:	20000004 	.word	0x20000004

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x4>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <TIM6_DAC_IRQHandler+0x10>)
 8000d86:	f001 f8cd 	bl	8001f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000004c 	.word	0x2000004c

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dbc:	f7ff ffea 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	@ (8000df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de6:	f006 fee1 	bl	8007bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fbb3 	bl	8000554 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dfc:	08007e18 	.word	0x08007e18
  ldr r2, =_sbss
 8000e00:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e04:	200144c0 	.word	0x200144c0

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	@ (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f8d8 	bl	8000fea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f7ff ff08 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fede 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000094 	.word	0x20000094

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000094 	.word	0x20000094

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	@ (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	@ (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	@ (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	@ 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	@ 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff4c 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001012:	f7ff ff61 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 8001016:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f7ff ffb1 	bl	8000f84 <NVIC_EncodePriority>
 8001022:	4602      	mov	r2, r0
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff80 	bl	8000f30 <__NVIC_SetPriority>
}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff54 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e16b      	b.n	8001348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 815a 	bne.w	8001342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d130      	bne.n	8001108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80b4 	beq.w	8001342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b60      	ldr	r3, [pc, #384]	@ (8001360 <HAL_GPIO_Init+0x30c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001360 <HAL_GPIO_Init+0x30c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001360 <HAL_GPIO_Init+0x30c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001364 <HAL_GPIO_Init+0x310>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a52      	ldr	r2, [pc, #328]	@ (8001368 <HAL_GPIO_Init+0x314>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d02b      	beq.n	800127a <HAL_GPIO_Init+0x226>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a51      	ldr	r2, [pc, #324]	@ (800136c <HAL_GPIO_Init+0x318>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x222>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a50      	ldr	r2, [pc, #320]	@ (8001370 <HAL_GPIO_Init+0x31c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x21e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4f      	ldr	r2, [pc, #316]	@ (8001374 <HAL_GPIO_Init+0x320>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x21a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4e      	ldr	r2, [pc, #312]	@ (8001378 <HAL_GPIO_Init+0x324>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x216>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4d      	ldr	r2, [pc, #308]	@ (800137c <HAL_GPIO_Init+0x328>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x212>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4c      	ldr	r2, [pc, #304]	@ (8001380 <HAL_GPIO_Init+0x32c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x20e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4b      	ldr	r2, [pc, #300]	@ (8001384 <HAL_GPIO_Init+0x330>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x20a>
 800125a:	2307      	movs	r3, #7
 800125c:	e00e      	b.n	800127c <HAL_GPIO_Init+0x228>
 800125e:	2308      	movs	r3, #8
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001262:	2306      	movs	r3, #6
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x228>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x228>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x228>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x228>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	@ (8001364 <HAL_GPIO_Init+0x310>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_GPIO_Init+0x334>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a32      	ldr	r2, [pc, #200]	@ (8001388 <HAL_GPIO_Init+0x334>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <HAL_GPIO_Init+0x334>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a27      	ldr	r2, [pc, #156]	@ (8001388 <HAL_GPIO_Init+0x334>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <HAL_GPIO_Init+0x334>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <HAL_GPIO_Init+0x334>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_GPIO_Init+0x334>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <HAL_GPIO_Init+0x334>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae90 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001400:	887a      	ldrh	r2, [r7, #2]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43d9      	mvns	r1, r3
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	400b      	ands	r3, r1
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e267      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d075      	beq.n	800152e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001442:	4b88      	ldr	r3, [pc, #544]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b04      	cmp	r3, #4
 800144c:	d00c      	beq.n	8001468 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144e:	4b85      	ldr	r3, [pc, #532]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001456:	2b08      	cmp	r3, #8
 8001458:	d112      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b82      	ldr	r3, [pc, #520]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001466:	d10b      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	4b7e      	ldr	r3, [pc, #504]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d05b      	beq.n	800152c <HAL_RCC_OscConfig+0x108>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d157      	bne.n	800152c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e242      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x74>
 800148a:	4b76      	ldr	r3, [pc, #472]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a75      	ldr	r2, [pc, #468]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4b70      	ldr	r3, [pc, #448]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 80014bc:	4b69      	ldr	r3, [pc, #420]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a68      	ldr	r2, [pc, #416]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a65      	ldr	r2, [pc, #404]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fccc 	bl	8000e78 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fcc8 	bl	8000e78 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	@ 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e207      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xc0>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fcb8 	bl	8000e78 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fcb4 	bl	8000e78 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1f3      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b51      	ldr	r3, [pc, #324]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0xe8>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800153a:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b47      	ldr	r3, [pc, #284]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b44      	ldr	r3, [pc, #272]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1c7      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4937      	ldr	r1, [pc, #220]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e03a      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <HAL_RCC_OscConfig+0x244>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fc6d 	bl	8000e78 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fc69 	bl	8000e78 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1a8      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4925      	ldr	r1, [pc, #148]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <HAL_RCC_OscConfig+0x244>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc4c 	bl	8000e78 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc48 	bl	8000e78 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e187      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d036      	beq.n	800167c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d016      	beq.n	8001644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_RCC_OscConfig+0x248>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fc2c 	bl	8000e78 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fc28 	bl	8000e78 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e167      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x200>
 8001642:	e01b      	b.n	800167c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_RCC_OscConfig+0x248>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fc15 	bl	8000e78 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	e00e      	b.n	8001670 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fc11 	bl	8000e78 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d907      	bls.n	8001670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e150      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
 8001664:	40023800 	.word	0x40023800
 8001668:	42470000 	.word	0x42470000
 800166c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	4b88      	ldr	r3, [pc, #544]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ea      	bne.n	8001652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8097 	beq.w	80017b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b81      	ldr	r3, [pc, #516]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b7d      	ldr	r3, [pc, #500]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b77      	ldr	r3, [pc, #476]	@ (8001898 <HAL_RCC_OscConfig+0x474>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b74      	ldr	r3, [pc, #464]	@ (8001898 <HAL_RCC_OscConfig+0x474>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a73      	ldr	r2, [pc, #460]	@ (8001898 <HAL_RCC_OscConfig+0x474>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fbd1 	bl	8000e78 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fbcd 	bl	8000e78 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e10c      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001898 <HAL_RCC_OscConfig+0x474>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x2ea>
 8001700:	4b64      	ldr	r3, [pc, #400]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001704:	4a63      	ldr	r2, [pc, #396]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	@ 0x70
 800170c:	e01c      	b.n	8001748 <HAL_RCC_OscConfig+0x324>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x30c>
 8001716:	4b5f      	ldr	r3, [pc, #380]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171a:	4a5e      	ldr	r2, [pc, #376]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6713      	str	r3, [r2, #112]	@ 0x70
 8001722:	4b5c      	ldr	r3, [pc, #368]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001726:	4a5b      	ldr	r2, [pc, #364]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6713      	str	r3, [r2, #112]	@ 0x70
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0x324>
 8001730:	4b58      	ldr	r3, [pc, #352]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	4a57      	ldr	r2, [pc, #348]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	@ 0x70
 800173c:	4b55      	ldr	r3, [pc, #340]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001740:	4a54      	ldr	r2, [pc, #336]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d015      	beq.n	800177c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fb92 	bl	8000e78 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fb8e 	bl	8000e78 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0cb      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	4b49      	ldr	r3, [pc, #292]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0ee      	beq.n	8001758 <HAL_RCC_OscConfig+0x334>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff fb7c 	bl	8000e78 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fb78 	bl	8000e78 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0b5      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	4b3e      	ldr	r3, [pc, #248]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ee      	bne.n	8001784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4b39      	ldr	r3, [pc, #228]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	4a38      	ldr	r2, [pc, #224]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a1 	beq.w	8001904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c2:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d05c      	beq.n	8001888 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d141      	bne.n	800185a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b31      	ldr	r3, [pc, #196]	@ (800189c <HAL_RCC_OscConfig+0x478>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb4c 	bl	8000e78 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fb48 	bl	8000e78 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e087      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	491b      	ldr	r1, [pc, #108]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_RCC_OscConfig+0x478>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fb21 	bl	8000e78 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fb1d 	bl	8000e78 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e05c      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x416>
 8001858:	e054      	b.n	8001904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_RCC_OscConfig+0x478>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fb0a 	bl	8000e78 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fb06 	bl	8000e78 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e045      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x444>
 8001886:	e03d      	b.n	8001904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e038      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000
 800189c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x4ec>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d028      	beq.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d121      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d11a      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d8:	4293      	cmp	r3, r2
 80018da:	d111      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0cc      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b68      	ldr	r3, [pc, #416]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d90c      	bls.n	8001950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b65      	ldr	r3, [pc, #404]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b63      	ldr	r3, [pc, #396]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b8      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001968:	4b59      	ldr	r3, [pc, #356]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a58      	ldr	r2, [pc, #352]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001972:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001980:	4b53      	ldr	r3, [pc, #332]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a52      	ldr	r2, [pc, #328]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800198a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b50      	ldr	r3, [pc, #320]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	494d      	ldr	r1, [pc, #308]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d044      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b47      	ldr	r3, [pc, #284]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d119      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e07f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e067      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b37      	ldr	r3, [pc, #220]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4934      	ldr	r1, [pc, #208]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff fa38 	bl	8000e78 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff fa34 	bl	8000e78 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e04f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d20c      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e032      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4916      	ldr	r1, [pc, #88]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a86:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	490e      	ldr	r1, [pc, #56]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a9a:	f000 f821 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	490a      	ldr	r1, [pc, #40]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f8c8 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08007dc8 	.word	0x08007dc8
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	b094      	sub	sp, #80	@ 0x50
 8001ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af8:	4b79      	ldr	r3, [pc, #484]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d00d      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x40>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	f200 80e1 	bhi.w	8001ccc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b12:	e0db      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b18:	e0db      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1a:	4b73      	ldr	r3, [pc, #460]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b1e:	e0d8      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d063      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b52:	4622      	mov	r2, r4
 8001b54:	462b      	mov	r3, r5
 8001b56:	f04f 0000 	mov.w	r0, #0
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	0159      	lsls	r1, r3, #5
 8001b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b64:	0150      	lsls	r0, r2, #5
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	1a51      	subs	r1, r2, r1
 8001b6e:	6139      	str	r1, [r7, #16]
 8001b70:	4629      	mov	r1, r5
 8001b72:	eb63 0301 	sbc.w	r3, r3, r1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b84:	4659      	mov	r1, fp
 8001b86:	018b      	lsls	r3, r1, #6
 8001b88:	4651      	mov	r1, sl
 8001b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8e:	4651      	mov	r1, sl
 8001b90:	018a      	lsls	r2, r1, #6
 8001b92:	4651      	mov	r1, sl
 8001b94:	ebb2 0801 	subs.w	r8, r2, r1
 8001b98:	4659      	mov	r1, fp
 8001b9a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb2:	4690      	mov	r8, r2
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	eb18 0303 	adds.w	r3, r8, r3
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	462b      	mov	r3, r5
 8001bc0:	eb49 0303 	adc.w	r3, r9, r3
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	024b      	lsls	r3, r1, #9
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bdc:	4621      	mov	r1, r4
 8001bde:	024a      	lsls	r2, r1, #9
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001be6:	2200      	movs	r2, #0
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bf0:	f7fe fb38 	bl	8000264 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bfc:	e058      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b38      	ldr	r3, [pc, #224]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	2200      	movs	r2, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	4611      	mov	r1, r2
 8001c0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c0e:	623b      	str	r3, [r7, #32]
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c18:	4642      	mov	r2, r8
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	0159      	lsls	r1, r3, #5
 8001c26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2a:	0150      	lsls	r0, r2, #5
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4641      	mov	r1, r8
 8001c32:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c36:	4649      	mov	r1, r9
 8001c38:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c50:	ebb2 040a 	subs.w	r4, r2, sl
 8001c54:	eb63 050b 	sbc.w	r5, r3, fp
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	00eb      	lsls	r3, r5, #3
 8001c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c66:	00e2      	lsls	r2, r4, #3
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	4643      	mov	r3, r8
 8001c6e:	18e3      	adds	r3, r4, r3
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	464b      	mov	r3, r9
 8001c74:	eb45 0303 	adc.w	r3, r5, r3
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c86:	4629      	mov	r1, r5
 8001c88:	028b      	lsls	r3, r1, #10
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c90:	4621      	mov	r1, r4
 8001c92:	028a      	lsls	r2, r1, #10
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	61fa      	str	r2, [r7, #28]
 8001ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca4:	f7fe fade 	bl	8000264 <__aeabi_uldivmod>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4613      	mov	r3, r2
 8001cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cca:	e002      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3750      	adds	r7, #80	@ 0x50
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	00f42400 	.word	0x00f42400
 8001ce8:	007a1200 	.word	0x007a1200

08001cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000000 	.word	0x20000000

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d08:	f7ff fff0 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	@ (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08007dd8 	.word	0x08007dd8

08001d2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	220f      	movs	r2, #15
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0203 	and.w	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <HAL_RCC_GetClockConfig+0x60>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0207 	and.w	r2, r3, #7
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	601a      	str	r2, [r3, #0]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e041      	b.n	8001e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f839 	bl	8001e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f000 f9c0 	bl	8002154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d001      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e04e      	b.n	8001efa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a23      	ldr	r2, [pc, #140]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e86:	d01d      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a18      	ldr	r2, [pc, #96]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d111      	bne.n	8001ee8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d010      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee6:	e007      	b.n	8001ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40000800 	.word	0x40000800
 8001f14:	40000c00 	.word	0x40000c00
 8001f18:	40010400 	.word	0x40010400
 8001f1c:	40014000 	.word	0x40014000
 8001f20:	40001800 	.word	0x40001800

08001f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0202 	mvn.w	r2, #2
 8001f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8d2 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8c4 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8d5 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d020      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0204 	mvn.w	r2, #4
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8ac 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f89e 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f8af 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0208 	mvn.w	r2, #8
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f886 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f878 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f889 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0210 	mvn.w	r2, #16
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2208      	movs	r2, #8
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f860 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f852 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f863 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0201 	mvn.w	r2, #1
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fda0 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f906 	bl	80022c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f834 	bl	8002140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0220 	mvn.w	r2, #32
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8d8 	bl	80022ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a46      	ldr	r2, [pc, #280]	@ (8002280 <TIM_Base_SetConfig+0x12c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002172:	d00f      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a43      	ldr	r2, [pc, #268]	@ (8002284 <TIM_Base_SetConfig+0x130>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00b      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a42      	ldr	r2, [pc, #264]	@ (8002288 <TIM_Base_SetConfig+0x134>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a41      	ldr	r2, [pc, #260]	@ (800228c <TIM_Base_SetConfig+0x138>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a40      	ldr	r2, [pc, #256]	@ (8002290 <TIM_Base_SetConfig+0x13c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d108      	bne.n	80021a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a35      	ldr	r2, [pc, #212]	@ (8002280 <TIM_Base_SetConfig+0x12c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b4:	d027      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a32      	ldr	r2, [pc, #200]	@ (8002284 <TIM_Base_SetConfig+0x130>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d023      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a31      	ldr	r2, [pc, #196]	@ (8002288 <TIM_Base_SetConfig+0x134>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a30      	ldr	r2, [pc, #192]	@ (800228c <TIM_Base_SetConfig+0x138>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002290 <TIM_Base_SetConfig+0x13c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d017      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002294 <TIM_Base_SetConfig+0x140>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <TIM_Base_SetConfig+0x144>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00f      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2c      	ldr	r2, [pc, #176]	@ (800229c <TIM_Base_SetConfig+0x148>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2b      	ldr	r2, [pc, #172]	@ (80022a0 <TIM_Base_SetConfig+0x14c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <TIM_Base_SetConfig+0x150>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d003      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <TIM_Base_SetConfig+0x154>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800220c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <TIM_Base_SetConfig+0x12c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_Base_SetConfig+0xf8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <TIM_Base_SetConfig+0x13c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f023 0201 	bic.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
  }
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800
 800228c:	40000c00 	.word	0x40000c00
 8002290:	40010400 	.word	0x40010400
 8002294:	40014000 	.word	0x40014000
 8002298:	40014400 	.word	0x40014400
 800229c:	40014800 	.word	0x40014800
 80022a0:	40001800 	.word	0x40001800
 80022a4:	40001c00 	.word	0x40001c00
 80022a8:	40002000 	.word	0x40002000

080022ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f103 0208 	add.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 0208 	add.w	r2, r3, #8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0208 	add.w	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d103      	bne.n	8002396 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e00c      	b.n	80023b0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3308      	adds	r3, #8
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e002      	b.n	80023a4 <vListInsert+0x2e>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d2f6      	bcs.n	800239e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	601a      	str	r2, [r3, #0]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6892      	ldr	r2, [r2, #8]
 80023fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6852      	ldr	r2, [r2, #4]
 8002408:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d103      	bne.n	800241c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1e5a      	subs	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <xQueueGenericReset+0x2c>
        __asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	60bb      	str	r3, [r7, #8]
    }
 8002462:	bf00      	nop
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002468:	f002 fb58 	bl	8004b1c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	68f9      	ldr	r1, [r7, #12]
 8002476:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	441a      	add	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	3b01      	subs	r3, #1
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	441a      	add	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	22ff      	movs	r2, #255	@ 0xff
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	22ff      	movs	r2, #255	@ 0xff
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01a      	beq.n	80024fc <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3310      	adds	r3, #16
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 fa1c 	bl	8003908 <xTaskRemoveFromEventList>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <xQueueGenericReset+0xd0>)
 80024d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	e009      	b.n	80024fc <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3310      	adds	r3, #16
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fef1 	bl	80022d4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3324      	adds	r3, #36	@ 0x24
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff feec 	bl	80022d4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024fc:	f002 fb40 	bl	8004b80 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002500:	2301      	movs	r3, #1
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	e000ed04 	.word	0xe000ed04

08002510 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <xQueueGenericCreate+0x2c>
        __asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	61bb      	str	r3, [r7, #24]
    }
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	fb02 f303 	mul.w	r3, r2, r3
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <xQueueGenericCreate+0x4a>
 800254c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	429a      	cmp	r2, r3
 8002558:	d101      	bne.n	800255e <xQueueGenericCreate+0x4e>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <xQueueGenericCreate+0x50>
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <xQueueGenericCreate+0x6c>
        __asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	617b      	str	r3, [r7, #20]
    }
 8002576:	bf00      	nop
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002582:	d90b      	bls.n	800259c <xQueueGenericCreate+0x8c>
        __asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	613b      	str	r3, [r7, #16]
    }
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	3350      	adds	r3, #80	@ 0x50
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fbed 	bl	8004d80 <pvPortMalloc>
 80025a6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3350      	adds	r3, #80	@ 0x50
 80025b6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025b8:	79fa      	ldrb	r2, [r7, #7]
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	4613      	mov	r3, r2
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f805 	bl	80025d4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025ca:	6a3b      	ldr	r3, [r7, #32]
    }
 80025cc:	4618      	mov	r0, r3
 80025ce:	3728      	adds	r7, #40	@ 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d103      	bne.n	80025f0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e002      	b.n	80025f6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002602:	2101      	movs	r1, #1
 8002604:	69b8      	ldr	r0, [r7, #24]
 8002606:	f7ff ff19 	bl	800243c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	2073      	movs	r0, #115	@ 0x73
 800261a:	f004 fb97 	bl	8006d4c <SEGGER_SYSVIEW_RecordU32x3>
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b090      	sub	sp, #64	@ 0x40
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <xQueueGenericSend+0x34>
        __asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x42>
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <xQueueGenericSend+0x46>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <xQueueGenericSend+0x48>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <xQueueGenericSend+0x64>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <xQueueGenericSend+0x72>
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <xQueueGenericSend+0x76>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <xQueueGenericSend+0x78>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10b      	bne.n	80026bc <xQueueGenericSend+0x94>
        __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	623b      	str	r3, [r7, #32]
    }
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026bc:	f001 fac8 	bl	8003c50 <xTaskGetSchedulerState>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <xQueueGenericSend+0xa4>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <xQueueGenericSend+0xa8>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <xQueueGenericSend+0xaa>
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10b      	bne.n	80026ee <xQueueGenericSend+0xc6>
        __asm volatile
 80026d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	61fb      	str	r3, [r7, #28]
    }
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	e7fd      	b.n	80026ea <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026ee:	f002 fa15 	bl	8004b1c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <xQueueGenericSend+0xdc>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d136      	bne.n	8002772 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8002704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002706:	4618      	mov	r0, r3
 8002708:	f005 f8ae 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	460b      	mov	r3, r1
 8002716:	4601      	mov	r1, r0
 8002718:	205a      	movs	r0, #90	@ 0x5a
 800271a:	f004 fb8d 	bl	8006e38 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002724:	f000 fa80 	bl	8002c28 <prvCopyDataToQueue>
 8002728:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	d010      	beq.n	8002754 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002734:	3324      	adds	r3, #36	@ 0x24
 8002736:	4618      	mov	r0, r3
 8002738:	f001 f8e6 	bl	8003908 <xTaskRemoveFromEventList>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d013      	beq.n	800276a <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002742:	4b4d      	ldr	r3, [pc, #308]	@ (8002878 <xQueueGenericSend+0x250>)
 8002744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	e00a      	b.n	800276a <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <xQueueGenericSend+0x250>)
 800275c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800276a:	f002 fa09 	bl	8004b80 <vPortExitCritical>
                return pdPASS;
 800276e:	2301      	movs	r3, #1
 8002770:	e07d      	b.n	800286e <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d110      	bne.n	800279a <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002778:	f002 fa02 	bl	8004b80 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277e:	4618      	mov	r0, r3
 8002780:	f005 f872 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	460b      	mov	r3, r1
 800278e:	4601      	mov	r1, r0
 8002790:	205a      	movs	r0, #90	@ 0x5a
 8002792:	f004 fb51 	bl	8006e38 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002796:	2300      	movs	r3, #0
 8002798:	e069      	b.n	800286e <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 800279a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 f917 	bl	80039d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027ae:	f002 f9e7 	bl	8004b80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027b2:	f000 fe59 	bl	8003468 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027b6:	f002 f9b1 	bl	8004b1c <vPortEnterCritical>
 80027ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d103      	bne.n	80027d0 <xQueueGenericSend+0x1a8>
 80027c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d103      	bne.n	80027e6 <xQueueGenericSend+0x1be>
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027e6:	f002 f9cb 	bl	8004b80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027ea:	1d3a      	adds	r2, r7, #4
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 f906 	bl	8003a04 <xTaskCheckForTimeOut>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d124      	bne.n	8002848 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002800:	f000 fb0a 	bl	8002e18 <prvIsQueueFull>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d018      	beq.n	800283c <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800280a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280c:	3310      	adds	r3, #16
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f001 f822 	bl	800385c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800281a:	f000 fa95 	bl	8002d48 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800281e:	f000 fe31 	bl	8003484 <xTaskResumeAll>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f af62 	bne.w	80026ee <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800282a:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <xQueueGenericSend+0x250>)
 800282c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	e758      	b.n	80026ee <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800283c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800283e:	f000 fa83 	bl	8002d48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002842:	f000 fe1f 	bl	8003484 <xTaskResumeAll>
 8002846:	e752      	b.n	80026ee <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800284a:	f000 fa7d 	bl	8002d48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800284e:	f000 fe19 	bl	8003484 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002854:	4618      	mov	r0, r3
 8002856:	f005 f807 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	460b      	mov	r3, r1
 8002864:	4601      	mov	r1, r0
 8002866:	205a      	movs	r0, #90	@ 0x5a
 8002868:	f004 fae6 	bl	8006e38 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800286c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800286e:	4618      	mov	r0, r3
 8002870:	3738      	adds	r7, #56	@ 0x38
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000ed04 	.word	0xe000ed04

0800287c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b090      	sub	sp, #64	@ 0x40
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <xQueueGenericSendFromISR+0x3e>
 80028b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <xQueueGenericSendFromISR+0x42>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <xQueueGenericSendFromISR+0x44>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d103      	bne.n	80028ea <xQueueGenericSendFromISR+0x6e>
 80028e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <xQueueGenericSendFromISR+0x72>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <xQueueGenericSendFromISR+0x74>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	623b      	str	r3, [r7, #32]
    }
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800290c:	f002 f9f6 	bl	8004cfc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002910:	f3ef 8211 	mrs	r2, BASEPRI
 8002914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	61fa      	str	r2, [r7, #28]
 8002926:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002928:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800292c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002934:	429a      	cmp	r2, r3
 8002936:	d302      	bcc.n	800293e <xQueueGenericSendFromISR+0xc2>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d149      	bne.n	80029d2 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800293e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002940:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002944:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800294e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002950:	4618      	mov	r0, r3
 8002952:	f004 ff89 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002956:	4601      	mov	r1, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	461a      	mov	r2, r3
 800295c:	2060      	movs	r0, #96	@ 0x60
 800295e:	f004 f99b 	bl	8006c98 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002968:	f000 f95e 	bl	8002c28 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800296c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d112      	bne.n	800299c <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	d026      	beq.n	80029cc <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002980:	3324      	adds	r3, #36	@ 0x24
 8002982:	4618      	mov	r0, r3
 8002984:	f000 ffc0 	bl	8003908 <xTaskRemoveFromEventList>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01e      	beq.n	80029cc <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e017      	b.n	80029cc <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800299c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80029a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80029a2:	d10b      	bne.n	80029bc <xQueueGenericSendFromISR+0x140>
        __asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	617b      	str	r3, [r7, #20]
    }
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029c0:	3301      	adds	r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	b25a      	sxtb	r2, r3
 80029c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80029cc:	2301      	movs	r3, #1
 80029ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80029d0:	e00b      	b.n	80029ea <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80029d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 ff47 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 80029da:	4601      	mov	r1, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	2060      	movs	r0, #96	@ 0x60
 80029e2:	f004 f959 	bl	8006c98 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ec:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029f4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3740      	adds	r7, #64	@ 0x40
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08f      	sub	sp, #60	@ 0x3c
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <xQueueReceive+0x32>
        __asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	623b      	str	r3, [r7, #32]
    }
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	e7fd      	b.n	8002a2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d103      	bne.n	8002a40 <xQueueReceive+0x40>
 8002a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <xQueueReceive+0x44>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <xQueueReceive+0x46>
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10b      	bne.n	8002a62 <xQueueReceive+0x62>
        __asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	61fb      	str	r3, [r7, #28]
    }
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	e7fd      	b.n	8002a5e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a62:	f001 f8f5 	bl	8003c50 <xTaskGetSchedulerState>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <xQueueReceive+0x72>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <xQueueReceive+0x76>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <xQueueReceive+0x78>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <xQueueReceive+0x94>
        __asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	61bb      	str	r3, [r7, #24]
    }
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a94:	f002 f842 	bl	8004b1c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d02f      	beq.n	8002b04 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aa8:	f000 f928 	bl	8002cfc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 feda 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f004 fed6 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002abc:	4602      	mov	r2, r0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	9100      	str	r1, [sp, #0]
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	205c      	movs	r0, #92	@ 0x5c
 8002ac8:	f004 f9b6 	bl	8006e38 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	1e5a      	subs	r2, r3, #1
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00f      	beq.n	8002afc <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ade:	3310      	adds	r3, #16
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 ff11 	bl	8003908 <xTaskRemoveFromEventList>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002aec:	4b4d      	ldr	r3, [pc, #308]	@ (8002c24 <xQueueReceive+0x224>)
 8002aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002afc:	f002 f840 	bl	8004b80 <vPortExitCritical>
                return pdPASS;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e08a      	b.n	8002c1a <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b0a:	f002 f839 	bl	8004b80 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 fea9 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002b16:	4604      	mov	r4, r0
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f004 fea5 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2101      	movs	r1, #1
 8002b24:	9100      	str	r1, [sp, #0]
 8002b26:	4621      	mov	r1, r4
 8002b28:	205c      	movs	r0, #92	@ 0x5c
 8002b2a:	f004 f985 	bl	8006e38 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e073      	b.n	8002c1a <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b38:	f107 0310 	add.w	r3, r7, #16
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 ff4b 	bl	80039d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b46:	f002 f81b 	bl	8004b80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b4a:	f000 fc8d 	bl	8003468 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b4e:	f001 ffe5 	bl	8004b1c <vPortEnterCritical>
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d103      	bne.n	8002b68 <xQueueReceive+0x168>
 8002b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d103      	bne.n	8002b7e <xQueueReceive+0x17e>
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b7e:	f001 ffff 	bl	8004b80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b82:	1d3a      	adds	r2, r7, #4
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 ff3a 	bl	8003a04 <xTaskCheckForTimeOut>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d124      	bne.n	8002be0 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b98:	f000 f928 	bl	8002dec <prvIsQueueEmpty>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d018      	beq.n	8002bd4 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba4:	3324      	adds	r3, #36	@ 0x24
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fe56 	bl	800385c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bb2:	f000 f8c9 	bl	8002d48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002bb6:	f000 fc65 	bl	8003484 <xTaskResumeAll>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f47f af69 	bne.w	8002a94 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002bc2:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <xQueueReceive+0x224>)
 8002bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	e75f      	b.n	8002a94 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bd6:	f000 f8b7 	bl	8002d48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bda:	f000 fc53 	bl	8003484 <xTaskResumeAll>
 8002bde:	e759      	b.n	8002a94 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002be0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002be2:	f000 f8b1 	bl	8002d48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002be6:	f000 fc4d 	bl	8003484 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bec:	f000 f8fe 	bl	8002dec <prvIsQueueEmpty>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f43f af4e 	beq.w	8002a94 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f004 fe34 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002c00:	4604      	mov	r4, r0
 8002c02:	2000      	movs	r0, #0
 8002c04:	f004 fe30 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	9100      	str	r1, [sp, #0]
 8002c10:	4621      	mov	r1, r4
 8002c12:	205c      	movs	r0, #92	@ 0x5c
 8002c14:	f004 f910 	bl	8006e38 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002c18:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3734      	adds	r7, #52	@ 0x34
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd90      	pop	{r4, r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d14d      	bne.n	8002cea <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f81a 	bl	8003c8c <xTaskPriorityDisinherit>
 8002c58:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	e043      	b.n	8002cea <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d119      	bne.n	8002c9c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6858      	ldr	r0, [r3, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	461a      	mov	r2, r3
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	f004 ffbe 	bl	8007bf4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	441a      	add	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d32b      	bcc.n	8002cea <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	e026      	b.n	8002cea <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68d8      	ldr	r0, [r3, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	f004 ffa4 	bl	8007bf4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	425b      	negs	r3, r3
 8002cb6:	441a      	add	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	425b      	negs	r3, r3
 8002cd2:	441a      	add	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d105      	bne.n	8002cea <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002cf2:	697b      	ldr	r3, [r7, #20]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d018      	beq.n	8002d40 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	441a      	add	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d303      	bcc.n	8002d30 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68d9      	ldr	r1, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6838      	ldr	r0, [r7, #0]
 8002d3c:	f004 ff5a 	bl	8007bf4 <memcpy>
    }
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d50:	f001 fee4 	bl	8004b1c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d5a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d5c:	e011      	b.n	8002d82 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3324      	adds	r3, #36	@ 0x24
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fdcc 	bl	8003908 <xTaskRemoveFromEventList>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d76:	f000 fead 	bl	8003ad4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	dce9      	bgt.n	8002d5e <prvUnlockQueue+0x16>
 8002d8a:	e000      	b.n	8002d8e <prvUnlockQueue+0x46>
                        break;
 8002d8c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	22ff      	movs	r2, #255	@ 0xff
 8002d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002d96:	f001 fef3 	bl	8004b80 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d9a:	f001 febf 	bl	8004b1c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002da4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002da6:	e011      	b.n	8002dcc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d012      	beq.n	8002dd6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3310      	adds	r3, #16
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fda7 	bl	8003908 <xTaskRemoveFromEventList>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002dc0:	f000 fe88 	bl	8003ad4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	dce9      	bgt.n	8002da8 <prvUnlockQueue+0x60>
 8002dd4:	e000      	b.n	8002dd8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002dd6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	22ff      	movs	r2, #255	@ 0xff
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002de0:	f001 fece 	bl	8004b80 <vPortExitCritical>
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002df4:	f001 fe92 	bl	8004b1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e001      	b.n	8002e0a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e0a:	f001 feb9 	bl	8004b80 <vPortExitCritical>

    return xReturn;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e20:	f001 fe7c 	bl	8004b1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d102      	bne.n	8002e36 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e001      	b.n	8002e3a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e3a:	f001 fea1 	bl	8004b80 <vPortExitCritical>

    return xReturn;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e01e      	b.n	8002e96 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e58:	4a13      	ldr	r2, [pc, #76]	@ (8002ea8 <vQueueAddToRegistry+0x60>)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d115      	bne.n	8002e90 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e64:	4910      	ldr	r1, [pc, #64]	@ (8002ea8 <vQueueAddToRegistry+0x60>)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea8 <vQueueAddToRegistry+0x60>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 fcf3 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8002e82:	4601      	mov	r1, r0
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	2071      	movs	r0, #113	@ 0x71
 8002e8a:	f003 ff05 	bl	8006c98 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e8e:	e006      	b.n	8002e9e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b07      	cmp	r3, #7
 8002e9a:	d9dd      	bls.n	8002e58 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000098 	.word	0x20000098

08002eac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ebc:	f001 fe2e 	bl	8004b1c <vPortEnterCritical>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d103      	bne.n	8002ed6 <vQueueWaitForMessageRestricted+0x2a>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d103      	bne.n	8002eec <vQueueWaitForMessageRestricted+0x40>
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eec:	f001 fe48 	bl	8004b80 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3324      	adds	r3, #36	@ 0x24
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fcd1 	bl	80038a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f06:	6978      	ldr	r0, [r7, #20]
 8002f08:	f7ff ff1e 	bl	8002d48 <prvUnlockQueue>
    }
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	@ 0x30
 8002f18:	af04      	add	r7, sp, #16
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 ff29 	bl	8004d80 <pvPortMalloc>
 8002f2e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00e      	beq.n	8002f54 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f36:	2058      	movs	r0, #88	@ 0x58
 8002f38:	f001 ff22 	bl	8004d80 <pvPortMalloc>
 8002f3c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f4a:	e005      	b.n	8002f58 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f4c:	6978      	ldr	r0, [r7, #20]
 8002f4e:	f001 fff9 	bl	8004f44 <vPortFree>
 8002f52:	e001      	b.n	8002f58 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d013      	beq.n	8002f86 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	2300      	movs	r3, #0
 8002f62:	9303      	str	r3, [sp, #12]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	9302      	str	r3, [sp, #8]
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f80e 	bl	8002f96 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f7a:	69f8      	ldr	r0, [r7, #28]
 8002f7c:	f000 f8a2 	bl	80030c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f80:	2301      	movs	r3, #1
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e002      	b.n	8002f8c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f8c:	69bb      	ldr	r3, [r7, #24]
    }
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b088      	sub	sp, #32
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	461a      	mov	r2, r3
 8002fae:	21a5      	movs	r1, #165	@ 0xa5
 8002fb0:	f004 fdf4 	bl	8007b9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f023 0307 	bic.w	r3, r3, #7
 8002fcc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	617b      	str	r3, [r7, #20]
    }
 8002fea:	bf00      	nop
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01f      	beq.n	8003036 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e012      	b.n	8003022 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	7819      	ldrb	r1, [r3, #0]
 8003004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	3334      	adds	r3, #52	@ 0x34
 800300c:	460a      	mov	r2, r1
 800300e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3301      	adds	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b09      	cmp	r3, #9
 8003026:	d9e9      	bls.n	8002ffc <prvInitialiseNewTask+0x66>
 8003028:	e000      	b.n	800302c <prvInitialiseNewTask+0x96>
            {
                break;
 800302a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003034:	e003      	b.n	800303e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	2b04      	cmp	r3, #4
 8003042:	d901      	bls.n	8003048 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003044:	2304      	movs	r3, #4
 8003046:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800304c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003052:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	2200      	movs	r2, #0
 8003058:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	3304      	adds	r3, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff f958 	bl	8002314 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	3318      	adds	r3, #24
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f953 	bl	8002314 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800306e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003072:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	f1c3 0205 	rsb	r2, r3, #5
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003086:	3350      	adds	r3, #80	@ 0x50
 8003088:	2204      	movs	r2, #4
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f004 fd85 	bl	8007b9c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	3354      	adds	r3, #84	@ 0x54
 8003096:	2201      	movs	r2, #1
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f004 fd7e 	bl	8007b9c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	69b8      	ldr	r0, [r7, #24]
 80030a6:	f001 fb89 	bl	80047bc <pxPortInitialiseStack>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ae:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80030b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030bc:	bf00      	nop
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80030c4:	b5b0      	push	{r4, r5, r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80030cc:	f001 fd26 	bl	8004b1c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030d0:	4b3b      	ldr	r3, [pc, #236]	@ (80031c0 <prvAddNewTaskToReadyList+0xfc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	4a3a      	ldr	r2, [pc, #232]	@ (80031c0 <prvAddNewTaskToReadyList+0xfc>)
 80030d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030da:	4b3a      	ldr	r3, [pc, #232]	@ (80031c4 <prvAddNewTaskToReadyList+0x100>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030e2:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <prvAddNewTaskToReadyList+0x100>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030e8:	4b35      	ldr	r3, [pc, #212]	@ (80031c0 <prvAddNewTaskToReadyList+0xfc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d110      	bne.n	8003112 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030f0:	f000 fd14 	bl	8003b1c <prvInitialiseTaskLists>
 80030f4:	e00d      	b.n	8003112 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030f6:	4b34      	ldr	r3, [pc, #208]	@ (80031c8 <prvAddNewTaskToReadyList+0x104>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030fe:	4b31      	ldr	r3, [pc, #196]	@ (80031c4 <prvAddNewTaskToReadyList+0x100>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	429a      	cmp	r2, r3
 800310a:	d802      	bhi.n	8003112 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800310c:	4a2d      	ldr	r2, [pc, #180]	@ (80031c4 <prvAddNewTaskToReadyList+0x100>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003112:	4b2e      	ldr	r3, [pc, #184]	@ (80031cc <prvAddNewTaskToReadyList+0x108>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	4a2c      	ldr	r2, [pc, #176]	@ (80031cc <prvAddNewTaskToReadyList+0x108>)
 800311a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800311c:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <prvAddNewTaskToReadyList+0x108>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <prvAddNewTaskToReadyList+0x94>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4618      	mov	r0, r3
 800312e:	f004 fa75 	bl	800761c <SEGGER_SYSVIEW_OnTaskCreate>
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	461d      	mov	r5, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461c      	mov	r4, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	1ae3      	subs	r3, r4, r3
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	462b      	mov	r3, r5
 8003154:	f002 f8c6 	bl	80052e4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4618      	mov	r0, r3
 800315c:	f004 fae2 	bl	8007724 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	2201      	movs	r2, #1
 8003166:	409a      	lsls	r2, r3
 8003168:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <prvAddNewTaskToReadyList+0x10c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4313      	orrs	r3, r2
 800316e:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <prvAddNewTaskToReadyList+0x10c>)
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4a15      	ldr	r2, [pc, #84]	@ (80031d4 <prvAddNewTaskToReadyList+0x110>)
 8003180:	441a      	add	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f7ff f8d0 	bl	800232e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800318e:	f001 fcf7 	bl	8004b80 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <prvAddNewTaskToReadyList+0x104>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00e      	beq.n	80031b8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800319a:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <prvAddNewTaskToReadyList+0x100>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d207      	bcs.n	80031b8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80031a8:	4b0b      	ldr	r3, [pc, #44]	@ (80031d8 <prvAddNewTaskToReadyList+0x114>)
 80031aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdb0      	pop	{r4, r5, r7, pc}
 80031c0:	200001b0 	.word	0x200001b0
 80031c4:	200000d8 	.word	0x200000d8
 80031c8:	200001bc 	.word	0x200001bc
 80031cc:	200001cc 	.word	0x200001cc
 80031d0:	200001b8 	.word	0x200001b8
 80031d4:	200000dc 	.word	0x200000dc
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80031e4:	f001 fc9a 	bl	8004b1c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <vTaskDelete+0x18>
 80031ee:	4b46      	ldr	r3, [pc, #280]	@ (8003308 <vTaskDelete+0x12c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	e000      	b.n	80031f6 <vTaskDelete+0x1a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff f8f3 	bl	80023e8 <uxListRemove>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d115      	bne.n	8003234 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800320c:	493f      	ldr	r1, [pc, #252]	@ (800330c <vTaskDelete+0x130>)
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <vTaskDelete+0x58>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	2201      	movs	r2, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43da      	mvns	r2, r3
 800322a:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <vTaskDelete+0x134>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4013      	ands	r3, r2
 8003230:	4a37      	ldr	r2, [pc, #220]	@ (8003310 <vTaskDelete+0x134>)
 8003232:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3318      	adds	r3, #24
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f8d1 	bl	80023e8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003246:	4b33      	ldr	r3, [pc, #204]	@ (8003314 <vTaskDelete+0x138>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	4a31      	ldr	r2, [pc, #196]	@ (8003314 <vTaskDelete+0x138>)
 800324e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003250:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <vTaskDelete+0x12c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	429a      	cmp	r2, r3
 8003258:	d118      	bne.n	800328c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3304      	adds	r3, #4
 800325e:	4619      	mov	r1, r3
 8003260:	482d      	ldr	r0, [pc, #180]	@ (8003318 <vTaskDelete+0x13c>)
 8003262:	f7ff f864 	bl	800232e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003266:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <vTaskDelete+0x140>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3301      	adds	r3, #1
 800326c:	4a2b      	ldr	r2, [pc, #172]	@ (800331c <vTaskDelete+0x140>)
 800326e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 faf8 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8003278:	4603      	mov	r3, r0
 800327a:	4619      	mov	r1, r3
 800327c:	2022      	movs	r0, #34	@ 0x22
 800327e:	f003 fccf 	bl	8006c20 <SEGGER_SYSVIEW_RecordU32>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4618      	mov	r0, r3
 8003286:	f002 f895 	bl	80053b4 <SYSVIEW_DeleteTask>
 800328a:	e016      	b.n	80032ba <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800328c:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <vTaskDelete+0x144>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3b01      	subs	r3, #1
 8003292:	4a23      	ldr	r2, [pc, #140]	@ (8003320 <vTaskDelete+0x144>)
 8003294:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	f004 fae5 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 800329e:	4603      	mov	r3, r0
 80032a0:	4619      	mov	r1, r3
 80032a2:	2022      	movs	r0, #34	@ 0x22
 80032a4:	f003 fcbc 	bl	8006c20 <SEGGER_SYSVIEW_RecordU32>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 f882 	bl	80053b4 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fca1 	bl	8003bf8 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80032b6:	f000 fcaf 	bl	8003c18 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80032ba:	f001 fc61 	bl	8004b80 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80032be:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <vTaskDelete+0x148>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01c      	beq.n	8003300 <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 80032c6:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <vTaskDelete+0x12c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d117      	bne.n	8003300 <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80032d0:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <vTaskDelete+0x14c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <vTaskDelete+0x114>
        __asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60bb      	str	r3, [r7, #8]
    }
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80032f0:	4b0e      	ldr	r3, [pc, #56]	@ (800332c <vTaskDelete+0x150>)
 80032f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	200000d8 	.word	0x200000d8
 800330c:	200000dc 	.word	0x200000dc
 8003310:	200001b8 	.word	0x200001b8
 8003314:	200001cc 	.word	0x200001cc
 8003318:	20000184 	.word	0x20000184
 800331c:	20000198 	.word	0x20000198
 8003320:	200001b0 	.word	0x200001b0
 8003324:	200001bc 	.word	0x200001bc
 8003328:	200001d8 	.word	0x200001d8
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01c      	beq.n	800337c <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003342:	4b16      	ldr	r3, [pc, #88]	@ (800339c <vTaskDelay+0x6c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <vTaskDelay+0x32>
        __asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	60bb      	str	r3, [r7, #8]
    }
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	e7fd      	b.n	800335e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003362:	f000 f881 	bl	8003468 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	2023      	movs	r0, #35	@ 0x23
 800336a:	f003 fc59 	bl	8006c20 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800336e:	2100      	movs	r1, #0
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fe8d 	bl	8004090 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003376:	f000 f885 	bl	8003484 <xTaskResumeAll>
 800337a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <vTaskDelay+0x70>)
 8003384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200001d8 	.word	0x200001d8
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80033aa:	4b27      	ldr	r3, [pc, #156]	@ (8003448 <vTaskStartScheduler+0xa4>)
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	2282      	movs	r2, #130	@ 0x82
 80033b6:	4925      	ldr	r1, [pc, #148]	@ (800344c <vTaskStartScheduler+0xa8>)
 80033b8:	4825      	ldr	r0, [pc, #148]	@ (8003450 <vTaskStartScheduler+0xac>)
 80033ba:	f7ff fdab 	bl	8002f14 <xTaskCreate>
 80033be:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d102      	bne.n	80033cc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80033c6:	f000 fedb 	bl	8004180 <xTimerCreateTimerTask>
 80033ca:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d124      	bne.n	800341c <vTaskStartScheduler+0x78>
        __asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	60bb      	str	r3, [r7, #8]
    }
 80033e4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80033e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <vTaskStartScheduler+0xb0>)
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003458 <vTaskStartScheduler+0xb4>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033f4:	4b19      	ldr	r3, [pc, #100]	@ (800345c <vTaskStartScheduler+0xb8>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80033fa:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <vTaskStartScheduler+0xbc>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <vTaskStartScheduler+0xa4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d102      	bne.n	800340c <vTaskStartScheduler+0x68>
 8003406:	f004 f8ed 	bl	80075e4 <SEGGER_SYSVIEW_OnIdle>
 800340a:	e004      	b.n	8003416 <vTaskStartScheduler+0x72>
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <vTaskStartScheduler+0xbc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 f945 	bl	80076a0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003416:	f001 fa5d 	bl	80048d4 <xPortStartScheduler>
 800341a:	e00f      	b.n	800343c <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d10b      	bne.n	800343c <vTaskStartScheduler+0x98>
        __asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	607b      	str	r3, [r7, #4]
    }
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800343c:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <vTaskStartScheduler+0xc0>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200001d4 	.word	0x200001d4
 800344c:	08007ce4 	.word	0x08007ce4
 8003450:	08003aed 	.word	0x08003aed
 8003454:	200001d0 	.word	0x200001d0
 8003458:	200001bc 	.word	0x200001bc
 800345c:	200001b4 	.word	0x200001b4
 8003460:	200000d8 	.word	0x200000d8
 8003464:	2000000c 	.word	0x2000000c

08003468 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <vTaskSuspendAll+0x18>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	4a03      	ldr	r2, [pc, #12]	@ (8003480 <vTaskSuspendAll+0x18>)
 8003474:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	200001d8 	.word	0x200001d8

08003484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003492:	4b44      	ldr	r3, [pc, #272]	@ (80035a4 <xTaskResumeAll+0x120>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <xTaskResumeAll+0x2e>
        __asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	603b      	str	r3, [r7, #0]
    }
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	e7fd      	b.n	80034ae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80034b2:	f001 fb33 	bl	8004b1c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80034b6:	4b3b      	ldr	r3, [pc, #236]	@ (80035a4 <xTaskResumeAll+0x120>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	4a39      	ldr	r2, [pc, #228]	@ (80035a4 <xTaskResumeAll+0x120>)
 80034be:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c0:	4b38      	ldr	r3, [pc, #224]	@ (80035a4 <xTaskResumeAll+0x120>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d165      	bne.n	8003594 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034c8:	4b37      	ldr	r3, [pc, #220]	@ (80035a8 <xTaskResumeAll+0x124>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d061      	beq.n	8003594 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d0:	e032      	b.n	8003538 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d2:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <xTaskResumeAll+0x128>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3318      	adds	r3, #24
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe ff82 	bl	80023e8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe ff7d 	bl	80023e8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f004 f917 	bl	8007724 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	2201      	movs	r2, #1
 80034fc:	409a      	lsls	r2, r3
 80034fe:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <xTaskResumeAll+0x12c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	4a2a      	ldr	r2, [pc, #168]	@ (80035b0 <xTaskResumeAll+0x12c>)
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4a27      	ldr	r2, [pc, #156]	@ (80035b4 <xTaskResumeAll+0x130>)
 8003516:	441a      	add	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f7fe ff05 	bl	800232e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003528:	4b23      	ldr	r3, [pc, #140]	@ (80035b8 <xTaskResumeAll+0x134>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003532:	4b22      	ldr	r3, [pc, #136]	@ (80035bc <xTaskResumeAll+0x138>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003538:	4b1c      	ldr	r3, [pc, #112]	@ (80035ac <xTaskResumeAll+0x128>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1c8      	bne.n	80034d2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003546:	f000 fb67 	bl	8003c18 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800354a:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <xTaskResumeAll+0x13c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003556:	f000 f859 	bl	800360c <xTaskIncrementTick>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003560:	4b16      	ldr	r3, [pc, #88]	@ (80035bc <xTaskResumeAll+0x138>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f1      	bne.n	8003556 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003572:	4b13      	ldr	r3, [pc, #76]	@ (80035c0 <xTaskResumeAll+0x13c>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003578:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <xTaskResumeAll+0x138>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003580:	2301      	movs	r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003584:	4b0f      	ldr	r3, [pc, #60]	@ (80035c4 <xTaskResumeAll+0x140>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003594:	f001 faf4 	bl	8004b80 <vPortExitCritical>

    return xAlreadyYielded;
 8003598:	68bb      	ldr	r3, [r7, #8]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001d8 	.word	0x200001d8
 80035a8:	200001b0 	.word	0x200001b0
 80035ac:	20000170 	.word	0x20000170
 80035b0:	200001b8 	.word	0x200001b8
 80035b4:	200000dc 	.word	0x200000dc
 80035b8:	200000d8 	.word	0x200000d8
 80035bc:	200001c4 	.word	0x200001c4
 80035c0:	200001c0 	.word	0x200001c0
 80035c4:	e000ed04 	.word	0xe000ed04

080035c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80035ce:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <xTaskGetTickCount+0x1c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80035d4:	687b      	ldr	r3, [r7, #4]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	200001b4 	.word	0x200001b4

080035e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035ee:	f001 fb85 	bl	8004cfc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80035f6:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <xTaskGetTickCountFromISR+0x20>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80035fc:	683b      	ldr	r3, [r7, #0]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200001b4 	.word	0x200001b4

0800360c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003616:	4b51      	ldr	r3, [pc, #324]	@ (800375c <xTaskIncrementTick+0x150>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 8093 	bne.w	8003746 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003620:	4b4f      	ldr	r3, [pc, #316]	@ (8003760 <xTaskIncrementTick+0x154>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003628:	4a4d      	ldr	r2, [pc, #308]	@ (8003760 <xTaskIncrementTick+0x154>)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d121      	bne.n	8003678 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003634:	4b4b      	ldr	r3, [pc, #300]	@ (8003764 <xTaskIncrementTick+0x158>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <xTaskIncrementTick+0x4a>
        __asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	603b      	str	r3, [r7, #0]
    }
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <xTaskIncrementTick+0x46>
 8003656:	4b43      	ldr	r3, [pc, #268]	@ (8003764 <xTaskIncrementTick+0x158>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	4b42      	ldr	r3, [pc, #264]	@ (8003768 <xTaskIncrementTick+0x15c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a40      	ldr	r2, [pc, #256]	@ (8003764 <xTaskIncrementTick+0x158>)
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4a40      	ldr	r2, [pc, #256]	@ (8003768 <xTaskIncrementTick+0x15c>)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b40      	ldr	r3, [pc, #256]	@ (800376c <xTaskIncrementTick+0x160>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	4a3e      	ldr	r2, [pc, #248]	@ (800376c <xTaskIncrementTick+0x160>)
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	f000 fad0 	bl	8003c18 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003678:	4b3d      	ldr	r3, [pc, #244]	@ (8003770 <xTaskIncrementTick+0x164>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	d34c      	bcc.n	800371c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003682:	4b38      	ldr	r3, [pc, #224]	@ (8003764 <xTaskIncrementTick+0x158>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800368c:	4b38      	ldr	r3, [pc, #224]	@ (8003770 <xTaskIncrementTick+0x164>)
 800368e:	f04f 32ff 	mov.w	r2, #4294967295
 8003692:	601a      	str	r2, [r3, #0]
                    break;
 8003694:	e042      	b.n	800371c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003696:	4b33      	ldr	r3, [pc, #204]	@ (8003764 <xTaskIncrementTick+0x158>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d203      	bcs.n	80036b6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80036ae:	4a30      	ldr	r2, [pc, #192]	@ (8003770 <xTaskIncrementTick+0x164>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036b4:	e032      	b.n	800371c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3304      	adds	r3, #4
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fe94 	bl	80023e8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3318      	adds	r3, #24
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fe8b 	bl	80023e8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f004 f825 	bl	8007724 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	2201      	movs	r2, #1
 80036e0:	409a      	lsls	r2, r3
 80036e2:	4b24      	ldr	r3, [pc, #144]	@ (8003774 <xTaskIncrementTick+0x168>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	4a22      	ldr	r2, [pc, #136]	@ (8003774 <xTaskIncrementTick+0x168>)
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003778 <xTaskIncrementTick+0x16c>)
 80036fa:	441a      	add	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f7fe fe13 	bl	800232e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370c:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <xTaskIncrementTick+0x170>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003712:	429a      	cmp	r2, r3
 8003714:	d3b5      	bcc.n	8003682 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003716:	2301      	movs	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800371a:	e7b2      	b.n	8003682 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800371c:	4b17      	ldr	r3, [pc, #92]	@ (800377c <xTaskIncrementTick+0x170>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003722:	4915      	ldr	r1, [pc, #84]	@ (8003778 <xTaskIncrementTick+0x16c>)
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d901      	bls.n	8003738 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003734:	2301      	movs	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003738:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <xTaskIncrementTick+0x174>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e004      	b.n	8003750 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003746:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <xTaskIncrementTick+0x178>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <xTaskIncrementTick+0x178>)
 800374e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003750:	697b      	ldr	r3, [r7, #20]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200001d8 	.word	0x200001d8
 8003760:	200001b4 	.word	0x200001b4
 8003764:	20000168 	.word	0x20000168
 8003768:	2000016c 	.word	0x2000016c
 800376c:	200001c8 	.word	0x200001c8
 8003770:	200001d0 	.word	0x200001d0
 8003774:	200001b8 	.word	0x200001b8
 8003778:	200000dc 	.word	0x200000dc
 800377c:	200000d8 	.word	0x200000d8
 8003780:	200001c4 	.word	0x200001c4
 8003784:	200001c0 	.word	0x200001c0

08003788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800378e:	4b2d      	ldr	r3, [pc, #180]	@ (8003844 <vTaskSwitchContext+0xbc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003796:	4b2c      	ldr	r3, [pc, #176]	@ (8003848 <vTaskSwitchContext+0xc0>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800379c:	e04e      	b.n	800383c <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800379e:	4b2a      	ldr	r3, [pc, #168]	@ (8003848 <vTaskSwitchContext+0xc0>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a4:	4b29      	ldr	r3, [pc, #164]	@ (800384c <vTaskSwitchContext+0xc4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80037b2:	7afb      	ldrb	r3, [r7, #11]
 80037b4:	f1c3 031f 	rsb	r3, r3, #31
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	4925      	ldr	r1, [pc, #148]	@ (8003850 <vTaskSwitchContext+0xc8>)
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <vTaskSwitchContext+0x5e>
        __asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	607b      	str	r3, [r7, #4]
    }
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	e7fd      	b.n	80037e2 <vTaskSwitchContext+0x5a>
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <vTaskSwitchContext+0xc8>)
 80037f2:	4413      	add	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	3308      	adds	r3, #8
 8003808:	429a      	cmp	r2, r3
 800380a:	d104      	bne.n	8003816 <vTaskSwitchContext+0x8e>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4a0d      	ldr	r2, [pc, #52]	@ (8003854 <vTaskSwitchContext+0xcc>)
 800381e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003820:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <vTaskSwitchContext+0xcc>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <vTaskSwitchContext+0xd0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d102      	bne.n	8003832 <vTaskSwitchContext+0xaa>
 800382c:	f003 feda 	bl	80075e4 <SEGGER_SYSVIEW_OnIdle>
}
 8003830:	e004      	b.n	800383c <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003832:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <vTaskSwitchContext+0xcc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 ff32 	bl	80076a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200001d8 	.word	0x200001d8
 8003848:	200001c4 	.word	0x200001c4
 800384c:	200001b8 	.word	0x200001b8
 8003850:	200000dc 	.word	0x200000dc
 8003854:	200000d8 	.word	0x200000d8
 8003858:	200001d4 	.word	0x200001d4

0800385c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60fb      	str	r3, [r7, #12]
    }
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003884:	4b07      	ldr	r3, [pc, #28]	@ (80038a4 <vTaskPlaceOnEventList+0x48>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3318      	adds	r3, #24
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fe fd72 	bl	8002376 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003892:	2101      	movs	r1, #1
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	f000 fbfb 	bl	8004090 <prvAddCurrentTaskToDelayedList>
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200000d8 	.word	0x200000d8

080038a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	617b      	str	r3, [r7, #20]
    }
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	e7fd      	b.n	80038ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x5c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3318      	adds	r3, #24
 80038d8:	4619      	mov	r1, r3
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7fe fd27 	bl	800232e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80038ec:	2024      	movs	r0, #36	@ 0x24
 80038ee:	f003 f979 	bl	8006be4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	68b8      	ldr	r0, [r7, #8]
 80038f6:	f000 fbcb 	bl	8004090 <prvAddCurrentTaskToDelayedList>
    }
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200000d8 	.word	0x200000d8

08003908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60fb      	str	r3, [r7, #12]
    }
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	3318      	adds	r3, #24
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fd54 	bl	80023e8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003940:	4b1f      	ldr	r3, [pc, #124]	@ (80039c0 <xTaskRemoveFromEventList+0xb8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d120      	bne.n	800398a <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	3304      	adds	r3, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fd4b 	bl	80023e8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fee5 	bl	8007724 <SEGGER_SYSVIEW_OnTaskStartReady>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	2201      	movs	r2, #1
 8003960:	409a      	lsls	r2, r3
 8003962:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <xTaskRemoveFromEventList+0xbc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	4a16      	ldr	r2, [pc, #88]	@ (80039c4 <xTaskRemoveFromEventList+0xbc>)
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4a13      	ldr	r2, [pc, #76]	@ (80039c8 <xTaskRemoveFromEventList+0xc0>)
 800397a:	441a      	add	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3304      	adds	r3, #4
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f7fe fcd3 	bl	800232e <vListInsertEnd>
 8003988:	e005      	b.n	8003996 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3318      	adds	r3, #24
 800398e:	4619      	mov	r1, r3
 8003990:	480e      	ldr	r0, [pc, #56]	@ (80039cc <xTaskRemoveFromEventList+0xc4>)
 8003992:	f7fe fccc 	bl	800232e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399a:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <xTaskRemoveFromEventList+0xc8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d905      	bls.n	80039b0 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80039a8:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <xTaskRemoveFromEventList+0xcc>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e001      	b.n	80039b4 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80039b4:	697b      	ldr	r3, [r7, #20]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200001d8 	.word	0x200001d8
 80039c4:	200001b8 	.word	0x200001b8
 80039c8:	200000dc 	.word	0x200000dc
 80039cc:	20000170 	.word	0x20000170
 80039d0:	200000d8 	.word	0x200000d8
 80039d4:	200001c4 	.word	0x200001c4

080039d8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <vTaskInternalSetTimeOutState+0x24>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <vTaskInternalSetTimeOutState+0x28>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	605a      	str	r2, [r3, #4]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	200001c8 	.word	0x200001c8
 8003a00:	200001b4 	.word	0x200001b4

08003a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	613b      	str	r3, [r7, #16]
    }
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10b      	bne.n	8003a4a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	60fb      	str	r3, [r7, #12]
    }
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	e7fd      	b.n	8003a46 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003a4a:	f001 f867 	bl	8004b1c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003acc <xTaskCheckForTimeOut+0xc8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d102      	bne.n	8003a6e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
 8003a6c:	e026      	b.n	8003abc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b17      	ldr	r3, [pc, #92]	@ (8003ad0 <xTaskCheckForTimeOut+0xcc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d00a      	beq.n	8003a90 <xTaskCheckForTimeOut+0x8c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d305      	bcc.n	8003a90 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e015      	b.n	8003abc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d20b      	bcs.n	8003ab2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ff96 	bl	80039d8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e004      	b.n	8003abc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003abc:	f001 f860 	bl	8004b80 <vPortExitCritical>

    return xReturn;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200001b4 	.word	0x200001b4
 8003ad0:	200001c8 	.word	0x200001c8

08003ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	@ (8003ae8 <vTaskMissedYield+0x14>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	200001c4 	.word	0x200001c4

08003aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003af4:	f000 f852 	bl	8003b9c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003af8:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <prvIdleTask+0x28>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d9f9      	bls.n	8003af4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003b00:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <prvIdleTask+0x2c>)
 8003b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b10:	e7f0      	b.n	8003af4 <prvIdleTask+0x8>
 8003b12:	bf00      	nop
 8003b14:	200000dc 	.word	0x200000dc
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	e00c      	b.n	8003b42 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4a12      	ldr	r2, [pc, #72]	@ (8003b7c <prvInitialiseTaskLists+0x60>)
 8003b34:	4413      	add	r3, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fbcc 	bl	80022d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d9ef      	bls.n	8003b28 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b48:	480d      	ldr	r0, [pc, #52]	@ (8003b80 <prvInitialiseTaskLists+0x64>)
 8003b4a:	f7fe fbc3 	bl	80022d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b4e:	480d      	ldr	r0, [pc, #52]	@ (8003b84 <prvInitialiseTaskLists+0x68>)
 8003b50:	f7fe fbc0 	bl	80022d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b54:	480c      	ldr	r0, [pc, #48]	@ (8003b88 <prvInitialiseTaskLists+0x6c>)
 8003b56:	f7fe fbbd 	bl	80022d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003b5a:	480c      	ldr	r0, [pc, #48]	@ (8003b8c <prvInitialiseTaskLists+0x70>)
 8003b5c:	f7fe fbba 	bl	80022d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003b60:	480b      	ldr	r0, [pc, #44]	@ (8003b90 <prvInitialiseTaskLists+0x74>)
 8003b62:	f7fe fbb7 	bl	80022d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b66:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <prvInitialiseTaskLists+0x78>)
 8003b68:	4a05      	ldr	r2, [pc, #20]	@ (8003b80 <prvInitialiseTaskLists+0x64>)
 8003b6a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <prvInitialiseTaskLists+0x7c>)
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <prvInitialiseTaskLists+0x68>)
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200000dc 	.word	0x200000dc
 8003b80:	20000140 	.word	0x20000140
 8003b84:	20000154 	.word	0x20000154
 8003b88:	20000170 	.word	0x20000170
 8003b8c:	20000184 	.word	0x20000184
 8003b90:	2000019c 	.word	0x2000019c
 8003b94:	20000168 	.word	0x20000168
 8003b98:	2000016c 	.word	0x2000016c

08003b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ba2:	e019      	b.n	8003bd8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003ba4:	f000 ffba 	bl	8004b1c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba8:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <prvCheckTasksWaitingTermination+0x50>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe fc17 	bl	80023e8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <prvCheckTasksWaitingTermination+0x54>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003bf0 <prvCheckTasksWaitingTermination+0x54>)
 8003bc2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <prvCheckTasksWaitingTermination+0x58>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <prvCheckTasksWaitingTermination+0x58>)
 8003bcc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003bce:	f000 ffd7 	bl	8004b80 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f810 	bl	8003bf8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bd8:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <prvCheckTasksWaitingTermination+0x58>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e1      	bne.n	8003ba4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000184 	.word	0x20000184
 8003bf0:	200001b0 	.word	0x200001b0
 8003bf4:	20000198 	.word	0x20000198

08003bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 f99d 	bl	8004f44 <vPortFree>
                vPortFree( pxTCB );
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f001 f99a 	bl	8004f44 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <prvResetNextTaskUnblockTime+0x30>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d104      	bne.n	8003c30 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c26:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <prvResetNextTaskUnblockTime+0x34>)
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c2e:	e005      	b.n	8003c3c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c30:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <prvResetNextTaskUnblockTime+0x30>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a04      	ldr	r2, [pc, #16]	@ (8003c4c <prvResetNextTaskUnblockTime+0x34>)
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000168 	.word	0x20000168
 8003c4c:	200001d0 	.word	0x200001d0

08003c50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003c56:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <xTaskGetSchedulerState+0x34>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e008      	b.n	8003c76 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c64:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <xTaskGetSchedulerState+0x38>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	e001      	b.n	8003c76 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c76:	687b      	ldr	r3, [r7, #4]
    }
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	200001bc 	.word	0x200001bc
 8003c88:	200001d8 	.word	0x200001d8

08003c8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d06a      	beq.n	8003d78 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003ca2:	4b38      	ldr	r3, [pc, #224]	@ (8003d84 <xTaskPriorityDisinherit+0xf8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d00b      	beq.n	8003cc4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	60fb      	str	r3, [r7, #12]
    }
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60bb      	str	r3, [r7, #8]
    }
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d03e      	beq.n	8003d78 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d13a      	bne.n	8003d78 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fb6e 	bl	80023e8 <uxListRemove>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	2201      	movs	r2, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d88 <xTaskPriorityDisinherit+0xfc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4013      	ands	r3, r2
 8003d24:	4a18      	ldr	r2, [pc, #96]	@ (8003d88 <xTaskPriorityDisinherit+0xfc>)
 8003d26:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	204a      	movs	r0, #74	@ 0x4a
 8003d2e:	f002 ff77 	bl	8006c20 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	f1c3 0205 	rsb	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d88 <xTaskPriorityDisinherit+0xfc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	4a0c      	ldr	r2, [pc, #48]	@ (8003d88 <xTaskPriorityDisinherit+0xfc>)
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <xTaskPriorityDisinherit+0x100>)
 8003d66:	441a      	add	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f7fe fadd 	bl	800232e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d78:	697b      	ldr	r3, [r7, #20]
    }
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200000d8 	.word	0x200000d8
 8003d88:	200001b8 	.word	0x200001b8
 8003d8c:	200000dc 	.word	0x200000dc

08003d90 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00b      	beq.n	8003dbc <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	613b      	str	r3, [r7, #16]
    }
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003dbc:	f000 feae 	bl	8004b1c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003dc0:	4b36      	ldr	r3, [pc, #216]	@ (8003e9c <xTaskGenericNotifyWait+0x10c>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3354      	adds	r3, #84	@ 0x54
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d022      	beq.n	8003e18 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003dd2:	4b32      	ldr	r3, [pc, #200]	@ (8003e9c <xTaskGenericNotifyWait+0x10c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	3214      	adds	r2, #20
 8003dda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	43d2      	mvns	r2, r2
 8003de2:	4011      	ands	r1, r2
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	3214      	adds	r2, #20
 8003de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003dec:	4b2b      	ldr	r3, [pc, #172]	@ (8003e9c <xTaskGenericNotifyWait+0x10c>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	3354      	adds	r3, #84	@ 0x54
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e00:	2101      	movs	r1, #1
 8003e02:	6a38      	ldr	r0, [r7, #32]
 8003e04:	f000 f944 	bl	8004090 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003e08:	4b25      	ldr	r3, [pc, #148]	@ (8003ea0 <xTaskGenericNotifyWait+0x110>)
 8003e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e18:	f000 feb2 	bl	8004b80 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003e1c:	f000 fe7e 	bl	8004b1c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	2040      	movs	r0, #64	@ 0x40
 8003e2e:	f003 f803 	bl	8006e38 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003e38:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <xTaskGenericNotifyWait+0x10c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	3214      	adds	r2, #20
 8003e40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003e48:	4b14      	ldr	r3, [pc, #80]	@ (8003e9c <xTaskGenericNotifyWait+0x10c>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	3354      	adds	r3, #84	@ 0x54
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d002      	beq.n	8003e60 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e00e      	b.n	8003e7e <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003e60:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <xTaskGenericNotifyWait+0x10c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	3214      	adds	r2, #20
 8003e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	43d2      	mvns	r2, r2
 8003e70:	4011      	ands	r1, r2
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	3214      	adds	r2, #20
 8003e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003e7e:	4b07      	ldr	r3, [pc, #28]	@ (8003e9c <xTaskGenericNotifyWait+0x10c>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	3354      	adds	r3, #84	@ 0x54
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003e8c:	f000 fe78 	bl	8004b80 <vPortExitCritical>

        return xReturn;
 8003e90:	697b      	ldr	r3, [r7, #20]
    }
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200000d8 	.word	0x200000d8
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08e      	sub	sp, #56	@ 0x38
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <xTaskGenericNotify+0x30>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	623b      	str	r3, [r7, #32]
    }
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <xTaskGenericNotify+0x4e>
        __asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	61fb      	str	r3, [r7, #28]
    }
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8003ef6:	f000 fe11 	bl	8004b1c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	3214      	adds	r2, #20
 8003f06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4413      	add	r3, r2
 8003f14:	3354      	adds	r3, #84	@ 0x54
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4413      	add	r3, r2
 8003f22:	3354      	adds	r3, #84	@ 0x54
 8003f24:	2202      	movs	r2, #2
 8003f26:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d83b      	bhi.n	8003fa6 <xTaskGenericNotify+0x102>
 8003f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <xTaskGenericNotify+0x90>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003fc7 	.word	0x08003fc7
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f7d 	.word	0x08003f7d
 8003f44:	08003f8b 	.word	0x08003f8b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	3214      	adds	r2, #20
 8003f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	ea42 0103 	orr.w	r1, r2, r3
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	3214      	adds	r2, #20
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003f62:	e033      	b.n	8003fcc <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	3214      	adds	r2, #20
 8003f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	3214      	adds	r2, #20
 8003f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003f7a:	e027      	b.n	8003fcc <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	3214      	adds	r2, #20
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003f88:	e020      	b.n	8003fcc <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d006      	beq.n	8003fa0 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	3214      	adds	r2, #20
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003f9e:	e015      	b.n	8003fcc <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8003fa4:	e012      	b.n	8003fcc <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003fa6:	4b35      	ldr	r3, [pc, #212]	@ (800407c <xTaskGenericNotify+0x1d8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <xTaskGenericNotify+0x126>
        __asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	61bb      	str	r3, [r7, #24]
    }
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <xTaskGenericNotify+0x11e>
                    break;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <xTaskGenericNotify+0x128>

                    break;
 8003fca:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f003 fc4a 	bl	8007868 <SEGGER_SYSVIEW_ShrinkId>
 8003fd4:	4601      	mov	r1, r0
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	203e      	movs	r0, #62	@ 0x3e
 8003fe2:	f002 ff29 	bl	8006e38 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d13e      	bne.n	800406c <xTaskGenericNotify+0x1c8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe f9f8 	bl	80023e8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f003 fb92 	bl	8007724 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	2201      	movs	r2, #1
 8004006:	409a      	lsls	r2, r3
 8004008:	4b1d      	ldr	r3, [pc, #116]	@ (8004080 <xTaskGenericNotify+0x1dc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4313      	orrs	r3, r2
 800400e:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <xTaskGenericNotify+0x1dc>)
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4a19      	ldr	r2, [pc, #100]	@ (8004084 <xTaskGenericNotify+0x1e0>)
 8004020:	441a      	add	r2, r3
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	3304      	adds	r3, #4
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f7fe f980 	bl	800232e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <xTaskGenericNotify+0x1aa>
        __asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	617b      	str	r3, [r7, #20]
    }
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <xTaskGenericNotify+0x1a6>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <xTaskGenericNotify+0x1e4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	429a      	cmp	r2, r3
 800405a:	d907      	bls.n	800406c <xTaskGenericNotify+0x1c8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <xTaskGenericNotify+0x1e8>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800406c:	f000 fd88 	bl	8004b80 <vPortExitCritical>

        return xReturn;
 8004070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8004072:	4618      	mov	r0, r3
 8004074:	3730      	adds	r7, #48	@ 0x30
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200001b4 	.word	0x200001b4
 8004080:	200001b8 	.word	0x200001b8
 8004084:	200000dc 	.word	0x200000dc
 8004088:	200000d8 	.word	0x200000d8
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800409a:	4b32      	ldr	r3, [pc, #200]	@ (8004164 <prvAddCurrentTaskToDelayedList+0xd4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040a0:	4b31      	ldr	r3, [pc, #196]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3304      	adds	r3, #4
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe f99e 	bl	80023e8 <uxListRemove>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80040b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	2201      	movs	r2, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	4b2a      	ldr	r3, [pc, #168]	@ (800416c <prvAddCurrentTaskToDelayedList+0xdc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4013      	ands	r3, r2
 80040c6:	4a29      	ldr	r2, [pc, #164]	@ (800416c <prvAddCurrentTaskToDelayedList+0xdc>)
 80040c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d110      	bne.n	80040f4 <prvAddCurrentTaskToDelayedList+0x64>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00d      	beq.n	80040f4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80040d8:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	211b      	movs	r1, #27
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 fb62 	bl	80077a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040e4:	4b20      	ldr	r3, [pc, #128]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3304      	adds	r3, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4820      	ldr	r0, [pc, #128]	@ (8004170 <prvAddCurrentTaskToDelayedList+0xe0>)
 80040ee:	f7fe f91e 	bl	800232e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80040f2:	e032      	b.n	800415a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d20f      	bcs.n	800412c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800410c:	4b16      	ldr	r3, [pc, #88]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2104      	movs	r1, #4
 8004112:	4618      	mov	r0, r3
 8004114:	f003 fb48 	bl	80077a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004118:	4b16      	ldr	r3, [pc, #88]	@ (8004174 <prvAddCurrentTaskToDelayedList+0xe4>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f7fe f926 	bl	8002376 <vListInsert>
}
 800412a:	e016      	b.n	800415a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800412c:	4b0e      	ldr	r3, [pc, #56]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2104      	movs	r1, #4
 8004132:	4618      	mov	r0, r3
 8004134:	f003 fb38 	bl	80077a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004138:	4b0f      	ldr	r3, [pc, #60]	@ (8004178 <prvAddCurrentTaskToDelayedList+0xe8>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b0a      	ldr	r3, [pc, #40]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xd8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f7fe f916 	bl	8002376 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800414a:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <prvAddCurrentTaskToDelayedList+0xec>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	d202      	bcs.n	800415a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004154:	4a09      	ldr	r2, [pc, #36]	@ (800417c <prvAddCurrentTaskToDelayedList+0xec>)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6013      	str	r3, [r2, #0]
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200001b4 	.word	0x200001b4
 8004168:	200000d8 	.word	0x200000d8
 800416c:	200001b8 	.word	0x200001b8
 8004170:	2000019c 	.word	0x2000019c
 8004174:	2000016c 	.word	0x2000016c
 8004178:	20000168 	.word	0x20000168
 800417c:	200001d0 	.word	0x200001d0

08004180 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800418a:	f000 fae1 	bl	8004750 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <xTimerCreateTimerTask+0x58>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <xTimerCreateTimerTask+0x5c>)
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	2302      	movs	r3, #2
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80041a4:	490e      	ldr	r1, [pc, #56]	@ (80041e0 <xTimerCreateTimerTask+0x60>)
 80041a6:	480f      	ldr	r0, [pc, #60]	@ (80041e4 <xTimerCreateTimerTask+0x64>)
 80041a8:	f7fe feb4 	bl	8002f14 <xTaskCreate>
 80041ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	603b      	str	r3, [r7, #0]
    }
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80041cc:	687b      	ldr	r3, [r7, #4]
    }
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000020c 	.word	0x2000020c
 80041dc:	20000210 	.word	0x20000210
 80041e0:	08007cec 	.word	0x08007cec
 80041e4:	08004321 	.word	0x08004321

080041e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	@ 0x28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <xTimerGenericCommand+0x30>
        __asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	623b      	str	r3, [r7, #32]
    }
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004218:	4b19      	ldr	r3, [pc, #100]	@ (8004280 <xTimerGenericCommand+0x98>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d02a      	beq.n	8004276 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b05      	cmp	r3, #5
 8004230:	dc18      	bgt.n	8004264 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004232:	f7ff fd0d 	bl	8003c50 <xTaskGetSchedulerState>
 8004236:	4603      	mov	r3, r0
 8004238:	2b02      	cmp	r3, #2
 800423a:	d109      	bne.n	8004250 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800423c:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <xTimerGenericCommand+0x98>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f107 0114 	add.w	r1, r7, #20
 8004244:	2300      	movs	r3, #0
 8004246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004248:	f7fe f9ee 	bl	8002628 <xQueueGenericSend>
 800424c:	6278      	str	r0, [r7, #36]	@ 0x24
 800424e:	e012      	b.n	8004276 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <xTimerGenericCommand+0x98>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	f107 0114 	add.w	r1, r7, #20
 8004258:	2300      	movs	r3, #0
 800425a:	2200      	movs	r2, #0
 800425c:	f7fe f9e4 	bl	8002628 <xQueueGenericSend>
 8004260:	6278      	str	r0, [r7, #36]	@ 0x24
 8004262:	e008      	b.n	8004276 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004264:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <xTimerGenericCommand+0x98>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	f107 0114 	add.w	r1, r7, #20
 800426c:	2300      	movs	r3, #0
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	f7fe fb04 	bl	800287c <xQueueGenericSendFromISR>
 8004274:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004278:	4618      	mov	r0, r3
 800427a:	3728      	adds	r7, #40	@ 0x28
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	2000020c 	.word	0x2000020c

08004284 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800428e:	4b23      	ldr	r3, [pc, #140]	@ (800431c <prvProcessExpiredTimer+0x98>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe f8a3 	bl	80023e8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d023      	beq.n	80042f8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	18d1      	adds	r1, r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	6978      	ldr	r0, [r7, #20]
 80042be:	f000 f8d5 	bl	800446c <prvInsertTimerInActiveList>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042c8:	2300      	movs	r3, #0
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2300      	movs	r3, #0
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	2100      	movs	r1, #0
 80042d2:	6978      	ldr	r0, [r7, #20]
 80042d4:	f7ff ff88 	bl	80041e8 <xTimerGenericCommand>
 80042d8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d114      	bne.n	800430a <prvProcessExpiredTimer+0x86>
        __asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	60fb      	str	r3, [r7, #12]
    }
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	4798      	blx	r3
    }
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000204 	.word	0x20000204

08004320 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f859 	bl	80043e4 <prvGetNextExpireTime>
 8004332:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4619      	mov	r1, r3
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f805 	bl	8004348 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800433e:	f000 f8d7 	bl	80044f0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004342:	bf00      	nop
 8004344:	e7f0      	b.n	8004328 <prvTimerTask+0x8>
	...

08004348 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004352:	f7ff f889 	bl	8003468 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f866 	bl	800442c <prvSampleTimeNow>
 8004360:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d130      	bne.n	80043ca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <prvProcessTimerOrBlockTask+0x3c>
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	429a      	cmp	r2, r3
 8004374:	d806      	bhi.n	8004384 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004376:	f7ff f885 	bl	8003484 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff ff81 	bl	8004284 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004382:	e024      	b.n	80043ce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800438a:	4b13      	ldr	r3, [pc, #76]	@ (80043d8 <prvProcessTimerOrBlockTask+0x90>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <prvProcessTimerOrBlockTask+0x50>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <prvProcessTimerOrBlockTask+0x52>
 8004398:	2300      	movs	r3, #0
 800439a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800439c:	4b0f      	ldr	r3, [pc, #60]	@ (80043dc <prvProcessTimerOrBlockTask+0x94>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	f7fe fd7f 	bl	8002eac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80043ae:	f7ff f869 	bl	8003484 <xTaskResumeAll>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80043b8:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <prvProcessTimerOrBlockTask+0x98>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
    }
 80043c8:	e001      	b.n	80043ce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80043ca:	f7ff f85b 	bl	8003484 <xTaskResumeAll>
    }
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000208 	.word	0x20000208
 80043dc:	2000020c 	.word	0x2000020c
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <prvGetNextExpireTime+0x44>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <prvGetNextExpireTime+0x16>
 80043f6:	2201      	movs	r2, #1
 80043f8:	e000      	b.n	80043fc <prvGetNextExpireTime+0x18>
 80043fa:	2200      	movs	r2, #0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004408:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <prvGetNextExpireTime+0x44>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e001      	b.n	8004418 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004418:	68fb      	ldr	r3, [r7, #12]
    }
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000204 	.word	0x20000204

0800442c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004434:	f7ff f8c8 	bl	80035c8 <xTaskGetTickCount>
 8004438:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800443a:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <prvSampleTimeNow+0x3c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	429a      	cmp	r2, r3
 8004442:	d205      	bcs.n	8004450 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004444:	f000 f91e 	bl	8004684 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e002      	b.n	8004456 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004456:	4a04      	ldr	r2, [pc, #16]	@ (8004468 <prvSampleTimeNow+0x3c>)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800445c:	68fb      	ldr	r3, [r7, #12]
    }
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000214 	.word	0x20000214

0800446c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	429a      	cmp	r2, r3
 8004490:	d812      	bhi.n	80044b8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	1ad2      	subs	r2, r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	429a      	cmp	r2, r3
 800449e:	d302      	bcc.n	80044a6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e01b      	b.n	80044de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <prvInsertTimerInActiveList+0x7c>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f7fd ff60 	bl	8002376 <vListInsert>
 80044b6:	e012      	b.n	80044de <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d206      	bcs.n	80044ce <prvInsertTimerInActiveList+0x62>
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d302      	bcc.n	80044ce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80044c8:	2301      	movs	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e007      	b.n	80044de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044ce:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <prvInsertTimerInActiveList+0x80>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f7fd ff4c 	bl	8002376 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80044de:	697b      	ldr	r3, [r7, #20]
    }
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000208 	.word	0x20000208
 80044ec:	20000204 	.word	0x20000204

080044f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08c      	sub	sp, #48	@ 0x30
 80044f4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044f6:	e0b2      	b.n	800465e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f2c0 80af 	blt.w	800465e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	3304      	adds	r3, #4
 8004510:	4618      	mov	r0, r3
 8004512:	f7fd ff69 	bl	80023e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff ff87 	bl	800442c <prvSampleTimeNow>
 800451e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b09      	cmp	r3, #9
 8004524:	f200 8098 	bhi.w	8004658 <prvProcessReceivedCommands+0x168>
 8004528:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <prvProcessReceivedCommands+0x40>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004559 	.word	0x08004559
 8004534:	08004559 	.word	0x08004559
 8004538:	08004559 	.word	0x08004559
 800453c:	080045cf 	.word	0x080045cf
 8004540:	080045e3 	.word	0x080045e3
 8004544:	0800462f 	.word	0x0800462f
 8004548:	08004559 	.word	0x08004559
 800454c:	08004559 	.word	0x08004559
 8004550:	080045cf 	.word	0x080045cf
 8004554:	080045e3 	.word	0x080045e3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	b2da      	uxtb	r2, r3
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	18d1      	adds	r1, r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004578:	f7ff ff78 	bl	800446c <prvInsertTimerInActiveList>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d06c      	beq.n	800465c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004588:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d061      	beq.n	800465c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	441a      	add	r2, r3
 80045a0:	2300      	movs	r3, #0
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	2100      	movs	r1, #0
 80045a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045aa:	f7ff fe1d 	bl	80041e8 <xTimerGenericCommand>
 80045ae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d152      	bne.n	800465c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61bb      	str	r3, [r7, #24]
    }
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80045e0:	e03d      	b.n	800465e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	617b      	str	r3, [r7, #20]
    }
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	e7fd      	b.n	8004616 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	18d1      	adds	r1, r2, r3
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004628:	f7ff ff20 	bl	800446c <prvInsertTimerInActiveList>
                        break;
 800462c:	e017      	b.n	800465e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800463c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800463e:	f000 fc81 	bl	8004f44 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004642:	e00c      	b.n	800465e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004656:	e002      	b.n	800465e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004658:	bf00      	nop
 800465a:	e000      	b.n	800465e <prvProcessReceivedCommands+0x16e>
                        break;
 800465c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <prvProcessReceivedCommands+0x190>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f107 0108 	add.w	r1, r7, #8
 8004666:	2200      	movs	r2, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe f9c9 	bl	8002a00 <xQueueReceive>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	f47f af41 	bne.w	80044f8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	3728      	adds	r7, #40	@ 0x28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	2000020c 	.word	0x2000020c

08004684 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800468a:	e049      	b.n	8004720 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800468c:	4b2e      	ldr	r3, [pc, #184]	@ (8004748 <prvSwitchTimerLists+0xc4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004696:	4b2c      	ldr	r3, [pc, #176]	@ (8004748 <prvSwitchTimerLists+0xc4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fd fe9f 	bl	80023e8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02f      	beq.n	8004720 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d90e      	bls.n	80046f0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046de:	4b1a      	ldr	r3, [pc, #104]	@ (8004748 <prvSwitchTimerLists+0xc4>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f7fd fe44 	bl	8002376 <vListInsert>
 80046ee:	e017      	b.n	8004720 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046f0:	2300      	movs	r3, #0
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	2300      	movs	r3, #0
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	2100      	movs	r1, #0
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fd74 	bl	80041e8 <xTimerGenericCommand>
 8004700:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	603b      	str	r3, [r7, #0]
    }
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004720:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <prvSwitchTimerLists+0xc4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1b0      	bne.n	800468c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800472a:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <prvSwitchTimerLists+0xc4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004730:	4b06      	ldr	r3, [pc, #24]	@ (800474c <prvSwitchTimerLists+0xc8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a04      	ldr	r2, [pc, #16]	@ (8004748 <prvSwitchTimerLists+0xc4>)
 8004736:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004738:	4a04      	ldr	r2, [pc, #16]	@ (800474c <prvSwitchTimerLists+0xc8>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6013      	str	r3, [r2, #0]
    }
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000204 	.word	0x20000204
 800474c:	20000208 	.word	0x20000208

08004750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004754:	f000 f9e2 	bl	8004b1c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <prvCheckForValidListAndQueue+0x54>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11d      	bne.n	800479c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004760:	4811      	ldr	r0, [pc, #68]	@ (80047a8 <prvCheckForValidListAndQueue+0x58>)
 8004762:	f7fd fdb7 	bl	80022d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004766:	4811      	ldr	r0, [pc, #68]	@ (80047ac <prvCheckForValidListAndQueue+0x5c>)
 8004768:	f7fd fdb4 	bl	80022d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800476c:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <prvCheckForValidListAndQueue+0x60>)
 800476e:	4a0e      	ldr	r2, [pc, #56]	@ (80047a8 <prvCheckForValidListAndQueue+0x58>)
 8004770:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <prvCheckForValidListAndQueue+0x64>)
 8004774:	4a0d      	ldr	r2, [pc, #52]	@ (80047ac <prvCheckForValidListAndQueue+0x5c>)
 8004776:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004778:	2200      	movs	r2, #0
 800477a:	210c      	movs	r1, #12
 800477c:	200a      	movs	r0, #10
 800477e:	f7fd fec7 	bl	8002510 <xQueueGenericCreate>
 8004782:	4603      	mov	r3, r0
 8004784:	4a07      	ldr	r2, [pc, #28]	@ (80047a4 <prvCheckForValidListAndQueue+0x54>)
 8004786:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <prvCheckForValidListAndQueue+0x54>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <prvCheckForValidListAndQueue+0x54>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4908      	ldr	r1, [pc, #32]	@ (80047b8 <prvCheckForValidListAndQueue+0x68>)
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fb56 	bl	8002e48 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800479c:	f000 f9f0 	bl	8004b80 <vPortExitCritical>
    }
 80047a0:	bf00      	nop
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	2000020c 	.word	0x2000020c
 80047a8:	200001dc 	.word	0x200001dc
 80047ac:	200001f0 	.word	0x200001f0
 80047b0:	20000204 	.word	0x20000204
 80047b4:	20000208 	.word	0x20000208
 80047b8:	08007cf4 	.word	0x08007cf4

080047bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3b04      	subs	r3, #4
 80047cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3b04      	subs	r3, #4
 80047da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3b04      	subs	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80047ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004820 <pxPortInitialiseStack+0x64>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3b14      	subs	r3, #20
 80047f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3b04      	subs	r3, #4
 8004802:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f06f 0202 	mvn.w	r2, #2
 800480a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3b20      	subs	r3, #32
 8004810:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004812:	68fb      	ldr	r3, [r7, #12]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	08004825 	.word	0x08004825

08004824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800482e:	4b13      	ldr	r3, [pc, #76]	@ (800487c <prvTaskExitError+0x58>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d00b      	beq.n	8004850 <prvTaskExitError+0x2c>
        __asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
    }
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <prvTaskExitError+0x28>
        __asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60bb      	str	r3, [r7, #8]
    }
 8004862:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004864:	bf00      	nop
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0fc      	beq.n	8004866 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000010 	.word	0x20000010

08004880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004880:	4b07      	ldr	r3, [pc, #28]	@ (80048a0 <pxCurrentTCBConst2>)
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	6808      	ldr	r0, [r1, #0]
 8004886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488a:	f380 8809 	msr	PSP, r0
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8811 	msr	BASEPRI, r0
 800489a:	4770      	bx	lr
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst2>:
 80048a0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80048a8:	4808      	ldr	r0, [pc, #32]	@ (80048cc <prvPortStartFirstTask+0x24>)
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	6800      	ldr	r0, [r0, #0]
 80048ae:	f380 8808 	msr	MSP, r0
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8814 	msr	CONTROL, r0
 80048ba:	b662      	cpsie	i
 80048bc:	b661      	cpsie	f
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	df00      	svc	0
 80048c8:	bf00      	nop
 80048ca:	0000      	.short	0x0000
 80048cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop

080048d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048da:	4b47      	ldr	r3, [pc, #284]	@ (80049f8 <xPortStartScheduler+0x124>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a47      	ldr	r2, [pc, #284]	@ (80049fc <xPortStartScheduler+0x128>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d10b      	bne.n	80048fc <xPortStartScheduler+0x28>
        __asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	613b      	str	r3, [r7, #16]
    }
 80048f6:	bf00      	nop
 80048f8:	bf00      	nop
 80048fa:	e7fd      	b.n	80048f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048fc:	4b3e      	ldr	r3, [pc, #248]	@ (80049f8 <xPortStartScheduler+0x124>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3f      	ldr	r2, [pc, #252]	@ (8004a00 <xPortStartScheduler+0x12c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d10b      	bne.n	800491e <xPortStartScheduler+0x4a>
        __asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60fb      	str	r3, [r7, #12]
    }
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800491e:	4b39      	ldr	r3, [pc, #228]	@ (8004a04 <xPortStartScheduler+0x130>)
 8004920:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	22ff      	movs	r2, #255	@ 0xff
 800492e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b31      	ldr	r3, [pc, #196]	@ (8004a08 <xPortStartScheduler+0x134>)
 8004944:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004946:	4b31      	ldr	r3, [pc, #196]	@ (8004a0c <xPortStartScheduler+0x138>)
 8004948:	2207      	movs	r2, #7
 800494a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800494c:	e009      	b.n	8004962 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800494e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a0c <xPortStartScheduler+0x138>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	4a2d      	ldr	r2, [pc, #180]	@ (8004a0c <xPortStartScheduler+0x138>)
 8004956:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496a:	2b80      	cmp	r3, #128	@ 0x80
 800496c:	d0ef      	beq.n	800494e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800496e:	4b27      	ldr	r3, [pc, #156]	@ (8004a0c <xPortStartScheduler+0x138>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	d00b      	beq.n	8004992 <xPortStartScheduler+0xbe>
        __asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60bb      	str	r3, [r7, #8]
    }
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004992:	4b1e      	ldr	r3, [pc, #120]	@ (8004a0c <xPortStartScheduler+0x138>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <xPortStartScheduler+0x138>)
 800499a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800499c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a0c <xPortStartScheduler+0x138>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049a4:	4a19      	ldr	r2, [pc, #100]	@ (8004a0c <xPortStartScheduler+0x138>)
 80049a6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80049b0:	4b17      	ldr	r3, [pc, #92]	@ (8004a10 <xPortStartScheduler+0x13c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a16      	ldr	r2, [pc, #88]	@ (8004a10 <xPortStartScheduler+0x13c>)
 80049b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80049bc:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <xPortStartScheduler+0x13c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a13      	ldr	r2, [pc, #76]	@ (8004a10 <xPortStartScheduler+0x13c>)
 80049c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049c6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80049c8:	f000 f968 	bl	8004c9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80049cc:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <xPortStartScheduler+0x140>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80049d2:	f000 f987 	bl	8004ce4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049d6:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <xPortStartScheduler+0x144>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a0f      	ldr	r2, [pc, #60]	@ (8004a18 <xPortStartScheduler+0x144>)
 80049dc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049e0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80049e2:	f7ff ff61 	bl	80048a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80049e6:	f7fe fecf 	bl	8003788 <vTaskSwitchContext>
    prvTaskExitError();
 80049ea:	f7ff ff1b 	bl	8004824 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed00 	.word	0xe000ed00
 80049fc:	410fc271 	.word	0x410fc271
 8004a00:	410fc270 	.word	0x410fc270
 8004a04:	e000e400 	.word	0xe000e400
 8004a08:	20000218 	.word	0x20000218
 8004a0c:	2000021c 	.word	0x2000021c
 8004a10:	e000ed20 	.word	0xe000ed20
 8004a14:	20000010 	.word	0x20000010
 8004a18:	e000ef34 	.word	0xe000ef34

08004a1c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a22:	4b38      	ldr	r3, [pc, #224]	@ (8004b04 <vInitPrioGroupValue+0xe8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a38      	ldr	r2, [pc, #224]	@ (8004b08 <vInitPrioGroupValue+0xec>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10b      	bne.n	8004a44 <vInitPrioGroupValue+0x28>
        __asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	613b      	str	r3, [r7, #16]
    }
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a44:	4b2f      	ldr	r3, [pc, #188]	@ (8004b04 <vInitPrioGroupValue+0xe8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a30      	ldr	r2, [pc, #192]	@ (8004b0c <vInitPrioGroupValue+0xf0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10b      	bne.n	8004a66 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	60fb      	str	r3, [r7, #12]
    }
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	e7fd      	b.n	8004a62 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a66:	4b2a      	ldr	r3, [pc, #168]	@ (8004b10 <vInitPrioGroupValue+0xf4>)
 8004a68:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	22ff      	movs	r2, #255	@ 0xff
 8004a76:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4b22      	ldr	r3, [pc, #136]	@ (8004b14 <vInitPrioGroupValue+0xf8>)
 8004a8c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a8e:	4b22      	ldr	r3, [pc, #136]	@ (8004b18 <vInitPrioGroupValue+0xfc>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a94:	e009      	b.n	8004aaa <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004a96:	4b20      	ldr	r3, [pc, #128]	@ (8004b18 <vInitPrioGroupValue+0xfc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004b18 <vInitPrioGroupValue+0xfc>)
 8004a9e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab2:	2b80      	cmp	r3, #128	@ 0x80
 8004ab4:	d0ef      	beq.n	8004a96 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ab6:	4b18      	ldr	r3, [pc, #96]	@ (8004b18 <vInitPrioGroupValue+0xfc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1c3 0307 	rsb	r3, r3, #7
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d00b      	beq.n	8004ada <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60bb      	str	r3, [r7, #8]
    }
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ada:	4b0f      	ldr	r3, [pc, #60]	@ (8004b18 <vInitPrioGroupValue+0xfc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8004b18 <vInitPrioGroupValue+0xfc>)
 8004ae2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b18 <vInitPrioGroupValue+0xfc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004aec:	4a0a      	ldr	r2, [pc, #40]	@ (8004b18 <vInitPrioGroupValue+0xfc>)
 8004aee:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000ed00 	.word	0xe000ed00
 8004b08:	410fc271 	.word	0x410fc271
 8004b0c:	410fc270 	.word	0x410fc270
 8004b10:	e000e400 	.word	0xe000e400
 8004b14:	20000218 	.word	0x20000218
 8004b18:	2000021c 	.word	0x2000021c

08004b1c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
        __asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	607b      	str	r3, [r7, #4]
    }
 8004b34:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004b36:	4b10      	ldr	r3, [pc, #64]	@ (8004b78 <vPortEnterCritical+0x5c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b78 <vPortEnterCritical+0x5c>)
 8004b3e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b40:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <vPortEnterCritical+0x5c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d110      	bne.n	8004b6a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b48:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <vPortEnterCritical+0x60>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <vPortEnterCritical+0x4e>
        __asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	603b      	str	r3, [r7, #0]
    }
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	e7fd      	b.n	8004b66 <vPortEnterCritical+0x4a>
    }
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000010 	.word	0x20000010
 8004b7c:	e000ed04 	.word	0xe000ed04

08004b80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004b86:	4b12      	ldr	r3, [pc, #72]	@ (8004bd0 <vPortExitCritical+0x50>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <vPortExitCritical+0x26>
        __asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
    }
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	e7fd      	b.n	8004ba2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <vPortExitCritical+0x50>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	4a08      	ldr	r2, [pc, #32]	@ (8004bd0 <vPortExitCritical+0x50>)
 8004bae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004bb0:	4b07      	ldr	r3, [pc, #28]	@ (8004bd0 <vPortExitCritical+0x50>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <vPortExitCritical+0x44>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f383 8811 	msr	BASEPRI, r3
    }
 8004bc2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	20000010 	.word	0x20000010
	...

08004be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004be0:	f3ef 8009 	mrs	r0, PSP
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <pxCurrentTCBConst>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	f01e 0f10 	tst.w	lr, #16
 8004bf0:	bf08      	it	eq
 8004bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	6010      	str	r0, [r2, #0]
 8004bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c04:	f380 8811 	msr	BASEPRI, r0
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f7fe fdba 	bl	8003788 <vTaskSwitchContext>
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f380 8811 	msr	BASEPRI, r0
 8004c1c:	bc09      	pop	{r0, r3}
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	6808      	ldr	r0, [r1, #0]
 8004c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c26:	f01e 0f10 	tst.w	lr, #16
 8004c2a:	bf08      	it	eq
 8004c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c30:	f380 8809 	msr	PSP, r0
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst>:
 8004c40:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
    }
 8004c60:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004c62:	f002 fc45 	bl	80074f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004c66:	f7fe fcd1 	bl	800360c <xTaskIncrementTick>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004c70:	f002 fc9c 	bl	80075ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c74:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <SysTick_Handler+0x50>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e001      	b.n	8004c82 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004c7e:	f002 fc79 	bl	8007574 <SEGGER_SYSVIEW_RecordExitISR>
 8004c82:	2300      	movs	r3, #0
 8004c84:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f383 8811 	msr	BASEPRI, r3
    }
 8004c8c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <vPortSetupTimerInterrupt+0x34>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <vPortSetupTimerInterrupt+0x38>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <vPortSetupTimerInterrupt+0x3c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <vPortSetupTimerInterrupt+0x40>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	4a09      	ldr	r2, [pc, #36]	@ (8004ce0 <vPortSetupTimerInterrupt+0x44>)
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cbe:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <vPortSetupTimerInterrupt+0x34>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	e000e010 	.word	0xe000e010
 8004cd4:	e000e018 	.word	0xe000e018
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	10624dd3 	.word	0x10624dd3
 8004ce0:	e000e014 	.word	0xe000e014

08004ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004cf4 <vPortEnableVFP+0x10>
 8004ce8:	6801      	ldr	r1, [r0, #0]
 8004cea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004cee:	6001      	str	r1, [r0, #0]
 8004cf0:	4770      	bx	lr
 8004cf2:	0000      	.short	0x0000
 8004cf4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop

08004cfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004d02:	f3ef 8305 	mrs	r3, IPSR
 8004d06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b0f      	cmp	r3, #15
 8004d0c:	d915      	bls.n	8004d3a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d0e:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <vPortValidateInterruptPriority+0x74>)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d18:	4b16      	ldr	r3, [pc, #88]	@ (8004d74 <vPortValidateInterruptPriority+0x78>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	7afa      	ldrb	r2, [r7, #11]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d20b      	bcs.n	8004d3a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	607b      	str	r3, [r7, #4]
    }
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d78 <vPortValidateInterruptPriority+0x7c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d42:	4b0e      	ldr	r3, [pc, #56]	@ (8004d7c <vPortValidateInterruptPriority+0x80>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d90b      	bls.n	8004d62 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	603b      	str	r3, [r7, #0]
    }
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	e7fd      	b.n	8004d5e <vPortValidateInterruptPriority+0x62>
    }
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	e000e3f0 	.word	0xe000e3f0
 8004d74:	20000218 	.word	0x20000218
 8004d78:	e000ed0c 	.word	0xe000ed0c
 8004d7c:	2000021c 	.word	0x2000021c

08004d80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	@ 0x28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004d8c:	f7fe fb6c 	bl	8003468 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004d90:	4b66      	ldr	r3, [pc, #408]	@ (8004f2c <pvPortMalloc+0x1ac>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004d98:	f000 f938 	bl	800500c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d9c:	4b64      	ldr	r3, [pc, #400]	@ (8004f30 <pvPortMalloc+0x1b0>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f040 80a9 	bne.w	8004efc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d02e      	beq.n	8004e0e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004db0:	2208      	movs	r2, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d228      	bcs.n	8004e0e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d022      	beq.n	8004e14 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f023 0307 	bic.w	r3, r3, #7
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d215      	bcs.n	8004e08 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	3308      	adds	r3, #8
 8004de4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d011      	beq.n	8004e14 <pvPortMalloc+0x94>
        __asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	617b      	str	r3, [r7, #20]
    }
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e0c:	e002      	b.n	8004e14 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
 8004e12:	e000      	b.n	8004e16 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e14:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d06f      	beq.n	8004efc <pvPortMalloc+0x17c>
 8004e1c:	4b45      	ldr	r3, [pc, #276]	@ (8004f34 <pvPortMalloc+0x1b4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d86a      	bhi.n	8004efc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004e26:	4b44      	ldr	r3, [pc, #272]	@ (8004f38 <pvPortMalloc+0x1b8>)
 8004e28:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004e2a:	4b43      	ldr	r3, [pc, #268]	@ (8004f38 <pvPortMalloc+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e30:	e004      	b.n	8004e3c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d903      	bls.n	8004e4e <pvPortMalloc+0xce>
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f1      	bne.n	8004e32 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e4e:	4b37      	ldr	r3, [pc, #220]	@ (8004f2c <pvPortMalloc+0x1ac>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d051      	beq.n	8004efc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	4413      	add	r3, r2
 8004e60:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1ad2      	subs	r2, r2, r3
 8004e72:	2308      	movs	r3, #8
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d920      	bls.n	8004ebc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <pvPortMalloc+0x124>
        __asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	613b      	str	r3, [r7, #16]
    }
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eb6:	69b8      	ldr	r0, [r7, #24]
 8004eb8:	f000 f90a 	bl	80050d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <pvPortMalloc+0x1b4>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f34 <pvPortMalloc+0x1b4>)
 8004ec8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eca:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <pvPortMalloc+0x1b4>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b1b      	ldr	r3, [pc, #108]	@ (8004f3c <pvPortMalloc+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d203      	bcs.n	8004ede <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ed6:	4b17      	ldr	r3, [pc, #92]	@ (8004f34 <pvPortMalloc+0x1b4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <pvPortMalloc+0x1bc>)
 8004edc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <pvPortMalloc+0x1b0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <pvPortMalloc+0x1c0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a11      	ldr	r2, [pc, #68]	@ (8004f40 <pvPortMalloc+0x1c0>)
 8004efa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004efc:	f7fe fac2 	bl	8003484 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <pvPortMalloc+0x1a2>
        __asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	60fb      	str	r3, [r7, #12]
    }
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <pvPortMalloc+0x19e>
    return pvReturn;
 8004f22:	69fb      	ldr	r3, [r7, #28]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3728      	adds	r7, #40	@ 0x28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20012e28 	.word	0x20012e28
 8004f30:	20012e3c 	.word	0x20012e3c
 8004f34:	20012e2c 	.word	0x20012e2c
 8004f38:	20012e20 	.word	0x20012e20
 8004f3c:	20012e30 	.word	0x20012e30
 8004f40:	20012e34 	.word	0x20012e34

08004f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d04f      	beq.n	8004ff6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f56:	2308      	movs	r3, #8
 8004f58:	425b      	negs	r3, r3
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	4b25      	ldr	r3, [pc, #148]	@ (8005000 <vPortFree+0xbc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <vPortFree+0x46>
        __asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
    }
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <vPortFree+0x66>
        __asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60bb      	str	r3, [r7, #8]
    }
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <vPortFree+0xbc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01e      	beq.n	8004ff6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11a      	bne.n	8004ff6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <vPortFree+0xbc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	401a      	ands	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004fd0:	f7fe fa4a 	bl	8003468 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <vPortFree+0xc0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4413      	add	r3, r2
 8004fde:	4a09      	ldr	r2, [pc, #36]	@ (8005004 <vPortFree+0xc0>)
 8004fe0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fe2:	6938      	ldr	r0, [r7, #16]
 8004fe4:	f000 f874 	bl	80050d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004fe8:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <vPortFree+0xc4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3301      	adds	r3, #1
 8004fee:	4a06      	ldr	r2, [pc, #24]	@ (8005008 <vPortFree+0xc4>)
 8004ff0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ff2:	f7fe fa47 	bl	8003484 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004ff6:	bf00      	nop
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20012e3c 	.word	0x20012e3c
 8005004:	20012e2c 	.word	0x20012e2c
 8005008:	20012e38 	.word	0x20012e38

0800500c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005012:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005016:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005018:	4b27      	ldr	r3, [pc, #156]	@ (80050b8 <prvHeapInit+0xac>)
 800501a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3307      	adds	r3, #7
 800502a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	4a1f      	ldr	r2, [pc, #124]	@ (80050b8 <prvHeapInit+0xac>)
 800503c:	4413      	add	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005044:	4a1d      	ldr	r2, [pc, #116]	@ (80050bc <prvHeapInit+0xb0>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800504a:	4b1c      	ldr	r3, [pc, #112]	@ (80050bc <prvHeapInit+0xb0>)
 800504c:	2200      	movs	r2, #0
 800504e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4413      	add	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005058:	2208      	movs	r2, #8
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0307 	bic.w	r3, r3, #7
 8005066:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <prvHeapInit+0xb4>)
 800506c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800506e:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <prvHeapInit+0xb4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005076:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <prvHeapInit+0xb4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	1ad2      	subs	r2, r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800508c:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <prvHeapInit+0xb4>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	4a0a      	ldr	r2, [pc, #40]	@ (80050c4 <prvHeapInit+0xb8>)
 800509a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <prvHeapInit+0xbc>)
 80050a2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <prvHeapInit+0xc0>)
 80050a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050aa:	601a      	str	r2, [r3, #0]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	20000220 	.word	0x20000220
 80050bc:	20012e20 	.word	0x20012e20
 80050c0:	20012e28 	.word	0x20012e28
 80050c4:	20012e30 	.word	0x20012e30
 80050c8:	20012e2c 	.word	0x20012e2c
 80050cc:	20012e3c 	.word	0x20012e3c

080050d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050d8:	4b28      	ldr	r3, [pc, #160]	@ (800517c <prvInsertBlockIntoFreeList+0xac>)
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e002      	b.n	80050e4 <prvInsertBlockIntoFreeList+0x14>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d8f7      	bhi.n	80050de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d108      	bne.n	8005112 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	441a      	add	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	441a      	add	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d118      	bne.n	8005158 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <prvInsertBlockIntoFreeList+0xb0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d00d      	beq.n	800514e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	441a      	add	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e008      	b.n	8005160 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800514e:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <prvInsertBlockIntoFreeList+0xb0>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e003      	b.n	8005160 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d002      	beq.n	800516e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20012e20 	.word	0x20012e20
 8005180:	20012e28 	.word	0x20012e28

08005184 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005188:	4803      	ldr	r0, [pc, #12]	@ (8005198 <_cbSendSystemDesc+0x14>)
 800518a:	f002 f95b 	bl	8007444 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800518e:	4803      	ldr	r0, [pc, #12]	@ (800519c <_cbSendSystemDesc+0x18>)
 8005190:	f002 f958 	bl	8007444 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005194:	bf00      	nop
 8005196:	bd80      	pop	{r7, pc}
 8005198:	08007cfc 	.word	0x08007cfc
 800519c:	08007d40 	.word	0x08007d40

080051a0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <SEGGER_SYSVIEW_Conf+0x20>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <SEGGER_SYSVIEW_Conf+0x20>)
 80051aa:	6819      	ldr	r1, [r3, #0]
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <SEGGER_SYSVIEW_Conf+0x24>)
 80051ae:	4a06      	ldr	r2, [pc, #24]	@ (80051c8 <SEGGER_SYSVIEW_Conf+0x28>)
 80051b0:	f001 fcc4 	bl	8006b3c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80051b4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80051b8:	f001 fd04 	bl	8006bc4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80051bc:	bf00      	nop
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000000 	.word	0x20000000
 80051c4:	08005185 	.word	0x08005185
 80051c8:	08007de0 	.word	0x08007de0

080051cc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80051cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	e033      	b.n	8005240 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80051d8:	491e      	ldr	r1, [pc, #120]	@ (8005254 <_cbSendTaskList+0x88>)
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	491a      	ldr	r1, [pc, #104]	@ (8005254 <_cbSendTaskList+0x88>)
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3304      	adds	r3, #4
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	4c16      	ldr	r4, [pc, #88]	@ (8005254 <_cbSendTaskList+0x88>)
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4423      	add	r3, r4
 8005208:	3308      	adds	r3, #8
 800520a:	681c      	ldr	r4, [r3, #0]
 800520c:	4d11      	ldr	r5, [pc, #68]	@ (8005254 <_cbSendTaskList+0x88>)
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	442b      	add	r3, r5
 800521a:	330c      	adds	r3, #12
 800521c:	681d      	ldr	r5, [r3, #0]
 800521e:	4e0d      	ldr	r6, [pc, #52]	@ (8005254 <_cbSendTaskList+0x88>)
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4433      	add	r3, r6
 800522c:	3310      	adds	r3, #16
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	462b      	mov	r3, r5
 8005234:	4622      	mov	r2, r4
 8005236:	f000 f979 	bl	800552c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3301      	adds	r3, #1
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <_cbSendTaskList+0x8c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d3c6      	bcc.n	80051d8 <_cbSendTaskList+0xc>
  }
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005254:	20012e40 	.word	0x20012e40
 8005258:	20012ee0 	.word	0x20012ee0

0800525c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800525c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005264:	f7fe f9c0 	bl	80035e8 <xTaskGetTickCountFromISR>
 8005268:	4603      	mov	r3, r0
 800526a:	2200      	movs	r2, #0
 800526c:	469a      	mov	sl, r3
 800526e:	4693      	mov	fp, r2
 8005270:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005274:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	f04f 0a00 	mov.w	sl, #0
 8005280:	f04f 0b00 	mov.w	fp, #0
 8005284:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005288:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800528c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005290:	4652      	mov	r2, sl
 8005292:	465b      	mov	r3, fp
 8005294:	1a14      	subs	r4, r2, r0
 8005296:	eb63 0501 	sbc.w	r5, r3, r1
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	00ab      	lsls	r3, r5, #2
 80052a4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80052a8:	00a2      	lsls	r2, r4, #2
 80052aa:	4614      	mov	r4, r2
 80052ac:	461d      	mov	r5, r3
 80052ae:	eb14 0800 	adds.w	r8, r4, r0
 80052b2:	eb45 0901 	adc.w	r9, r5, r1
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ca:	4690      	mov	r8, r2
 80052cc:	4699      	mov	r9, r3
 80052ce:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80052d2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080052e4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80052f2:	2205      	movs	r2, #5
 80052f4:	492b      	ldr	r1, [pc, #172]	@ (80053a4 <SYSVIEW_AddTask+0xc0>)
 80052f6:	68b8      	ldr	r0, [r7, #8]
 80052f8:	f002 fc40 	bl	8007b7c <memcmp>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d04b      	beq.n	800539a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005302:	4b29      	ldr	r3, [pc, #164]	@ (80053a8 <SYSVIEW_AddTask+0xc4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b07      	cmp	r3, #7
 8005308:	d903      	bls.n	8005312 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800530a:	4828      	ldr	r0, [pc, #160]	@ (80053ac <SYSVIEW_AddTask+0xc8>)
 800530c:	f002 fbac 	bl	8007a68 <SEGGER_SYSVIEW_Warn>
    return;
 8005310:	e044      	b.n	800539c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005312:	4b25      	ldr	r3, [pc, #148]	@ (80053a8 <SYSVIEW_AddTask+0xc4>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4926      	ldr	r1, [pc, #152]	@ (80053b0 <SYSVIEW_AddTask+0xcc>)
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005326:	4b20      	ldr	r3, [pc, #128]	@ (80053a8 <SYSVIEW_AddTask+0xc4>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4921      	ldr	r1, [pc, #132]	@ (80053b0 <SYSVIEW_AddTask+0xcc>)
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	3304      	adds	r3, #4
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800533c:	4b1a      	ldr	r3, [pc, #104]	@ (80053a8 <SYSVIEW_AddTask+0xc4>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	491b      	ldr	r1, [pc, #108]	@ (80053b0 <SYSVIEW_AddTask+0xcc>)
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	3308      	adds	r3, #8
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005352:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <SYSVIEW_AddTask+0xc4>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4916      	ldr	r1, [pc, #88]	@ (80053b0 <SYSVIEW_AddTask+0xcc>)
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	330c      	adds	r3, #12
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005368:	4b0f      	ldr	r3, [pc, #60]	@ (80053a8 <SYSVIEW_AddTask+0xc4>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4910      	ldr	r1, [pc, #64]	@ (80053b0 <SYSVIEW_AddTask+0xcc>)
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3310      	adds	r3, #16
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <SYSVIEW_AddTask+0xc4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	4a08      	ldr	r2, [pc, #32]	@ (80053a8 <SYSVIEW_AddTask+0xc4>)
 8005386:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f8ca 	bl	800552c <SYSVIEW_SendTaskInfo>
 8005398:	e000      	b.n	800539c <SYSVIEW_AddTask+0xb8>
    return;
 800539a:	bf00      	nop

}
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	08007d50 	.word	0x08007d50
 80053a8:	20012ee0 	.word	0x20012ee0
 80053ac:	08007d58 	.word	0x08007d58
 80053b0:	20012e40 	.word	0x20012e40

080053b4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80053bc:	4b59      	ldr	r3, [pc, #356]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80ab 	beq.w	800551c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e00d      	b.n	80053e8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80053cc:	4956      	ldr	r1, [pc, #344]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d008      	beq.n	80053f4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	4b4e      	ldr	r3, [pc, #312]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d3ec      	bcc.n	80053cc <SYSVIEW_DeleteTask+0x18>
 80053f2:	e000      	b.n	80053f6 <SYSVIEW_DeleteTask+0x42>
      break;
 80053f4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80053f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d111      	bne.n	8005426 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4a46      	ldr	r2, [pc, #280]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 800540e:	4413      	add	r3, r2
 8005410:	2214      	movs	r2, #20
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f002 fbc1 	bl	8007b9c <memset>
    _NumTasks--;
 800541a:	4b42      	ldr	r3, [pc, #264]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3b01      	subs	r3, #1
 8005420:	4a40      	ldr	r2, [pc, #256]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e07b      	b.n	800551e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005426:	4b3f      	ldr	r3, [pc, #252]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	429a      	cmp	r2, r3
 800542e:	d276      	bcs.n	800551e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005430:	4b3c      	ldr	r3, [pc, #240]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	493c      	ldr	r1, [pc, #240]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	4838      	ldr	r0, [pc, #224]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4403      	add	r3, r0
 8005452:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005454:	4b33      	ldr	r3, [pc, #204]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	1e5a      	subs	r2, r3, #1
 800545a:	4933      	ldr	r1, [pc, #204]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	3304      	adds	r3, #4
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	482f      	ldr	r0, [pc, #188]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4403      	add	r3, r0
 8005478:	3304      	adds	r3, #4
 800547a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800547c:	4b29      	ldr	r3, [pc, #164]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	4929      	ldr	r1, [pc, #164]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	3308      	adds	r3, #8
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	4825      	ldr	r0, [pc, #148]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4403      	add	r3, r0
 80054a0:	3308      	adds	r3, #8
 80054a2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80054a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	1e5a      	subs	r2, r3, #1
 80054aa:	491f      	ldr	r1, [pc, #124]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	330c      	adds	r3, #12
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	481b      	ldr	r0, [pc, #108]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4403      	add	r3, r0
 80054c8:	330c      	adds	r3, #12
 80054ca:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80054cc:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1e5a      	subs	r2, r3, #1
 80054d2:	4915      	ldr	r1, [pc, #84]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	3310      	adds	r3, #16
 80054e0:	6819      	ldr	r1, [r3, #0]
 80054e2:	4811      	ldr	r0, [pc, #68]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4403      	add	r3, r0
 80054f0:	3310      	adds	r3, #16
 80054f2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80054f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	1e5a      	subs	r2, r3, #1
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4a09      	ldr	r2, [pc, #36]	@ (8005528 <SYSVIEW_DeleteTask+0x174>)
 8005504:	4413      	add	r3, r2
 8005506:	2214      	movs	r2, #20
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f002 fb46 	bl	8007b9c <memset>
    _NumTasks--;
 8005510:	4b04      	ldr	r3, [pc, #16]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3b01      	subs	r3, #1
 8005516:	4a03      	ldr	r2, [pc, #12]	@ (8005524 <SYSVIEW_DeleteTask+0x170>)
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e000      	b.n	800551e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800551c:	bf00      	nop
  }
}
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20012ee0 	.word	0x20012ee0
 8005528:	20012e40 	.word	0x20012e40

0800552c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	@ 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800553a:	f107 0314 	add.w	r3, r7, #20
 800553e:	2214      	movs	r2, #20
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f002 fb2a 	bl	8007b9c <memset>
  TaskInfo.TaskID     = TaskID;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	4618      	mov	r0, r3
 8005562:	f001 fe77 	bl	8007254 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005566:	bf00      	nop
 8005568:	3728      	adds	r7, #40	@ 0x28
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <__NVIC_EnableIRQ>:
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557e:	2b00      	cmp	r3, #0
 8005580:	db0b      	blt.n	800559a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	f003 021f 	and.w	r2, r3, #31
 8005588:	4907      	ldr	r1, [pc, #28]	@ (80055a8 <__NVIC_EnableIRQ+0x38>)
 800558a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2001      	movs	r0, #1
 8005592:	fa00 f202 	lsl.w	r2, r0, r2
 8005596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	e000e100 	.word	0xe000e100

080055ac <__NVIC_SetPriority>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	6039      	str	r1, [r7, #0]
 80055b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	db0a      	blt.n	80055d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	490c      	ldr	r1, [pc, #48]	@ (80055f8 <__NVIC_SetPriority+0x4c>)
 80055c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ca:	0112      	lsls	r2, r2, #4
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	440b      	add	r3, r1
 80055d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80055d4:	e00a      	b.n	80055ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4908      	ldr	r1, [pc, #32]	@ (80055fc <__NVIC_SetPriority+0x50>)
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	3b04      	subs	r3, #4
 80055e4:	0112      	lsls	r2, r2, #4
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	440b      	add	r3, r1
 80055ea:	761a      	strb	r2, [r3, #24]
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	e000e100 	.word	0xe000e100
 80055fc:	e000ed00 	.word	0xe000ed00

08005600 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005606:	f002 fa8b 	bl	8007b20 <SEGGER_SYSVIEW_IsStarted>
 800560a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005612:	f001 fca3 	bl	8006f5c <SEGGER_SYSVIEW_Start>
  }
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800562a:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <_cbOnUARTRx+0x3c>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b03      	cmp	r3, #3
 8005630:	d806      	bhi.n	8005640 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005632:	4b0a      	ldr	r3, [pc, #40]	@ (800565c <_cbOnUARTRx+0x3c>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	4b08      	ldr	r3, [pc, #32]	@ (800565c <_cbOnUARTRx+0x3c>)
 800563c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800563e:	e009      	b.n	8005654 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005640:	f7ff ffde 	bl	8005600 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005644:	4b05      	ldr	r3, [pc, #20]	@ (800565c <_cbOnUARTRx+0x3c>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	1dfb      	adds	r3, r7, #7
 800564c:	2201      	movs	r2, #1
 800564e:	4619      	mov	r1, r3
 8005650:	f000 fb9a 	bl	8005d88 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005654:	bf00      	nop
}
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000014 	.word	0x20000014

08005660 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005668:	4b14      	ldr	r3, [pc, #80]	@ (80056bc <_cbOnUARTTx+0x5c>)
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d80f      	bhi.n	8005690 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005670:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <_cbOnUARTTx+0x5c>)
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	461a      	mov	r2, r3
 8005676:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <_cbOnUARTTx+0x60>)
 8005678:	5c9a      	ldrb	r2, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800567e:	4b0f      	ldr	r3, [pc, #60]	@ (80056bc <_cbOnUARTTx+0x5c>)
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	3301      	adds	r3, #1
 8005684:	b2da      	uxtb	r2, r3
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <_cbOnUARTTx+0x5c>)
 8005688:	705a      	strb	r2, [r3, #1]
    r = 1;
 800568a:	2301      	movs	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800568e:	e00f      	b.n	80056b0 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005690:	4b0a      	ldr	r3, [pc, #40]	@ (80056bc <_cbOnUARTTx+0x5c>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fa19 	bl	8005ad0 <SEGGER_RTT_ReadUpBufferNoLock>
 800569e:	4603      	mov	r3, r0
 80056a0:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da02      	bge.n	80056ae <_cbOnUARTTx+0x4e>
    r = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e000      	b.n	80056b0 <_cbOnUARTTx+0x50>
  }
Done:
 80056ae:	bf00      	nop
  return r;
 80056b0:	68fb      	ldr	r3, [r7, #12]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000014 	.word	0x20000014
 80056c0:	08007de8 	.word	0x08007de8

080056c4 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80056cc:	4a04      	ldr	r2, [pc, #16]	@ (80056e0 <SEGGER_UART_init+0x1c>)
 80056ce:	4905      	ldr	r1, [pc, #20]	@ (80056e4 <SEGGER_UART_init+0x20>)
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f863 	bl	800579c <HIF_UART_Init>
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	08005621 	.word	0x08005621
 80056e4:	08005661 	.word	0x08005661

080056e8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80056ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005768 <USART2_IRQHandler+0x80>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d011      	beq.n	8005722 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80056fe:	4b1b      	ldr	r3, [pc, #108]	@ (800576c <USART2_IRQHandler+0x84>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 030b 	and.w	r3, r3, #11
 800570c:	2b00      	cmp	r3, #0
 800570e:	d108      	bne.n	8005722 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005710:	4b17      	ldr	r3, [pc, #92]	@ (8005770 <USART2_IRQHandler+0x88>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005718:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <USART2_IRQHandler+0x88>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	79fa      	ldrb	r2, [r7, #7]
 800571e:	4610      	mov	r0, r2
 8005720:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01a      	beq.n	8005762 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800572c:	4b11      	ldr	r3, [pc, #68]	@ (8005774 <USART2_IRQHandler+0x8c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d015      	beq.n	8005760 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005734:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <USART2_IRQHandler+0x8c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1dfa      	adds	r2, r7, #7
 800573a:	4610      	mov	r0, r2
 800573c:	4798      	blx	r3
 800573e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005746:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <USART2_IRQHandler+0x90>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a0b      	ldr	r2, [pc, #44]	@ (8005778 <USART2_IRQHandler+0x90>)
 800574c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e006      	b.n	8005762 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005754:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <USART2_IRQHandler+0x80>)
 8005756:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005758:	79fa      	ldrb	r2, [r7, #7]
 800575a:	4b04      	ldr	r3, [pc, #16]	@ (800576c <USART2_IRQHandler+0x84>)
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e000      	b.n	8005762 <USART2_IRQHandler+0x7a>
      return;
 8005760:	bf00      	nop
    }
  }
}
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40004400 	.word	0x40004400
 800576c:	40004404 	.word	0x40004404
 8005770:	20012ee4 	.word	0x20012ee4
 8005774:	20012ee8 	.word	0x20012ee8
 8005778:	4000440c 	.word	0x4000440c

0800577c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005780:	4b05      	ldr	r3, [pc, #20]	@ (8005798 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a04      	ldr	r2, [pc, #16]	@ (8005798 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800578a:	6013      	str	r3, [r2, #0]
}
 800578c:	bf00      	nop
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	4000440c 	.word	0x4000440c

0800579c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80057a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005864 <HIF_UART_Init+0xc8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005864 <HIF_UART_Init+0xc8>)
 80057ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057b2:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80057b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005868 <HIF_UART_Init+0xcc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005868 <HIF_UART_Init+0xcc>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80057c0:	4b2a      	ldr	r3, [pc, #168]	@ (800586c <HIF_UART_Init+0xd0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057cc:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80057d4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80057d6:	4a25      	ldr	r2, [pc, #148]	@ (800586c <HIF_UART_Init+0xd0>)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80057dc:	4b24      	ldr	r3, [pc, #144]	@ (8005870 <HIF_UART_Init+0xd4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057e8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80057f0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80057f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005870 <HIF_UART_Init+0xd4>)
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80057f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005874 <HIF_UART_Init+0xd8>)
 80057fa:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80057fe:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005800:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <HIF_UART_Init+0xdc>)
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005806:	4b1d      	ldr	r3, [pc, #116]	@ (800587c <HIF_UART_Init+0xe0>)
 8005808:	2280      	movs	r2, #128	@ 0x80
 800580a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005812:	4a1b      	ldr	r2, [pc, #108]	@ (8005880 <HIF_UART_Init+0xe4>)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	fbb2 f3f3 	udiv	r3, r2, r3
 800581a:	3301      	adds	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582a:	d302      	bcc.n	8005832 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800582c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005830:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	4a11      	ldr	r2, [pc, #68]	@ (8005884 <HIF_UART_Init+0xe8>)
 800583e:	b29b      	uxth	r3, r3
 8005840:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005842:	4a11      	ldr	r2, [pc, #68]	@ (8005888 <HIF_UART_Init+0xec>)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005848:	4a10      	ldr	r2, [pc, #64]	@ (800588c <HIF_UART_Init+0xf0>)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800584e:	2106      	movs	r1, #6
 8005850:	2026      	movs	r0, #38	@ 0x26
 8005852:	f7ff feab 	bl	80055ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005856:	2026      	movs	r0, #38	@ 0x26
 8005858:	f7ff fe8a 	bl	8005570 <__NVIC_EnableIRQ>
}
 800585c:	bf00      	nop
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40023840 	.word	0x40023840
 8005868:	40023830 	.word	0x40023830
 800586c:	40020020 	.word	0x40020020
 8005870:	40020000 	.word	0x40020000
 8005874:	4000440c 	.word	0x4000440c
 8005878:	40004410 	.word	0x40004410
 800587c:	40004414 	.word	0x40004414
 8005880:	0501bd00 	.word	0x0501bd00
 8005884:	40004408 	.word	0x40004408
 8005888:	20012ee4 	.word	0x20012ee4
 800588c:	20012ee8 	.word	0x20012ee8

08005890 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005896:	4b24      	ldr	r3, [pc, #144]	@ (8005928 <_DoInit+0x98>)
 8005898:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2203      	movs	r2, #3
 800589e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2203      	movs	r2, #3
 80058a4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a20      	ldr	r2, [pc, #128]	@ (800592c <_DoInit+0x9c>)
 80058aa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a20      	ldr	r2, [pc, #128]	@ (8005930 <_DoInit+0xa0>)
 80058b0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058b8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a17      	ldr	r2, [pc, #92]	@ (800592c <_DoInit+0x9c>)
 80058d0:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a17      	ldr	r2, [pc, #92]	@ (8005934 <_DoInit+0xa4>)
 80058d6:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2210      	movs	r2, #16
 80058dc:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3307      	adds	r3, #7
 80058f4:	4a10      	ldr	r2, [pc, #64]	@ (8005938 <_DoInit+0xa8>)
 80058f6:	6810      	ldr	r0, [r2, #0]
 80058f8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058fa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a0e      	ldr	r2, [pc, #56]	@ (800593c <_DoInit+0xac>)
 8005902:	6810      	ldr	r0, [r2, #0]
 8005904:	6018      	str	r0, [r3, #0]
 8005906:	8891      	ldrh	r1, [r2, #4]
 8005908:	7992      	ldrb	r2, [r2, #6]
 800590a:	8099      	strh	r1, [r3, #4]
 800590c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800590e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005918:	f3bf 8f5f 	dmb	sy
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20012eec 	.word	0x20012eec
 800592c:	08007da8 	.word	0x08007da8
 8005930:	20012f94 	.word	0x20012f94
 8005934:	20013394 	.word	0x20013394
 8005938:	08007db4 	.word	0x08007db4
 800593c:	08007db8 	.word	0x08007db8

08005940 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	@ 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800594c:	2300      	movs	r3, #0
 800594e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	429a      	cmp	r2, r3
 8005962:	d905      	bls.n	8005970 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
 800596e:	e007      	b.n	8005980 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	69b9      	ldr	r1, [r7, #24]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	1acb      	subs	r3, r1, r3
 800597a:	4413      	add	r3, r2
 800597c:	3b01      	subs	r3, #1
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598a:	4293      	cmp	r3, r2
 800598c:	bf28      	it	cs
 800598e:	4613      	movcs	r3, r2
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4293      	cmp	r3, r2
 8005998:	bf28      	it	cs
 800599a:	4613      	movcs	r3, r2
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80059a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	6978      	ldr	r0, [r7, #20]
 80059ae:	f002 f921 	bl	8007bf4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	4413      	add	r3, r2
 80059b8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	4413      	add	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	4413      	add	r3, r2
 80059d0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d101      	bne.n	80059e0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1b2      	bne.n	8005956 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80059f0:	6a3b      	ldr	r3, [r7, #32]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3728      	adds	r7, #40	@ 0x28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b088      	sub	sp, #32
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d911      	bls.n	8005a42 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	6938      	ldr	r0, [r7, #16]
 8005a2e:	f002 f8e1 	bl	8007bf4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a32:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005a40:	e01f      	b.n	8005a82 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6938      	ldr	r0, [r7, #16]
 8005a56:	f002 f8cd 	bl	8007bf4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6938      	ldr	r0, [r7, #16]
 8005a74:	f002 f8be 	bl	8007bf4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a78:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	60da      	str	r2, [r3, #12]
}
 8005a82:	bf00      	nop
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005a8a:	b480      	push	{r7}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d808      	bhi.n	8005ab8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad2      	subs	r2, r2, r3
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	e004      	b.n	8005ac2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005ac2:	697b      	ldr	r3, [r7, #20]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08c      	sub	sp, #48	@ 0x30
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005adc:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005aea:	f7ff fed1 	bl	8005890 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	4613      	mov	r3, r2
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4a37      	ldr	r2, [pc, #220]	@ (8005bd8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005afc:	4413      	add	r3, r2
 8005afe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005b10:	2300      	movs	r3, #0
 8005b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d92b      	bls.n	8005b74 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	bf28      	it	cs
 8005b2e:	4613      	movcs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b38:	4413      	add	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	6939      	ldr	r1, [r7, #16]
 8005b40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b42:	f002 f857 	bl	8007bf4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4413      	add	r3, r2
 8005b64:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d101      	bne.n	8005b74 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005b70:	2300      	movs	r3, #0
 8005b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	bf28      	it	cs
 8005b84:	4613      	movcs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d019      	beq.n	8005bc2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	4413      	add	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	6939      	ldr	r1, [r7, #16]
 8005b9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b9e:	f002 f829 	bl	8007bf4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	4413      	add	r3, r2
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005bba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bcc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3730      	adds	r7, #48	@ 0x30
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20012eec 	.word	0x20012eec

08005bdc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08c      	sub	sp, #48	@ 0x30
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005be8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bea:	623b      	str	r3, [r7, #32]
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <SEGGER_RTT_ReadNoLock+0x1e>
 8005bf6:	f7ff fe4b 	bl	8005890 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	3360      	adds	r3, #96	@ 0x60
 8005c06:	4a37      	ldr	r2, [pc, #220]	@ (8005ce4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005c08:	4413      	add	r3, r2
 8005c0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d92b      	bls.n	8005c80 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4293      	cmp	r3, r2
 8005c38:	bf28      	it	cs
 8005c3a:	4613      	movcs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c44:	4413      	add	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	6939      	ldr	r1, [r7, #16]
 8005c4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c4e:	f001 ffd1 	bl	8007bf4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4413      	add	r3, r2
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4413      	add	r3, r2
 8005c70:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d101      	bne.n	8005c80 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bf28      	it	cs
 8005c90:	4613      	movcs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d019      	beq.n	8005cce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	4413      	add	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005caa:	f001 ffa3 	bl	8007bf4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4413      	add	r3, r2
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cd8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3730      	adds	r7, #48	@ 0x30
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20012eec 	.word	0x20012eec

08005ce8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	3360      	adds	r3, #96	@ 0x60
 8005d04:	4a1f      	ldr	r2, [pc, #124]	@ (8005d84 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005d06:	4413      	add	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d029      	beq.n	8005d66 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d82e      	bhi.n	8005d74 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d013      	beq.n	8005d46 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005d1e:	e029      	b.n	8005d74 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d20:	6978      	ldr	r0, [r7, #20]
 8005d22:	f7ff feb2 	bl	8005a8a <_GetAvailWriteSpace>
 8005d26:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d202      	bcs.n	8005d36 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005d34:	e021      	b.n	8005d7a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	6978      	ldr	r0, [r7, #20]
 8005d40:	f7ff fe5b 	bl	80059fa <_WriteNoCheck>
    break;
 8005d44:	e019      	b.n	8005d7a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d46:	6978      	ldr	r0, [r7, #20]
 8005d48:	f7ff fe9f 	bl	8005a8a <_GetAvailWriteSpace>
 8005d4c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bf28      	it	cs
 8005d56:	4613      	movcs	r3, r2
 8005d58:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	69b9      	ldr	r1, [r7, #24]
 8005d5e:	6978      	ldr	r0, [r7, #20]
 8005d60:	f7ff fe4b 	bl	80059fa <_WriteNoCheck>
    break;
 8005d64:	e009      	b.n	8005d7a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	6978      	ldr	r0, [r7, #20]
 8005d6c:	f7ff fde8 	bl	8005940 <_WriteBlocking>
 8005d70:	61f8      	str	r0, [r7, #28]
    break;
 8005d72:	e002      	b.n	8005d7a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
    break;
 8005d78:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20012eec 	.word	0x20012eec

08005d88 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005d94:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005da2:	f7ff fd75 	bl	8005890 <_DoInit>
  SEGGER_RTT_LOCK();
 8005da6:	f3ef 8311 	mrs	r3, BASEPRI
 8005daa:	f04f 0120 	mov.w	r1, #32
 8005dae:	f381 8811 	msr	BASEPRI, r1
 8005db2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff ff95 	bl	8005ce8 <SEGGER_RTT_WriteDownBufferNoLock>
 8005dbe:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005dc6:	697b      	ldr	r3, [r7, #20]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20012eec 	.word	0x20012eec

08005dd4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005de2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ed8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005df0:	f7ff fd4e 	bl	8005890 <_DoInit>
  SEGGER_RTT_LOCK();
 8005df4:	f3ef 8311 	mrs	r3, BASEPRI
 8005df8:	f04f 0120 	mov.w	r1, #32
 8005dfc:	f381 8811 	msr	BASEPRI, r1
 8005e00:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e02:	4b35      	ldr	r3, [pc, #212]	@ (8005ed8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e04:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005e0a:	6939      	ldr	r1, [r7, #16]
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	440b      	add	r3, r1
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3301      	adds	r3, #1
 8005e26:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	dbeb      	blt.n	8005e0a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e32:	e000      	b.n	8005e36 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e34:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	da3f      	bge.n	8005ec0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e40:	6939      	ldr	r1, [r7, #16]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	440b      	add	r3, r1
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e54:	6939      	ldr	r1, [r7, #16]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	4413      	add	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	440b      	add	r3, r1
 8005e64:	3304      	adds	r3, #4
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e6a:	6939      	ldr	r1, [r7, #16]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	440b      	add	r3, r1
 8005e78:	3320      	adds	r3, #32
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e7e:	6939      	ldr	r1, [r7, #16]
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	4613      	mov	r3, r2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	4413      	add	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3328      	adds	r3, #40	@ 0x28
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005e92:	6939      	ldr	r1, [r7, #16]
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	4613      	mov	r3, r2
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3324      	adds	r3, #36	@ 0x24
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005ea6:	6939      	ldr	r1, [r7, #16]
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	332c      	adds	r3, #44	@ 0x2c
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005eba:	f3bf 8f5f 	dmb	sy
 8005ebe:	e002      	b.n	8005ec6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20012eec 	.word	0x20012eec

08005edc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005eea:	4b33      	ldr	r3, [pc, #204]	@ (8005fb8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ef8:	f7ff fcca 	bl	8005890 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005efc:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005efe:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	461a      	mov	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d24d      	bcs.n	8005fa8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f10:	f04f 0120 	mov.w	r1, #32
 8005f14:	f381 8811 	msr	BASEPRI, r1
 8005f18:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d031      	beq.n	8005f84 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005f20:	6979      	ldr	r1, [r7, #20]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3360      	adds	r3, #96	@ 0x60
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005f34:	6979      	ldr	r1, [r7, #20]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	440b      	add	r3, r1
 8005f42:	3364      	adds	r3, #100	@ 0x64
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005f48:	6979      	ldr	r1, [r7, #20]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4413      	add	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	440b      	add	r3, r1
 8005f56:	3368      	adds	r3, #104	@ 0x68
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005f5c:	6979      	ldr	r1, [r7, #20]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	440b      	add	r3, r1
 8005f6a:	3370      	adds	r3, #112	@ 0x70
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4613      	mov	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4413      	add	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	440b      	add	r3, r1
 8005f7e:	336c      	adds	r3, #108	@ 0x6c
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005f84:	6979      	ldr	r1, [r7, #20]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	440b      	add	r3, r1
 8005f92:	3374      	adds	r3, #116	@ 0x74
 8005f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f96:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f98:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e002      	b.n	8005fae <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005fae:	69fb      	ldr	r3, [r7, #28]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20012eec 	.word	0x20012eec

08005fbc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005fcc:	e002      	b.n	8005fd4 <_EncodeStr+0x18>
    Len++;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4413      	add	r3, r2
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f6      	bne.n	8005fce <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d901      	bls.n	8005fec <_EncodeStr+0x30>
    Len = Limit;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ff0:	d806      	bhi.n	8006000 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	60fa      	str	r2, [r7, #12]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e011      	b.n	8006024 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	60fa      	str	r2, [r7, #12]
 8006006:	22ff      	movs	r2, #255	@ 0xff
 8006008:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	60fa      	str	r2, [r7, #12]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	0a19      	lsrs	r1, r3, #8
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	60fa      	str	r2, [r7, #12]
 8006020:	b2ca      	uxtb	r2, r1
 8006022:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006028:	e00a      	b.n	8006040 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	1c53      	adds	r3, r2, #1
 800602e:	60bb      	str	r3, [r7, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	60f9      	str	r1, [r7, #12]
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
    n++;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	3301      	adds	r3, #1
 800603e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	429a      	cmp	r2, r3
 8006046:	d3f0      	bcc.n	800602a <_EncodeStr+0x6e>
  }
  return pPayload;
 8006048:	68fb      	ldr	r3, [r7, #12]
}
 800604a:	4618      	mov	r0, r3
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
}
 8006062:	4618      	mov	r0, r3
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006076:	4b35      	ldr	r3, [pc, #212]	@ (800614c <_HandleIncomingPacket+0xdc>)
 8006078:	7e1b      	ldrb	r3, [r3, #24]
 800607a:	4618      	mov	r0, r3
 800607c:	1cfb      	adds	r3, r7, #3
 800607e:	2201      	movs	r2, #1
 8006080:	4619      	mov	r1, r3
 8006082:	f7ff fdab 	bl	8005bdc <SEGGER_RTT_ReadNoLock>
 8006086:	4603      	mov	r3, r0
 8006088:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd59      	ble.n	8006144 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	2b80      	cmp	r3, #128	@ 0x80
 8006094:	d032      	beq.n	80060fc <_HandleIncomingPacket+0x8c>
 8006096:	2b80      	cmp	r3, #128	@ 0x80
 8006098:	dc42      	bgt.n	8006120 <_HandleIncomingPacket+0xb0>
 800609a:	2b07      	cmp	r3, #7
 800609c:	dc16      	bgt.n	80060cc <_HandleIncomingPacket+0x5c>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dd3e      	ble.n	8006120 <_HandleIncomingPacket+0xb0>
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2b06      	cmp	r3, #6
 80060a6:	d83b      	bhi.n	8006120 <_HandleIncomingPacket+0xb0>
 80060a8:	a201      	add	r2, pc, #4	@ (adr r2, 80060b0 <_HandleIncomingPacket+0x40>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060d3 	.word	0x080060d3
 80060b4:	080060d9 	.word	0x080060d9
 80060b8:	080060df 	.word	0x080060df
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060f1 	.word	0x080060f1
 80060c8:	080060f7 	.word	0x080060f7
 80060cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ce:	d034      	beq.n	800613a <_HandleIncomingPacket+0xca>
 80060d0:	e026      	b.n	8006120 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80060d2:	f000 ff43 	bl	8006f5c <SEGGER_SYSVIEW_Start>
      break;
 80060d6:	e035      	b.n	8006144 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80060d8:	f000 fffc 	bl	80070d4 <SEGGER_SYSVIEW_Stop>
      break;
 80060dc:	e032      	b.n	8006144 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80060de:	f001 f9d5 	bl	800748c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80060e2:	e02f      	b.n	8006144 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80060e4:	f001 f99a 	bl	800741c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80060e8:	e02c      	b.n	8006144 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80060ea:	f001 f819 	bl	8007120 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80060ee:	e029      	b.n	8006144 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80060f0:	f001 fc68 	bl	80079c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80060f4:	e026      	b.n	8006144 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80060f6:	f001 fc47 	bl	8007988 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80060fa:	e023      	b.n	8006144 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060fc:	4b13      	ldr	r3, [pc, #76]	@ (800614c <_HandleIncomingPacket+0xdc>)
 80060fe:	7e1b      	ldrb	r3, [r3, #24]
 8006100:	4618      	mov	r0, r3
 8006102:	1cfb      	adds	r3, r7, #3
 8006104:	2201      	movs	r2, #1
 8006106:	4619      	mov	r1, r3
 8006108:	f7ff fd68 	bl	8005bdc <SEGGER_RTT_ReadNoLock>
 800610c:	4603      	mov	r3, r0
 800610e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	dd13      	ble.n	800613e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	4618      	mov	r0, r3
 800611a:	f001 fbb5 	bl	8007888 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800611e:	e00e      	b.n	800613e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	b25b      	sxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	da0c      	bge.n	8006142 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006128:	4b08      	ldr	r3, [pc, #32]	@ (800614c <_HandleIncomingPacket+0xdc>)
 800612a:	7e1b      	ldrb	r3, [r3, #24]
 800612c:	4618      	mov	r0, r3
 800612e:	1cfb      	adds	r3, r7, #3
 8006130:	2201      	movs	r2, #1
 8006132:	4619      	mov	r1, r3
 8006134:	f7ff fd52 	bl	8005bdc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006138:	e003      	b.n	8006142 <_HandleIncomingPacket+0xd2>
      break;
 800613a:	bf00      	nop
 800613c:	e002      	b.n	8006144 <_HandleIncomingPacket+0xd4>
      break;
 800613e:	bf00      	nop
 8006140:	e000      	b.n	8006144 <_HandleIncomingPacket+0xd4>
      break;
 8006142:	bf00      	nop
    }
  }
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	200143ac 	.word	0x200143ac

08006150 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	@ 0x30
 8006154:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006156:	2301      	movs	r3, #1
 8006158:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	3301      	adds	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006164:	4b32      	ldr	r3, [pc, #200]	@ (8006230 <_TrySendOverflowPacket+0xe0>)
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800616a:	e00b      	b.n	8006184 <_TrySendOverflowPacket+0x34>
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	b2da      	uxtb	r2, r3
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	1c59      	adds	r1, r3, #1
 8006174:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006176:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006180:	09db      	lsrs	r3, r3, #7
 8006182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006186:	2b7f      	cmp	r3, #127	@ 0x7f
 8006188:	d8f0      	bhi.n	800616c <_TrySendOverflowPacket+0x1c>
 800618a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800619a:	4b26      	ldr	r3, [pc, #152]	@ (8006234 <_TrySendOverflowPacket+0xe4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80061a0:	4b23      	ldr	r3, [pc, #140]	@ (8006230 <_TrySendOverflowPacket+0xe0>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	e00b      	b.n	80061cc <_TrySendOverflowPacket+0x7c>
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80061be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	09db      	lsrs	r3, r3, #7
 80061ca:	623b      	str	r3, [r7, #32]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80061d0:	d8f0      	bhi.n	80061b4 <_TrySendOverflowPacket+0x64>
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80061e2:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <_TrySendOverflowPacket+0xe0>)
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	4618      	mov	r0, r3
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	1d3b      	adds	r3, r7, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	f7f9 ffec 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061f8:	4603      	mov	r3, r0
 80061fa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80061fc:	f7ff fabe 	bl	800577c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006206:	4a0a      	ldr	r2, [pc, #40]	@ (8006230 <_TrySendOverflowPacket+0xe0>)
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800620c:	4b08      	ldr	r3, [pc, #32]	@ (8006230 <_TrySendOverflowPacket+0xe0>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	3b01      	subs	r3, #1
 8006212:	b2da      	uxtb	r2, r3
 8006214:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <_TrySendOverflowPacket+0xe0>)
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	e004      	b.n	8006224 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800621a:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <_TrySendOverflowPacket+0xe0>)
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	3301      	adds	r3, #1
 8006220:	4a03      	ldr	r2, [pc, #12]	@ (8006230 <_TrySendOverflowPacket+0xe0>)
 8006222:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006224:	693b      	ldr	r3, [r7, #16]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3730      	adds	r7, #48	@ 0x30
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200143ac 	.word	0x200143ac
 8006234:	e0001004 	.word	0xe0001004

08006238 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	@ 0x28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006244:	4b6d      	ldr	r3, [pc, #436]	@ (80063fc <_SendPacket+0x1c4>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d010      	beq.n	800626e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800624c:	4b6b      	ldr	r3, [pc, #428]	@ (80063fc <_SendPacket+0x1c4>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 80a5 	beq.w	80063a0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006256:	4b69      	ldr	r3, [pc, #420]	@ (80063fc <_SendPacket+0x1c4>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d109      	bne.n	8006272 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800625e:	f7ff ff77 	bl	8006150 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006262:	4b66      	ldr	r3, [pc, #408]	@ (80063fc <_SendPacket+0x1c4>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b01      	cmp	r3, #1
 8006268:	f040 809c 	bne.w	80063a4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800626c:	e001      	b.n	8006272 <_SendPacket+0x3a>
    goto Send;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <_SendPacket+0x3c>
Send:
 8006272:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b1f      	cmp	r3, #31
 8006278:	d809      	bhi.n	800628e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800627a:	4b60      	ldr	r3, [pc, #384]	@ (80063fc <_SendPacket+0x1c4>)
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	f040 808d 	bne.w	80063a8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b17      	cmp	r3, #23
 8006292:	d807      	bhi.n	80062a4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3b01      	subs	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e03d      	b.n	8006320 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80062b0:	d912      	bls.n	80062d8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	09da      	lsrs	r2, r3, #7
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	3a01      	subs	r2, #1
 80062ca:	60fa      	str	r2, [r7, #12]
 80062cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e006      	b.n	80062e6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ea:	d912      	bls.n	8006312 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	09da      	lsrs	r2, r3, #7
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	3a01      	subs	r2, #1
 8006304:	60fa      	str	r2, [r7, #12]
 8006306:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800630a:	b2da      	uxtb	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e006      	b.n	8006320 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3b01      	subs	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006320:	4b37      	ldr	r3, [pc, #220]	@ (8006400 <_SendPacket+0x1c8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006326:	4b35      	ldr	r3, [pc, #212]	@ (80063fc <_SendPacket+0x1c4>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	623b      	str	r3, [r7, #32]
 8006338:	e00b      	b.n	8006352 <_SendPacket+0x11a>
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	6279      	str	r1, [r7, #36]	@ 0x24
 8006344:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	623b      	str	r3, [r7, #32]
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	2b7f      	cmp	r3, #127	@ 0x7f
 8006356:	d8f0      	bhi.n	800633a <_SendPacket+0x102>
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	627a      	str	r2, [r7, #36]	@ 0x24
 800635e:	6a3a      	ldr	r2, [r7, #32]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006368:	4b24      	ldr	r3, [pc, #144]	@ (80063fc <_SendPacket+0x1c4>)
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	4618      	mov	r0, r3
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	461a      	mov	r2, r3
 8006376:	68f9      	ldr	r1, [r7, #12]
 8006378:	f7f9 ff2a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800637c:	4603      	mov	r3, r0
 800637e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006380:	f7ff f9fc 	bl	800577c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800638a:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <_SendPacket+0x1c4>)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	60d3      	str	r3, [r2, #12]
 8006390:	e00b      	b.n	80063aa <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006392:	4b1a      	ldr	r3, [pc, #104]	@ (80063fc <_SendPacket+0x1c4>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	b2da      	uxtb	r2, r3
 800639a:	4b18      	ldr	r3, [pc, #96]	@ (80063fc <_SendPacket+0x1c4>)
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	e004      	b.n	80063aa <_SendPacket+0x172>
    goto SendDone;
 80063a0:	bf00      	nop
 80063a2:	e002      	b.n	80063aa <_SendPacket+0x172>
      goto SendDone;
 80063a4:	bf00      	nop
 80063a6:	e000      	b.n	80063aa <_SendPacket+0x172>
      goto SendDone;
 80063a8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80063aa:	4b14      	ldr	r3, [pc, #80]	@ (80063fc <_SendPacket+0x1c4>)
 80063ac:	7e1b      	ldrb	r3, [r3, #24]
 80063ae:	4619      	mov	r1, r3
 80063b0:	4a14      	ldr	r2, [pc, #80]	@ (8006404 <_SendPacket+0x1cc>)
 80063b2:	460b      	mov	r3, r1
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	440b      	add	r3, r1
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	4413      	add	r3, r2
 80063bc:	336c      	adds	r3, #108	@ 0x6c
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b0e      	ldr	r3, [pc, #56]	@ (80063fc <_SendPacket+0x1c4>)
 80063c2:	7e1b      	ldrb	r3, [r3, #24]
 80063c4:	4618      	mov	r0, r3
 80063c6:	490f      	ldr	r1, [pc, #60]	@ (8006404 <_SendPacket+0x1cc>)
 80063c8:	4603      	mov	r3, r0
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4403      	add	r3, r0
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	440b      	add	r3, r1
 80063d2:	3370      	adds	r3, #112	@ 0x70
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d00b      	beq.n	80063f2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80063da:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <_SendPacket+0x1c4>)
 80063dc:	789b      	ldrb	r3, [r3, #2]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d107      	bne.n	80063f2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80063e2:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <_SendPacket+0x1c4>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80063e8:	f7ff fe42 	bl	8006070 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80063ec:	4b03      	ldr	r3, [pc, #12]	@ (80063fc <_SendPacket+0x1c4>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80063f2:	bf00      	nop
 80063f4:	3728      	adds	r7, #40	@ 0x28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200143ac 	.word	0x200143ac
 8006400:	e0001004 	.word	0xe0001004
 8006404:	20012eec 	.word	0x20012eec

08006408 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	@ 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	3301      	adds	r3, #1
 800641e:	2b80      	cmp	r3, #128	@ 0x80
 8006420:	d80a      	bhi.n	8006438 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6051      	str	r1, [r2, #4]
 800642c:	78fa      	ldrb	r2, [r7, #3]
 800642e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b80      	cmp	r3, #128	@ 0x80
 800643e:	d15a      	bne.n	80064f6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	e00b      	b.n	800647a <_StoreChar+0x72>
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	1c59      	adds	r1, r3, #1
 800646a:	6279      	str	r1, [r7, #36]	@ 0x24
 800646c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	09db      	lsrs	r3, r3, #7
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	2b7f      	cmp	r3, #127	@ 0x7f
 800647e:	d8f0      	bhi.n	8006462 <_StoreChar+0x5a>
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	627a      	str	r2, [r7, #36]	@ 0x24
 8006486:	6a3a      	ldr	r2, [r7, #32]
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	2300      	movs	r3, #0
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	e00b      	b.n	80064b2 <_StoreChar+0xaa>
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	b2da      	uxtb	r2, r3
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	1c59      	adds	r1, r3, #1
 80064a2:	61f9      	str	r1, [r7, #28]
 80064a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	09db      	lsrs	r3, r3, #7
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80064b6:	d8f0      	bhi.n	800649a <_StoreChar+0x92>
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	61fa      	str	r2, [r7, #28]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	221a      	movs	r2, #26
 80064ce:	6939      	ldr	r1, [r7, #16]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff feb1 	bl	8006238 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fdbb 	bl	8006056 <_PreparePacket>
 80064e0:	4602      	mov	r2, r0
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	611a      	str	r2, [r3, #16]
  }
}
 80064f6:	bf00      	nop
 80064f8:	3728      	adds	r7, #40	@ 0x28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b08a      	sub	sp, #40	@ 0x28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006512:	2301      	movs	r3, #1
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006516:	2301      	movs	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800651a:	e007      	b.n	800652c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800651c:	6a3a      	ldr	r2, [r7, #32]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	623b      	str	r3, [r7, #32]
    Width++;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	3301      	adds	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d2f3      	bcs.n	800651c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	429a      	cmp	r2, r3
 800653a:	d901      	bls.n	8006540 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d000      	beq.n	800654c <_PrintUnsigned+0x4c>
 800654a:	e01f      	b.n	800658c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01c      	beq.n	800658c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <_PrintUnsigned+0x68>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <_PrintUnsigned+0x68>
        c = '0';
 8006562:	2330      	movs	r3, #48	@ 0x30
 8006564:	76fb      	strb	r3, [r7, #27]
 8006566:	e001      	b.n	800656c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006568:	2320      	movs	r3, #32
 800656a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800656c:	e007      	b.n	800657e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	3b01      	subs	r3, #1
 8006572:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006574:	7efb      	ldrb	r3, [r7, #27]
 8006576:	4619      	mov	r1, r3
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff ff45 	bl	8006408 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <_PrintUnsigned+0x8c>
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	429a      	cmp	r2, r3
 800658a:	d3f0      	bcc.n	800656e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d903      	bls.n	800659a <_PrintUnsigned+0x9a>
      NumDigits--;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	3b01      	subs	r3, #1
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	e009      	b.n	80065ae <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659e:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a2:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d200      	bcs.n	80065ae <_PrintUnsigned+0xae>
        break;
 80065ac:	e005      	b.n	80065ba <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80065b8:	e7e8      	b.n	800658c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80065d2:	4a15      	ldr	r2, [pc, #84]	@ (8006628 <_PrintUnsigned+0x128>)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	4413      	add	r3, r2
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	4619      	mov	r1, r3
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff ff13 	bl	8006408 <_StoreChar>
    Digit /= Base;
 80065e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e3      	bne.n	80065ba <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80065f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00e      	beq.n	8006620 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006602:	e006      	b.n	8006612 <_PrintUnsigned+0x112>
        FieldWidth--;
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	3b01      	subs	r3, #1
 8006608:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800660a:	2120      	movs	r1, #32
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fefb 	bl	8006408 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <_PrintUnsigned+0x120>
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	429a      	cmp	r2, r3
 800661e:	d3f1      	bcc.n	8006604 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006620:	bf00      	nop
 8006622:	3728      	adds	r7, #40	@ 0x28
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	08007df8 	.word	0x08007df8

0800662c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bfb8      	it	lt
 8006640:	425b      	neglt	r3, r3
 8006642:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006644:	2301      	movs	r3, #1
 8006646:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006648:	e007      	b.n	800665a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006652:	613b      	str	r3, [r7, #16]
    Width++;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3301      	adds	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	daf3      	bge.n	800664a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	429a      	cmp	r2, r3
 8006668:	d901      	bls.n	800666e <_PrintInt+0x42>
    Width = NumDigits;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <_PrintInt+0x5e>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	db04      	blt.n	8006684 <_PrintInt+0x58>
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <_PrintInt+0x5e>
    FieldWidth--;
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	3b01      	subs	r3, #1
 8006688:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <_PrintInt+0x6e>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d016      	beq.n	80066c8 <_PrintInt+0x9c>
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d111      	bne.n	80066c8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00e      	beq.n	80066c8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066aa:	e006      	b.n	80066ba <_PrintInt+0x8e>
        FieldWidth--;
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80066b2:	2120      	movs	r1, #32
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fea7 	bl	8006408 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <_PrintInt+0x9c>
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3f1      	bcc.n	80066ac <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da07      	bge.n	80066de <_PrintInt+0xb2>
    v = -v;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	425b      	negs	r3, r3
 80066d2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80066d4:	212d      	movs	r1, #45	@ 0x2d
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff fe96 	bl	8006408 <_StoreChar>
 80066dc:	e008      	b.n	80066f0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80066e8:	212b      	movs	r1, #43	@ 0x2b
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fe8c 	bl	8006408 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d019      	beq.n	800672e <_PrintInt+0x102>
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d114      	bne.n	800672e <_PrintInt+0x102>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d111      	bne.n	800672e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006710:	e006      	b.n	8006720 <_PrintInt+0xf4>
        FieldWidth--;
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	3b01      	subs	r3, #1
 8006716:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006718:	2130      	movs	r1, #48	@ 0x30
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff fe74 	bl	8006408 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <_PrintInt+0x102>
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	429a      	cmp	r2, r3
 800672c:	d3f1      	bcc.n	8006712 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7ff fedf 	bl	8006500 <_PrintUnsigned>
}
 8006742:	bf00      	nop
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b098      	sub	sp, #96	@ 0x60
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006758:	f3ef 8311 	mrs	r3, BASEPRI
 800675c:	f04f 0120 	mov.w	r1, #32
 8006760:	f381 8811 	msr	BASEPRI, r1
 8006764:	633b      	str	r3, [r7, #48]	@ 0x30
 8006766:	48b7      	ldr	r0, [pc, #732]	@ (8006a44 <_VPrintTarget+0x2f8>)
 8006768:	f7ff fc75 	bl	8006056 <_PreparePacket>
 800676c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800676e:	4bb5      	ldr	r3, [pc, #724]	@ (8006a44 <_VPrintTarget+0x2f8>)
 8006770:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006772:	2300      	movs	r3, #0
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	3301      	adds	r3, #1
 800677e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3301      	adds	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006792:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8183 	beq.w	8006aa2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800679c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067a0:	2b25      	cmp	r3, #37	@ 0x25
 80067a2:	f040 8170 	bne.w	8006a86 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80067a6:	2300      	movs	r3, #0
 80067a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80067aa:	2301      	movs	r3, #1
 80067ac:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80067b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067ba:	3b23      	subs	r3, #35	@ 0x23
 80067bc:	2b0d      	cmp	r3, #13
 80067be:	d83f      	bhi.n	8006840 <_VPrintTarget+0xf4>
 80067c0:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <_VPrintTarget+0x7c>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	08006831 	.word	0x08006831
 80067cc:	08006841 	.word	0x08006841
 80067d0:	08006841 	.word	0x08006841
 80067d4:	08006841 	.word	0x08006841
 80067d8:	08006841 	.word	0x08006841
 80067dc:	08006841 	.word	0x08006841
 80067e0:	08006841 	.word	0x08006841
 80067e4:	08006841 	.word	0x08006841
 80067e8:	08006821 	.word	0x08006821
 80067ec:	08006841 	.word	0x08006841
 80067f0:	08006801 	.word	0x08006801
 80067f4:	08006841 	.word	0x08006841
 80067f8:	08006841 	.word	0x08006841
 80067fc:	08006811 	.word	0x08006811
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e01a      	b.n	8006846 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006812:	f043 0302 	orr.w	r3, r3, #2
 8006816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e012      	b.n	8006846 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006822:	f043 0304 	orr.w	r3, r3, #4
 8006826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	e00a      	b.n	8006846 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006832:	f043 0308 	orr.w	r3, r3, #8
 8006836:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e002      	b.n	8006846 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006840:	2300      	movs	r3, #0
 8006842:	653b      	str	r3, [r7, #80]	@ 0x50
 8006844:	bf00      	nop
        }
      } while (v);
 8006846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1b0      	bne.n	80067ae <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800684c:	2300      	movs	r3, #0
 800684e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006858:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800685c:	2b2f      	cmp	r3, #47	@ 0x2f
 800685e:	d912      	bls.n	8006886 <_VPrintTarget+0x13a>
 8006860:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006864:	2b39      	cmp	r3, #57	@ 0x39
 8006866:	d80e      	bhi.n	8006886 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800686e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	461a      	mov	r2, r3
 800687a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800687e:	4413      	add	r3, r2
 8006880:	3b30      	subs	r3, #48	@ 0x30
 8006882:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006884:	e7e4      	b.n	8006850 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006886:	2300      	movs	r3, #0
 8006888:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006892:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006896:	2b2e      	cmp	r3, #46	@ 0x2e
 8006898:	d11d      	bne.n	80068d6 <_VPrintTarget+0x18a>
        sFormat++;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80068a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80068ae:	d912      	bls.n	80068d6 <_VPrintTarget+0x18a>
 80068b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068b4:	2b39      	cmp	r3, #57	@ 0x39
 80068b6:	d80e      	bhi.n	80068d6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80068be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	461a      	mov	r2, r3
 80068ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068ce:	4413      	add	r3, r2
 80068d0:	3b30      	subs	r3, #48	@ 0x30
 80068d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80068d4:	e7e4      	b.n	80068a0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80068de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068e2:	2b6c      	cmp	r3, #108	@ 0x6c
 80068e4:	d003      	beq.n	80068ee <_VPrintTarget+0x1a2>
 80068e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068ea:	2b68      	cmp	r3, #104	@ 0x68
 80068ec:	d107      	bne.n	80068fe <_VPrintTarget+0x1b2>
          c = *sFormat;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80068fc:	e7ef      	b.n	80068de <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80068fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006902:	2b25      	cmp	r3, #37	@ 0x25
 8006904:	f000 80b3 	beq.w	8006a6e <_VPrintTarget+0x322>
 8006908:	2b25      	cmp	r3, #37	@ 0x25
 800690a:	f2c0 80b7 	blt.w	8006a7c <_VPrintTarget+0x330>
 800690e:	2b78      	cmp	r3, #120	@ 0x78
 8006910:	f300 80b4 	bgt.w	8006a7c <_VPrintTarget+0x330>
 8006914:	2b58      	cmp	r3, #88	@ 0x58
 8006916:	f2c0 80b1 	blt.w	8006a7c <_VPrintTarget+0x330>
 800691a:	3b58      	subs	r3, #88	@ 0x58
 800691c:	2b20      	cmp	r3, #32
 800691e:	f200 80ad 	bhi.w	8006a7c <_VPrintTarget+0x330>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <_VPrintTarget+0x1dc>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	08006a1f 	.word	0x08006a1f
 800692c:	08006a7d 	.word	0x08006a7d
 8006930:	08006a7d 	.word	0x08006a7d
 8006934:	08006a7d 	.word	0x08006a7d
 8006938:	08006a7d 	.word	0x08006a7d
 800693c:	08006a7d 	.word	0x08006a7d
 8006940:	08006a7d 	.word	0x08006a7d
 8006944:	08006a7d 	.word	0x08006a7d
 8006948:	08006a7d 	.word	0x08006a7d
 800694c:	08006a7d 	.word	0x08006a7d
 8006950:	08006a7d 	.word	0x08006a7d
 8006954:	080069ad 	.word	0x080069ad
 8006958:	080069d3 	.word	0x080069d3
 800695c:	08006a7d 	.word	0x08006a7d
 8006960:	08006a7d 	.word	0x08006a7d
 8006964:	08006a7d 	.word	0x08006a7d
 8006968:	08006a7d 	.word	0x08006a7d
 800696c:	08006a7d 	.word	0x08006a7d
 8006970:	08006a7d 	.word	0x08006a7d
 8006974:	08006a7d 	.word	0x08006a7d
 8006978:	08006a7d 	.word	0x08006a7d
 800697c:	08006a7d 	.word	0x08006a7d
 8006980:	08006a7d 	.word	0x08006a7d
 8006984:	08006a7d 	.word	0x08006a7d
 8006988:	08006a49 	.word	0x08006a49
 800698c:	08006a7d 	.word	0x08006a7d
 8006990:	08006a7d 	.word	0x08006a7d
 8006994:	08006a7d 	.word	0x08006a7d
 8006998:	08006a7d 	.word	0x08006a7d
 800699c:	080069f9 	.word	0x080069f9
 80069a0:	08006a7d 	.word	0x08006a7d
 80069a4:	08006a7d 	.word	0x08006a7d
 80069a8:	08006a1f 	.word	0x08006a1f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	1d19      	adds	r1, r3, #4
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80069ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 80069c0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80069c4:	f107 0314 	add.w	r3, r7, #20
 80069c8:	4611      	mov	r1, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fd1c 	bl	8006408 <_StoreChar>
        break;
 80069d0:	e055      	b.n	8006a7e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	1d19      	adds	r1, r3, #4
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6011      	str	r1, [r2, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80069e0:	f107 0014 	add.w	r0, r7, #20
 80069e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ee:	220a      	movs	r2, #10
 80069f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069f2:	f7ff fe1b 	bl	800662c <_PrintInt>
        break;
 80069f6:	e042      	b.n	8006a7e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	1d19      	adds	r1, r3, #4
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6011      	str	r1, [r2, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006a06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a08:	f107 0014 	add.w	r0, r7, #20
 8006a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a16:	220a      	movs	r2, #10
 8006a18:	f7ff fd72 	bl	8006500 <_PrintUnsigned>
        break;
 8006a1c:	e02f      	b.n	8006a7e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	1d19      	adds	r1, r3, #4
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6011      	str	r1, [r2, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006a2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a2e:	f107 0014 	add.w	r0, r7, #20
 8006a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	f7ff fd5f 	bl	8006500 <_PrintUnsigned>
        break;
 8006a42:	e01c      	b.n	8006a7e <_VPrintTarget+0x332>
 8006a44:	200143dc 	.word	0x200143dc
      case 'p':
        v = va_arg(*pParamList, int);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	1d19      	adds	r1, r3, #4
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6011      	str	r1, [r2, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006a56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a58:	f107 0014 	add.w	r0, r7, #20
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9301      	str	r3, [sp, #4]
 8006a60:	2308      	movs	r3, #8
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	2308      	movs	r3, #8
 8006a66:	2210      	movs	r2, #16
 8006a68:	f7ff fd4a 	bl	8006500 <_PrintUnsigned>
        break;
 8006a6c:	e007      	b.n	8006a7e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006a6e:	f107 0314 	add.w	r3, r7, #20
 8006a72:	2125      	movs	r1, #37	@ 0x25
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fcc7 	bl	8006408 <_StoreChar>
        break;
 8006a7a:	e000      	b.n	8006a7e <_VPrintTarget+0x332>
      default:
        break;
 8006a7c:	bf00      	nop
      }
      sFormat++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e007      	b.n	8006a96 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006a86:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006a8a:	f107 0314 	add.w	r3, r7, #20
 8006a8e:	4611      	mov	r1, r2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fcb9 	bl	8006408 <_StoreChar>
    }
  } while (*sFormat);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f47f ae72 	bne.w	8006784 <_VPrintTarget+0x38>
 8006aa0:	e000      	b.n	8006aa4 <_VPrintTarget+0x358>
      break;
 8006aa2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d041      	beq.n	8006b2e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aba:	e00b      	b.n	8006ad4 <_VPrintTarget+0x388>
 8006abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	6439      	str	r1, [r7, #64]	@ 0x40
 8006ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <_VPrintTarget+0x370>
 8006ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ae0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aee:	2300      	movs	r3, #0
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af2:	e00b      	b.n	8006b0c <_VPrintTarget+0x3c0>
 8006af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afa:	1c59      	adds	r1, r3, #1
 8006afc:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006afe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b08:	09db      	lsrs	r3, r3, #7
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b10:	d8f0      	bhi.n	8006af4 <_VPrintTarget+0x3a8>
 8006b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b20:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	69b9      	ldr	r1, [r7, #24]
 8006b26:	221a      	movs	r2, #26
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fb85 	bl	8006238 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006b34:	bf00      	nop
 8006b36:	3758      	adds	r7, #88	@ 0x58
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006b50:	4917      	ldr	r1, [pc, #92]	@ (8006bb0 <SEGGER_SYSVIEW_Init+0x74>)
 8006b52:	4818      	ldr	r0, [pc, #96]	@ (8006bb4 <SEGGER_SYSVIEW_Init+0x78>)
 8006b54:	f7ff f93e 	bl	8005dd4 <SEGGER_RTT_AllocUpBuffer>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	4b16      	ldr	r3, [pc, #88]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b5e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006b60:	4b15      	ldr	r3, [pc, #84]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b62:	785a      	ldrb	r2, [r3, #1]
 8006b64:	4b14      	ldr	r3, [pc, #80]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b66:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b68:	4b13      	ldr	r3, [pc, #76]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b6a:	7e1b      	ldrb	r3, [r3, #24]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	2308      	movs	r3, #8
 8006b74:	4a11      	ldr	r2, [pc, #68]	@ (8006bbc <SEGGER_SYSVIEW_Init+0x80>)
 8006b76:	490f      	ldr	r1, [pc, #60]	@ (8006bb4 <SEGGER_SYSVIEW_Init+0x78>)
 8006b78:	f7ff f9b0 	bl	8005edc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006b82:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc0 <SEGGER_SYSVIEW_Init+0x84>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b88:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006b8a:	4a0b      	ldr	r2, [pc, #44]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006b90:	4a09      	ldr	r2, [pc, #36]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006b96:	4a08      	ldr	r2, [pc, #32]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006b9c:	4a06      	ldr	r2, [pc, #24]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006ba2:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200133a4 	.word	0x200133a4
 8006bb4:	08007dc0 	.word	0x08007dc0
 8006bb8:	200143ac 	.word	0x200143ac
 8006bbc:	200143a4 	.word	0x200143a4
 8006bc0:	e0001004 	.word	0xe0001004

08006bc4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006bcc:	4a04      	ldr	r2, [pc, #16]	@ (8006be0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6113      	str	r3, [r2, #16]
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	200143ac 	.word	0x200143ac

08006be4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bec:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf0:	f04f 0120 	mov.w	r1, #32
 8006bf4:	f381 8811 	msr	BASEPRI, r1
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	4808      	ldr	r0, [pc, #32]	@ (8006c1c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006bfc:	f7ff fa2b 	bl	8006056 <_PreparePacket>
 8006c00:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	68b8      	ldr	r0, [r7, #8]
 8006c08:	f7ff fb16 	bl	8006238 <_SendPacket>
  RECORD_END();
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f383 8811 	msr	BASEPRI, r3
}
 8006c12:	bf00      	nop
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	200143dc 	.word	0x200143dc

08006c20 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2e:	f04f 0120 	mov.w	r1, #32
 8006c32:	f381 8811 	msr	BASEPRI, r1
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	4816      	ldr	r0, [pc, #88]	@ (8006c94 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006c3a:	f7ff fa0c 	bl	8006056 <_PreparePacket>
 8006c3e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	e00b      	b.n	8006c66 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	61f9      	str	r1, [r7, #28]
 8006c58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c6a:	d8f0      	bhi.n	8006c4e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	61fa      	str	r2, [r7, #28]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	6938      	ldr	r0, [r7, #16]
 8006c82:	f7ff fad9 	bl	8006238 <_SendPacket>
  RECORD_END();
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f383 8811 	msr	BASEPRI, r3
}
 8006c8c:	bf00      	nop
 8006c8e:	3720      	adds	r7, #32
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	200143dc 	.word	0x200143dc

08006c98 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08c      	sub	sp, #48	@ 0x30
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ca8:	f04f 0120 	mov.w	r1, #32
 8006cac:	f381 8811 	msr	BASEPRI, r1
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	4825      	ldr	r0, [pc, #148]	@ (8006d48 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006cb4:	f7ff f9cf 	bl	8006056 <_PreparePacket>
 8006cb8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cc6:	e00b      	b.n	8006ce0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cce:	1c59      	adds	r1, r3, #1
 8006cd0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006cd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	09db      	lsrs	r3, r3, #7
 8006cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ce4:	d8f0      	bhi.n	8006cc8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	623b      	str	r3, [r7, #32]
 8006cfe:	e00b      	b.n	8006d18 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	1c59      	adds	r1, r3, #1
 8006d08:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	09db      	lsrs	r3, r3, #7
 8006d16:	623b      	str	r3, [r7, #32]
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d1c:	d8f0      	bhi.n	8006d00 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d24:	6a3a      	ldr	r2, [r7, #32]
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	6979      	ldr	r1, [r7, #20]
 8006d32:	69b8      	ldr	r0, [r7, #24]
 8006d34:	f7ff fa80 	bl	8006238 <_SendPacket>
  RECORD_END();
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f383 8811 	msr	BASEPRI, r3
}
 8006d3e:	bf00      	nop
 8006d40:	3730      	adds	r7, #48	@ 0x30
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200143dc 	.word	0x200143dc

08006d4c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	@ 0x38
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d5e:	f04f 0120 	mov.w	r1, #32
 8006d62:	f381 8811 	msr	BASEPRI, r1
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	4832      	ldr	r0, [pc, #200]	@ (8006e34 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006d6a:	f7ff f974 	bl	8006056 <_PreparePacket>
 8006d6e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d7c:	e00b      	b.n	8006d96 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d84:	1c59      	adds	r1, r3, #1
 8006d86:	6379      	str	r1, [r7, #52]	@ 0x34
 8006d88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	09db      	lsrs	r3, r3, #7
 8006d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d9a:	d8f0      	bhi.n	8006d7e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006daa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006db4:	e00b      	b.n	8006dce <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	1c59      	adds	r1, r3, #1
 8006dbe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006dc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dca:	09db      	lsrs	r3, r3, #7
 8006dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd2:	d8f0      	bhi.n	8006db6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	623b      	str	r3, [r7, #32]
 8006dec:	e00b      	b.n	8006e06 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	1c59      	adds	r1, r3, #1
 8006df6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006df8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	09db      	lsrs	r3, r3, #7
 8006e04:	623b      	str	r3, [r7, #32]
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e0a:	d8f0      	bhi.n	8006dee <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e12:	6a3a      	ldr	r2, [r7, #32]
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	6979      	ldr	r1, [r7, #20]
 8006e20:	69b8      	ldr	r0, [r7, #24]
 8006e22:	f7ff fa09 	bl	8006238 <_SendPacket>
  RECORD_END();
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f383 8811 	msr	BASEPRI, r3
}
 8006e2c:	bf00      	nop
 8006e2e:	3738      	adds	r7, #56	@ 0x38
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	200143dc 	.word	0x200143dc

08006e38 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b090      	sub	sp, #64	@ 0x40
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e46:	f3ef 8311 	mrs	r3, BASEPRI
 8006e4a:	f04f 0120 	mov.w	r1, #32
 8006e4e:	f381 8811 	msr	BASEPRI, r1
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	4840      	ldr	r0, [pc, #256]	@ (8006f58 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006e56:	f7ff f8fe 	bl	8006056 <_PreparePacket>
 8006e5a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e68:	e00b      	b.n	8006e82 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e70:	1c59      	adds	r1, r3, #1
 8006e72:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006e74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7e:	09db      	lsrs	r3, r3, #7
 8006e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e86:	d8f0      	bhi.n	8006e6a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ea0:	e00b      	b.n	8006eba <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea8:	1c59      	adds	r1, r3, #1
 8006eaa:	6379      	str	r1, [r7, #52]	@ 0x34
 8006eac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	09db      	lsrs	r3, r3, #7
 8006eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ebe:	d8f0      	bhi.n	8006ea2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ed8:	e00b      	b.n	8006ef2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee0:	1c59      	adds	r1, r3, #1
 8006ee2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ee4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	09db      	lsrs	r3, r3, #7
 8006ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ef6:	d8f0      	bhi.n	8006eda <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f0e:	623b      	str	r3, [r7, #32]
 8006f10:	e00b      	b.n	8006f2a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	1c59      	adds	r1, r3, #1
 8006f1a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	09db      	lsrs	r3, r3, #7
 8006f28:	623b      	str	r3, [r7, #32]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f2e:	d8f0      	bhi.n	8006f12 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f36:	6a3a      	ldr	r2, [r7, #32]
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	6979      	ldr	r1, [r7, #20]
 8006f44:	69b8      	ldr	r0, [r7, #24]
 8006f46:	f7ff f977 	bl	8006238 <_SendPacket>
  RECORD_END();
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f383 8811 	msr	BASEPRI, r3
}
 8006f50:	bf00      	nop
 8006f52:	3740      	adds	r7, #64	@ 0x40
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200143dc 	.word	0x200143dc

08006f5c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08c      	sub	sp, #48	@ 0x30
 8006f60:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006f62:	4b59      	ldr	r3, [pc, #356]	@ (80070c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006f68:	f3ef 8311 	mrs	r3, BASEPRI
 8006f6c:	f04f 0120 	mov.w	r1, #32
 8006f70:	f381 8811 	msr	BASEPRI, r1
 8006f74:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006f76:	4b54      	ldr	r3, [pc, #336]	@ (80070c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	220a      	movs	r2, #10
 8006f7c:	4953      	ldr	r1, [pc, #332]	@ (80070cc <SEGGER_SYSVIEW_Start+0x170>)
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7f9 f926 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006f8a:	f7fe fbf7 	bl	800577c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006f8e:	200a      	movs	r0, #10
 8006f90:	f7ff fe28 	bl	8006be4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f94:	f3ef 8311 	mrs	r3, BASEPRI
 8006f98:	f04f 0120 	mov.w	r1, #32
 8006f9c:	f381 8811 	msr	BASEPRI, r1
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	484b      	ldr	r0, [pc, #300]	@ (80070d0 <SEGGER_SYSVIEW_Start+0x174>)
 8006fa4:	f7ff f857 	bl	8006056 <_PreparePacket>
 8006fa8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fb2:	4b45      	ldr	r3, [pc, #276]	@ (80070c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fb8:	e00b      	b.n	8006fd2 <SEGGER_SYSVIEW_Start+0x76>
 8006fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006fc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	09db      	lsrs	r3, r3, #7
 8006fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fd6:	d8f0      	bhi.n	8006fba <SEGGER_SYSVIEW_Start+0x5e>
 8006fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fec:	4b36      	ldr	r3, [pc, #216]	@ (80070c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	623b      	str	r3, [r7, #32]
 8006ff2:	e00b      	b.n	800700c <SEGGER_SYSVIEW_Start+0xb0>
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	1c59      	adds	r1, r3, #1
 8006ffc:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ffe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	09db      	lsrs	r3, r3, #7
 800700a:	623b      	str	r3, [r7, #32]
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007010:	d8f0      	bhi.n	8006ff4 <SEGGER_SYSVIEW_Start+0x98>
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	627a      	str	r2, [r7, #36]	@ 0x24
 8007018:	6a3a      	ldr	r2, [r7, #32]
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	4b28      	ldr	r3, [pc, #160]	@ (80070c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	e00b      	b.n	8007046 <SEGGER_SYSVIEW_Start+0xea>
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	1c59      	adds	r1, r3, #1
 8007036:	61f9      	str	r1, [r7, #28]
 8007038:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	09db      	lsrs	r3, r3, #7
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b7f      	cmp	r3, #127	@ 0x7f
 800704a:	d8f0      	bhi.n	800702e <SEGGER_SYSVIEW_Start+0xd2>
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	61fa      	str	r2, [r7, #28]
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	2300      	movs	r3, #0
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	e00b      	b.n	800707e <SEGGER_SYSVIEW_Start+0x122>
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	b2da      	uxtb	r2, r3
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	1c59      	adds	r1, r3, #1
 800706e:	6179      	str	r1, [r7, #20]
 8007070:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	09db      	lsrs	r3, r3, #7
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b7f      	cmp	r3, #127	@ 0x7f
 8007082:	d8f0      	bhi.n	8007066 <SEGGER_SYSVIEW_Start+0x10a>
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	617a      	str	r2, [r7, #20]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007094:	2218      	movs	r2, #24
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff f8cd 	bl	8006238 <_SendPacket>
      RECORD_END();
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80070a4:	4b08      	ldr	r3, [pc, #32]	@ (80070c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80070ac:	4b06      	ldr	r3, [pc, #24]	@ (80070c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80070b2:	f000 f9eb 	bl	800748c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80070b6:	f000 f9b1 	bl	800741c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80070ba:	f000 fc83 	bl	80079c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80070be:	bf00      	nop
 80070c0:	3730      	adds	r7, #48	@ 0x30
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200143ac 	.word	0x200143ac
 80070cc:	08007dec 	.word	0x08007dec
 80070d0:	200143dc 	.word	0x200143dc

080070d4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070da:	f3ef 8311 	mrs	r3, BASEPRI
 80070de:	f04f 0120 	mov.w	r1, #32
 80070e2:	f381 8811 	msr	BASEPRI, r1
 80070e6:	607b      	str	r3, [r7, #4]
 80070e8:	480b      	ldr	r0, [pc, #44]	@ (8007118 <SEGGER_SYSVIEW_Stop+0x44>)
 80070ea:	f7fe ffb4 	bl	8006056 <_PreparePacket>
 80070ee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80070f0:	4b0a      	ldr	r3, [pc, #40]	@ (800711c <SEGGER_SYSVIEW_Stop+0x48>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80070f8:	220b      	movs	r2, #11
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6838      	ldr	r0, [r7, #0]
 80070fe:	f7ff f89b 	bl	8006238 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007102:	4b06      	ldr	r3, [pc, #24]	@ (800711c <SEGGER_SYSVIEW_Stop+0x48>)
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f383 8811 	msr	BASEPRI, r3
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	200143dc 	.word	0x200143dc
 800711c:	200143ac 	.word	0x200143ac

08007120 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b08c      	sub	sp, #48	@ 0x30
 8007124:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007126:	f3ef 8311 	mrs	r3, BASEPRI
 800712a:	f04f 0120 	mov.w	r1, #32
 800712e:	f381 8811 	msr	BASEPRI, r1
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	4845      	ldr	r0, [pc, #276]	@ (800724c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007136:	f7fe ff8e 	bl	8006056 <_PreparePacket>
 800713a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007144:	4b42      	ldr	r3, [pc, #264]	@ (8007250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800714a:	e00b      	b.n	8007164 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800714c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714e:	b2da      	uxtb	r2, r3
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	1c59      	adds	r1, r3, #1
 8007154:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007156:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007160:	09db      	lsrs	r3, r3, #7
 8007162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	2b7f      	cmp	r3, #127	@ 0x7f
 8007168:	d8f0      	bhi.n	800714c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800716a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007178:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	627b      	str	r3, [r7, #36]	@ 0x24
 800717e:	4b34      	ldr	r3, [pc, #208]	@ (8007250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	623b      	str	r3, [r7, #32]
 8007184:	e00b      	b.n	800719e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	1c59      	adds	r1, r3, #1
 800718e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007190:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	09db      	lsrs	r3, r3, #7
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80071a2:	d8f0      	bhi.n	8007186 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80071aa:	6a3a      	ldr	r2, [r7, #32]
 80071ac:	b2d2      	uxtb	r2, r2
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	4b25      	ldr	r3, [pc, #148]	@ (8007250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	e00b      	b.n	80071d8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	1c59      	adds	r1, r3, #1
 80071c8:	61f9      	str	r1, [r7, #28]
 80071ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	09db      	lsrs	r3, r3, #7
 80071d6:	61bb      	str	r3, [r7, #24]
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b7f      	cmp	r3, #127	@ 0x7f
 80071dc:	d8f0      	bhi.n	80071c0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	61fa      	str	r2, [r7, #28]
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	e00b      	b.n	8007210 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	1c59      	adds	r1, r3, #1
 8007200:	6179      	str	r1, [r7, #20]
 8007202:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	09db      	lsrs	r3, r3, #7
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b7f      	cmp	r3, #127	@ 0x7f
 8007214:	d8f0      	bhi.n	80071f8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	617a      	str	r2, [r7, #20]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007226:	2218      	movs	r2, #24
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	68b8      	ldr	r0, [r7, #8]
 800722c:	f7ff f804 	bl	8006238 <_SendPacket>
  RECORD_END();
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007236:	4b06      	ldr	r3, [pc, #24]	@ (8007250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800723e:	4b04      	ldr	r3, [pc, #16]	@ (8007250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007242:	4798      	blx	r3
  }
}
 8007244:	bf00      	nop
 8007246:	3730      	adds	r7, #48	@ 0x30
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	200143dc 	.word	0x200143dc
 8007250:	200143ac 	.word	0x200143ac

08007254 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b092      	sub	sp, #72	@ 0x48
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800725c:	f3ef 8311 	mrs	r3, BASEPRI
 8007260:	f04f 0120 	mov.w	r1, #32
 8007264:	f381 8811 	msr	BASEPRI, r1
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	486a      	ldr	r0, [pc, #424]	@ (8007414 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800726c:	f7fe fef3 	bl	8006056 <_PreparePacket>
 8007270:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	647b      	str	r3, [r7, #68]	@ 0x44
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4b66      	ldr	r3, [pc, #408]	@ (8007418 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	643b      	str	r3, [r7, #64]	@ 0x40
 8007286:	e00b      	b.n	80072a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800728a:	b2da      	uxtb	r2, r3
 800728c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	6479      	str	r1, [r7, #68]	@ 0x44
 8007292:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800729c:	09db      	lsrs	r3, r3, #7
 800729e:	643b      	str	r3, [r7, #64]	@ 0x40
 80072a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072a4:	d8f0      	bhi.n	8007288 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80072a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80072ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072c0:	e00b      	b.n	80072da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c8:	1c59      	adds	r1, r3, #1
 80072ca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80072cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072d0:	b2d2      	uxtb	r2, r2
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d6:	09db      	lsrs	r3, r3, #7
 80072d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80072de:	d8f0      	bhi.n	80072c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80072e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	4619      	mov	r1, r3
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7fe fe5f 	bl	8005fbc <_EncodeStr>
 80072fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007300:	2209      	movs	r2, #9
 8007302:	68f9      	ldr	r1, [r7, #12]
 8007304:	6938      	ldr	r0, [r7, #16]
 8007306:	f7fe ff97 	bl	8006238 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	637b      	str	r3, [r7, #52]	@ 0x34
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4b40      	ldr	r3, [pc, #256]	@ (8007418 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	633b      	str	r3, [r7, #48]	@ 0x30
 800731e:	e00b      	b.n	8007338 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	b2da      	uxtb	r2, r3
 8007324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007326:	1c59      	adds	r1, r3, #1
 8007328:	6379      	str	r1, [r7, #52]	@ 0x34
 800732a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	09db      	lsrs	r3, r3, #7
 8007336:	633b      	str	r3, [r7, #48]	@ 0x30
 8007338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733a:	2b7f      	cmp	r3, #127	@ 0x7f
 800733c:	d8f0      	bhi.n	8007320 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800733e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	637a      	str	r2, [r7, #52]	@ 0x34
 8007344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007358:	e00b      	b.n	8007372 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800735a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735c:	b2da      	uxtb	r2, r3
 800735e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007360:	1c59      	adds	r1, r3, #1
 8007362:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007364:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736e:	09db      	lsrs	r3, r3, #7
 8007370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007374:	2b7f      	cmp	r3, #127	@ 0x7f
 8007376:	d8f0      	bhi.n	800735a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800737e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	623b      	str	r3, [r7, #32]
 8007392:	e00b      	b.n	80073ac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	1c59      	adds	r1, r3, #1
 800739c:	6279      	str	r1, [r7, #36]	@ 0x24
 800739e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	09db      	lsrs	r3, r3, #7
 80073aa:	623b      	str	r3, [r7, #32]
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80073b0:	d8f0      	bhi.n	8007394 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80073b8:	6a3a      	ldr	r2, [r7, #32]
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	61fb      	str	r3, [r7, #28]
 80073c6:	2300      	movs	r3, #0
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	e00b      	b.n	80073e4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	1c59      	adds	r1, r3, #1
 80073d4:	61f9      	str	r1, [r7, #28]
 80073d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	09db      	lsrs	r3, r3, #7
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80073e8:	d8f0      	bhi.n	80073cc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	61fa      	str	r2, [r7, #28]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80073fa:	2215      	movs	r2, #21
 80073fc:	68f9      	ldr	r1, [r7, #12]
 80073fe:	6938      	ldr	r0, [r7, #16]
 8007400:	f7fe ff1a 	bl	8006238 <_SendPacket>
  RECORD_END();
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f383 8811 	msr	BASEPRI, r3
}
 800740a:	bf00      	nop
 800740c:	3748      	adds	r7, #72	@ 0x48
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200143dc 	.word	0x200143dc
 8007418:	200143ac 	.word	0x200143ac

0800741c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007420:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007428:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007432:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	4798      	blx	r3
  }
}
 800743a:	bf00      	nop
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	200143ac 	.word	0x200143ac

08007444 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800744c:	f3ef 8311 	mrs	r3, BASEPRI
 8007450:	f04f 0120 	mov.w	r1, #32
 8007454:	f381 8811 	msr	BASEPRI, r1
 8007458:	617b      	str	r3, [r7, #20]
 800745a:	480b      	ldr	r0, [pc, #44]	@ (8007488 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800745c:	f7fe fdfb 	bl	8006056 <_PreparePacket>
 8007460:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007462:	2280      	movs	r2, #128	@ 0x80
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	6938      	ldr	r0, [r7, #16]
 8007468:	f7fe fda8 	bl	8005fbc <_EncodeStr>
 800746c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800746e:	220e      	movs	r2, #14
 8007470:	68f9      	ldr	r1, [r7, #12]
 8007472:	6938      	ldr	r0, [r7, #16]
 8007474:	f7fe fee0 	bl	8006238 <_SendPacket>
  RECORD_END();
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f383 8811 	msr	BASEPRI, r3
}
 800747e:	bf00      	nop
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	200143dc 	.word	0x200143dc

0800748c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800748c:	b590      	push	{r4, r7, lr}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007492:	4b15      	ldr	r3, [pc, #84]	@ (80074e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01a      	beq.n	80074d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800749a:	4b13      	ldr	r3, [pc, #76]	@ (80074e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d015      	beq.n	80074d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80074a4:	4b10      	ldr	r3, [pc, #64]	@ (80074e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4798      	blx	r3
 80074ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80074b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80074b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074b6:	f04f 0200 	mov.w	r2, #0
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	000a      	movs	r2, r1
 80074c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80074c2:	4613      	mov	r3, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	4621      	mov	r1, r4
 80074c8:	200d      	movs	r0, #13
 80074ca:	f7ff fbe5 	bl	8006c98 <SEGGER_SYSVIEW_RecordU32x2>
 80074ce:	e006      	b.n	80074de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80074d0:	4b06      	ldr	r3, [pc, #24]	@ (80074ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4619      	mov	r1, r3
 80074d6:	200c      	movs	r0, #12
 80074d8:	f7ff fba2 	bl	8006c20 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd90      	pop	{r4, r7, pc}
 80074e6:	bf00      	nop
 80074e8:	200143ac 	.word	0x200143ac
 80074ec:	e0001004 	.word	0xe0001004

080074f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074f6:	f3ef 8311 	mrs	r3, BASEPRI
 80074fa:	f04f 0120 	mov.w	r1, #32
 80074fe:	f381 8811 	msr	BASEPRI, r1
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	4819      	ldr	r0, [pc, #100]	@ (800756c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007506:	f7fe fda6 	bl	8006056 <_PreparePacket>
 800750a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007510:	4b17      	ldr	r3, [pc, #92]	@ (8007570 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007518:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	e00b      	b.n	800753c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	1c59      	adds	r1, r3, #1
 800752c:	6179      	str	r1, [r7, #20]
 800752e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	09db      	lsrs	r3, r3, #7
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007540:	d8f0      	bhi.n	8007524 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	617a      	str	r2, [r7, #20]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007552:	2202      	movs	r2, #2
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	68b8      	ldr	r0, [r7, #8]
 8007558:	f7fe fe6e 	bl	8006238 <_SendPacket>
  RECORD_END();
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f383 8811 	msr	BASEPRI, r3
}
 8007562:	bf00      	nop
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200143dc 	.word	0x200143dc
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800757a:	f3ef 8311 	mrs	r3, BASEPRI
 800757e:	f04f 0120 	mov.w	r1, #32
 8007582:	f381 8811 	msr	BASEPRI, r1
 8007586:	607b      	str	r3, [r7, #4]
 8007588:	4807      	ldr	r0, [pc, #28]	@ (80075a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800758a:	f7fe fd64 	bl	8006056 <_PreparePacket>
 800758e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007590:	2203      	movs	r2, #3
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6838      	ldr	r0, [r7, #0]
 8007596:	f7fe fe4f 	bl	8006238 <_SendPacket>
  RECORD_END();
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f383 8811 	msr	BASEPRI, r3
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	200143dc 	.word	0x200143dc

080075ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075b2:	f3ef 8311 	mrs	r3, BASEPRI
 80075b6:	f04f 0120 	mov.w	r1, #32
 80075ba:	f381 8811 	msr	BASEPRI, r1
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	4807      	ldr	r0, [pc, #28]	@ (80075e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80075c2:	f7fe fd48 	bl	8006056 <_PreparePacket>
 80075c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80075c8:	2212      	movs	r2, #18
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6838      	ldr	r0, [r7, #0]
 80075ce:	f7fe fe33 	bl	8006238 <_SendPacket>
  RECORD_END();
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f383 8811 	msr	BASEPRI, r3
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	200143dc 	.word	0x200143dc

080075e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075ea:	f3ef 8311 	mrs	r3, BASEPRI
 80075ee:	f04f 0120 	mov.w	r1, #32
 80075f2:	f381 8811 	msr	BASEPRI, r1
 80075f6:	607b      	str	r3, [r7, #4]
 80075f8:	4807      	ldr	r0, [pc, #28]	@ (8007618 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80075fa:	f7fe fd2c 	bl	8006056 <_PreparePacket>
 80075fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007600:	2211      	movs	r2, #17
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6838      	ldr	r0, [r7, #0]
 8007606:	f7fe fe17 	bl	8006238 <_SendPacket>
  RECORD_END();
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f383 8811 	msr	BASEPRI, r3
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200143dc 	.word	0x200143dc

0800761c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007624:	f3ef 8311 	mrs	r3, BASEPRI
 8007628:	f04f 0120 	mov.w	r1, #32
 800762c:	f381 8811 	msr	BASEPRI, r1
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	4819      	ldr	r0, [pc, #100]	@ (8007698 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007634:	f7fe fd0f 	bl	8006056 <_PreparePacket>
 8007638:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800763e:	4b17      	ldr	r3, [pc, #92]	@ (800769c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	e00b      	b.n	800766a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	b2da      	uxtb	r2, r3
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	1c59      	adds	r1, r3, #1
 800765a:	61f9      	str	r1, [r7, #28]
 800765c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	09db      	lsrs	r3, r3, #7
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b7f      	cmp	r3, #127	@ 0x7f
 800766e:	d8f0      	bhi.n	8007652 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	61fa      	str	r2, [r7, #28]
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007680:	2208      	movs	r2, #8
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	6938      	ldr	r0, [r7, #16]
 8007686:	f7fe fdd7 	bl	8006238 <_SendPacket>
  RECORD_END();
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f383 8811 	msr	BASEPRI, r3
}
 8007690:	bf00      	nop
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	200143dc 	.word	0x200143dc
 800769c:	200143ac 	.word	0x200143ac

080076a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076a8:	f3ef 8311 	mrs	r3, BASEPRI
 80076ac:	f04f 0120 	mov.w	r1, #32
 80076b0:	f381 8811 	msr	BASEPRI, r1
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	4819      	ldr	r0, [pc, #100]	@ (800771c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80076b8:	f7fe fccd 	bl	8006056 <_PreparePacket>
 80076bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076c2:	4b17      	ldr	r3, [pc, #92]	@ (8007720 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	e00b      	b.n	80076ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	1c59      	adds	r1, r3, #1
 80076de:	61f9      	str	r1, [r7, #28]
 80076e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	09db      	lsrs	r3, r3, #7
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80076f2:	d8f0      	bhi.n	80076d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	61fa      	str	r2, [r7, #28]
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007704:	2204      	movs	r2, #4
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	6938      	ldr	r0, [r7, #16]
 800770a:	f7fe fd95 	bl	8006238 <_SendPacket>
  RECORD_END();
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f383 8811 	msr	BASEPRI, r3
}
 8007714:	bf00      	nop
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	200143dc 	.word	0x200143dc
 8007720:	200143ac 	.word	0x200143ac

08007724 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800772c:	f3ef 8311 	mrs	r3, BASEPRI
 8007730:	f04f 0120 	mov.w	r1, #32
 8007734:	f381 8811 	msr	BASEPRI, r1
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	4819      	ldr	r0, [pc, #100]	@ (80077a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800773c:	f7fe fc8b 	bl	8006056 <_PreparePacket>
 8007740:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007746:	4b17      	ldr	r3, [pc, #92]	@ (80077a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	61bb      	str	r3, [r7, #24]
 8007758:	e00b      	b.n	8007772 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	b2da      	uxtb	r2, r3
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	1c59      	adds	r1, r3, #1
 8007762:	61f9      	str	r1, [r7, #28]
 8007764:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007768:	b2d2      	uxtb	r2, r2
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	09db      	lsrs	r3, r3, #7
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b7f      	cmp	r3, #127	@ 0x7f
 8007776:	d8f0      	bhi.n	800775a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	61fa      	str	r2, [r7, #28]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	701a      	strb	r2, [r3, #0]
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007788:	2206      	movs	r2, #6
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	6938      	ldr	r0, [r7, #16]
 800778e:	f7fe fd53 	bl	8006238 <_SendPacket>
  RECORD_END();
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f383 8811 	msr	BASEPRI, r3
}
 8007798:	bf00      	nop
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	200143dc 	.word	0x200143dc
 80077a4:	200143ac 	.word	0x200143ac

080077a8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	@ 0x28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80077b2:	f3ef 8311 	mrs	r3, BASEPRI
 80077b6:	f04f 0120 	mov.w	r1, #32
 80077ba:	f381 8811 	msr	BASEPRI, r1
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	4827      	ldr	r0, [pc, #156]	@ (8007860 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80077c2:	f7fe fc48 	bl	8006056 <_PreparePacket>
 80077c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80077cc:	4b25      	ldr	r3, [pc, #148]	@ (8007864 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	623b      	str	r3, [r7, #32]
 80077de:	e00b      	b.n	80077f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	1c59      	adds	r1, r3, #1
 80077e8:	6279      	str	r1, [r7, #36]	@ 0x24
 80077ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	09db      	lsrs	r3, r3, #7
 80077f6:	623b      	str	r3, [r7, #32]
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80077fc:	d8f0      	bhi.n	80077e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	627a      	str	r2, [r7, #36]	@ 0x24
 8007804:	6a3a      	ldr	r2, [r7, #32]
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	61fb      	str	r3, [r7, #28]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	e00b      	b.n	8007830 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	b2da      	uxtb	r2, r3
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	1c59      	adds	r1, r3, #1
 8007820:	61f9      	str	r1, [r7, #28]
 8007822:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	09db      	lsrs	r3, r3, #7
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	2b7f      	cmp	r3, #127	@ 0x7f
 8007834:	d8f0      	bhi.n	8007818 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	61fa      	str	r2, [r7, #28]
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007846:	2207      	movs	r2, #7
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	6938      	ldr	r0, [r7, #16]
 800784c:	f7fe fcf4 	bl	8006238 <_SendPacket>
  RECORD_END();
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f383 8811 	msr	BASEPRI, r3
}
 8007856:	bf00      	nop
 8007858:	3728      	adds	r7, #40	@ 0x28
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200143dc 	.word	0x200143dc
 8007864:	200143ac 	.word	0x200143ac

08007868 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007870:	4b04      	ldr	r3, [pc, #16]	@ (8007884 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	1ad3      	subs	r3, r2, r3
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	200143ac 	.word	0x200143ac

08007888 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b08c      	sub	sp, #48	@ 0x30
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007892:	4b3b      	ldr	r3, [pc, #236]	@ (8007980 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d06d      	beq.n	8007976 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800789a:	4b39      	ldr	r3, [pc, #228]	@ (8007980 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80078a0:	2300      	movs	r3, #0
 80078a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078a4:	e008      	b.n	80078b8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80078a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80078ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d007      	beq.n	80078c2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	3301      	adds	r3, #1
 80078b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078bc:	429a      	cmp	r2, r3
 80078be:	d3f2      	bcc.n	80078a6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80078c0:	e000      	b.n	80078c4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80078c2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80078c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d055      	beq.n	8007976 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078ca:	f3ef 8311 	mrs	r3, BASEPRI
 80078ce:	f04f 0120 	mov.w	r1, #32
 80078d2:	f381 8811 	msr	BASEPRI, r1
 80078d6:	617b      	str	r3, [r7, #20]
 80078d8:	482a      	ldr	r0, [pc, #168]	@ (8007984 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80078da:	f7fe fbbc 	bl	8006056 <_PreparePacket>
 80078de:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	623b      	str	r3, [r7, #32]
 80078ec:	e00b      	b.n	8007906 <SEGGER_SYSVIEW_SendModule+0x7e>
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	1c59      	adds	r1, r3, #1
 80078f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80078f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	09db      	lsrs	r3, r3, #7
 8007904:	623b      	str	r3, [r7, #32]
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	2b7f      	cmp	r3, #127	@ 0x7f
 800790a:	d8f0      	bhi.n	80078ee <SEGGER_SYSVIEW_SendModule+0x66>
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	627a      	str	r2, [r7, #36]	@ 0x24
 8007912:	6a3a      	ldr	r2, [r7, #32]
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	61fb      	str	r3, [r7, #28]
 8007920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	e00b      	b.n	8007940 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	b2da      	uxtb	r2, r3
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	1c59      	adds	r1, r3, #1
 8007930:	61f9      	str	r1, [r7, #28]
 8007932:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	09db      	lsrs	r3, r3, #7
 800793e:	61bb      	str	r3, [r7, #24]
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	2b7f      	cmp	r3, #127	@ 0x7f
 8007944:	d8f0      	bhi.n	8007928 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	61fa      	str	r2, [r7, #28]
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2280      	movs	r2, #128	@ 0x80
 800795c:	4619      	mov	r1, r3
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7fe fb2c 	bl	8005fbc <_EncodeStr>
 8007964:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007966:	2216      	movs	r2, #22
 8007968:	68f9      	ldr	r1, [r7, #12]
 800796a:	6938      	ldr	r0, [r7, #16]
 800796c:	f7fe fc64 	bl	8006238 <_SendPacket>
      RECORD_END();
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007976:	bf00      	nop
 8007978:	3730      	adds	r7, #48	@ 0x30
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	200143d4 	.word	0x200143d4
 8007984:	200143dc 	.word	0x200143dc

08007988 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800798e:	4b0c      	ldr	r3, [pc, #48]	@ (80079c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00f      	beq.n	80079b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007996:	4b0a      	ldr	r3, [pc, #40]	@ (80079c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f2      	bne.n	800799c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200143d4 	.word	0x200143d4

080079c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80079ca:	f3ef 8311 	mrs	r3, BASEPRI
 80079ce:	f04f 0120 	mov.w	r1, #32
 80079d2:	f381 8811 	msr	BASEPRI, r1
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	4817      	ldr	r0, [pc, #92]	@ (8007a38 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80079da:	f7fe fb3c 	bl	8006056 <_PreparePacket>
 80079de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	4b14      	ldr	r3, [pc, #80]	@ (8007a3c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	e00b      	b.n	8007a08 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	6179      	str	r1, [r7, #20]
 80079fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	09db      	lsrs	r3, r3, #7
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a0c:	d8f0      	bhi.n	80079f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	617a      	str	r2, [r7, #20]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007a1e:	221b      	movs	r2, #27
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	68b8      	ldr	r0, [r7, #8]
 8007a24:	f7fe fc08 	bl	8006238 <_SendPacket>
  RECORD_END();
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200143dc 	.word	0x200143dc
 8007a3c:	200143d8 	.word	0x200143d8

08007a40 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007a40:	b40f      	push	{r0, r1, r2, r3}
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007a48:	f107 0314 	add.w	r3, r7, #20
 8007a4c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007a4e:	1d3b      	adds	r3, r7, #4
 8007a50:	461a      	mov	r2, r3
 8007a52:	2100      	movs	r1, #0
 8007a54:	6938      	ldr	r0, [r7, #16]
 8007a56:	f7fe fe79 	bl	800674c <_VPrintTarget>
  va_end(ParamList);
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a64:	b004      	add	sp, #16
 8007a66:	4770      	bx	lr

08007a68 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	@ 0x28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a70:	f3ef 8311 	mrs	r3, BASEPRI
 8007a74:	f04f 0120 	mov.w	r1, #32
 8007a78:	f381 8811 	msr	BASEPRI, r1
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	4827      	ldr	r0, [pc, #156]	@ (8007b1c <SEGGER_SYSVIEW_Warn+0xb4>)
 8007a80:	f7fe fae9 	bl	8006056 <_PreparePacket>
 8007a84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a86:	2280      	movs	r2, #128	@ 0x80
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	6938      	ldr	r0, [r7, #16]
 8007a8c:	f7fe fa96 	bl	8005fbc <_EncodeStr>
 8007a90:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a96:	2301      	movs	r3, #1
 8007a98:	623b      	str	r3, [r7, #32]
 8007a9a:	e00b      	b.n	8007ab4 <SEGGER_SYSVIEW_Warn+0x4c>
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	1c59      	adds	r1, r3, #1
 8007aa4:	6279      	str	r1, [r7, #36]	@ 0x24
 8007aa6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007aaa:	b2d2      	uxtb	r2, r2
 8007aac:	701a      	strb	r2, [r3, #0]
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	09db      	lsrs	r3, r3, #7
 8007ab2:	623b      	str	r3, [r7, #32]
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ab8:	d8f0      	bhi.n	8007a9c <SEGGER_SYSVIEW_Warn+0x34>
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ac0:	6a3a      	ldr	r2, [r7, #32]
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	61fb      	str	r3, [r7, #28]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	e00b      	b.n	8007aec <SEGGER_SYSVIEW_Warn+0x84>
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	1c59      	adds	r1, r3, #1
 8007adc:	61f9      	str	r1, [r7, #28]
 8007ade:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	09db      	lsrs	r3, r3, #7
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b7f      	cmp	r3, #127	@ 0x7f
 8007af0:	d8f0      	bhi.n	8007ad4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	61fa      	str	r2, [r7, #28]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007b02:	221a      	movs	r2, #26
 8007b04:	68f9      	ldr	r1, [r7, #12]
 8007b06:	6938      	ldr	r0, [r7, #16]
 8007b08:	f7fe fb96 	bl	8006238 <_SendPacket>
  RECORD_END();
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f383 8811 	msr	BASEPRI, r3
}
 8007b12:	bf00      	nop
 8007b14:	3728      	adds	r7, #40	@ 0x28
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200143dc 	.word	0x200143dc

08007b20 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007b24:	4b13      	ldr	r3, [pc, #76]	@ (8007b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b26:	7e1b      	ldrb	r3, [r3, #24]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4a13      	ldr	r2, [pc, #76]	@ (8007b78 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	440b      	add	r3, r1
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	4413      	add	r3, r2
 8007b36:	336c      	adds	r3, #108	@ 0x6c
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b3c:	7e1b      	ldrb	r3, [r3, #24]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	490d      	ldr	r1, [pc, #52]	@ (8007b78 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007b42:	4603      	mov	r3, r0
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	4403      	add	r3, r0
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	440b      	add	r3, r1
 8007b4c:	3370      	adds	r3, #112	@ 0x70
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d00b      	beq.n	8007b6c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007b54:	4b07      	ldr	r3, [pc, #28]	@ (8007b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b56:	789b      	ldrb	r3, [r3, #2]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d107      	bne.n	8007b6c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007b5c:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007b62:	f7fe fa85 	bl	8006070 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007b66:	4b03      	ldr	r3, [pc, #12]	@ (8007b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007b6c:	4b01      	ldr	r3, [pc, #4]	@ (8007b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	200143ac 	.word	0x200143ac
 8007b78:	20012eec 	.word	0x20012eec

08007b7c <memcmp>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	3901      	subs	r1, #1
 8007b80:	4402      	add	r2, r0
 8007b82:	4290      	cmp	r0, r2
 8007b84:	d101      	bne.n	8007b8a <memcmp+0xe>
 8007b86:	2000      	movs	r0, #0
 8007b88:	e005      	b.n	8007b96 <memcmp+0x1a>
 8007b8a:	7803      	ldrb	r3, [r0, #0]
 8007b8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d001      	beq.n	8007b98 <memcmp+0x1c>
 8007b94:	1b18      	subs	r0, r3, r4
 8007b96:	bd10      	pop	{r4, pc}
 8007b98:	3001      	adds	r0, #1
 8007b9a:	e7f2      	b.n	8007b82 <memcmp+0x6>

08007b9c <memset>:
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <__libc_init_array>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4d0d      	ldr	r5, [pc, #52]	@ (8007be4 <__libc_init_array+0x38>)
 8007bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8007be8 <__libc_init_array+0x3c>)
 8007bb2:	1b64      	subs	r4, r4, r5
 8007bb4:	10a4      	asrs	r4, r4, #2
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	42a6      	cmp	r6, r4
 8007bba:	d109      	bne.n	8007bd0 <__libc_init_array+0x24>
 8007bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007bec <__libc_init_array+0x40>)
 8007bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007bf0 <__libc_init_array+0x44>)
 8007bc0:	f000 f826 	bl	8007c10 <_init>
 8007bc4:	1b64      	subs	r4, r4, r5
 8007bc6:	10a4      	asrs	r4, r4, #2
 8007bc8:	2600      	movs	r6, #0
 8007bca:	42a6      	cmp	r6, r4
 8007bcc:	d105      	bne.n	8007bda <__libc_init_array+0x2e>
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd4:	4798      	blx	r3
 8007bd6:	3601      	adds	r6, #1
 8007bd8:	e7ee      	b.n	8007bb8 <__libc_init_array+0xc>
 8007bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bde:	4798      	blx	r3
 8007be0:	3601      	adds	r6, #1
 8007be2:	e7f2      	b.n	8007bca <__libc_init_array+0x1e>
 8007be4:	08007e10 	.word	0x08007e10
 8007be8:	08007e10 	.word	0x08007e10
 8007bec:	08007e10 	.word	0x08007e10
 8007bf0:	08007e14 	.word	0x08007e14

08007bf4 <memcpy>:
 8007bf4:	440a      	add	r2, r1
 8007bf6:	4291      	cmp	r1, r2
 8007bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bfc:	d100      	bne.n	8007c00 <memcpy+0xc>
 8007bfe:	4770      	bx	lr
 8007c00:	b510      	push	{r4, lr}
 8007c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	d1f9      	bne.n	8007c02 <memcpy+0xe>
 8007c0e:	bd10      	pop	{r4, pc}

08007c10 <_init>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr

08007c1c <_fini>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr
