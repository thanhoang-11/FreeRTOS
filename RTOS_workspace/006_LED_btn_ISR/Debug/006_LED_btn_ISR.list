
006_LED_btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08007d54  08007d54  00008d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f28  08007f28  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f30  08007f30  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f34  08007f34  00008f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007f38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          000144a0  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144bc  200144bc  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f5e  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000319e  00000000  00000000  0001cfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00020148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eeb  00000000  00000000  000214b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023169  00000000  00000000  000223a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016742  00000000  00000000  0004550c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7c92  00000000  00000000  0005bc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001338e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005124  00000000  00000000  00133924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000e4  00000000  00000000  00138a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d3c 	.word	0x08007d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007d3c 	.word	0x08007d3c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ee8 	.word	0x20012ee8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fc45 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f87b 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8e3 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(250000);
 8000566:	4830      	ldr	r0, [pc, #192]	@ (8000628 <main+0xd4>)
 8000568:	f005 f894 	bl	8005694 <SEGGER_UART_init>

  //Enable the CYCCNT counter
    DWT_CTRL |= (1 << 0);
 800056c:	4b2f      	ldr	r3, [pc, #188]	@ (800062c <main+0xd8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a2e      	ldr	r2, [pc, #184]	@ (800062c <main+0xd8>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 8000578:	f004 fdfa 	bl	8005170 <SEGGER_SYSVIEW_Conf>

    status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 800057c:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <main+0xdc>)
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2303      	movs	r3, #3
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	492a      	ldr	r1, [pc, #168]	@ (8000634 <main+0xe0>)
 800058a:	482b      	ldr	r0, [pc, #172]	@ (8000638 <main+0xe4>)
 800058c:	f002 fcbc 	bl	8002f08 <xTaskCreate>
 8000590:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00b      	beq.n	80005b0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x58>

    next_task_handle = ledg_task_handle;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <main+0xdc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <main+0xe8>)
 80005b6:	6013      	str	r3, [r2, #0]

    status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <main+0xec>)
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	@ 0xc8
 80005c4:	491f      	ldr	r1, [pc, #124]	@ (8000644 <main+0xf0>)
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <main+0xf4>)
 80005c8:	f002 fc9e 	bl	8002f08 <xTaskCreate>
 80005cc:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <main+0x98>
        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	607b      	str	r3, [r7, #4]
    }
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x94>

    status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &ledr_task_handle);
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <main+0xf8>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	@ 0xc8
 80005f8:	4915      	ldr	r1, [pc, #84]	@ (8000650 <main+0xfc>)
 80005fa:	4816      	ldr	r0, [pc, #88]	@ (8000654 <main+0x100>)
 80005fc:	f002 fc84 	bl	8002f08 <xTaskCreate>
 8000600:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00b      	beq.n	8000620 <main+0xcc>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	603b      	str	r3, [r7, #0]
    }
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0xc8>

    //Start the FreeRTOS scheduler
     vTaskStartScheduler();
 8000620:	f002 fe80 	bl	8003324 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0xd0>
 8000628:	0003d090 	.word	0x0003d090
 800062c:	e0001000 	.word	0xe0001000
 8000630:	20000038 	.word	0x20000038
 8000634:	08007d54 	.word	0x08007d54
 8000638:	08000a51 	.word	0x08000a51
 800063c:	20000044 	.word	0x20000044
 8000640:	2000003c 	.word	0x2000003c
 8000644:	08007d64 	.word	0x08007d64
 8000648:	08000ac1 	.word	0x08000ac1
 800064c:	20000040 	.word	0x20000040
 8000650:	08007d74 	.word	0x08007d74
 8000654:	08000b31 	.word	0x08000b31

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fb2e 	bl	8007cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	@ (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006cc:	23a8      	movs	r3, #168	@ 0xa8
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe9b 	bl	8001418 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fa6a 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2105      	movs	r1, #5
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f8fc 	bl	8001908 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 fa53 	bl	8000bc0 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	@ 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4ba6      	ldr	r3, [pc, #664]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4aa5      	ldr	r2, [pc, #660]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4ba3      	ldr	r3, [pc, #652]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b9f      	ldr	r3, [pc, #636]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a9e      	ldr	r2, [pc, #632]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b9c      	ldr	r3, [pc, #624]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b98      	ldr	r3, [pc, #608]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a97      	ldr	r2, [pc, #604]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b95      	ldr	r3, [pc, #596]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b91      	ldr	r3, [pc, #580]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a90      	ldr	r2, [pc, #576]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b8e      	ldr	r3, [pc, #568]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b8a      	ldr	r3, [pc, #552]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a89      	ldr	r2, [pc, #548]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b87      	ldr	r3, [pc, #540]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b83      	ldr	r3, [pc, #524]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a82      	ldr	r2, [pc, #520]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b80      	ldr	r3, [pc, #512]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	487d      	ldr	r0, [pc, #500]	@ (80009e4 <MX_GPIO_Init+0x2b8>)
 80007f0:	f000 fdba 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	487b      	ldr	r0, [pc, #492]	@ (80009e8 <MX_GPIO_Init+0x2bc>)
 80007fa:	f000 fdb5 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	2200      	movs	r2, #0
 8000800:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000804:	4879      	ldr	r0, [pc, #484]	@ (80009ec <MX_GPIO_Init+0x2c0>)
 8000806:	f000 fdaf 	bl	8001368 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4870      	ldr	r0, [pc, #448]	@ (80009e4 <MX_GPIO_Init+0x2b8>)
 8000822:	f000 fc05 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	486a      	ldr	r0, [pc, #424]	@ (80009e8 <MX_GPIO_Init+0x2bc>)
 800083e:	f000 fbf7 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4862      	ldr	r0, [pc, #392]	@ (80009e8 <MX_GPIO_Init+0x2bc>)
 800085e:	f000 fbe7 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_Pin */
  GPIO_InitStruct.Pin = PA0_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PA0_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	485e      	ldr	r0, [pc, #376]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 8000878:	f000 fbda 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800087c:	2310      	movs	r3, #16
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800088c:	2306      	movs	r3, #6
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4856      	ldr	r0, [pc, #344]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 8000898:	f000 fbca 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800089c:	23e0      	movs	r3, #224	@ 0xe0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ac:	2305      	movs	r3, #5
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	484e      	ldr	r0, [pc, #312]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 80008b8:	f000 fbba 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008bc:	2304      	movs	r3, #4
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4849      	ldr	r0, [pc, #292]	@ (80009f4 <MX_GPIO_Init+0x2c8>)
 80008d0:	f000 fbae 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4840      	ldr	r0, [pc, #256]	@ (80009f4 <MX_GPIO_Init+0x2c8>)
 80008f2:	f000 fb9d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4837      	ldr	r0, [pc, #220]	@ (80009ec <MX_GPIO_Init+0x2c0>)
 8000910:	f000 fb8e 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000914:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000926:	2306      	movs	r3, #6
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	482d      	ldr	r0, [pc, #180]	@ (80009e8 <MX_GPIO_Init+0x2bc>)
 8000932:	f000 fb7d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000936:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4829      	ldr	r0, [pc, #164]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 800094c:	f000 fb70 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000950:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000962:	230a      	movs	r3, #10
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4820      	ldr	r0, [pc, #128]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 800096e:	f000 fb5f 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000972:	2320      	movs	r3, #32
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4819      	ldr	r0, [pc, #100]	@ (80009ec <MX_GPIO_Init+0x2c0>)
 8000986:	f000 fb53 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800098a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <MX_GPIO_Init+0x2c8>)
 80009a8:	f000 fb42 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <MX_GPIO_Init+0x2b8>)
 80009c2:	f000 fb35 	bl	8001030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2106      	movs	r1, #6
 80009ca:	2006      	movs	r0, #6
 80009cc:	f000 fb06 	bl	8000fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009d0:	2006      	movs	r0, #6
 80009d2:	f000 fb1f 	bl	8001014 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	@ 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400

080009f8 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 8000a02:	f006 fe0b 	bl	800761c <SEGGER_SYSVIEW_RecordEnterISR>

	xTaskNotifyFromISR(next_task_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <button_interrupt_handler+0x50>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2300      	movs	r3, #0
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	f003 fa04 	bl	8003e24 <xTaskGenericNotifyFromISR>

	/*Once the ISR exits, the below macro make higher priority task which got unblocked to resume on the CPU*/
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00a      	beq.n	8000a38 <button_interrupt_handler+0x40>
 8000a22:	f006 fe59 	bl	80076d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <button_interrupt_handler+0x54>)
 8000a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	f3bf 8f4f 	dsb	sy
 8000a32:	f3bf 8f6f 	isb	sy
 8000a36:	e001      	b.n	8000a3c <button_interrupt_handler+0x44>
 8000a38:	f006 fe32 	bl	80076a0 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000a3c:	f006 fe30 	bl	80076a0 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000044 	.word	0x20000044
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <led_green_handler>:

static void led_green_handler(void* parameters)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000a58:	4814      	ldr	r0, [pc, #80]	@ (8000aac <led_green_handler+0x5c>)
 8000a5a:	f007 f887 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a62:	4813      	ldr	r0, [pc, #76]	@ (8000ab0 <led_green_handler+0x60>)
 8000a64:	f000 fc99 	bl	800139a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(1000));
 8000a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2000      	movs	r0, #0
 8000a76:	f003 f94b 	bl	8003d10 <xTaskGenericNotifyWait>
 8000a7a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d1ea      	bne.n	8000a58 <led_green_handler+0x8>
		{
			portENTER_CRITICAL();
 8000a82:	f004 f833 	bl	8004aec <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <led_green_handler+0x64>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab8 <led_green_handler+0x68>)
 8000a8c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a94:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <led_green_handler+0x60>)
 8000a96:	f000 fc67 	bl	8001368 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000a9a:	4808      	ldr	r0, [pc, #32]	@ (8000abc <led_green_handler+0x6c>)
 8000a9c:	f007 f866 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000aa0:	f004 f856 	bl	8004b50 <vPortExitCritical>
			vTaskDelete(NULL);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f002 fb93 	bl	80031d0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000aaa:	e7d5      	b.n	8000a58 <led_green_handler+0x8>
 8000aac:	08007d84 	.word	0x08007d84
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	2000003c 	.word	0x2000003c
 8000ab8:	20000044 	.word	0x20000044
 8000abc:	08007d98 	.word	0x08007d98

08000ac0 <led_orange_handler>:
		}
	}
}
static void led_orange_handler(void* parameters)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 8000ac8:	4814      	ldr	r0, [pc, #80]	@ (8000b1c <led_orange_handler+0x5c>)
 8000aca:	f007 f84f 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000ace:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad2:	4813      	ldr	r0, [pc, #76]	@ (8000b20 <led_orange_handler+0x60>)
 8000ad4:	f000 fc61 	bl	800139a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(800));
 8000ad8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f003 f913 	bl	8003d10 <xTaskGenericNotifyWait>
 8000aea:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d1ea      	bne.n	8000ac8 <led_orange_handler+0x8>
		{
			portENTER_CRITICAL();
 8000af2:	f003 fffb 	bl	8004aec <vPortEnterCritical>
			next_task_handle = ledr_task_handle;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <led_orange_handler+0x64>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <led_orange_handler+0x68>)
 8000afc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b04:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <led_orange_handler+0x60>)
 8000b06:	f000 fc2f 	bl	8001368 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000b0a:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <led_orange_handler+0x6c>)
 8000b0c:	f007 f82e 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000b10:	f004 f81e 	bl	8004b50 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f002 fb5b 	bl	80031d0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange LED");
 8000b1a:	e7d5      	b.n	8000ac8 <led_orange_handler+0x8>
 8000b1c:	08007db0 	.word	0x08007db0
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	20000040 	.word	0x20000040
 8000b28:	20000044 	.word	0x20000044
 8000b2c:	08007dc4 	.word	0x08007dc4

08000b30 <led_red_handler>:
		}
	}
}
static void led_red_handler(void* parameters)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000b38:	4814      	ldr	r0, [pc, #80]	@ (8000b8c <led_red_handler+0x5c>)
 8000b3a:	f007 f817 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b42:	4813      	ldr	r0, [pc, #76]	@ (8000b90 <led_red_handler+0x60>)
 8000b44:	f000 fc29 	bl	800139a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0, NULL, pdMS_TO_TICKS(400));
 8000b48:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f003 f8db 	bl	8003d10 <xTaskGenericNotifyWait>
 8000b5a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d1ea      	bne.n	8000b38 <led_red_handler+0x8>
		{
			portENTER_CRITICAL();
 8000b62:	f003 ffc3 	bl	8004aec <vPortEnterCritical>
			next_task_handle = NULL;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <led_red_handler+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b72:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <led_red_handler+0x60>)
 8000b74:	f000 fbf8 	bl	8001368 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000b78:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <led_red_handler+0x68>)
 8000b7a:	f006 fff7 	bl	8007b6c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000b7e:	f003 ffe7 	bl	8004b50 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f002 fb24 	bl	80031d0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000b88:	e7d6      	b.n	8000b38 <led_red_handler+0x8>
 8000b8a:	bf00      	nop
 8000b8c:	08007ddc 	.word	0x08007ddc
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	20000044 	.word	0x20000044
 8000b98:	08007df0 	.word	0x08007df0

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bae:	f000 f93d 	bl	8000e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c0a:	f003 feef 	bl	80049ec <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	@ 0x38
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b33      	ldr	r3, [pc, #204]	@ (8000d00 <HAL_InitTick+0xe4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a32      	ldr	r2, [pc, #200]	@ (8000d00 <HAL_InitTick+0xe4>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b30      	ldr	r3, [pc, #192]	@ (8000d00 <HAL_InitTick+0xe4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c48:	f107 0210 	add.w	r2, r7, #16
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 f864 	bl	8001d20 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d103      	bne.n	8000c6a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c62:	f001 f849 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000c66:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c68:	e004      	b.n	8000c74 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c6a:	f001 f845 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c76:	4a23      	ldr	r2, [pc, #140]	@ (8000d04 <HAL_InitTick+0xe8>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	0c9b      	lsrs	r3, r3, #18
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <HAL_InitTick+0xec>)
 8000c84:	4a21      	ldr	r2, [pc, #132]	@ (8000d0c <HAL_InitTick+0xf0>)
 8000c86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <HAL_InitTick+0xec>)
 8000c8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c90:	4a1d      	ldr	r2, [pc, #116]	@ (8000d08 <HAL_InitTick+0xec>)
 8000c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <HAL_InitTick+0xec>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_InitTick+0xec>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_InitTick+0xec>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ca8:	4817      	ldr	r0, [pc, #92]	@ (8000d08 <HAL_InitTick+0xec>)
 8000caa:	f001 f86b 	bl	8001d84 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d11b      	bne.n	8000cf4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cbc:	4812      	ldr	r0, [pc, #72]	@ (8000d08 <HAL_InitTick+0xec>)
 8000cbe:	f001 f8bb 	bl	8001e38 <HAL_TIM_Base_Start_IT>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d111      	bne.n	8000cf4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd0:	2036      	movs	r0, #54	@ 0x36
 8000cd2:	f000 f99f 	bl	8001014 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d808      	bhi.n	8000cee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	2036      	movs	r0, #54	@ 0x36
 8000ce2:	f000 f97b 	bl	8000fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_InitTick+0xf4>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e002      	b.n	8000cf4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3738      	adds	r7, #56	@ 0x38
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	431bde83 	.word	0x431bde83
 8000d08:	20000048 	.word	0x20000048
 8000d0c:	40001000 	.word	0x40001000
 8000d10:	20000004 	.word	0x20000004

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000d4e:	f7ff fe53 	bl	80009f8 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PA0_Pin);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f000 fb3c 	bl	80013d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <TIM6_DAC_IRQHandler+0x10>)
 8000d62:	f001 f8d9 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000048 	.word	0x20000048

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d98:	f7ff ffea 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f006 ff89 	bl	8007cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbc5 	bl	8000554 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dd8:	08007f38 	.word	0x08007f38
  ldr r2, =_sbss
 8000ddc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000de0:	200144bc 	.word	0x200144bc

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f8d8 	bl	8000fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f7ff ff00 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fed6 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000090 	.word	0x20000090

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000090 	.word	0x20000090

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	@ (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff4c 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fee:	f7ff ff61 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	6978      	ldr	r0, [r7, #20]
 8000ffa:	f7ff ffb1 	bl	8000f60 <NVIC_EncodePriority>
 8000ffe:	4602      	mov	r2, r0
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff80 	bl	8000f0c <__NVIC_SetPriority>
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff54 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e16b      	b.n	8001324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 815a 	bne.w	800131e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80b4 	beq.w	800131e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b60      	ldr	r3, [pc, #384]	@ (800133c <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	4a5f      	ldr	r2, [pc, #380]	@ (800133c <HAL_GPIO_Init+0x30c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c6:	4b5d      	ldr	r3, [pc, #372]	@ (800133c <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001340 <HAL_GPIO_Init+0x310>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	@ (8001344 <HAL_GPIO_Init+0x314>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02b      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a51      	ldr	r2, [pc, #324]	@ (8001348 <HAL_GPIO_Init+0x318>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a50      	ldr	r2, [pc, #320]	@ (800134c <HAL_GPIO_Init+0x31c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	@ (8001350 <HAL_GPIO_Init+0x320>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	@ (8001354 <HAL_GPIO_Init+0x324>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	@ (8001358 <HAL_GPIO_Init+0x328>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	@ (800135c <HAL_GPIO_Init+0x32c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	@ (8001360 <HAL_GPIO_Init+0x330>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x20a>
 8001236:	2307      	movs	r3, #7
 8001238:	e00e      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123a:	2308      	movs	r3, #8
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123e:	2306      	movs	r3, #6
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	@ (8001340 <HAL_GPIO_Init+0x310>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <HAL_GPIO_Init+0x334>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129a:	4a32      	ldr	r2, [pc, #200]	@ (8001364 <HAL_GPIO_Init+0x334>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a0:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c4:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ca:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_GPIO_Init+0x334>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001318:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <HAL_GPIO_Init+0x334>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae90 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40021c00 	.word	0x40021c00
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ac:	887a      	ldrh	r2, [r7, #2]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	041a      	lsls	r2, r3, #16
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	400b      	ands	r3, r1
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013e6:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f806 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e267      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d075      	beq.n	8001522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001436:	4b88      	ldr	r3, [pc, #544]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b04      	cmp	r3, #4
 8001440:	d00c      	beq.n	800145c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001442:	4b85      	ldr	r3, [pc, #532]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800144a:	2b08      	cmp	r3, #8
 800144c:	d112      	bne.n	8001474 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144e:	4b82      	ldr	r3, [pc, #520]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	4b7e      	ldr	r3, [pc, #504]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d05b      	beq.n	8001520 <HAL_RCC_OscConfig+0x108>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d157      	bne.n	8001520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e242      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x74>
 800147e:	4b76      	ldr	r3, [pc, #472]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a75      	ldr	r2, [pc, #468]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e01d      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x98>
 8001496:	4b70      	ldr	r3, [pc, #448]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6f      	ldr	r2, [pc, #444]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 80014b0:	4b69      	ldr	r3, [pc, #420]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a68      	ldr	r2, [pc, #416]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b66      	ldr	r3, [pc, #408]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a65      	ldr	r2, [pc, #404]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fcc0 	bl	8000e54 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fcbc 	bl	8000e54 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	@ 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e207      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0xc0>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fcac 	bl	8000e54 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fca8 	bl	8000e54 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	@ 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1f3      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	4b51      	ldr	r3, [pc, #324]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0xe8>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d063      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800152e:	4b4a      	ldr	r3, [pc, #296]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153a:	4b47      	ldr	r3, [pc, #284]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001542:	2b08      	cmp	r3, #8
 8001544:	d11c      	bne.n	8001580 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b44      	ldr	r3, [pc, #272]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d116      	bne.n	8001580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	4b41      	ldr	r3, [pc, #260]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_RCC_OscConfig+0x152>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e1c7      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4937      	ldr	r1, [pc, #220]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e03a      	b.n	80015f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_RCC_OscConfig+0x244>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fc61 	bl	8000e54 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fc5d 	bl	8000e54 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1a8      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4925      	ldr	r1, [pc, #148]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e015      	b.n	80015f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b24      	ldr	r3, [pc, #144]	@ (800165c <HAL_RCC_OscConfig+0x244>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc40 	bl	8000e54 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc3c 	bl	8000e54 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e187      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d036      	beq.n	8001670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d016      	beq.n	8001638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_RCC_OscConfig+0x248>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fc20 	bl	8000e54 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fc1c 	bl	8000e54 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e167      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_RCC_OscConfig+0x240>)
 800162c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x200>
 8001636:	e01b      	b.n	8001670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_RCC_OscConfig+0x248>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fc09 	bl	8000e54 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	e00e      	b.n	8001664 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fc05 	bl	8000e54 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d907      	bls.n	8001664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e150      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
 8001658:	40023800 	.word	0x40023800
 800165c:	42470000 	.word	0x42470000
 8001660:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	4b88      	ldr	r3, [pc, #544]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ea      	bne.n	8001646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 8097 	beq.w	80017ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001682:	4b81      	ldr	r3, [pc, #516]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b7d      	ldr	r3, [pc, #500]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a7c      	ldr	r2, [pc, #496]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b7a      	ldr	r3, [pc, #488]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b77      	ldr	r3, [pc, #476]	@ (800188c <HAL_RCC_OscConfig+0x474>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d118      	bne.n	80016ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ba:	4b74      	ldr	r3, [pc, #464]	@ (800188c <HAL_RCC_OscConfig+0x474>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a73      	ldr	r2, [pc, #460]	@ (800188c <HAL_RCC_OscConfig+0x474>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fbc5 	bl	8000e54 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7ff fbc1 	bl	8000e54 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e10c      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b6a      	ldr	r3, [pc, #424]	@ (800188c <HAL_RCC_OscConfig+0x474>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x2ea>
 80016f4:	4b64      	ldr	r3, [pc, #400]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f8:	4a63      	ldr	r2, [pc, #396]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001700:	e01c      	b.n	800173c <HAL_RCC_OscConfig+0x324>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x30c>
 800170a:	4b5f      	ldr	r3, [pc, #380]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170e:	4a5e      	ldr	r2, [pc, #376]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6713      	str	r3, [r2, #112]	@ 0x70
 8001716:	4b5c      	ldr	r3, [pc, #368]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171a:	4a5b      	ldr	r2, [pc, #364]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6713      	str	r3, [r2, #112]	@ 0x70
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0x324>
 8001724:	4b58      	ldr	r3, [pc, #352]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001728:	4a57      	ldr	r2, [pc, #348]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001730:	4b55      	ldr	r3, [pc, #340]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	4a54      	ldr	r2, [pc, #336]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d015      	beq.n	8001770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fb86 	bl	8000e54 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff fb82 	bl	8000e54 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e0cb      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	4b49      	ldr	r3, [pc, #292]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0ee      	beq.n	800174c <HAL_RCC_OscConfig+0x334>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fb70 	bl	8000e54 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001776:	e00a      	b.n	800178e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff fb6c 	bl	8000e54 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e0b5      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178e:	4b3e      	ldr	r3, [pc, #248]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ee      	bne.n	8001778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a0:	4b39      	ldr	r3, [pc, #228]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	4a38      	ldr	r2, [pc, #224]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 80017a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a1 	beq.w	80018f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b6:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d05c      	beq.n	800187c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d141      	bne.n	800184e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <HAL_RCC_OscConfig+0x478>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb40 	bl	8000e54 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff fb3c 	bl	8000e54 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e087      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001804:	019b      	lsls	r3, r3, #6
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	3b01      	subs	r3, #1
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	491b      	ldr	r1, [pc, #108]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x478>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fb15 	bl	8000e54 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fb11 	bl	8000e54 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e05c      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x416>
 800184c:	e054      	b.n	80018f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <HAL_RCC_OscConfig+0x478>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fafe 	bl	8000e54 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff fafa 	bl	8000e54 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e045      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_RCC_OscConfig+0x470>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x444>
 800187a:	e03d      	b.n	80018f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d107      	bne.n	8001894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e038      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000
 8001890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_RCC_OscConfig+0x4ec>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d028      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d121      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11a      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d111      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	3b01      	subs	r3, #1
 80018de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0cc      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b68      	ldr	r3, [pc, #416]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d90c      	bls.n	8001944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b65      	ldr	r3, [pc, #404]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a58      	ldr	r2, [pc, #352]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800197e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d044      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d119      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e067      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b37      	ldr	r3, [pc, #220]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4934      	ldr	r1, [pc, #208]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff fa2c 	bl	8000e54 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff fa28 	bl	8000e54 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e04f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d20c      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	490a      	ldr	r1, [pc, #40]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	5ccb      	ldrb	r3, [r1, r3]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f8b4 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08007ee8 	.word	0x08007ee8
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad8:	b094      	sub	sp, #80	@ 0x50
 8001ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aec:	4b79      	ldr	r3, [pc, #484]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d00d      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x40>
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	f200 80e1 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x34>
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b06:	e0db      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b73      	ldr	r3, [pc, #460]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b0c:	e0db      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0e:	4b73      	ldr	r3, [pc, #460]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8001b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b12:	e0d8      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b14:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d063      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	2200      	movs	r2, #0
 8001b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b46:	4622      	mov	r2, r4
 8001b48:	462b      	mov	r3, r5
 8001b4a:	f04f 0000 	mov.w	r0, #0
 8001b4e:	f04f 0100 	mov.w	r1, #0
 8001b52:	0159      	lsls	r1, r3, #5
 8001b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b58:	0150      	lsls	r0, r2, #5
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4621      	mov	r1, r4
 8001b60:	1a51      	subs	r1, r2, r1
 8001b62:	6139      	str	r1, [r7, #16]
 8001b64:	4629      	mov	r1, r5
 8001b66:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b78:	4659      	mov	r1, fp
 8001b7a:	018b      	lsls	r3, r1, #6
 8001b7c:	4651      	mov	r1, sl
 8001b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b82:	4651      	mov	r1, sl
 8001b84:	018a      	lsls	r2, r1, #6
 8001b86:	4651      	mov	r1, sl
 8001b88:	ebb2 0801 	subs.w	r8, r2, r1
 8001b8c:	4659      	mov	r1, fp
 8001b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ba6:	4690      	mov	r8, r2
 8001ba8:	4699      	mov	r9, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	eb18 0303 	adds.w	r3, r8, r3
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	eb49 0303 	adc.w	r3, r9, r3
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	024b      	lsls	r3, r1, #9
 8001bca:	4621      	mov	r1, r4
 8001bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	024a      	lsls	r2, r1, #9
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bda:	2200      	movs	r2, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001be4:	f7fe fb3e 	bl	8000264 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bf0:	e058      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	099b      	lsrs	r3, r3, #6
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c0c:	4642      	mov	r2, r8
 8001c0e:	464b      	mov	r3, r9
 8001c10:	f04f 0000 	mov.w	r0, #0
 8001c14:	f04f 0100 	mov.w	r1, #0
 8001c18:	0159      	lsls	r1, r3, #5
 8001c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1e:	0150      	lsls	r0, r2, #5
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4641      	mov	r1, r8
 8001c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c2a:	4649      	mov	r1, r9
 8001c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c44:	ebb2 040a 	subs.w	r4, r2, sl
 8001c48:	eb63 050b 	sbc.w	r5, r3, fp
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	00eb      	lsls	r3, r5, #3
 8001c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5a:	00e2      	lsls	r2, r4, #3
 8001c5c:	4614      	mov	r4, r2
 8001c5e:	461d      	mov	r5, r3
 8001c60:	4643      	mov	r3, r8
 8001c62:	18e3      	adds	r3, r4, r3
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	464b      	mov	r3, r9
 8001c68:	eb45 0303 	adc.w	r3, r5, r3
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	028b      	lsls	r3, r1, #10
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c84:	4621      	mov	r1, r4
 8001c86:	028a      	lsls	r2, r1, #10
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	61fa      	str	r2, [r7, #28]
 8001c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c98:	f7fe fae4 	bl	8000264 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3750      	adds	r7, #80	@ 0x50
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a9b      	lsrs	r3, r3, #10
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	@ (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08007ef8 	.word	0x08007ef8

08001d20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <HAL_RCC_GetClockConfig+0x60>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0207 	and.w	r2, r3, #7
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f839 	bl	8001e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f9c0 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04e      	b.n	8001eee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	@ (8001f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40001800 	.word	0x40001800

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8d2 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8d5 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ac 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f89e 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8af 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0208 	mvn.w	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f886 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f878 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f889 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d020      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0210 	mvn.w	r2, #16
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f860 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f852 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f863 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0201 	mvn.w	r2, #1
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fd8c 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f906 	bl	80022b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f834 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0220 	mvn.w	r2, #32
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8d8 	bl	80022a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a46      	ldr	r2, [pc, #280]	@ (8002274 <TIM_Base_SetConfig+0x12c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002166:	d00f      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a43      	ldr	r2, [pc, #268]	@ (8002278 <TIM_Base_SetConfig+0x130>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00b      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a42      	ldr	r2, [pc, #264]	@ (800227c <TIM_Base_SetConfig+0x134>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a41      	ldr	r2, [pc, #260]	@ (8002280 <TIM_Base_SetConfig+0x138>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a40      	ldr	r2, [pc, #256]	@ (8002284 <TIM_Base_SetConfig+0x13c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800218e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a35      	ldr	r2, [pc, #212]	@ (8002274 <TIM_Base_SetConfig+0x12c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a8:	d027      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <TIM_Base_SetConfig+0x130>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d023      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a31      	ldr	r2, [pc, #196]	@ (800227c <TIM_Base_SetConfig+0x134>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a30      	ldr	r2, [pc, #192]	@ (8002280 <TIM_Base_SetConfig+0x138>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002284 <TIM_Base_SetConfig+0x13c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002288 <TIM_Base_SetConfig+0x140>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2d      	ldr	r2, [pc, #180]	@ (800228c <TIM_Base_SetConfig+0x144>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002290 <TIM_Base_SetConfig+0x148>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002294 <TIM_Base_SetConfig+0x14c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002298 <TIM_Base_SetConfig+0x150>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a29      	ldr	r2, [pc, #164]	@ (800229c <TIM_Base_SetConfig+0x154>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <TIM_Base_SetConfig+0x12c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0xf8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <TIM_Base_SetConfig+0x13c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d103      	bne.n	8002248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f023 0201 	bic.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]
  }
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40010000 	.word	0x40010000
 8002278:	40000400 	.word	0x40000400
 800227c:	40000800 	.word	0x40000800
 8002280:	40000c00 	.word	0x40000c00
 8002284:	40010400 	.word	0x40010400
 8002288:	40014000 	.word	0x40014000
 800228c:	40014400 	.word	0x40014400
 8002290:	40014800 	.word	0x40014800
 8002294:	40001800 	.word	0x40001800
 8002298:	40001c00 	.word	0x40001c00
 800229c:	40002000 	.word	0x40002000

080022a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f103 0208 	add.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0208 	add.w	r2, r3, #8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f103 0208 	add.w	r2, r3, #8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d103      	bne.n	800238a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e00c      	b.n	80023a4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3308      	adds	r3, #8
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e002      	b.n	8002398 <vListInsert+0x2e>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d2f6      	bcs.n	8002392 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6892      	ldr	r2, [r2, #8]
 80023f2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6852      	ldr	r2, [r2, #4]
 80023fc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d103      	bne.n	8002410 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	1e5a      	subs	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <xQueueGenericReset+0x2c>
        __asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	60bb      	str	r3, [r7, #8]
    }
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800245c:	f002 fb46 	bl	8004aec <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	441a      	add	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248c:	3b01      	subs	r3, #1
 800248e:	68f9      	ldr	r1, [r7, #12]
 8002490:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	441a      	add	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	22ff      	movs	r2, #255	@ 0xff
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	22ff      	movs	r2, #255	@ 0xff
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d114      	bne.n	80024dc <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01a      	beq.n	80024f0 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3310      	adds	r3, #16
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 f9e2 	bl	8003888 <xTaskRemoveFromEventList>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d012      	beq.n	80024f0 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <xQueueGenericReset+0xd0>)
 80024cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	e009      	b.n	80024f0 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3310      	adds	r3, #16
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fef1 	bl	80022c8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3324      	adds	r3, #36	@ 0x24
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff feec 	bl	80022c8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024f0:	f002 fb2e 	bl	8004b50 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000ed04 	.word	0xe000ed04

08002504 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	@ 0x30
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	61bb      	str	r3, [r7, #24]
    }
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <xQueueGenericCreate+0x4a>
 8002540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	429a      	cmp	r2, r3
 800254c:	d101      	bne.n	8002552 <xQueueGenericCreate+0x4e>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <xQueueGenericCreate+0x50>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	617b      	str	r3, [r7, #20]
    }
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002576:	d90b      	bls.n	8002590 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	613b      	str	r3, [r7, #16]
    }
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	3350      	adds	r3, #80	@ 0x50
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fbdb 	bl	8004d50 <pvPortMalloc>
 800259a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00d      	beq.n	80025be <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3350      	adds	r3, #80	@ 0x50
 80025aa:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025ac:	79fa      	ldrb	r2, [r7, #7]
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f805 	bl	80025c8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025be:	6a3b      	ldr	r3, [r7, #32]
    }
 80025c0:	4618      	mov	r0, r3
 80025c2:	3728      	adds	r7, #40	@ 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e002      	b.n	80025ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025f6:	2101      	movs	r1, #1
 80025f8:	69b8      	ldr	r0, [r7, #24]
 80025fa:	f7ff ff19 	bl	8002430 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	2073      	movs	r0, #115	@ 0x73
 800260e:	f004 fb85 	bl	8006d1c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b090      	sub	sp, #64	@ 0x40
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800262a:	2300      	movs	r3, #0
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <xQueueGenericSend+0x34>
        __asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <xQueueGenericSend+0x42>
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <xQueueGenericSend+0x46>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <xQueueGenericSend+0x48>
 8002662:	2300      	movs	r3, #0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <xQueueGenericSend+0x64>
        __asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d103      	bne.n	800268e <xQueueGenericSend+0x72>
 8002686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <xQueueGenericSend+0x76>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <xQueueGenericSend+0x78>
 8002692:	2300      	movs	r3, #0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <xQueueGenericSend+0x94>
        __asm volatile
 8002698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	623b      	str	r3, [r7, #32]
    }
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026b0:	f001 fa8e 	bl	8003bd0 <xTaskGetSchedulerState>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <xQueueGenericSend+0xa4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <xQueueGenericSend+0xa8>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <xQueueGenericSend+0xaa>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10b      	bne.n	80026e2 <xQueueGenericSend+0xc6>
        __asm volatile
 80026ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	61fb      	str	r3, [r7, #28]
    }
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	e7fd      	b.n	80026de <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026e2:	f002 fa03 	bl	8004aec <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <xQueueGenericSend+0xdc>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d136      	bne.n	8002766 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 80026f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 f94a 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	460b      	mov	r3, r1
 800270a:	4601      	mov	r1, r0
 800270c:	205a      	movs	r0, #90	@ 0x5a
 800270e:	f004 fb7b 	bl	8006e08 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002718:	f000 fa80 	bl	8002c1c <prvCopyDataToQueue>
 800271c:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	2b00      	cmp	r3, #0
 8002724:	d010      	beq.n	8002748 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	3324      	adds	r3, #36	@ 0x24
 800272a:	4618      	mov	r0, r3
 800272c:	f001 f8ac 	bl	8003888 <xTaskRemoveFromEventList>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d013      	beq.n	800275e <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002736:	4b4d      	ldr	r3, [pc, #308]	@ (800286c <xQueueGenericSend+0x250>)
 8002738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	e00a      	b.n	800275e <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800274e:	4b47      	ldr	r3, [pc, #284]	@ (800286c <xQueueGenericSend+0x250>)
 8002750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800275e:	f002 f9f7 	bl	8004b50 <vPortExitCritical>
                return pdPASS;
 8002762:	2301      	movs	r3, #1
 8002764:	e07d      	b.n	8002862 <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d110      	bne.n	800278e <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800276c:	f002 f9f0 	bl	8004b50 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002772:	4618      	mov	r0, r3
 8002774:	f005 f90e 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	4601      	mov	r1, r0
 8002784:	205a      	movs	r0, #90	@ 0x5a
 8002786:	f004 fb3f 	bl	8006e08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800278a:	2300      	movs	r3, #0
 800278c:	e069      	b.n	8002862 <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 800278e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4618      	mov	r0, r3
 800279a:	f001 f8dd 	bl	8003958 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800279e:	2301      	movs	r3, #1
 80027a0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027a2:	f002 f9d5 	bl	8004b50 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027a6:	f000 fe1f 	bl	80033e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027aa:	f002 f99f 	bl	8004aec <vPortEnterCritical>
 80027ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027b4:	b25b      	sxtb	r3, r3
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d103      	bne.n	80027c4 <xQueueGenericSend+0x1a8>
 80027bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027ca:	b25b      	sxtb	r3, r3
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d103      	bne.n	80027da <xQueueGenericSend+0x1be>
 80027d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027da:	f002 f9b9 	bl	8004b50 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027de:	1d3a      	adds	r2, r7, #4
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 f8cc 	bl	8003984 <xTaskCheckForTimeOut>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d124      	bne.n	800283c <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027f4:	f000 fb0a 	bl	8002e0c <prvIsQueueFull>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	3310      	adds	r3, #16
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f000 ffe8 	bl	80037dc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800280c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800280e:	f000 fa95 	bl	8002d3c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002812:	f000 fdf7 	bl	8003404 <xTaskResumeAll>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f af62 	bne.w	80026e2 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800281e:	4b13      	ldr	r3, [pc, #76]	@ (800286c <xQueueGenericSend+0x250>)
 8002820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	e758      	b.n	80026e2 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002830:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002832:	f000 fa83 	bl	8002d3c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002836:	f000 fde5 	bl	8003404 <xTaskResumeAll>
 800283a:	e752      	b.n	80026e2 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800283c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800283e:	f000 fa7d 	bl	8002d3c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002842:	f000 fddf 	bl	8003404 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	4618      	mov	r0, r3
 800284a:	f005 f8a3 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	460b      	mov	r3, r1
 8002858:	4601      	mov	r1, r0
 800285a:	205a      	movs	r0, #90	@ 0x5a
 800285c:	f004 fad4 	bl	8006e08 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002860:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002862:	4618      	mov	r0, r3
 8002864:	3738      	adds	r7, #56	@ 0x38
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000ed04 	.word	0xe000ed04

08002870 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b090      	sub	sp, #64	@ 0x40
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8002882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800289a:	bf00      	nop
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <xQueueGenericSendFromISR+0x3e>
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <xQueueGenericSendFromISR+0x42>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <xQueueGenericSendFromISR+0x44>
 80028b2:	2300      	movs	r3, #0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d103      	bne.n	80028de <xQueueGenericSendFromISR+0x6e>
 80028d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <xQueueGenericSendFromISR+0x72>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <xQueueGenericSendFromISR+0x74>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	623b      	str	r3, [r7, #32]
    }
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002900:	f002 f9e4 	bl	8004ccc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002904:	f3ef 8211 	mrs	r2, BASEPRI
 8002908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	61fa      	str	r2, [r7, #28]
 800291a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800291c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <xQueueGenericSendFromISR+0xc2>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d149      	bne.n	80029c6 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002938:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800293c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002944:	4618      	mov	r0, r3
 8002946:	f005 f825 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 800294a:	4601      	mov	r1, r0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	2060      	movs	r0, #96	@ 0x60
 8002952:	f004 f989 	bl	8006c68 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800295c:	f000 f95e 	bl	8002c1c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002960:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d112      	bne.n	8002990 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d026      	beq.n	80029c0 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002974:	3324      	adds	r3, #36	@ 0x24
 8002976:	4618      	mov	r0, r3
 8002978:	f000 ff86 	bl	8003888 <xTaskRemoveFromEventList>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01e      	beq.n	80029c0 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e017      	b.n	80029c0 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002990:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002994:	2b7f      	cmp	r3, #127	@ 0x7f
 8002996:	d10b      	bne.n	80029b0 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	617b      	str	r3, [r7, #20]
    }
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029b4:	3301      	adds	r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80029c0:	2301      	movs	r3, #1
 80029c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80029c4:	e00b      	b.n	80029de <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80029c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c8:	4618      	mov	r0, r3
 80029ca:	f004 ffe3 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 80029ce:	4601      	mov	r1, r0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	461a      	mov	r2, r3
 80029d4:	2060      	movs	r0, #96	@ 0x60
 80029d6:	f004 f947 	bl	8006c68 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029e8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3740      	adds	r7, #64	@ 0x40
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b08f      	sub	sp, #60	@ 0x3c
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <xQueueReceive+0x32>
        __asm volatile
 8002a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	623b      	str	r3, [r7, #32]
    }
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	e7fd      	b.n	8002a22 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <xQueueReceive+0x40>
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <xQueueReceive+0x44>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <xQueueReceive+0x46>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10b      	bne.n	8002a56 <xQueueReceive+0x62>
        __asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	61fb      	str	r3, [r7, #28]
    }
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	e7fd      	b.n	8002a52 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a56:	f001 f8bb 	bl	8003bd0 <xTaskGetSchedulerState>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <xQueueReceive+0x72>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <xQueueReceive+0x76>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueReceive+0x78>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <xQueueReceive+0x94>
        __asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	61bb      	str	r3, [r7, #24]
    }
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a88:	f002 f830 	bl	8004aec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d02f      	beq.n	8002af8 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a9c:	f000 f928 	bl	8002cf0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 ff76 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f004 ff72 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	9100      	str	r1, [sp, #0]
 8002ab8:	4621      	mov	r1, r4
 8002aba:	205c      	movs	r0, #92	@ 0x5c
 8002abc:	f004 f9a4 	bl	8006e08 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00f      	beq.n	8002af0 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	3310      	adds	r3, #16
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fed7 	bl	8003888 <xTaskRemoveFromEventList>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c18 <xQueueReceive+0x224>)
 8002ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002af0:	f002 f82e 	bl	8004b50 <vPortExitCritical>
                return pdPASS;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e08a      	b.n	8002c0e <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d113      	bne.n	8002b26 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002afe:	f002 f827 	bl	8004b50 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 ff45 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f004 ff41 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002b12:	4602      	mov	r2, r0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2101      	movs	r1, #1
 8002b18:	9100      	str	r1, [sp, #0]
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	205c      	movs	r0, #92	@ 0x5c
 8002b1e:	f004 f973 	bl	8006e08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e073      	b.n	8002c0e <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d106      	bne.n	8002b3a <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 ff11 	bl	8003958 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b3a:	f002 f809 	bl	8004b50 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b3e:	f000 fc53 	bl	80033e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b42:	f001 ffd3 	bl	8004aec <vPortEnterCritical>
 8002b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d103      	bne.n	8002b5c <xQueueReceive+0x168>
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d103      	bne.n	8002b72 <xQueueReceive+0x17e>
 8002b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b72:	f001 ffed 	bl	8004b50 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b76:	1d3a      	adds	r2, r7, #4
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 ff00 	bl	8003984 <xTaskCheckForTimeOut>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d124      	bne.n	8002bd4 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b8c:	f000 f928 	bl	8002de0 <prvIsQueueEmpty>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b98:	3324      	adds	r3, #36	@ 0x24
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fe1c 	bl	80037dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002ba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ba6:	f000 f8c9 	bl	8002d3c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002baa:	f000 fc2b 	bl	8003404 <xTaskResumeAll>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f af69 	bne.w	8002a88 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002bb6:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <xQueueReceive+0x224>)
 8002bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	e75f      	b.n	8002a88 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bca:	f000 f8b7 	bl	8002d3c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bce:	f000 fc19 	bl	8003404 <xTaskResumeAll>
 8002bd2:	e759      	b.n	8002a88 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bd6:	f000 f8b1 	bl	8002d3c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bda:	f000 fc13 	bl	8003404 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002be0:	f000 f8fe 	bl	8002de0 <prvIsQueueEmpty>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f43f af4e 	beq.w	8002a88 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fed0 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f004 fecc 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2101      	movs	r1, #1
 8002c02:	9100      	str	r1, [sp, #0]
 8002c04:	4621      	mov	r1, r4
 8002c06:	205c      	movs	r0, #92	@ 0x5c
 8002c08:	f004 f8fe 	bl	8006e08 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002c0c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3734      	adds	r7, #52	@ 0x34
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d14d      	bne.n	8002cde <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 ffe0 	bl	8003c0c <xTaskPriorityDisinherit>
 8002c4c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	e043      	b.n	8002cde <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d119      	bne.n	8002c90 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6858      	ldr	r0, [r3, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	461a      	mov	r2, r3
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	f005 f85a 	bl	8007d20 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	441a      	add	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d32b      	bcc.n	8002cde <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	e026      	b.n	8002cde <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68d8      	ldr	r0, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	f005 f840 	bl	8007d20 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	425b      	negs	r3, r3
 8002caa:	441a      	add	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d207      	bcs.n	8002ccc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d105      	bne.n	8002cde <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002ce6:	697b      	ldr	r3, [r7, #20]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	441a      	add	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d303      	bcc.n	8002d24 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68d9      	ldr	r1, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6838      	ldr	r0, [r7, #0]
 8002d30:	f004 fff6 	bl	8007d20 <memcpy>
    }
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d44:	f001 fed2 	bl	8004aec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d4e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d50:	e011      	b.n	8002d76 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d012      	beq.n	8002d80 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3324      	adds	r3, #36	@ 0x24
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fd92 	bl	8003888 <xTaskRemoveFromEventList>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d6a:	f000 fe73 	bl	8003a54 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	dce9      	bgt.n	8002d52 <prvUnlockQueue+0x16>
 8002d7e:	e000      	b.n	8002d82 <prvUnlockQueue+0x46>
                        break;
 8002d80:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	22ff      	movs	r2, #255	@ 0xff
 8002d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002d8a:	f001 fee1 	bl	8004b50 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d8e:	f001 fead 	bl	8004aec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d98:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d9a:	e011      	b.n	8002dc0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3310      	adds	r3, #16
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fd6d 	bl	8003888 <xTaskRemoveFromEventList>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002db4:	f000 fe4e 	bl	8003a54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	dce9      	bgt.n	8002d9c <prvUnlockQueue+0x60>
 8002dc8:	e000      	b.n	8002dcc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002dca:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	22ff      	movs	r2, #255	@ 0xff
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002dd4:	f001 febc 	bl	8004b50 <vPortExitCritical>
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002de8:	f001 fe80 	bl	8004aec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002df4:	2301      	movs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e001      	b.n	8002dfe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dfe:	f001 fea7 	bl	8004b50 <vPortExitCritical>

    return xReturn;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e14:	f001 fe6a 	bl	8004aec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d102      	bne.n	8002e2a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e001      	b.n	8002e2e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e2e:	f001 fe8f 	bl	8004b50 <vPortExitCritical>

    return xReturn;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	e01e      	b.n	8002e8a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e4c:	4a13      	ldr	r2, [pc, #76]	@ (8002e9c <vQueueAddToRegistry+0x60>)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d115      	bne.n	8002e84 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e58:	4910      	ldr	r1, [pc, #64]	@ (8002e9c <vQueueAddToRegistry+0x60>)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e62:	4a0e      	ldr	r2, [pc, #56]	@ (8002e9c <vQueueAddToRegistry+0x60>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 fd8f 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8002e76:	4601      	mov	r1, r0
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2071      	movs	r0, #113	@ 0x71
 8002e7e:	f003 fef3 	bl	8006c68 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e82:	e006      	b.n	8002e92 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b07      	cmp	r3, #7
 8002e8e:	d9dd      	bls.n	8002e4c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000094 	.word	0x20000094

08002ea0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002eb0:	f001 fe1c 	bl	8004aec <vPortEnterCritical>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002eba:	b25b      	sxtb	r3, r3
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d103      	bne.n	8002eca <vQueueWaitForMessageRestricted+0x2a>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d103      	bne.n	8002ee0 <vQueueWaitForMessageRestricted+0x40>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ee0:	f001 fe36 	bl	8004b50 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3324      	adds	r3, #36	@ 0x24
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fc97 	bl	8003828 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff1e 	bl	8002d3c <prvUnlockQueue>
    }
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	@ 0x30
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 ff17 	bl	8004d50 <pvPortMalloc>
 8002f22:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00e      	beq.n	8002f48 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f2a:	2058      	movs	r0, #88	@ 0x58
 8002f2c:	f001 ff10 	bl	8004d50 <pvPortMalloc>
 8002f30:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f3e:	e005      	b.n	8002f4c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f40:	6978      	ldr	r0, [r7, #20]
 8002f42:	f001 ffe7 	bl	8004f14 <vPortFree>
 8002f46:	e001      	b.n	8002f4c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d013      	beq.n	8002f7a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	2300      	movs	r3, #0
 8002f56:	9303      	str	r3, [sp, #12]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f80e 	bl	8002f8a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f6e:	69f8      	ldr	r0, [r7, #28]
 8002f70:	f000 f8a2 	bl	80030b8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f74:	2301      	movs	r3, #1
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e002      	b.n	8002f80 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f80:	69bb      	ldr	r3, [r7, #24]
    }
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b088      	sub	sp, #32
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	21a5      	movs	r1, #165	@ 0xa5
 8002fa4:	f004 fe90 	bl	8007cc8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f023 0307 	bic.w	r3, r3, #7
 8002fc0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	617b      	str	r3, [r7, #20]
    }
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01f      	beq.n	800302a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	e012      	b.n	8003016 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	7819      	ldrb	r1, [r3, #0]
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3334      	adds	r3, #52	@ 0x34
 8003000:	460a      	mov	r2, r1
 8003002:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3301      	adds	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2b09      	cmp	r3, #9
 800301a:	d9e9      	bls.n	8002ff0 <prvInitialiseNewTask+0x66>
 800301c:	e000      	b.n	8003020 <prvInitialiseNewTask+0x96>
            {
                break;
 800301e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003028:	e003      	b.n	8003032 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	2b04      	cmp	r3, #4
 8003036:	d901      	bls.n	800303c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003038:	2304      	movs	r3, #4
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800303c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003040:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003046:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	2200      	movs	r2, #0
 800304c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	3304      	adds	r3, #4
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f958 	bl	8002308 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	3318      	adds	r3, #24
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f953 	bl	8002308 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003066:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	f1c3 0205 	rsb	r2, r3, #5
 800306e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003070:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003076:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	3350      	adds	r3, #80	@ 0x50
 800307c:	2204      	movs	r2, #4
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f004 fe21 	bl	8007cc8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	3354      	adds	r3, #84	@ 0x54
 800308a:	2201      	movs	r2, #1
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f004 fe1a 	bl	8007cc8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	69b8      	ldr	r0, [r7, #24]
 800309a:	f001 fb73 	bl	8004784 <pxPortInitialiseStack>
 800309e:	4602      	mov	r2, r0
 80030a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ae:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030b0:	bf00      	nop
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80030b8:	b5b0      	push	{r4, r5, r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af02      	add	r7, sp, #8
 80030be:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80030c0:	f001 fd14 	bl	8004aec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030c4:	4b3b      	ldr	r3, [pc, #236]	@ (80031b4 <prvAddNewTaskToReadyList+0xfc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	4a3a      	ldr	r2, [pc, #232]	@ (80031b4 <prvAddNewTaskToReadyList+0xfc>)
 80030cc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030ce:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <prvAddNewTaskToReadyList+0x100>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030d6:	4a38      	ldr	r2, [pc, #224]	@ (80031b8 <prvAddNewTaskToReadyList+0x100>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030dc:	4b35      	ldr	r3, [pc, #212]	@ (80031b4 <prvAddNewTaskToReadyList+0xfc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d110      	bne.n	8003106 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030e4:	f000 fcda 	bl	8003a9c <prvInitialiseTaskLists>
 80030e8:	e00d      	b.n	8003106 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030ea:	4b34      	ldr	r3, [pc, #208]	@ (80031bc <prvAddNewTaskToReadyList+0x104>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030f2:	4b31      	ldr	r3, [pc, #196]	@ (80031b8 <prvAddNewTaskToReadyList+0x100>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d802      	bhi.n	8003106 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003100:	4a2d      	ldr	r2, [pc, #180]	@ (80031b8 <prvAddNewTaskToReadyList+0x100>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003106:	4b2e      	ldr	r3, [pc, #184]	@ (80031c0 <prvAddNewTaskToReadyList+0x108>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	4a2c      	ldr	r2, [pc, #176]	@ (80031c0 <prvAddNewTaskToReadyList+0x108>)
 800310e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003110:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <prvAddNewTaskToReadyList+0x108>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <prvAddNewTaskToReadyList+0x94>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	f004 fb11 	bl	8007748 <SEGGER_SYSVIEW_OnTaskCreate>
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	461d      	mov	r5, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461c      	mov	r4, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	1ae3      	subs	r3, r4, r3
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	462b      	mov	r3, r5
 8003148:	f002 f8b4 	bl	80052b4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4618      	mov	r0, r3
 8003150:	f004 fb7e 	bl	8007850 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	2201      	movs	r2, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <prvAddNewTaskToReadyList+0x10c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	4a18      	ldr	r2, [pc, #96]	@ (80031c4 <prvAddNewTaskToReadyList+0x10c>)
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <prvAddNewTaskToReadyList+0x110>)
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f7ff f8d0 	bl	8002322 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003182:	f001 fce5 	bl	8004b50 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003186:	4b0d      	ldr	r3, [pc, #52]	@ (80031bc <prvAddNewTaskToReadyList+0x104>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00e      	beq.n	80031ac <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <prvAddNewTaskToReadyList+0x100>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	429a      	cmp	r2, r3
 800319a:	d207      	bcs.n	80031ac <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <prvAddNewTaskToReadyList+0x114>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bdb0      	pop	{r4, r5, r7, pc}
 80031b4:	200001ac 	.word	0x200001ac
 80031b8:	200000d4 	.word	0x200000d4
 80031bc:	200001b8 	.word	0x200001b8
 80031c0:	200001c8 	.word	0x200001c8
 80031c4:	200001b4 	.word	0x200001b4
 80031c8:	200000d8 	.word	0x200000d8
 80031cc:	e000ed04 	.word	0xe000ed04

080031d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80031d8:	f001 fc88 	bl	8004aec <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <vTaskDelete+0x18>
 80031e2:	4b46      	ldr	r3, [pc, #280]	@ (80032fc <vTaskDelete+0x12c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	e000      	b.n	80031ea <vTaskDelete+0x1a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f8f3 	bl	80023dc <uxListRemove>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d115      	bne.n	8003228 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003200:	493f      	ldr	r1, [pc, #252]	@ (8003300 <vTaskDelete+0x130>)
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <vTaskDelete+0x58>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	2201      	movs	r2, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43da      	mvns	r2, r3
 800321e:	4b39      	ldr	r3, [pc, #228]	@ (8003304 <vTaskDelete+0x134>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4013      	ands	r3, r2
 8003224:	4a37      	ldr	r2, [pc, #220]	@ (8003304 <vTaskDelete+0x134>)
 8003226:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3318      	adds	r3, #24
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f8d1 	bl	80023dc <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800323a:	4b33      	ldr	r3, [pc, #204]	@ (8003308 <vTaskDelete+0x138>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	4a31      	ldr	r2, [pc, #196]	@ (8003308 <vTaskDelete+0x138>)
 8003242:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003244:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <vTaskDelete+0x12c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	429a      	cmp	r2, r3
 800324c:	d118      	bne.n	8003280 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3304      	adds	r3, #4
 8003252:	4619      	mov	r1, r3
 8003254:	482d      	ldr	r0, [pc, #180]	@ (800330c <vTaskDelete+0x13c>)
 8003256:	f7ff f864 	bl	8002322 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800325a:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <vTaskDelete+0x140>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <vTaskDelete+0x140>)
 8003262:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fb94 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 800326c:	4603      	mov	r3, r0
 800326e:	4619      	mov	r1, r3
 8003270:	2022      	movs	r0, #34	@ 0x22
 8003272:	f003 fcbd 	bl	8006bf0 <SEGGER_SYSVIEW_RecordU32>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4618      	mov	r0, r3
 800327a:	f002 f883 	bl	8005384 <SYSVIEW_DeleteTask>
 800327e:	e016      	b.n	80032ae <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003280:	4b24      	ldr	r3, [pc, #144]	@ (8003314 <vTaskDelete+0x144>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a23      	ldr	r2, [pc, #140]	@ (8003314 <vTaskDelete+0x144>)
 8003288:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fb81 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8003292:	4603      	mov	r3, r0
 8003294:	4619      	mov	r1, r3
 8003296:	2022      	movs	r0, #34	@ 0x22
 8003298:	f003 fcaa 	bl	8006bf0 <SEGGER_SYSVIEW_RecordU32>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4618      	mov	r0, r3
 80032a0:	f002 f870 	bl	8005384 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fc67 	bl	8003b78 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80032aa:	f000 fc75 	bl	8003b98 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80032ae:	f001 fc4f 	bl	8004b50 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80032b2:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <vTaskDelete+0x148>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01c      	beq.n	80032f4 <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <vTaskDelete+0x12c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d117      	bne.n	80032f4 <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80032c4:	4b15      	ldr	r3, [pc, #84]	@ (800331c <vTaskDelete+0x14c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <vTaskDelete+0x114>
        __asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	60bb      	str	r3, [r7, #8]
    }
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80032e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003320 <vTaskDelete+0x150>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200000d4 	.word	0x200000d4
 8003300:	200000d8 	.word	0x200000d8
 8003304:	200001b4 	.word	0x200001b4
 8003308:	200001c8 	.word	0x200001c8
 800330c:	20000180 	.word	0x20000180
 8003310:	20000194 	.word	0x20000194
 8003314:	200001ac 	.word	0x200001ac
 8003318:	200001b8 	.word	0x200001b8
 800331c:	200001d4 	.word	0x200001d4
 8003320:	e000ed04 	.word	0xe000ed04

08003324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800332a:	4b27      	ldr	r3, [pc, #156]	@ (80033c8 <vTaskStartScheduler+0xa4>)
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	2300      	movs	r3, #0
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	2300      	movs	r3, #0
 8003334:	2282      	movs	r2, #130	@ 0x82
 8003336:	4925      	ldr	r1, [pc, #148]	@ (80033cc <vTaskStartScheduler+0xa8>)
 8003338:	4825      	ldr	r0, [pc, #148]	@ (80033d0 <vTaskStartScheduler+0xac>)
 800333a:	f7ff fde5 	bl	8002f08 <xTaskCreate>
 800333e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003346:	f000 feff 	bl	8004148 <xTimerCreateTimerTask>
 800334a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d124      	bne.n	800339c <vTaskStartScheduler+0x78>
        __asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	60bb      	str	r3, [r7, #8]
    }
 8003364:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003366:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <vTaskStartScheduler+0xb0>)
 8003368:	f04f 32ff 	mov.w	r2, #4294967295
 800336c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800336e:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <vTaskStartScheduler+0xb4>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003374:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <vTaskStartScheduler+0xb8>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800337a:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <vTaskStartScheduler+0xbc>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <vTaskStartScheduler+0xa4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d102      	bne.n	800338c <vTaskStartScheduler+0x68>
 8003386:	f004 f9c3 	bl	8007710 <SEGGER_SYSVIEW_OnIdle>
 800338a:	e004      	b.n	8003396 <vTaskStartScheduler+0x72>
 800338c:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <vTaskStartScheduler+0xbc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fa1b 	bl	80077cc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003396:	f001 fa85 	bl	80048a4 <xPortStartScheduler>
 800339a:	e00f      	b.n	80033bc <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d10b      	bne.n	80033bc <vTaskStartScheduler+0x98>
        __asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	607b      	str	r3, [r7, #4]
    }
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <vTaskStartScheduler+0xc0>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200001d0 	.word	0x200001d0
 80033cc:	08007e04 	.word	0x08007e04
 80033d0:	08003a6d 	.word	0x08003a6d
 80033d4:	200001cc 	.word	0x200001cc
 80033d8:	200001b8 	.word	0x200001b8
 80033dc:	200001b0 	.word	0x200001b0
 80033e0:	200000d4 	.word	0x200000d4
 80033e4:	2000000c 	.word	0x2000000c

080033e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80033ec:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <vTaskSuspendAll+0x18>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	4a03      	ldr	r2, [pc, #12]	@ (8003400 <vTaskSuspendAll+0x18>)
 80033f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	200001d4 	.word	0x200001d4

08003404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003412:	4b44      	ldr	r3, [pc, #272]	@ (8003524 <xTaskResumeAll+0x120>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <xTaskResumeAll+0x2e>
        __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	603b      	str	r3, [r7, #0]
    }
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	e7fd      	b.n	800342e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003432:	f001 fb5b 	bl	8004aec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003436:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <xTaskResumeAll+0x120>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3b01      	subs	r3, #1
 800343c:	4a39      	ldr	r2, [pc, #228]	@ (8003524 <xTaskResumeAll+0x120>)
 800343e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003440:	4b38      	ldr	r3, [pc, #224]	@ (8003524 <xTaskResumeAll+0x120>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d165      	bne.n	8003514 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003448:	4b37      	ldr	r3, [pc, #220]	@ (8003528 <xTaskResumeAll+0x124>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d061      	beq.n	8003514 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003450:	e032      	b.n	80034b8 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003452:	4b36      	ldr	r3, [pc, #216]	@ (800352c <xTaskResumeAll+0x128>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3318      	adds	r3, #24
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe ffbc 	bl	80023dc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3304      	adds	r3, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe ffb7 	bl	80023dc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4618      	mov	r0, r3
 8003472:	f004 f9ed 	bl	8007850 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	2201      	movs	r2, #1
 800347c:	409a      	lsls	r2, r3
 800347e:	4b2c      	ldr	r3, [pc, #176]	@ (8003530 <xTaskResumeAll+0x12c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	4a2a      	ldr	r2, [pc, #168]	@ (8003530 <xTaskResumeAll+0x12c>)
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4a27      	ldr	r2, [pc, #156]	@ (8003534 <xTaskResumeAll+0x130>)
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f7fe ff3f 	bl	8002322 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a8:	4b23      	ldr	r3, [pc, #140]	@ (8003538 <xTaskResumeAll+0x134>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 80034b2:	4b22      	ldr	r3, [pc, #136]	@ (800353c <xTaskResumeAll+0x138>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034b8:	4b1c      	ldr	r3, [pc, #112]	@ (800352c <xTaskResumeAll+0x128>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1c8      	bne.n	8003452 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80034c6:	f000 fb67 	bl	8003b98 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <xTaskResumeAll+0x13c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80034d6:	f000 f859 	bl	800358c <xTaskIncrementTick>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80034e0:	4b16      	ldr	r3, [pc, #88]	@ (800353c <xTaskResumeAll+0x138>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f1      	bne.n	80034d6 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80034f2:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <xTaskResumeAll+0x13c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80034f8:	4b10      	ldr	r3, [pc, #64]	@ (800353c <xTaskResumeAll+0x138>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003500:	2301      	movs	r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003504:	4b0f      	ldr	r3, [pc, #60]	@ (8003544 <xTaskResumeAll+0x140>)
 8003506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003514:	f001 fb1c 	bl	8004b50 <vPortExitCritical>

    return xAlreadyYielded;
 8003518:	68bb      	ldr	r3, [r7, #8]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200001d4 	.word	0x200001d4
 8003528:	200001ac 	.word	0x200001ac
 800352c:	2000016c 	.word	0x2000016c
 8003530:	200001b4 	.word	0x200001b4
 8003534:	200000d8 	.word	0x200000d8
 8003538:	200000d4 	.word	0x200000d4
 800353c:	200001c0 	.word	0x200001c0
 8003540:	200001bc 	.word	0x200001bc
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800354e:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <xTaskGetTickCount+0x1c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003554:	687b      	ldr	r3, [r7, #4]
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	200001b0 	.word	0x200001b0

08003568 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800356e:	f001 fbad 	bl	8004ccc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003576:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <xTaskGetTickCountFromISR+0x20>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800357c:	683b      	ldr	r3, [r7, #0]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200001b0 	.word	0x200001b0

0800358c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003596:	4b51      	ldr	r3, [pc, #324]	@ (80036dc <xTaskIncrementTick+0x150>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 8093 	bne.w	80036c6 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035a0:	4b4f      	ldr	r3, [pc, #316]	@ (80036e0 <xTaskIncrementTick+0x154>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035a8:	4a4d      	ldr	r2, [pc, #308]	@ (80036e0 <xTaskIncrementTick+0x154>)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d121      	bne.n	80035f8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80035b4:	4b4b      	ldr	r3, [pc, #300]	@ (80036e4 <xTaskIncrementTick+0x158>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <xTaskIncrementTick+0x4a>
        __asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	603b      	str	r3, [r7, #0]
    }
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	e7fd      	b.n	80035d2 <xTaskIncrementTick+0x46>
 80035d6:	4b43      	ldr	r3, [pc, #268]	@ (80036e4 <xTaskIncrementTick+0x158>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	4b42      	ldr	r3, [pc, #264]	@ (80036e8 <xTaskIncrementTick+0x15c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a40      	ldr	r2, [pc, #256]	@ (80036e4 <xTaskIncrementTick+0x158>)
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4a40      	ldr	r2, [pc, #256]	@ (80036e8 <xTaskIncrementTick+0x15c>)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b40      	ldr	r3, [pc, #256]	@ (80036ec <xTaskIncrementTick+0x160>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	4a3e      	ldr	r2, [pc, #248]	@ (80036ec <xTaskIncrementTick+0x160>)
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	f000 fad0 	bl	8003b98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035f8:	4b3d      	ldr	r3, [pc, #244]	@ (80036f0 <xTaskIncrementTick+0x164>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d34c      	bcc.n	800369c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003602:	4b38      	ldr	r3, [pc, #224]	@ (80036e4 <xTaskIncrementTick+0x158>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d104      	bne.n	8003616 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800360c:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <xTaskIncrementTick+0x164>)
 800360e:	f04f 32ff 	mov.w	r2, #4294967295
 8003612:	601a      	str	r2, [r3, #0]
                    break;
 8003614:	e042      	b.n	800369c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003616:	4b33      	ldr	r3, [pc, #204]	@ (80036e4 <xTaskIncrementTick+0x158>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d203      	bcs.n	8003636 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800362e:	4a30      	ldr	r2, [pc, #192]	@ (80036f0 <xTaskIncrementTick+0x164>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003634:	e032      	b.n	800369c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3304      	adds	r3, #4
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fece 	bl	80023dc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	3318      	adds	r3, #24
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe fec5 	bl	80023dc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f004 f8fb 	bl	8007850 <SEGGER_SYSVIEW_OnTaskStartReady>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	2201      	movs	r2, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <xTaskIncrementTick+0x168>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <xTaskIncrementTick+0x168>)
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4a1f      	ldr	r2, [pc, #124]	@ (80036f8 <xTaskIncrementTick+0x16c>)
 800367a:	441a      	add	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f7fe fe4d 	bl	8002322 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368c:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <xTaskIncrementTick+0x170>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	429a      	cmp	r2, r3
 8003694:	d3b5      	bcc.n	8003602 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003696:	2301      	movs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800369a:	e7b2      	b.n	8003602 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800369c:	4b17      	ldr	r3, [pc, #92]	@ (80036fc <xTaskIncrementTick+0x170>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	4915      	ldr	r1, [pc, #84]	@ (80036f8 <xTaskIncrementTick+0x16c>)
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d901      	bls.n	80036b8 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <xTaskIncrementTick+0x174>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e004      	b.n	80036d0 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80036c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003704 <xTaskIncrementTick+0x178>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <xTaskIncrementTick+0x178>)
 80036ce:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80036d0:	697b      	ldr	r3, [r7, #20]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200001d4 	.word	0x200001d4
 80036e0:	200001b0 	.word	0x200001b0
 80036e4:	20000164 	.word	0x20000164
 80036e8:	20000168 	.word	0x20000168
 80036ec:	200001c4 	.word	0x200001c4
 80036f0:	200001cc 	.word	0x200001cc
 80036f4:	200001b4 	.word	0x200001b4
 80036f8:	200000d8 	.word	0x200000d8
 80036fc:	200000d4 	.word	0x200000d4
 8003700:	200001c0 	.word	0x200001c0
 8003704:	200001bc 	.word	0x200001bc

08003708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800370e:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <vTaskSwitchContext+0xbc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003716:	4b2c      	ldr	r3, [pc, #176]	@ (80037c8 <vTaskSwitchContext+0xc0>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800371c:	e04e      	b.n	80037bc <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800371e:	4b2a      	ldr	r3, [pc, #168]	@ (80037c8 <vTaskSwitchContext+0xc0>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003724:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <vTaskSwitchContext+0xc4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003732:	7afb      	ldrb	r3, [r7, #11]
 8003734:	f1c3 031f 	rsb	r3, r3, #31
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	4925      	ldr	r1, [pc, #148]	@ (80037d0 <vTaskSwitchContext+0xc8>)
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <vTaskSwitchContext+0x5e>
        __asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	607b      	str	r3, [r7, #4]
    }
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	e7fd      	b.n	8003762 <vTaskSwitchContext+0x5a>
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <vTaskSwitchContext+0xc8>)
 8003772:	4413      	add	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3308      	adds	r3, #8
 8003788:	429a      	cmp	r2, r3
 800378a:	d104      	bne.n	8003796 <vTaskSwitchContext+0x8e>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <vTaskSwitchContext+0xcc>)
 800379e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037a0:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <vTaskSwitchContext+0xcc>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <vTaskSwitchContext+0xd0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d102      	bne.n	80037b2 <vTaskSwitchContext+0xaa>
 80037ac:	f003 ffb0 	bl	8007710 <SEGGER_SYSVIEW_OnIdle>
}
 80037b0:	e004      	b.n	80037bc <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80037b2:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <vTaskSwitchContext+0xcc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 f808 	bl	80077cc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80037bc:	bf00      	nop
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	200001d4 	.word	0x200001d4
 80037c8:	200001c0 	.word	0x200001c0
 80037cc:	200001b4 	.word	0x200001b4
 80037d0:	200000d8 	.word	0x200000d8
 80037d4:	200000d4 	.word	0x200000d4
 80037d8:	200001d0 	.word	0x200001d0

080037dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10b      	bne.n	8003804 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	60fb      	str	r3, [r7, #12]
    }
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003804:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <vTaskPlaceOnEventList+0x48>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3318      	adds	r3, #24
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fe fdac 	bl	800236a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003812:	2101      	movs	r1, #1
 8003814:	6838      	ldr	r0, [r7, #0]
 8003816:	f000 fc1f 	bl	8004058 <prvAddCurrentTaskToDelayedList>
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200000d4 	.word	0x200000d4

08003828 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	617b      	str	r3, [r7, #20]
    }
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003852:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <vTaskPlaceOnEventListRestricted+0x5c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3318      	adds	r3, #24
 8003858:	4619      	mov	r1, r3
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f7fe fd61 	bl	8002322 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800386c:	2024      	movs	r0, #36	@ 0x24
 800386e:	f003 f9a1 	bl	8006bb4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	68b8      	ldr	r0, [r7, #8]
 8003876:	f000 fbef 	bl	8004058 <prvAddCurrentTaskToDelayedList>
    }
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200000d4 	.word	0x200000d4

08003888 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	60fb      	str	r3, [r7, #12]
    }
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	3318      	adds	r3, #24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fd8e 	bl	80023dc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003940 <xTaskRemoveFromEventList+0xb8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d120      	bne.n	800390a <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fd85 	bl	80023dc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f003 ffbb 	bl	8007850 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038de:	2201      	movs	r2, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <xTaskRemoveFromEventList+0xbc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	4a16      	ldr	r2, [pc, #88]	@ (8003944 <xTaskRemoveFromEventList+0xbc>)
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <xTaskRemoveFromEventList+0xc0>)
 80038fa:	441a      	add	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f7fe fd0d 	bl	8002322 <vListInsertEnd>
 8003908:	e005      	b.n	8003916 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	3318      	adds	r3, #24
 800390e:	4619      	mov	r1, r3
 8003910:	480e      	ldr	r0, [pc, #56]	@ (800394c <xTaskRemoveFromEventList+0xc4>)
 8003912:	f7fe fd06 	bl	8002322 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391a:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <xTaskRemoveFromEventList+0xc8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	429a      	cmp	r2, r3
 8003922:	d905      	bls.n	8003930 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003924:	2301      	movs	r3, #1
 8003926:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <xTaskRemoveFromEventList+0xcc>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e001      	b.n	8003934 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003934:	697b      	ldr	r3, [r7, #20]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200001d4 	.word	0x200001d4
 8003944:	200001b4 	.word	0x200001b4
 8003948:	200000d8 	.word	0x200000d8
 800394c:	2000016c 	.word	0x2000016c
 8003950:	200000d4 	.word	0x200000d4
 8003954:	200001c0 	.word	0x200001c0

08003958 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <vTaskInternalSetTimeOutState+0x24>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <vTaskInternalSetTimeOutState+0x28>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	605a      	str	r2, [r3, #4]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	200001c4 	.word	0x200001c4
 8003980:	200001b0 	.word	0x200001b0

08003984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	613b      	str	r3, [r7, #16]
    }
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	60fb      	str	r3, [r7, #12]
    }
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80039ca:	f001 f88f 	bl	8004aec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039ce:	4b1f      	ldr	r3, [pc, #124]	@ (8003a4c <xTaskCheckForTimeOut+0xc8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d102      	bne.n	80039ee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	e026      	b.n	8003a3c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b17      	ldr	r3, [pc, #92]	@ (8003a50 <xTaskCheckForTimeOut+0xcc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d00a      	beq.n	8003a10 <xTaskCheckForTimeOut+0x8c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d305      	bcc.n	8003a10 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e015      	b.n	8003a3c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d20b      	bcs.n	8003a32 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ff96 	bl	8003958 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e004      	b.n	8003a3c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a3c:	f001 f888 	bl	8004b50 <vPortExitCritical>

    return xReturn;
 8003a40:	69fb      	ldr	r3, [r7, #28]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200001b0 	.word	0x200001b0
 8003a50:	200001c4 	.word	0x200001c4

08003a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a58:	4b03      	ldr	r3, [pc, #12]	@ (8003a68 <vTaskMissedYield+0x14>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	200001c0 	.word	0x200001c0

08003a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a74:	f000 f852 	bl	8003b1c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <prvIdleTask+0x28>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d9f9      	bls.n	8003a74 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <prvIdleTask+0x2c>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a90:	e7f0      	b.n	8003a74 <prvIdleTask+0x8>
 8003a92:	bf00      	nop
 8003a94:	200000d8 	.word	0x200000d8
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	e00c      	b.n	8003ac2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a12      	ldr	r2, [pc, #72]	@ (8003afc <prvInitialiseTaskLists+0x60>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fc06 	bl	80022c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d9ef      	bls.n	8003aa8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ac8:	480d      	ldr	r0, [pc, #52]	@ (8003b00 <prvInitialiseTaskLists+0x64>)
 8003aca:	f7fe fbfd 	bl	80022c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ace:	480d      	ldr	r0, [pc, #52]	@ (8003b04 <prvInitialiseTaskLists+0x68>)
 8003ad0:	f7fe fbfa 	bl	80022c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ad4:	480c      	ldr	r0, [pc, #48]	@ (8003b08 <prvInitialiseTaskLists+0x6c>)
 8003ad6:	f7fe fbf7 	bl	80022c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003ada:	480c      	ldr	r0, [pc, #48]	@ (8003b0c <prvInitialiseTaskLists+0x70>)
 8003adc:	f7fe fbf4 	bl	80022c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ae0:	480b      	ldr	r0, [pc, #44]	@ (8003b10 <prvInitialiseTaskLists+0x74>)
 8003ae2:	f7fe fbf1 	bl	80022c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <prvInitialiseTaskLists+0x78>)
 8003ae8:	4a05      	ldr	r2, [pc, #20]	@ (8003b00 <prvInitialiseTaskLists+0x64>)
 8003aea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <prvInitialiseTaskLists+0x7c>)
 8003aee:	4a05      	ldr	r2, [pc, #20]	@ (8003b04 <prvInitialiseTaskLists+0x68>)
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200000d8 	.word	0x200000d8
 8003b00:	2000013c 	.word	0x2000013c
 8003b04:	20000150 	.word	0x20000150
 8003b08:	2000016c 	.word	0x2000016c
 8003b0c:	20000180 	.word	0x20000180
 8003b10:	20000198 	.word	0x20000198
 8003b14:	20000164 	.word	0x20000164
 8003b18:	20000168 	.word	0x20000168

08003b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b22:	e019      	b.n	8003b58 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b24:	f000 ffe2 	bl	8004aec <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b28:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <prvCheckTasksWaitingTermination+0x50>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fc51 	bl	80023dc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <prvCheckTasksWaitingTermination+0x54>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	4a0b      	ldr	r2, [pc, #44]	@ (8003b70 <prvCheckTasksWaitingTermination+0x54>)
 8003b42:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003b44:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b4c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003b4e:	f000 ffff 	bl	8004b50 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f810 	bl	8003b78 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e1      	bne.n	8003b24 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000180 	.word	0x20000180
 8003b70:	200001ac 	.word	0x200001ac
 8003b74:	20000194 	.word	0x20000194

08003b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 f9c5 	bl	8004f14 <vPortFree>
                vPortFree( pxTCB );
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f001 f9c2 	bl	8004f14 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc8 <prvResetNextTaskUnblockTime+0x30>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003ba6:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <prvResetNextTaskUnblockTime+0x34>)
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003bae:	e005      	b.n	8003bbc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bb0:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <prvResetNextTaskUnblockTime+0x30>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a04      	ldr	r2, [pc, #16]	@ (8003bcc <prvResetNextTaskUnblockTime+0x34>)
 8003bba:	6013      	str	r3, [r2, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000164 	.word	0x20000164
 8003bcc:	200001cc 	.word	0x200001cc

08003bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <xTaskGetSchedulerState+0x34>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003bde:	2301      	movs	r3, #1
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	e008      	b.n	8003bf6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be4:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <xTaskGetSchedulerState+0x38>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003bec:	2302      	movs	r3, #2
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	e001      	b.n	8003bf6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003bf6:	687b      	ldr	r3, [r7, #4]
    }
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	200001b8 	.word	0x200001b8
 8003c08:	200001d4 	.word	0x200001d4

08003c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06a      	beq.n	8003cf8 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c22:	4b38      	ldr	r3, [pc, #224]	@ (8003d04 <xTaskPriorityDisinherit+0xf8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d00b      	beq.n	8003c44 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	60fb      	str	r3, [r7, #12]
    }
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	60bb      	str	r3, [r7, #8]
    }
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c68:	1e5a      	subs	r2, r3, #1
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d03e      	beq.n	8003cf8 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d13a      	bne.n	8003cf8 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fba8 	bl	80023dc <uxListRemove>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	2201      	movs	r2, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d08 <xTaskPriorityDisinherit+0xfc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	4a18      	ldr	r2, [pc, #96]	@ (8003d08 <xTaskPriorityDisinherit+0xfc>)
 8003ca6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4619      	mov	r1, r3
 8003cac:	204a      	movs	r0, #74	@ 0x4a
 8003cae:	f002 ff9f 	bl	8006bf0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	f1c3 0205 	rsb	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <xTaskPriorityDisinherit+0xfc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003d08 <xTaskPriorityDisinherit+0xfc>)
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4a09      	ldr	r2, [pc, #36]	@ (8003d0c <xTaskPriorityDisinherit+0x100>)
 8003ce6:	441a      	add	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fe fb17 	bl	8002322 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cf8:	697b      	ldr	r3, [r7, #20]
    }
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200000d4 	.word	0x200000d4
 8003d08:	200001b4 	.word	0x200001b4
 8003d0c:	200000d8 	.word	0x200000d8

08003d10 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	613b      	str	r3, [r7, #16]
    }
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003d3c:	f000 fed6 	bl	8004aec <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003d40:	4b36      	ldr	r3, [pc, #216]	@ (8003e1c <xTaskGenericNotifyWait+0x10c>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	3354      	adds	r3, #84	@ 0x54
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d022      	beq.n	8003d98 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003d52:	4b32      	ldr	r3, [pc, #200]	@ (8003e1c <xTaskGenericNotifyWait+0x10c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	3214      	adds	r2, #20
 8003d5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	43d2      	mvns	r2, r2
 8003d62:	4011      	ands	r1, r2
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	3214      	adds	r2, #20
 8003d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e1c <xTaskGenericNotifyWait+0x10c>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	3354      	adds	r3, #84	@ 0x54
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d80:	2101      	movs	r1, #1
 8003d82:	6a38      	ldr	r0, [r7, #32]
 8003d84:	f000 f968 	bl	8004058 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003d88:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <xTaskGenericNotifyWait+0x110>)
 8003d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d98:	f000 feda 	bl	8004b50 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003d9c:	f000 fea6 	bl	8004aec <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	4613      	mov	r3, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	2040      	movs	r0, #64	@ 0x40
 8003dae:	f003 f82b 	bl	8006e08 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003db8:	4b18      	ldr	r3, [pc, #96]	@ (8003e1c <xTaskGenericNotifyWait+0x10c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	3214      	adds	r2, #20
 8003dc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003dc8:	4b14      	ldr	r3, [pc, #80]	@ (8003e1c <xTaskGenericNotifyWait+0x10c>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3354      	adds	r3, #84	@ 0x54
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d002      	beq.n	8003de0 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e00e      	b.n	8003dfe <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003de0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e1c <xTaskGenericNotifyWait+0x10c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	3214      	adds	r2, #20
 8003de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	43d2      	mvns	r2, r2
 8003df0:	4011      	ands	r1, r2
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	3214      	adds	r2, #20
 8003df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003dfe:	4b07      	ldr	r3, [pc, #28]	@ (8003e1c <xTaskGenericNotifyWait+0x10c>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4413      	add	r3, r2
 8003e06:	3354      	adds	r3, #84	@ 0x54
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003e0c:	f000 fea0 	bl	8004b50 <vPortExitCritical>

        return xReturn;
 8003e10:	697b      	ldr	r3, [r7, #20]
    }
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200000d4 	.word	0x200000d4
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b092      	sub	sp, #72	@ 0x48
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003e32:	2301      	movs	r3, #1
 8003e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e72:	f000 ff2b 	bl	8004ccc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8003e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e90:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e94:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8003e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d006      	beq.n	8003eaa <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	3214      	adds	r2, #20
 8003ea2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003eaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3354      	adds	r3, #84	@ 0x54
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003eb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3354      	adds	r3, #84	@ 0x54
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d83b      	bhi.n	8003f42 <xTaskGenericNotifyFromISR+0x11e>
 8003eca:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed0 <xTaskGenericNotifyFromISR+0xac>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003f63 	.word	0x08003f63
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f19 	.word	0x08003f19
 8003ee0:	08003f27 	.word	0x08003f27
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	3214      	adds	r2, #20
 8003eea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	ea42 0103 	orr.w	r1, r2, r3
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	3214      	adds	r2, #20
 8003efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003efe:	e033      	b.n	8003f68 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	3214      	adds	r2, #20
 8003f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	3214      	adds	r2, #20
 8003f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003f16:	e027      	b.n	8003f68 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	3214      	adds	r2, #20
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003f24:	e020      	b.n	8003f68 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003f26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d006      	beq.n	8003f3c <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	3214      	adds	r2, #20
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003f3a:	e015      	b.n	8003f68 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8003f40:	e012      	b.n	8003f68 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003f42:	4b3e      	ldr	r3, [pc, #248]	@ (800403c <xTaskGenericNotifyFromISR+0x218>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	61fb      	str	r3, [r7, #28]
    }
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	e7fd      	b.n	8003f5e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8003f66:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 fd12 	bl	8007994 <SEGGER_SYSVIEW_ShrinkId>
 8003f70:	78f9      	ldrb	r1, [r7, #3]
 8003f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f76:	9201      	str	r2, [sp, #4]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4601      	mov	r1, r0
 8003f80:	203f      	movs	r0, #63	@ 0x3f
 8003f82:	f002 ffd3 	bl	8006f2c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003f86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d14a      	bne.n	8004024 <xTaskGenericNotifyFromISR+0x200>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <xTaskGenericNotifyFromISR+0x18a>
        __asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	61bb      	str	r3, [r7, #24]
    }
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <xTaskGenericNotifyFromISR+0x186>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fae:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <xTaskGenericNotifyFromISR+0x21c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d120      	bne.n	8003ff8 <xTaskGenericNotifyFromISR+0x1d4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fa0e 	bl	80023dc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f003 fc44 	bl	8007850 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004044 <xTaskGenericNotifyFromISR+0x220>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <xTaskGenericNotifyFromISR+0x220>)
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <xTaskGenericNotifyFromISR+0x224>)
 8003fe8:	441a      	add	r2, r3
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	3304      	adds	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7fe f996 	bl	8002322 <vListInsertEnd>
 8003ff6:	e005      	b.n	8004004 <xTaskGenericNotifyFromISR+0x1e0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4813      	ldr	r0, [pc, #76]	@ (800404c <xTaskGenericNotifyFromISR+0x228>)
 8004000:	f7fe f98f 	bl	8002322 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004008:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <xTaskGenericNotifyFromISR+0x22c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	429a      	cmp	r2, r3
 8004010:	d908      	bls.n	8004024 <xTaskGenericNotifyFromISR+0x200>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <xTaskGenericNotifyFromISR+0x1fa>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <xTaskGenericNotifyFromISR+0x230>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004026:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f383 8811 	msr	BASEPRI, r3
    }
 800402e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8004030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8004032:	4618      	mov	r0, r3
 8004034:	3740      	adds	r7, #64	@ 0x40
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200001b0 	.word	0x200001b0
 8004040:	200001d4 	.word	0x200001d4
 8004044:	200001b4 	.word	0x200001b4
 8004048:	200000d8 	.word	0x200000d8
 800404c:	2000016c 	.word	0x2000016c
 8004050:	200000d4 	.word	0x200000d4
 8004054:	200001c0 	.word	0x200001c0

08004058 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004062:	4b32      	ldr	r3, [pc, #200]	@ (800412c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004068:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe f9b4 	bl	80023dc <uxListRemove>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800407a:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	2201      	movs	r2, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43da      	mvns	r2, r3
 8004088:	4b2a      	ldr	r3, [pc, #168]	@ (8004134 <prvAddCurrentTaskToDelayedList+0xdc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4013      	ands	r3, r2
 800408e:	4a29      	ldr	r2, [pc, #164]	@ (8004134 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004090:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d110      	bne.n	80040bc <prvAddCurrentTaskToDelayedList+0x64>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00d      	beq.n	80040bc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80040a0:	4b23      	ldr	r3, [pc, #140]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	211b      	movs	r1, #27
 80040a6:	4618      	mov	r0, r3
 80040a8:	f003 fc14 	bl	80078d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ac:	4b20      	ldr	r3, [pc, #128]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4820      	ldr	r0, [pc, #128]	@ (8004138 <prvAddCurrentTaskToDelayedList+0xe0>)
 80040b6:	f7fe f934 	bl	8002322 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80040ba:	e032      	b.n	8004122 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d20f      	bcs.n	80040f4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80040d4:	4b16      	ldr	r3, [pc, #88]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2104      	movs	r1, #4
 80040da:	4618      	mov	r0, r3
 80040dc:	f003 fbfa 	bl	80078d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040e0:	4b16      	ldr	r3, [pc, #88]	@ (800413c <prvAddCurrentTaskToDelayedList+0xe4>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3304      	adds	r3, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f7fe f93c 	bl	800236a <vListInsert>
}
 80040f2:	e016      	b.n	8004122 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80040f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2104      	movs	r1, #4
 80040fa:	4618      	mov	r0, r3
 80040fc:	f003 fbea 	bl	80078d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004100:	4b0f      	ldr	r3, [pc, #60]	@ (8004140 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fe f92c 	bl	800236a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004112:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <prvAddCurrentTaskToDelayedList+0xec>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	d202      	bcs.n	8004122 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800411c:	4a09      	ldr	r2, [pc, #36]	@ (8004144 <prvAddCurrentTaskToDelayedList+0xec>)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6013      	str	r3, [r2, #0]
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200001b0 	.word	0x200001b0
 8004130:	200000d4 	.word	0x200000d4
 8004134:	200001b4 	.word	0x200001b4
 8004138:	20000198 	.word	0x20000198
 800413c:	20000168 	.word	0x20000168
 8004140:	20000164 	.word	0x20000164
 8004144:	200001cc 	.word	0x200001cc

08004148 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004152:	f000 fae1 	bl	8004718 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <xTimerCreateTimerTask+0x58>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800415e:	4b11      	ldr	r3, [pc, #68]	@ (80041a4 <xTimerCreateTimerTask+0x5c>)
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	2302      	movs	r3, #2
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2300      	movs	r3, #0
 8004168:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800416c:	490e      	ldr	r1, [pc, #56]	@ (80041a8 <xTimerCreateTimerTask+0x60>)
 800416e:	480f      	ldr	r0, [pc, #60]	@ (80041ac <xTimerCreateTimerTask+0x64>)
 8004170:	f7fe feca 	bl	8002f08 <xTaskCreate>
 8004174:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	603b      	str	r3, [r7, #0]
    }
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004194:	687b      	ldr	r3, [r7, #4]
    }
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000208 	.word	0x20000208
 80041a4:	2000020c 	.word	0x2000020c
 80041a8:	08007e0c 	.word	0x08007e0c
 80041ac:	080042e9 	.word	0x080042e9

080041b0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	@ 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <xTimerGenericCommand+0x30>
        __asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	623b      	str	r3, [r7, #32]
    }
 80041da:	bf00      	nop
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80041e0:	4b19      	ldr	r3, [pc, #100]	@ (8004248 <xTimerGenericCommand+0x98>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02a      	beq.n	800423e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	dc18      	bgt.n	800422c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041fa:	f7ff fce9 	bl	8003bd0 <xTaskGetSchedulerState>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b02      	cmp	r3, #2
 8004202:	d109      	bne.n	8004218 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004204:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <xTimerGenericCommand+0x98>)
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	f107 0114 	add.w	r1, r7, #20
 800420c:	2300      	movs	r3, #0
 800420e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004210:	f7fe fa04 	bl	800261c <xQueueGenericSend>
 8004214:	6278      	str	r0, [r7, #36]	@ 0x24
 8004216:	e012      	b.n	800423e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <xTimerGenericCommand+0x98>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	f107 0114 	add.w	r1, r7, #20
 8004220:	2300      	movs	r3, #0
 8004222:	2200      	movs	r2, #0
 8004224:	f7fe f9fa 	bl	800261c <xQueueGenericSend>
 8004228:	6278      	str	r0, [r7, #36]	@ 0x24
 800422a:	e008      	b.n	800423e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800422c:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <xTimerGenericCommand+0x98>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	f107 0114 	add.w	r1, r7, #20
 8004234:	2300      	movs	r3, #0
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	f7fe fb1a 	bl	8002870 <xQueueGenericSendFromISR>
 800423c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004240:	4618      	mov	r0, r3
 8004242:	3728      	adds	r7, #40	@ 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000208 	.word	0x20000208

0800424c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004256:	4b23      	ldr	r3, [pc, #140]	@ (80042e4 <prvProcessExpiredTimer+0x98>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3304      	adds	r3, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe f8b9 	bl	80023dc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d023      	beq.n	80042c0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	18d1      	adds	r1, r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	6978      	ldr	r0, [r7, #20]
 8004286:	f000 f8d5 	bl	8004434 <prvInsertTimerInActiveList>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004290:	2300      	movs	r3, #0
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2300      	movs	r3, #0
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	2100      	movs	r1, #0
 800429a:	6978      	ldr	r0, [r7, #20]
 800429c:	f7ff ff88 	bl	80041b0 <xTimerGenericCommand>
 80042a0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d114      	bne.n	80042d2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
    }
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	4798      	blx	r3
    }
 80042da:	bf00      	nop
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000200 	.word	0x20000200

080042e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042f0:	f107 0308 	add.w	r3, r7, #8
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f859 	bl	80043ac <prvGetNextExpireTime>
 80042fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4619      	mov	r1, r3
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f805 	bl	8004310 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004306:	f000 f8d7 	bl	80044b8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800430a:	bf00      	nop
 800430c:	e7f0      	b.n	80042f0 <prvTimerTask+0x8>
	...

08004310 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800431a:	f7ff f865 	bl	80033e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800431e:	f107 0308 	add.w	r3, r7, #8
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f866 	bl	80043f4 <prvSampleTimeNow>
 8004328:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d130      	bne.n	8004392 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <prvProcessTimerOrBlockTask+0x3c>
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	429a      	cmp	r2, r3
 800433c:	d806      	bhi.n	800434c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800433e:	f7ff f861 	bl	8003404 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ff81 	bl	800424c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800434a:	e024      	b.n	8004396 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004352:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <prvProcessTimerOrBlockTask+0x90>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <prvProcessTimerOrBlockTask+0x50>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <prvProcessTimerOrBlockTask+0x52>
 8004360:	2300      	movs	r3, #0
 8004362:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004364:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <prvProcessTimerOrBlockTask+0x94>)
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	f7fe fd95 	bl	8002ea0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004376:	f7ff f845 	bl	8003404 <xTaskResumeAll>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004380:	4b09      	ldr	r3, [pc, #36]	@ (80043a8 <prvProcessTimerOrBlockTask+0x98>)
 8004382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy
    }
 8004390:	e001      	b.n	8004396 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004392:	f7ff f837 	bl	8003404 <xTaskResumeAll>
    }
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000204 	.word	0x20000204
 80043a4:	20000208 	.word	0x20000208
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043b4:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <prvGetNextExpireTime+0x44>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <prvGetNextExpireTime+0x16>
 80043be:	2201      	movs	r2, #1
 80043c0:	e000      	b.n	80043c4 <prvGetNextExpireTime+0x18>
 80043c2:	2200      	movs	r2, #0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <prvGetNextExpireTime+0x44>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e001      	b.n	80043e0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80043e0:	68fb      	ldr	r3, [r7, #12]
    }
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000200 	.word	0x20000200

080043f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80043fc:	f7ff f8a4 	bl	8003548 <xTaskGetTickCount>
 8004400:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004402:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <prvSampleTimeNow+0x3c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	429a      	cmp	r2, r3
 800440a:	d205      	bcs.n	8004418 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800440c:	f000 f91e 	bl	800464c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e002      	b.n	800441e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800441e:	4a04      	ldr	r2, [pc, #16]	@ (8004430 <prvSampleTimeNow+0x3c>)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004424:	68fb      	ldr	r3, [r7, #12]
    }
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000210 	.word	0x20000210

08004434 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d812      	bhi.n	8004480 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	429a      	cmp	r2, r3
 8004466:	d302      	bcc.n	800446e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004468:	2301      	movs	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e01b      	b.n	80044a6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800446e:	4b10      	ldr	r3, [pc, #64]	@ (80044b0 <prvInsertTimerInActiveList+0x7c>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f7fd ff76 	bl	800236a <vListInsert>
 800447e:	e012      	b.n	80044a6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d206      	bcs.n	8004496 <prvInsertTimerInActiveList+0x62>
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e007      	b.n	80044a6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004496:	4b07      	ldr	r3, [pc, #28]	@ (80044b4 <prvInsertTimerInActiveList+0x80>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3304      	adds	r3, #4
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f7fd ff62 	bl	800236a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80044a6:	697b      	ldr	r3, [r7, #20]
    }
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000204 	.word	0x20000204
 80044b4:	20000200 	.word	0x20000200

080044b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08c      	sub	sp, #48	@ 0x30
 80044bc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044be:	e0b2      	b.n	8004626 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f2c0 80af 	blt.w	8004626 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	3304      	adds	r3, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd ff7f 	bl	80023dc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff87 	bl	80043f4 <prvSampleTimeNow>
 80044e6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b09      	cmp	r3, #9
 80044ec:	f200 8098 	bhi.w	8004620 <prvProcessReceivedCommands+0x168>
 80044f0:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <prvProcessReceivedCommands+0x40>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	08004521 	.word	0x08004521
 80044fc:	08004521 	.word	0x08004521
 8004500:	08004521 	.word	0x08004521
 8004504:	08004597 	.word	0x08004597
 8004508:	080045ab 	.word	0x080045ab
 800450c:	080045f7 	.word	0x080045f7
 8004510:	08004521 	.word	0x08004521
 8004514:	08004521 	.word	0x08004521
 8004518:	08004597 	.word	0x08004597
 800451c:	080045ab 	.word	0x080045ab
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	b2da      	uxtb	r2, r3
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	18d1      	adds	r1, r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004540:	f7ff ff78 	bl	8004434 <prvInsertTimerInActiveList>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d06c      	beq.n	8004624 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004550:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d061      	beq.n	8004624 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	441a      	add	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2300      	movs	r3, #0
 800456e:	2100      	movs	r1, #0
 8004570:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004572:	f7ff fe1d 	bl	80041b0 <xTimerGenericCommand>
 8004576:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d152      	bne.n	8004624 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	61bb      	str	r3, [r7, #24]
    }
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80045a8:	e03d      	b.n	8004626 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	617b      	str	r3, [r7, #20]
    }
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	18d1      	adds	r1, r2, r3
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045f0:	f7ff ff20 	bl	8004434 <prvInsertTimerInActiveList>
                        break;
 80045f4:	e017      	b.n	8004626 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004604:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004606:	f000 fc85 	bl	8004f14 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800460a:	e00c      	b.n	8004626 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	b2da      	uxtb	r2, r3
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800461e:	e002      	b.n	8004626 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004620:	bf00      	nop
 8004622:	e000      	b.n	8004626 <prvProcessReceivedCommands+0x16e>
                        break;
 8004624:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004626:	4b08      	ldr	r3, [pc, #32]	@ (8004648 <prvProcessReceivedCommands+0x190>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f107 0108 	add.w	r1, r7, #8
 800462e:	2200      	movs	r2, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe f9df 	bl	80029f4 <xQueueReceive>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	f47f af41 	bne.w	80044c0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	3728      	adds	r7, #40	@ 0x28
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000208 	.word	0x20000208

0800464c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004652:	e049      	b.n	80046e8 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004654:	4b2e      	ldr	r3, [pc, #184]	@ (8004710 <prvSwitchTimerLists+0xc4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465e:	4b2c      	ldr	r3, [pc, #176]	@ (8004710 <prvSwitchTimerLists+0xc4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3304      	adds	r3, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7fd feb5 	bl	80023dc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02f      	beq.n	80046e8 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	429a      	cmp	r2, r3
 8004698:	d90e      	bls.n	80046b8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004710 <prvSwitchTimerLists+0xc4>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fd fe5a 	bl	800236a <vListInsert>
 80046b6:	e017      	b.n	80046e8 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046b8:	2300      	movs	r3, #0
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2300      	movs	r3, #0
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	2100      	movs	r1, #0
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fd74 	bl	80041b0 <xTimerGenericCommand>
 80046c8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	603b      	str	r3, [r7, #0]
    }
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046e8:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <prvSwitchTimerLists+0xc4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1b0      	bne.n	8004654 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80046f2:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <prvSwitchTimerLists+0xc4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80046f8:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <prvSwitchTimerLists+0xc8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a04      	ldr	r2, [pc, #16]	@ (8004710 <prvSwitchTimerLists+0xc4>)
 80046fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004700:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <prvSwitchTimerLists+0xc8>)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	6013      	str	r3, [r2, #0]
    }
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000200 	.word	0x20000200
 8004714:	20000204 	.word	0x20000204

08004718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800471c:	f000 f9e6 	bl	8004aec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004720:	4b12      	ldr	r3, [pc, #72]	@ (800476c <prvCheckForValidListAndQueue+0x54>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11d      	bne.n	8004764 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004728:	4811      	ldr	r0, [pc, #68]	@ (8004770 <prvCheckForValidListAndQueue+0x58>)
 800472a:	f7fd fdcd 	bl	80022c8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800472e:	4811      	ldr	r0, [pc, #68]	@ (8004774 <prvCheckForValidListAndQueue+0x5c>)
 8004730:	f7fd fdca 	bl	80022c8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004734:	4b10      	ldr	r3, [pc, #64]	@ (8004778 <prvCheckForValidListAndQueue+0x60>)
 8004736:	4a0e      	ldr	r2, [pc, #56]	@ (8004770 <prvCheckForValidListAndQueue+0x58>)
 8004738:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800473a:	4b10      	ldr	r3, [pc, #64]	@ (800477c <prvCheckForValidListAndQueue+0x64>)
 800473c:	4a0d      	ldr	r2, [pc, #52]	@ (8004774 <prvCheckForValidListAndQueue+0x5c>)
 800473e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004740:	2200      	movs	r2, #0
 8004742:	210c      	movs	r1, #12
 8004744:	200a      	movs	r0, #10
 8004746:	f7fd fedd 	bl	8002504 <xQueueGenericCreate>
 800474a:	4603      	mov	r3, r0
 800474c:	4a07      	ldr	r2, [pc, #28]	@ (800476c <prvCheckForValidListAndQueue+0x54>)
 800474e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004750:	4b06      	ldr	r3, [pc, #24]	@ (800476c <prvCheckForValidListAndQueue+0x54>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <prvCheckForValidListAndQueue+0x54>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4908      	ldr	r1, [pc, #32]	@ (8004780 <prvCheckForValidListAndQueue+0x68>)
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fb6c 	bl	8002e3c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004764:	f000 f9f4 	bl	8004b50 <vPortExitCritical>
    }
 8004768:	bf00      	nop
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000208 	.word	0x20000208
 8004770:	200001d8 	.word	0x200001d8
 8004774:	200001ec 	.word	0x200001ec
 8004778:	20000200 	.word	0x20000200
 800477c:	20000204 	.word	0x20000204
 8004780:	08007e14 	.word	0x08007e14

08004784 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3b04      	subs	r3, #4
 8004794:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800479c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3b04      	subs	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f023 0201 	bic.w	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3b04      	subs	r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80047b4:	4a0c      	ldr	r2, [pc, #48]	@ (80047e8 <pxPortInitialiseStack+0x64>)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3b14      	subs	r3, #20
 80047be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3b04      	subs	r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f06f 0202 	mvn.w	r2, #2
 80047d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3b20      	subs	r3, #32
 80047d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	080047ed 	.word	0x080047ed

080047ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80047f6:	4b13      	ldr	r3, [pc, #76]	@ (8004844 <prvTaskExitError+0x58>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d00b      	beq.n	8004818 <prvTaskExitError+0x2c>
        __asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
    }
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <prvTaskExitError+0x28>
        __asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60bb      	str	r3, [r7, #8]
    }
 800482a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800482c:	bf00      	nop
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0fc      	beq.n	800482e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000010 	.word	0x20000010
	...

08004850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <pxCurrentTCBConst2>)
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	f380 8809 	msr	PSP, r0
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8811 	msr	BASEPRI, r0
 800486a:	4770      	bx	lr
 800486c:	f3af 8000 	nop.w

08004870 <pxCurrentTCBConst2>:
 8004870:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004878:	4808      	ldr	r0, [pc, #32]	@ (800489c <prvPortStartFirstTask+0x24>)
 800487a:	6800      	ldr	r0, [r0, #0]
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f380 8808 	msr	MSP, r0
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f380 8814 	msr	CONTROL, r0
 800488a:	b662      	cpsie	i
 800488c:	b661      	cpsie	f
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	df00      	svc	0
 8004898:	bf00      	nop
 800489a:	0000      	.short	0x0000
 800489c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop

080048a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048aa:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <xPortStartScheduler+0x124>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a47      	ldr	r2, [pc, #284]	@ (80049cc <xPortStartScheduler+0x128>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10b      	bne.n	80048cc <xPortStartScheduler+0x28>
        __asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	613b      	str	r3, [r7, #16]
    }
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048cc:	4b3e      	ldr	r3, [pc, #248]	@ (80049c8 <xPortStartScheduler+0x124>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3f      	ldr	r2, [pc, #252]	@ (80049d0 <xPortStartScheduler+0x12c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10b      	bne.n	80048ee <xPortStartScheduler+0x4a>
        __asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	60fb      	str	r3, [r7, #12]
    }
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048ee:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <xPortStartScheduler+0x130>)
 80048f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	22ff      	movs	r2, #255	@ 0xff
 80048fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004910:	b2da      	uxtb	r2, r3
 8004912:	4b31      	ldr	r3, [pc, #196]	@ (80049d8 <xPortStartScheduler+0x134>)
 8004914:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004916:	4b31      	ldr	r3, [pc, #196]	@ (80049dc <xPortStartScheduler+0x138>)
 8004918:	2207      	movs	r2, #7
 800491a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800491c:	e009      	b.n	8004932 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800491e:	4b2f      	ldr	r3, [pc, #188]	@ (80049dc <xPortStartScheduler+0x138>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3b01      	subs	r3, #1
 8004924:	4a2d      	ldr	r2, [pc, #180]	@ (80049dc <xPortStartScheduler+0x138>)
 8004926:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	b2db      	uxtb	r3, r3
 8004930:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493a:	2b80      	cmp	r3, #128	@ 0x80
 800493c:	d0ef      	beq.n	800491e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800493e:	4b27      	ldr	r3, [pc, #156]	@ (80049dc <xPortStartScheduler+0x138>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f1c3 0307 	rsb	r3, r3, #7
 8004946:	2b04      	cmp	r3, #4
 8004948:	d00b      	beq.n	8004962 <xPortStartScheduler+0xbe>
        __asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	60bb      	str	r3, [r7, #8]
    }
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	e7fd      	b.n	800495e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004962:	4b1e      	ldr	r3, [pc, #120]	@ (80049dc <xPortStartScheduler+0x138>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <xPortStartScheduler+0x138>)
 800496a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800496c:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <xPortStartScheduler+0x138>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004974:	4a19      	ldr	r2, [pc, #100]	@ (80049dc <xPortStartScheduler+0x138>)
 8004976:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004980:	4b17      	ldr	r3, [pc, #92]	@ (80049e0 <xPortStartScheduler+0x13c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a16      	ldr	r2, [pc, #88]	@ (80049e0 <xPortStartScheduler+0x13c>)
 8004986:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800498a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800498c:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <xPortStartScheduler+0x13c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a13      	ldr	r2, [pc, #76]	@ (80049e0 <xPortStartScheduler+0x13c>)
 8004992:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004996:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004998:	f000 f968 	bl	8004c6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800499c:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <xPortStartScheduler+0x140>)
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80049a2:	f000 f987 	bl	8004cb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <xPortStartScheduler+0x144>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a0f      	ldr	r2, [pc, #60]	@ (80049e8 <xPortStartScheduler+0x144>)
 80049ac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049b0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80049b2:	f7ff ff61 	bl	8004878 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80049b6:	f7fe fea7 	bl	8003708 <vTaskSwitchContext>
    prvTaskExitError();
 80049ba:	f7ff ff17 	bl	80047ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	e000ed00 	.word	0xe000ed00
 80049cc:	410fc271 	.word	0x410fc271
 80049d0:	410fc270 	.word	0x410fc270
 80049d4:	e000e400 	.word	0xe000e400
 80049d8:	20000214 	.word	0x20000214
 80049dc:	20000218 	.word	0x20000218
 80049e0:	e000ed20 	.word	0xe000ed20
 80049e4:	20000010 	.word	0x20000010
 80049e8:	e000ef34 	.word	0xe000ef34

080049ec <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049f2:	4b38      	ldr	r3, [pc, #224]	@ (8004ad4 <vInitPrioGroupValue+0xe8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a38      	ldr	r2, [pc, #224]	@ (8004ad8 <vInitPrioGroupValue+0xec>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d10b      	bne.n	8004a14 <vInitPrioGroupValue+0x28>
        __asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	613b      	str	r3, [r7, #16]
    }
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a14:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad4 <vInitPrioGroupValue+0xe8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a30      	ldr	r2, [pc, #192]	@ (8004adc <vInitPrioGroupValue+0xf0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10b      	bne.n	8004a36 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60fb      	str	r3, [r7, #12]
    }
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a36:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae0 <vInitPrioGroupValue+0xf4>)
 8004a38:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	22ff      	movs	r2, #255	@ 0xff
 8004a46:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ae4 <vInitPrioGroupValue+0xf8>)
 8004a5c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ae8 <vInitPrioGroupValue+0xfc>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a64:	e009      	b.n	8004a7a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004a66:	4b20      	ldr	r3, [pc, #128]	@ (8004ae8 <vInitPrioGroupValue+0xfc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae8 <vInitPrioGroupValue+0xfc>)
 8004a6e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a82:	2b80      	cmp	r3, #128	@ 0x80
 8004a84:	d0ef      	beq.n	8004a66 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a86:	4b18      	ldr	r3, [pc, #96]	@ (8004ae8 <vInitPrioGroupValue+0xfc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1c3 0307 	rsb	r3, r3, #7
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d00b      	beq.n	8004aaa <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60bb      	str	r3, [r7, #8]
    }
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <vInitPrioGroupValue+0xfc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae8 <vInitPrioGroupValue+0xfc>)
 8004ab2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <vInitPrioGroupValue+0xfc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004abc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae8 <vInitPrioGroupValue+0xfc>)
 8004abe:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004ac8:	bf00      	nop
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00
 8004ad8:	410fc271 	.word	0x410fc271
 8004adc:	410fc270 	.word	0x410fc270
 8004ae0:	e000e400 	.word	0xe000e400
 8004ae4:	20000214 	.word	0x20000214
 8004ae8:	20000218 	.word	0x20000218

08004aec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
        __asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	607b      	str	r3, [r7, #4]
    }
 8004b04:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004b06:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <vPortEnterCritical+0x5c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b48 <vPortEnterCritical+0x5c>)
 8004b0e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b10:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <vPortEnterCritical+0x5c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d110      	bne.n	8004b3a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b18:	4b0c      	ldr	r3, [pc, #48]	@ (8004b4c <vPortEnterCritical+0x60>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <vPortEnterCritical+0x4e>
        __asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	603b      	str	r3, [r7, #0]
    }
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	e7fd      	b.n	8004b36 <vPortEnterCritical+0x4a>
    }
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000010 	.word	0x20000010
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004b56:	4b12      	ldr	r3, [pc, #72]	@ (8004ba0 <vPortExitCritical+0x50>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <vPortExitCritical+0x26>
        __asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	607b      	str	r3, [r7, #4]
    }
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004b76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <vPortExitCritical+0x50>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	4a08      	ldr	r2, [pc, #32]	@ (8004ba0 <vPortExitCritical+0x50>)
 8004b7e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004b80:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <vPortExitCritical+0x50>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <vPortExitCritical+0x44>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f383 8811 	msr	BASEPRI, r3
    }
 8004b92:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000010 	.word	0x20000010
	...

08004bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004bb0:	f3ef 8009 	mrs	r0, PSP
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <pxCurrentTCBConst>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	f01e 0f10 	tst.w	lr, #16
 8004bc0:	bf08      	it	eq
 8004bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004bd4:	f380 8811 	msr	BASEPRI, r0
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f7fe fd92 	bl	8003708 <vTaskSwitchContext>
 8004be4:	f04f 0000 	mov.w	r0, #0
 8004be8:	f380 8811 	msr	BASEPRI, r0
 8004bec:	bc09      	pop	{r0, r3}
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	6808      	ldr	r0, [r1, #0]
 8004bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf6:	f01e 0f10 	tst.w	lr, #16
 8004bfa:	bf08      	it	eq
 8004bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c00:	f380 8809 	msr	PSP, r0
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst>:
 8004c10:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
    }
 8004c30:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004c32:	f002 fcf3 	bl	800761c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004c36:	f7fe fca9 	bl	800358c <xTaskIncrementTick>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d006      	beq.n	8004c4e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004c40:	f002 fd4a 	bl	80076d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c44:	4b08      	ldr	r3, [pc, #32]	@ (8004c68 <SysTick_Handler+0x50>)
 8004c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e001      	b.n	8004c52 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004c4e:	f002 fd27 	bl	80076a0 <SEGGER_SYSVIEW_RecordExitISR>
 8004c52:	2300      	movs	r3, #0
 8004c54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f383 8811 	msr	BASEPRI, r3
    }
 8004c5c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <vPortSetupTimerInterrupt+0x34>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca4 <vPortSetupTimerInterrupt+0x38>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <vPortSetupTimerInterrupt+0x3c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0a      	ldr	r2, [pc, #40]	@ (8004cac <vPortSetupTimerInterrupt+0x40>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	4a09      	ldr	r2, [pc, #36]	@ (8004cb0 <vPortSetupTimerInterrupt+0x44>)
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ca0 <vPortSetupTimerInterrupt+0x34>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	e000e010 	.word	0xe000e010
 8004ca4:	e000e018 	.word	0xe000e018
 8004ca8:	20000000 	.word	0x20000000
 8004cac:	10624dd3 	.word	0x10624dd3
 8004cb0:	e000e014 	.word	0xe000e014

08004cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004cc4 <vPortEnableVFP+0x10>
 8004cb8:	6801      	ldr	r1, [r0, #0]
 8004cba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004cbe:	6001      	str	r1, [r0, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	0000      	.short	0x0000
 8004cc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop

08004ccc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004cd2:	f3ef 8305 	mrs	r3, IPSR
 8004cd6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	d915      	bls.n	8004d0a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cde:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <vPortValidateInterruptPriority+0x74>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ce8:	4b16      	ldr	r3, [pc, #88]	@ (8004d44 <vPortValidateInterruptPriority+0x78>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	7afa      	ldrb	r2, [r7, #11]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d20b      	bcs.n	8004d0a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	607b      	str	r3, [r7, #4]
    }
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <vPortValidateInterruptPriority+0x7c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d12:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <vPortValidateInterruptPriority+0x80>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d90b      	bls.n	8004d32 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	603b      	str	r3, [r7, #0]
    }
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <vPortValidateInterruptPriority+0x62>
    }
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000e3f0 	.word	0xe000e3f0
 8004d44:	20000214 	.word	0x20000214
 8004d48:	e000ed0c 	.word	0xe000ed0c
 8004d4c:	20000218 	.word	0x20000218

08004d50 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	@ 0x28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004d5c:	f7fe fb44 	bl	80033e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004d60:	4b66      	ldr	r3, [pc, #408]	@ (8004efc <pvPortMalloc+0x1ac>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004d68:	f000 f938 	bl	8004fdc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d6c:	4b64      	ldr	r3, [pc, #400]	@ (8004f00 <pvPortMalloc+0x1b0>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 80a9 	bne.w	8004ecc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02e      	beq.n	8004dde <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004d80:	2208      	movs	r2, #8
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d228      	bcs.n	8004dde <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d022      	beq.n	8004de4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f023 0307 	bic.w	r3, r3, #7
 8004da4:	3308      	adds	r3, #8
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d215      	bcs.n	8004dd8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f023 0307 	bic.w	r3, r3, #7
 8004db2:	3308      	adds	r3, #8
 8004db4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d011      	beq.n	8004de4 <pvPortMalloc+0x94>
        __asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	617b      	str	r3, [r7, #20]
    }
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ddc:	e002      	b.n	8004de4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	e000      	b.n	8004de6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004de4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d06f      	beq.n	8004ecc <pvPortMalloc+0x17c>
 8004dec:	4b45      	ldr	r3, [pc, #276]	@ (8004f04 <pvPortMalloc+0x1b4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d86a      	bhi.n	8004ecc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004df6:	4b44      	ldr	r3, [pc, #272]	@ (8004f08 <pvPortMalloc+0x1b8>)
 8004df8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004dfa:	4b43      	ldr	r3, [pc, #268]	@ (8004f08 <pvPortMalloc+0x1b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e00:	e004      	b.n	8004e0c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d903      	bls.n	8004e1e <pvPortMalloc+0xce>
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f1      	bne.n	8004e02 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e1e:	4b37      	ldr	r3, [pc, #220]	@ (8004efc <pvPortMalloc+0x1ac>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d051      	beq.n	8004ecc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	4413      	add	r3, r2
 8004e30:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	1ad2      	subs	r2, r2, r3
 8004e42:	2308      	movs	r3, #8
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d920      	bls.n	8004e8c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00b      	beq.n	8004e74 <pvPortMalloc+0x124>
        __asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	613b      	str	r3, [r7, #16]
    }
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e86:	69b8      	ldr	r0, [r7, #24]
 8004e88:	f000 f90a 	bl	80050a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <pvPortMalloc+0x1b4>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	4a1b      	ldr	r2, [pc, #108]	@ (8004f04 <pvPortMalloc+0x1b4>)
 8004e98:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f04 <pvPortMalloc+0x1b4>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <pvPortMalloc+0x1bc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d203      	bcs.n	8004eae <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ea6:	4b17      	ldr	r3, [pc, #92]	@ (8004f04 <pvPortMalloc+0x1b4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <pvPortMalloc+0x1bc>)
 8004eac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	4b13      	ldr	r3, [pc, #76]	@ (8004f00 <pvPortMalloc+0x1b0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ec2:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <pvPortMalloc+0x1c0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	4a11      	ldr	r2, [pc, #68]	@ (8004f10 <pvPortMalloc+0x1c0>)
 8004eca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ecc:	f7fe fa9a 	bl	8003404 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <pvPortMalloc+0x1a2>
        __asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	60fb      	str	r3, [r7, #12]
    }
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <pvPortMalloc+0x19e>
    return pvReturn;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3728      	adds	r7, #40	@ 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20012e24 	.word	0x20012e24
 8004f00:	20012e38 	.word	0x20012e38
 8004f04:	20012e28 	.word	0x20012e28
 8004f08:	20012e1c 	.word	0x20012e1c
 8004f0c:	20012e2c 	.word	0x20012e2c
 8004f10:	20012e30 	.word	0x20012e30

08004f14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d04f      	beq.n	8004fc6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f26:	2308      	movs	r3, #8
 8004f28:	425b      	negs	r3, r3
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	4b25      	ldr	r3, [pc, #148]	@ (8004fd0 <vPortFree+0xbc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <vPortFree+0x46>
        __asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60fb      	str	r3, [r7, #12]
    }
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <vPortFree+0x66>
        __asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	60bb      	str	r3, [r7, #8]
    }
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <vPortFree+0xbc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01e      	beq.n	8004fc6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d11a      	bne.n	8004fc6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd0 <vPortFree+0xbc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004fa0:	f7fe fa22 	bl	80033e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <vPortFree+0xc0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4413      	add	r3, r2
 8004fae:	4a09      	ldr	r2, [pc, #36]	@ (8004fd4 <vPortFree+0xc0>)
 8004fb0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fb2:	6938      	ldr	r0, [r7, #16]
 8004fb4:	f000 f874 	bl	80050a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004fb8:	4b07      	ldr	r3, [pc, #28]	@ (8004fd8 <vPortFree+0xc4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a06      	ldr	r2, [pc, #24]	@ (8004fd8 <vPortFree+0xc4>)
 8004fc0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004fc2:	f7fe fa1f 	bl	8003404 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004fc6:	bf00      	nop
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20012e38 	.word	0x20012e38
 8004fd4:	20012e28 	.word	0x20012e28
 8004fd8:	20012e34 	.word	0x20012e34

08004fdc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fe2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004fe6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004fe8:	4b27      	ldr	r3, [pc, #156]	@ (8005088 <prvHeapInit+0xac>)
 8004fea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3307      	adds	r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0307 	bic.w	r3, r3, #7
 8005002:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	4a1f      	ldr	r2, [pc, #124]	@ (8005088 <prvHeapInit+0xac>)
 800500c:	4413      	add	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005014:	4a1d      	ldr	r2, [pc, #116]	@ (800508c <prvHeapInit+0xb0>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800501a:	4b1c      	ldr	r3, [pc, #112]	@ (800508c <prvHeapInit+0xb0>)
 800501c:	2200      	movs	r2, #0
 800501e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4413      	add	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005028:	2208      	movs	r2, #8
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <prvHeapInit+0xb4>)
 800503c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800503e:	4b14      	ldr	r3, [pc, #80]	@ (8005090 <prvHeapInit+0xb4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <prvHeapInit+0xb4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800505c:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <prvHeapInit+0xb4>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a0a      	ldr	r2, [pc, #40]	@ (8005094 <prvHeapInit+0xb8>)
 800506a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4a09      	ldr	r2, [pc, #36]	@ (8005098 <prvHeapInit+0xbc>)
 8005072:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005074:	4b09      	ldr	r3, [pc, #36]	@ (800509c <prvHeapInit+0xc0>)
 8005076:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800507a:	601a      	str	r2, [r3, #0]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	2000021c 	.word	0x2000021c
 800508c:	20012e1c 	.word	0x20012e1c
 8005090:	20012e24 	.word	0x20012e24
 8005094:	20012e2c 	.word	0x20012e2c
 8005098:	20012e28 	.word	0x20012e28
 800509c:	20012e38 	.word	0x20012e38

080050a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050a8:	4b28      	ldr	r3, [pc, #160]	@ (800514c <prvInsertBlockIntoFreeList+0xac>)
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	e002      	b.n	80050b4 <prvInsertBlockIntoFreeList+0x14>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d8f7      	bhi.n	80050ae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	4413      	add	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d108      	bne.n	80050e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	441a      	add	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	441a      	add	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d118      	bne.n	8005128 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <prvInsertBlockIntoFreeList+0xb0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d00d      	beq.n	800511e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	441a      	add	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e008      	b.n	8005130 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800511e:	4b0c      	ldr	r3, [pc, #48]	@ (8005150 <prvInsertBlockIntoFreeList+0xb0>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e003      	b.n	8005130 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	429a      	cmp	r2, r3
 8005136:	d002      	beq.n	800513e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20012e1c 	.word	0x20012e1c
 8005150:	20012e24 	.word	0x20012e24

08005154 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005158:	4803      	ldr	r0, [pc, #12]	@ (8005168 <_cbSendSystemDesc+0x14>)
 800515a:	f002 fa09 	bl	8007570 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800515e:	4803      	ldr	r0, [pc, #12]	@ (800516c <_cbSendSystemDesc+0x18>)
 8005160:	f002 fa06 	bl	8007570 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005164:	bf00      	nop
 8005166:	bd80      	pop	{r7, pc}
 8005168:	08007e1c 	.word	0x08007e1c
 800516c:	08007e60 	.word	0x08007e60

08005170 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005174:	4b06      	ldr	r3, [pc, #24]	@ (8005190 <SEGGER_SYSVIEW_Conf+0x20>)
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	4b05      	ldr	r3, [pc, #20]	@ (8005190 <SEGGER_SYSVIEW_Conf+0x20>)
 800517a:	6819      	ldr	r1, [r3, #0]
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <SEGGER_SYSVIEW_Conf+0x24>)
 800517e:	4a06      	ldr	r2, [pc, #24]	@ (8005198 <SEGGER_SYSVIEW_Conf+0x28>)
 8005180:	f001 fcc4 	bl	8006b0c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005184:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005188:	f001 fd04 	bl	8006b94 <SEGGER_SYSVIEW_SetRAMBase>
}
 800518c:	bf00      	nop
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000000 	.word	0x20000000
 8005194:	08005155 	.word	0x08005155
 8005198:	08007f00 	.word	0x08007f00

0800519c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80051a2:	2300      	movs	r3, #0
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	e033      	b.n	8005210 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80051a8:	491e      	ldr	r1, [pc, #120]	@ (8005224 <_cbSendTaskList+0x88>)
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	491a      	ldr	r1, [pc, #104]	@ (8005224 <_cbSendTaskList+0x88>)
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	3304      	adds	r3, #4
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	4c16      	ldr	r4, [pc, #88]	@ (8005224 <_cbSendTaskList+0x88>)
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4423      	add	r3, r4
 80051d8:	3308      	adds	r3, #8
 80051da:	681c      	ldr	r4, [r3, #0]
 80051dc:	4d11      	ldr	r5, [pc, #68]	@ (8005224 <_cbSendTaskList+0x88>)
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	442b      	add	r3, r5
 80051ea:	330c      	adds	r3, #12
 80051ec:	681d      	ldr	r5, [r3, #0]
 80051ee:	4e0d      	ldr	r6, [pc, #52]	@ (8005224 <_cbSendTaskList+0x88>)
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4433      	add	r3, r6
 80051fc:	3310      	adds	r3, #16
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	462b      	mov	r3, r5
 8005204:	4622      	mov	r2, r4
 8005206:	f000 f979 	bl	80054fc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3301      	adds	r3, #1
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <_cbSendTaskList+0x8c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3c6      	bcc.n	80051a8 <_cbSendTaskList+0xc>
  }
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005224:	20012e3c 	.word	0x20012e3c
 8005228:	20012edc 	.word	0x20012edc

0800522c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800522c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005234:	f7fe f998 	bl	8003568 <xTaskGetTickCountFromISR>
 8005238:	4603      	mov	r3, r0
 800523a:	2200      	movs	r2, #0
 800523c:	469a      	mov	sl, r3
 800523e:	4693      	mov	fp, r2
 8005240:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005244:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	f04f 0a00 	mov.w	sl, #0
 8005250:	f04f 0b00 	mov.w	fp, #0
 8005254:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005258:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800525c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005260:	4652      	mov	r2, sl
 8005262:	465b      	mov	r3, fp
 8005264:	1a14      	subs	r4, r2, r0
 8005266:	eb63 0501 	sbc.w	r5, r3, r1
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	00ab      	lsls	r3, r5, #2
 8005274:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005278:	00a2      	lsls	r2, r4, #2
 800527a:	4614      	mov	r4, r2
 800527c:	461d      	mov	r5, r3
 800527e:	eb14 0800 	adds.w	r8, r4, r0
 8005282:	eb45 0901 	adc.w	r9, r5, r1
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800529a:	4690      	mov	r8, r2
 800529c:	4699      	mov	r9, r3
 800529e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80052a2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080052b4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80052c2:	2205      	movs	r2, #5
 80052c4:	492b      	ldr	r1, [pc, #172]	@ (8005374 <SYSVIEW_AddTask+0xc0>)
 80052c6:	68b8      	ldr	r0, [r7, #8]
 80052c8:	f002 fcee 	bl	8007ca8 <memcmp>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d04b      	beq.n	800536a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80052d2:	4b29      	ldr	r3, [pc, #164]	@ (8005378 <SYSVIEW_AddTask+0xc4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b07      	cmp	r3, #7
 80052d8:	d903      	bls.n	80052e2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80052da:	4828      	ldr	r0, [pc, #160]	@ (800537c <SYSVIEW_AddTask+0xc8>)
 80052dc:	f002 fc5a 	bl	8007b94 <SEGGER_SYSVIEW_Warn>
    return;
 80052e0:	e044      	b.n	800536c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80052e2:	4b25      	ldr	r3, [pc, #148]	@ (8005378 <SYSVIEW_AddTask+0xc4>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4926      	ldr	r1, [pc, #152]	@ (8005380 <SYSVIEW_AddTask+0xcc>)
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80052f6:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <SYSVIEW_AddTask+0xc4>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4921      	ldr	r1, [pc, #132]	@ (8005380 <SYSVIEW_AddTask+0xcc>)
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	3304      	adds	r3, #4
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800530c:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <SYSVIEW_AddTask+0xc4>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	491b      	ldr	r1, [pc, #108]	@ (8005380 <SYSVIEW_AddTask+0xcc>)
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	3308      	adds	r3, #8
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005322:	4b15      	ldr	r3, [pc, #84]	@ (8005378 <SYSVIEW_AddTask+0xc4>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4916      	ldr	r1, [pc, #88]	@ (8005380 <SYSVIEW_AddTask+0xcc>)
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	330c      	adds	r3, #12
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005338:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <SYSVIEW_AddTask+0xc4>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4910      	ldr	r1, [pc, #64]	@ (8005380 <SYSVIEW_AddTask+0xcc>)
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3310      	adds	r3, #16
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800534e:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <SYSVIEW_AddTask+0xc4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3301      	adds	r3, #1
 8005354:	4a08      	ldr	r2, [pc, #32]	@ (8005378 <SYSVIEW_AddTask+0xc4>)
 8005356:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f8ca 	bl	80054fc <SYSVIEW_SendTaskInfo>
 8005368:	e000      	b.n	800536c <SYSVIEW_AddTask+0xb8>
    return;
 800536a:	bf00      	nop

}
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	08007e70 	.word	0x08007e70
 8005378:	20012edc 	.word	0x20012edc
 800537c:	08007e78 	.word	0x08007e78
 8005380:	20012e3c 	.word	0x20012e3c

08005384 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800538c:	4b59      	ldr	r3, [pc, #356]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80ab 	beq.w	80054ec <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e00d      	b.n	80053b8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800539c:	4956      	ldr	r1, [pc, #344]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d008      	beq.n	80053c4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	4b4e      	ldr	r3, [pc, #312]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3ec      	bcc.n	800539c <SYSVIEW_DeleteTask+0x18>
 80053c2:	e000      	b.n	80053c6 <SYSVIEW_DeleteTask+0x42>
      break;
 80053c4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80053c6:	4b4b      	ldr	r3, [pc, #300]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d111      	bne.n	80053f6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4a46      	ldr	r2, [pc, #280]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 80053de:	4413      	add	r3, r2
 80053e0:	2214      	movs	r2, #20
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 fc6f 	bl	8007cc8 <memset>
    _NumTasks--;
 80053ea:	4b42      	ldr	r3, [pc, #264]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	4a40      	ldr	r2, [pc, #256]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	e07b      	b.n	80054ee <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80053f6:	4b3f      	ldr	r3, [pc, #252]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d276      	bcs.n	80054ee <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005400:	4b3c      	ldr	r3, [pc, #240]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	1e5a      	subs	r2, r3, #1
 8005406:	493c      	ldr	r1, [pc, #240]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	4838      	ldr	r0, [pc, #224]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4403      	add	r3, r0
 8005422:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005424:	4b33      	ldr	r3, [pc, #204]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	1e5a      	subs	r2, r3, #1
 800542a:	4933      	ldr	r1, [pc, #204]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	3304      	adds	r3, #4
 8005438:	6819      	ldr	r1, [r3, #0]
 800543a:	482f      	ldr	r0, [pc, #188]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4403      	add	r3, r0
 8005448:	3304      	adds	r3, #4
 800544a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800544c:	4b29      	ldr	r3, [pc, #164]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	1e5a      	subs	r2, r3, #1
 8005452:	4929      	ldr	r1, [pc, #164]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	3308      	adds	r3, #8
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	4825      	ldr	r0, [pc, #148]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4403      	add	r3, r0
 8005470:	3308      	adds	r3, #8
 8005472:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005474:	4b1f      	ldr	r3, [pc, #124]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	491f      	ldr	r1, [pc, #124]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	330c      	adds	r3, #12
 8005488:	6819      	ldr	r1, [r3, #0]
 800548a:	481b      	ldr	r0, [pc, #108]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4403      	add	r3, r0
 8005498:	330c      	adds	r3, #12
 800549a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800549c:	4b15      	ldr	r3, [pc, #84]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	1e5a      	subs	r2, r3, #1
 80054a2:	4915      	ldr	r1, [pc, #84]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	3310      	adds	r3, #16
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	4811      	ldr	r0, [pc, #68]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4403      	add	r3, r0
 80054c0:	3310      	adds	r3, #16
 80054c2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80054c4:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4a09      	ldr	r2, [pc, #36]	@ (80054f8 <SYSVIEW_DeleteTask+0x174>)
 80054d4:	4413      	add	r3, r2
 80054d6:	2214      	movs	r2, #20
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f002 fbf4 	bl	8007cc8 <memset>
    _NumTasks--;
 80054e0:	4b04      	ldr	r3, [pc, #16]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	4a03      	ldr	r2, [pc, #12]	@ (80054f4 <SYSVIEW_DeleteTask+0x170>)
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e000      	b.n	80054ee <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80054ec:	bf00      	nop
  }
}
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20012edc 	.word	0x20012edc
 80054f8:	20012e3c 	.word	0x20012e3c

080054fc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	@ 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800550a:	f107 0314 	add.w	r3, r7, #20
 800550e:	2214      	movs	r2, #20
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f002 fbd8 	bl	8007cc8 <memset>
  TaskInfo.TaskID     = TaskID;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800552c:	f107 0314 	add.w	r3, r7, #20
 8005530:	4618      	mov	r0, r3
 8005532:	f001 ff25 	bl	8007380 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005536:	bf00      	nop
 8005538:	3728      	adds	r7, #40	@ 0x28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <__NVIC_EnableIRQ>:
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554e:	2b00      	cmp	r3, #0
 8005550:	db0b      	blt.n	800556a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	f003 021f 	and.w	r2, r3, #31
 8005558:	4907      	ldr	r1, [pc, #28]	@ (8005578 <__NVIC_EnableIRQ+0x38>)
 800555a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	2001      	movs	r0, #1
 8005562:	fa00 f202 	lsl.w	r2, r0, r2
 8005566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	e000e100 	.word	0xe000e100

0800557c <__NVIC_SetPriority>:
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	6039      	str	r1, [r7, #0]
 8005586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558c:	2b00      	cmp	r3, #0
 800558e:	db0a      	blt.n	80055a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	b2da      	uxtb	r2, r3
 8005594:	490c      	ldr	r1, [pc, #48]	@ (80055c8 <__NVIC_SetPriority+0x4c>)
 8005596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559a:	0112      	lsls	r2, r2, #4
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	440b      	add	r3, r1
 80055a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80055a4:	e00a      	b.n	80055bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	4908      	ldr	r1, [pc, #32]	@ (80055cc <__NVIC_SetPriority+0x50>)
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	3b04      	subs	r3, #4
 80055b4:	0112      	lsls	r2, r2, #4
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	440b      	add	r3, r1
 80055ba:	761a      	strb	r2, [r3, #24]
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	e000e100 	.word	0xe000e100
 80055cc:	e000ed00 	.word	0xe000ed00

080055d0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80055d6:	f002 fb39 	bl	8007c4c <SEGGER_SYSVIEW_IsStarted>
 80055da:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80055e2:	f001 fd51 	bl	8007088 <SEGGER_SYSVIEW_Start>
  }
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80055fa:	4b0c      	ldr	r3, [pc, #48]	@ (800562c <_cbOnUARTRx+0x3c>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d806      	bhi.n	8005610 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005602:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <_cbOnUARTRx+0x3c>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	b2da      	uxtb	r2, r3
 800560a:	4b08      	ldr	r3, [pc, #32]	@ (800562c <_cbOnUARTRx+0x3c>)
 800560c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800560e:	e009      	b.n	8005624 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005610:	f7ff ffde 	bl	80055d0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005614:	4b05      	ldr	r3, [pc, #20]	@ (800562c <_cbOnUARTRx+0x3c>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4618      	mov	r0, r3
 800561a:	1dfb      	adds	r3, r7, #7
 800561c:	2201      	movs	r2, #1
 800561e:	4619      	mov	r1, r3
 8005620:	f000 fb9a 	bl	8005d58 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005624:	bf00      	nop
}
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000014 	.word	0x20000014

08005630 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005638:	4b14      	ldr	r3, [pc, #80]	@ (800568c <_cbOnUARTTx+0x5c>)
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d80f      	bhi.n	8005660 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005640:	4b12      	ldr	r3, [pc, #72]	@ (800568c <_cbOnUARTTx+0x5c>)
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	461a      	mov	r2, r3
 8005646:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <_cbOnUARTTx+0x60>)
 8005648:	5c9a      	ldrb	r2, [r3, r2]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800564e:	4b0f      	ldr	r3, [pc, #60]	@ (800568c <_cbOnUARTTx+0x5c>)
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	3301      	adds	r3, #1
 8005654:	b2da      	uxtb	r2, r3
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <_cbOnUARTTx+0x5c>)
 8005658:	705a      	strb	r2, [r3, #1]
    r = 1;
 800565a:	2301      	movs	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800565e:	e00f      	b.n	8005680 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005660:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <_cbOnUARTTx+0x5c>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fa19 	bl	8005aa0 <SEGGER_RTT_ReadUpBufferNoLock>
 800566e:	4603      	mov	r3, r0
 8005670:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	da02      	bge.n	800567e <_cbOnUARTTx+0x4e>
    r = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e000      	b.n	8005680 <_cbOnUARTTx+0x50>
  }
Done:
 800567e:	bf00      	nop
  return r;
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000014 	.word	0x20000014
 8005690:	08007f08 	.word	0x08007f08

08005694 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800569c:	4a04      	ldr	r2, [pc, #16]	@ (80056b0 <SEGGER_UART_init+0x1c>)
 800569e:	4905      	ldr	r1, [pc, #20]	@ (80056b4 <SEGGER_UART_init+0x20>)
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f863 	bl	800576c <HIF_UART_Init>
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	080055f1 	.word	0x080055f1
 80056b4:	08005631 	.word	0x08005631

080056b8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80056be:	4b1e      	ldr	r3, [pc, #120]	@ (8005738 <USART2_IRQHandler+0x80>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d011      	beq.n	80056f2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80056ce:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <USART2_IRQHandler+0x84>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 030b 	and.w	r3, r3, #11
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d108      	bne.n	80056f2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80056e0:	4b17      	ldr	r3, [pc, #92]	@ (8005740 <USART2_IRQHandler+0x88>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80056e8:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <USART2_IRQHandler+0x88>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	79fa      	ldrb	r2, [r7, #7]
 80056ee:	4610      	mov	r0, r2
 80056f0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01a      	beq.n	8005732 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80056fc:	4b11      	ldr	r3, [pc, #68]	@ (8005744 <USART2_IRQHandler+0x8c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d015      	beq.n	8005730 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005704:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <USART2_IRQHandler+0x8c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	1dfa      	adds	r2, r7, #7
 800570a:	4610      	mov	r0, r2
 800570c:	4798      	blx	r3
 800570e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005716:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <USART2_IRQHandler+0x90>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a0b      	ldr	r2, [pc, #44]	@ (8005748 <USART2_IRQHandler+0x90>)
 800571c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e006      	b.n	8005732 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <USART2_IRQHandler+0x80>)
 8005726:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005728:	79fa      	ldrb	r2, [r7, #7]
 800572a:	4b04      	ldr	r3, [pc, #16]	@ (800573c <USART2_IRQHandler+0x84>)
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e000      	b.n	8005732 <USART2_IRQHandler+0x7a>
      return;
 8005730:	bf00      	nop
    }
  }
}
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40004400 	.word	0x40004400
 800573c:	40004404 	.word	0x40004404
 8005740:	20012ee0 	.word	0x20012ee0
 8005744:	20012ee4 	.word	0x20012ee4
 8005748:	4000440c 	.word	0x4000440c

0800574c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005750:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a04      	ldr	r2, [pc, #16]	@ (8005768 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800575a:	6013      	str	r3, [r2, #0]
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	4000440c 	.word	0x4000440c

0800576c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005778:	4b2e      	ldr	r3, [pc, #184]	@ (8005834 <HIF_UART_Init+0xc8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2d      	ldr	r2, [pc, #180]	@ (8005834 <HIF_UART_Init+0xc8>)
 800577e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005782:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005784:	4b2c      	ldr	r3, [pc, #176]	@ (8005838 <HIF_UART_Init+0xcc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2b      	ldr	r2, [pc, #172]	@ (8005838 <HIF_UART_Init+0xcc>)
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005790:	4b2a      	ldr	r3, [pc, #168]	@ (800583c <HIF_UART_Init+0xd0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800579c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80057a4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80057a6:	4a25      	ldr	r2, [pc, #148]	@ (800583c <HIF_UART_Init+0xd0>)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80057ac:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <HIF_UART_Init+0xd4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057b8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80057c0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80057c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005840 <HIF_UART_Init+0xd4>)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80057c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005844 <HIF_UART_Init+0xd8>)
 80057ca:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80057ce:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80057d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <HIF_UART_Init+0xdc>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80057d6:	4b1d      	ldr	r3, [pc, #116]	@ (800584c <HIF_UART_Init+0xe0>)
 80057d8:	2280      	movs	r2, #128	@ 0x80
 80057da:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80057e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <HIF_UART_Init+0xe4>)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fa:	d302      	bcc.n	8005802 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80057fc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005800:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d004      	beq.n	8005812 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	4a11      	ldr	r2, [pc, #68]	@ (8005854 <HIF_UART_Init+0xe8>)
 800580e:	b29b      	uxth	r3, r3
 8005810:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005812:	4a11      	ldr	r2, [pc, #68]	@ (8005858 <HIF_UART_Init+0xec>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005818:	4a10      	ldr	r2, [pc, #64]	@ (800585c <HIF_UART_Init+0xf0>)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800581e:	2106      	movs	r1, #6
 8005820:	2026      	movs	r0, #38	@ 0x26
 8005822:	f7ff feab 	bl	800557c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005826:	2026      	movs	r0, #38	@ 0x26
 8005828:	f7ff fe8a 	bl	8005540 <__NVIC_EnableIRQ>
}
 800582c:	bf00      	nop
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40023840 	.word	0x40023840
 8005838:	40023830 	.word	0x40023830
 800583c:	40020020 	.word	0x40020020
 8005840:	40020000 	.word	0x40020000
 8005844:	4000440c 	.word	0x4000440c
 8005848:	40004410 	.word	0x40004410
 800584c:	40004414 	.word	0x40004414
 8005850:	0501bd00 	.word	0x0501bd00
 8005854:	40004408 	.word	0x40004408
 8005858:	20012ee0 	.word	0x20012ee0
 800585c:	20012ee4 	.word	0x20012ee4

08005860 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005866:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <_DoInit+0x98>)
 8005868:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2203      	movs	r2, #3
 800586e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2203      	movs	r2, #3
 8005874:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a20      	ldr	r2, [pc, #128]	@ (80058fc <_DoInit+0x9c>)
 800587a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a20      	ldr	r2, [pc, #128]	@ (8005900 <_DoInit+0xa0>)
 8005880:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005888:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a17      	ldr	r2, [pc, #92]	@ (80058fc <_DoInit+0x9c>)
 80058a0:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a17      	ldr	r2, [pc, #92]	@ (8005904 <_DoInit+0xa4>)
 80058a6:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2210      	movs	r2, #16
 80058ac:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3307      	adds	r3, #7
 80058c4:	4a10      	ldr	r2, [pc, #64]	@ (8005908 <_DoInit+0xa8>)
 80058c6:	6810      	ldr	r0, [r2, #0]
 80058c8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058ca:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a0e      	ldr	r2, [pc, #56]	@ (800590c <_DoInit+0xac>)
 80058d2:	6810      	ldr	r0, [r2, #0]
 80058d4:	6018      	str	r0, [r3, #0]
 80058d6:	8891      	ldrh	r1, [r2, #4]
 80058d8:	7992      	ldrb	r2, [r2, #6]
 80058da:	8099      	strh	r1, [r3, #4]
 80058dc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058de:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058e8:	f3bf 8f5f 	dmb	sy
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20012ee8 	.word	0x20012ee8
 80058fc:	08007ec8 	.word	0x08007ec8
 8005900:	20012f90 	.word	0x20012f90
 8005904:	20013390 	.word	0x20013390
 8005908:	08007ed4 	.word	0x08007ed4
 800590c:	08007ed8 	.word	0x08007ed8

08005910 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800591c:	2300      	movs	r3, #0
 800591e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	429a      	cmp	r2, r3
 8005932:	d905      	bls.n	8005940 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
 800593e:	e007      	b.n	8005950 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	69b9      	ldr	r1, [r7, #24]
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	1acb      	subs	r3, r1, r3
 800594a:	4413      	add	r3, r2
 800594c:	3b01      	subs	r3, #1
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595a:	4293      	cmp	r3, r2
 800595c:	bf28      	it	cs
 800595e:	4613      	movcs	r3, r2
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4293      	cmp	r3, r2
 8005968:	bf28      	it	cs
 800596a:	4613      	movcs	r3, r2
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	6978      	ldr	r0, [r7, #20]
 800597e:	f002 f9cf 	bl	8007d20 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	4413      	add	r3, r2
 8005988:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	4413      	add	r3, r2
 8005990:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	4413      	add	r3, r2
 80059a0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d101      	bne.n	80059b0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059b0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1b2      	bne.n	8005926 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80059c0:	6a3b      	ldr	r3, [r7, #32]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3728      	adds	r7, #40	@ 0x28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b088      	sub	sp, #32
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d911      	bls.n	8005a12 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	6938      	ldr	r0, [r7, #16]
 80059fe:	f002 f98f 	bl	8007d20 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a02:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	441a      	add	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005a10:	e01f      	b.n	8005a52 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	6938      	ldr	r0, [r7, #16]
 8005a26:	f002 f97b 	bl	8007d20 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4619      	mov	r1, r3
 8005a42:	6938      	ldr	r0, [r7, #16]
 8005a44:	f002 f96c 	bl	8007d20 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	60da      	str	r2, [r3, #12]
}
 8005a52:	bf00      	nop
 8005a54:	3720      	adds	r7, #32
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005a5a:	b480      	push	{r7}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d808      	bhi.n	8005a88 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad2      	subs	r2, r2, r3
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4413      	add	r3, r2
 8005a82:	3b01      	subs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e004      	b.n	8005a92 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005a92:	697b      	ldr	r3, [r7, #20]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08c      	sub	sp, #48	@ 0x30
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005aac:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005aae:	623b      	str	r3, [r7, #32]
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005aba:	f7ff fed1 	bl	8005860 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4a37      	ldr	r2, [pc, #220]	@ (8005ba8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005acc:	4413      	add	r3, r2
 8005ace:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d92b      	bls.n	8005b44 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bf28      	it	cs
 8005afe:	4613      	movcs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b08:	4413      	add	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	6939      	ldr	r1, [r7, #16]
 8005b10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b12:	f002 f905 	bl	8007d20 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	4413      	add	r3, r2
 8005b34:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d101      	bne.n	8005b44 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005b40:	2300      	movs	r3, #0
 8005b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bf28      	it	cs
 8005b54:	4613      	movcs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d019      	beq.n	8005b92 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	4413      	add	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	6939      	ldr	r1, [r7, #16]
 8005b6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b6e:	f002 f8d7 	bl	8007d20 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
 8005b90:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b9c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3730      	adds	r7, #48	@ 0x30
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20012ee8 	.word	0x20012ee8

08005bac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08c      	sub	sp, #48	@ 0x30
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <SEGGER_RTT_ReadNoLock+0x1e>
 8005bc6:	f7ff fe4b 	bl	8005860 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4413      	add	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	3360      	adds	r3, #96	@ 0x60
 8005bd6:	4a37      	ldr	r2, [pc, #220]	@ (8005cb4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bd8:	4413      	add	r3, r2
 8005bda:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005bec:	2300      	movs	r3, #0
 8005bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d92b      	bls.n	8005c50 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4293      	cmp	r3, r2
 8005c08:	bf28      	it	cs
 8005c0a:	4613      	movcs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c14:	4413      	add	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	6939      	ldr	r1, [r7, #16]
 8005c1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c1e:	f002 f87f 	bl	8007d20 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4413      	add	r3, r2
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d101      	bne.n	8005c50 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	bf28      	it	cs
 8005c60:	4613      	movcs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d019      	beq.n	8005c9e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c70:	4413      	add	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	6939      	ldr	r1, [r7, #16]
 8005c78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c7a:	f002 f851 	bl	8007d20 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	4413      	add	r3, r2
 8005c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ca8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3730      	adds	r7, #48	@ 0x30
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20012ee8 	.word	0x20012ee8

08005cb8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	3360      	adds	r3, #96	@ 0x60
 8005cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d54 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005cd6:	4413      	add	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d029      	beq.n	8005d36 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d82e      	bhi.n	8005d44 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d013      	beq.n	8005d16 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005cee:	e029      	b.n	8005d44 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005cf0:	6978      	ldr	r0, [r7, #20]
 8005cf2:	f7ff feb2 	bl	8005a5a <_GetAvailWriteSpace>
 8005cf6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d202      	bcs.n	8005d06 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005d04:	e021      	b.n	8005d4a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	69b9      	ldr	r1, [r7, #24]
 8005d0e:	6978      	ldr	r0, [r7, #20]
 8005d10:	f7ff fe5b 	bl	80059ca <_WriteNoCheck>
    break;
 8005d14:	e019      	b.n	8005d4a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d16:	6978      	ldr	r0, [r7, #20]
 8005d18:	f7ff fe9f 	bl	8005a5a <_GetAvailWriteSpace>
 8005d1c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4293      	cmp	r3, r2
 8005d24:	bf28      	it	cs
 8005d26:	4613      	movcs	r3, r2
 8005d28:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f7ff fe4b 	bl	80059ca <_WriteNoCheck>
    break;
 8005d34:	e009      	b.n	8005d4a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	6978      	ldr	r0, [r7, #20]
 8005d3c:	f7ff fde8 	bl	8005910 <_WriteBlocking>
 8005d40:	61f8      	str	r0, [r7, #28]
    break;
 8005d42:	e002      	b.n	8005d4a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]
    break;
 8005d48:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3720      	adds	r7, #32
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20012ee8 	.word	0x20012ee8

08005d58 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005d64:	4b0e      	ldr	r3, [pc, #56]	@ (8005da0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005d72:	f7ff fd75 	bl	8005860 <_DoInit>
  SEGGER_RTT_LOCK();
 8005d76:	f3ef 8311 	mrs	r3, BASEPRI
 8005d7a:	f04f 0120 	mov.w	r1, #32
 8005d7e:	f381 8811 	msr	BASEPRI, r1
 8005d82:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff ff95 	bl	8005cb8 <SEGGER_RTT_WriteDownBufferNoLock>
 8005d8e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005d96:	697b      	ldr	r3, [r7, #20]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20012ee8 	.word	0x20012ee8

08005da4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005db2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ea8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005dc0:	f7ff fd4e 	bl	8005860 <_DoInit>
  SEGGER_RTT_LOCK();
 8005dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc8:	f04f 0120 	mov.w	r1, #32
 8005dcc:	f381 8811 	msr	BASEPRI, r1
 8005dd0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005dd2:	4b35      	ldr	r3, [pc, #212]	@ (8005ea8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005dd4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005dda:	6939      	ldr	r1, [r7, #16]
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	4613      	mov	r3, r2
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	4413      	add	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	440b      	add	r3, r1
 8005dea:	3304      	adds	r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	3301      	adds	r3, #1
 8005df6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	dbeb      	blt.n	8005dda <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e02:	e000      	b.n	8005e06 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e04:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	da3f      	bge.n	8005e90 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e10:	6939      	ldr	r1, [r7, #16]
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	4613      	mov	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	440b      	add	r3, r1
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e24:	6939      	ldr	r1, [r7, #16]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	4413      	add	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	440b      	add	r3, r1
 8005e34:	3304      	adds	r3, #4
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e3a:	6939      	ldr	r1, [r7, #16]
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	440b      	add	r3, r1
 8005e48:	3320      	adds	r3, #32
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e4e:	6939      	ldr	r1, [r7, #16]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	4613      	mov	r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4413      	add	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3328      	adds	r3, #40	@ 0x28
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005e62:	6939      	ldr	r1, [r7, #16]
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	4613      	mov	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4413      	add	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	3324      	adds	r3, #36	@ 0x24
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005e76:	6939      	ldr	r1, [r7, #16]
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	332c      	adds	r3, #44	@ 0x2c
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e8a:	f3bf 8f5f 	dmb	sy
 8005e8e:	e002      	b.n	8005e96 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
 8005e94:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20012ee8 	.word	0x20012ee8

08005eac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005eba:	4b33      	ldr	r3, [pc, #204]	@ (8005f88 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ec8:	f7ff fcca 	bl	8005860 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8005f88 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ece:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d24d      	bcs.n	8005f78 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005edc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee0:	f04f 0120 	mov.w	r1, #32
 8005ee4:	f381 8811 	msr	BASEPRI, r1
 8005ee8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d031      	beq.n	8005f54 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005ef0:	6979      	ldr	r1, [r7, #20]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	440b      	add	r3, r1
 8005efe:	3360      	adds	r3, #96	@ 0x60
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005f04:	6979      	ldr	r1, [r7, #20]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	4413      	add	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	440b      	add	r3, r1
 8005f12:	3364      	adds	r3, #100	@ 0x64
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005f18:	6979      	ldr	r1, [r7, #20]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	440b      	add	r3, r1
 8005f26:	3368      	adds	r3, #104	@ 0x68
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4613      	mov	r3, r2
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	3370      	adds	r3, #112	@ 0x70
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4613      	mov	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4413      	add	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	440b      	add	r3, r1
 8005f4e:	336c      	adds	r3, #108	@ 0x6c
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005f54:	6979      	ldr	r1, [r7, #20]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	440b      	add	r3, r1
 8005f62:	3374      	adds	r3, #116	@ 0x74
 8005f64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f66:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f68:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e002      	b.n	8005f7e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20012ee8 	.word	0x20012ee8

08005f8c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f9c:	e002      	b.n	8005fa4 <_EncodeStr+0x18>
    Len++;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1f6      	bne.n	8005f9e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d901      	bls.n	8005fbc <_EncodeStr+0x30>
    Len = Limit;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2bfe      	cmp	r3, #254	@ 0xfe
 8005fc0:	d806      	bhi.n	8005fd0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	60fa      	str	r2, [r7, #12]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	e011      	b.n	8005ff4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	60fa      	str	r2, [r7, #12]
 8005fd6:	22ff      	movs	r2, #255	@ 0xff
 8005fd8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	60fa      	str	r2, [r7, #12]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	0a19      	lsrs	r1, r3, #8
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	60fa      	str	r2, [r7, #12]
 8005ff0:	b2ca      	uxtb	r2, r1
 8005ff2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ff8:	e00a      	b.n	8006010 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	1c53      	adds	r3, r2, #1
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	60f9      	str	r1, [r7, #12]
 8006006:	7812      	ldrb	r2, [r2, #0]
 8006008:	701a      	strb	r2, [r3, #0]
    n++;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3301      	adds	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	429a      	cmp	r2, r3
 8006016:	d3f0      	bcc.n	8005ffa <_EncodeStr+0x6e>
  }
  return pPayload;
 8006018:	68fb      	ldr	r3, [r7, #12]
}
 800601a:	4618      	mov	r0, r3
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006046:	4b35      	ldr	r3, [pc, #212]	@ (800611c <_HandleIncomingPacket+0xdc>)
 8006048:	7e1b      	ldrb	r3, [r3, #24]
 800604a:	4618      	mov	r0, r3
 800604c:	1cfb      	adds	r3, r7, #3
 800604e:	2201      	movs	r2, #1
 8006050:	4619      	mov	r1, r3
 8006052:	f7ff fdab 	bl	8005bac <SEGGER_RTT_ReadNoLock>
 8006056:	4603      	mov	r3, r0
 8006058:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	dd59      	ble.n	8006114 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	2b80      	cmp	r3, #128	@ 0x80
 8006064:	d032      	beq.n	80060cc <_HandleIncomingPacket+0x8c>
 8006066:	2b80      	cmp	r3, #128	@ 0x80
 8006068:	dc42      	bgt.n	80060f0 <_HandleIncomingPacket+0xb0>
 800606a:	2b07      	cmp	r3, #7
 800606c:	dc16      	bgt.n	800609c <_HandleIncomingPacket+0x5c>
 800606e:	2b00      	cmp	r3, #0
 8006070:	dd3e      	ble.n	80060f0 <_HandleIncomingPacket+0xb0>
 8006072:	3b01      	subs	r3, #1
 8006074:	2b06      	cmp	r3, #6
 8006076:	d83b      	bhi.n	80060f0 <_HandleIncomingPacket+0xb0>
 8006078:	a201      	add	r2, pc, #4	@ (adr r2, 8006080 <_HandleIncomingPacket+0x40>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060a3 	.word	0x080060a3
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060af 	.word	0x080060af
 800608c:	080060b5 	.word	0x080060b5
 8006090:	080060bb 	.word	0x080060bb
 8006094:	080060c1 	.word	0x080060c1
 8006098:	080060c7 	.word	0x080060c7
 800609c:	2b7f      	cmp	r3, #127	@ 0x7f
 800609e:	d034      	beq.n	800610a <_HandleIncomingPacket+0xca>
 80060a0:	e026      	b.n	80060f0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80060a2:	f000 fff1 	bl	8007088 <SEGGER_SYSVIEW_Start>
      break;
 80060a6:	e035      	b.n	8006114 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80060a8:	f001 f8aa 	bl	8007200 <SEGGER_SYSVIEW_Stop>
      break;
 80060ac:	e032      	b.n	8006114 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80060ae:	f001 fa83 	bl	80075b8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80060b2:	e02f      	b.n	8006114 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80060b4:	f001 fa48 	bl	8007548 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80060b8:	e02c      	b.n	8006114 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80060ba:	f001 f8c7 	bl	800724c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80060be:	e029      	b.n	8006114 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80060c0:	f001 fd16 	bl	8007af0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80060c4:	e026      	b.n	8006114 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80060c6:	f001 fcf5 	bl	8007ab4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80060ca:	e023      	b.n	8006114 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060cc:	4b13      	ldr	r3, [pc, #76]	@ (800611c <_HandleIncomingPacket+0xdc>)
 80060ce:	7e1b      	ldrb	r3, [r3, #24]
 80060d0:	4618      	mov	r0, r3
 80060d2:	1cfb      	adds	r3, r7, #3
 80060d4:	2201      	movs	r2, #1
 80060d6:	4619      	mov	r1, r3
 80060d8:	f7ff fd68 	bl	8005bac <SEGGER_RTT_ReadNoLock>
 80060dc:	4603      	mov	r3, r0
 80060de:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	dd13      	ble.n	800610e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 fc63 	bl	80079b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80060ee:	e00e      	b.n	800610e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	b25b      	sxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da0c      	bge.n	8006112 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060f8:	4b08      	ldr	r3, [pc, #32]	@ (800611c <_HandleIncomingPacket+0xdc>)
 80060fa:	7e1b      	ldrb	r3, [r3, #24]
 80060fc:	4618      	mov	r0, r3
 80060fe:	1cfb      	adds	r3, r7, #3
 8006100:	2201      	movs	r2, #1
 8006102:	4619      	mov	r1, r3
 8006104:	f7ff fd52 	bl	8005bac <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006108:	e003      	b.n	8006112 <_HandleIncomingPacket+0xd2>
      break;
 800610a:	bf00      	nop
 800610c:	e002      	b.n	8006114 <_HandleIncomingPacket+0xd4>
      break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <_HandleIncomingPacket+0xd4>
      break;
 8006112:	bf00      	nop
    }
  }
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	200143a8 	.word	0x200143a8

08006120 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b08c      	sub	sp, #48	@ 0x30
 8006124:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006126:	2301      	movs	r3, #1
 8006128:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800612a:	1d3b      	adds	r3, r7, #4
 800612c:	3301      	adds	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006134:	4b32      	ldr	r3, [pc, #200]	@ (8006200 <_TrySendOverflowPacket+0xe0>)
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800613a:	e00b      	b.n	8006154 <_TrySendOverflowPacket+0x34>
 800613c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006142:	1c59      	adds	r1, r3, #1
 8006144:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006146:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006150:	09db      	lsrs	r3, r3, #7
 8006152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006156:	2b7f      	cmp	r3, #127	@ 0x7f
 8006158:	d8f0      	bhi.n	800613c <_TrySendOverflowPacket+0x1c>
 800615a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006168:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800616a:	4b26      	ldr	r3, [pc, #152]	@ (8006204 <_TrySendOverflowPacket+0xe4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006170:	4b23      	ldr	r3, [pc, #140]	@ (8006200 <_TrySendOverflowPacket+0xe0>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	623b      	str	r3, [r7, #32]
 8006182:	e00b      	b.n	800619c <_TrySendOverflowPacket+0x7c>
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	b2da      	uxtb	r2, r3
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	1c59      	adds	r1, r3, #1
 800618c:	6279      	str	r1, [r7, #36]	@ 0x24
 800618e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	09db      	lsrs	r3, r3, #7
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	2b7f      	cmp	r3, #127	@ 0x7f
 80061a0:	d8f0      	bhi.n	8006184 <_TrySendOverflowPacket+0x64>
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80061a8:	6a3a      	ldr	r2, [r7, #32]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80061b2:	4b13      	ldr	r3, [pc, #76]	@ (8006200 <_TrySendOverflowPacket+0xe0>)
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	4618      	mov	r0, r3
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	f7fa f804 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061c8:	4603      	mov	r3, r0
 80061ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80061cc:	f7ff fabe 	bl	800574c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006200 <_TrySendOverflowPacket+0xe0>)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80061dc:	4b08      	ldr	r3, [pc, #32]	@ (8006200 <_TrySendOverflowPacket+0xe0>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <_TrySendOverflowPacket+0xe0>)
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e004      	b.n	80061f4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80061ea:	4b05      	ldr	r3, [pc, #20]	@ (8006200 <_TrySendOverflowPacket+0xe0>)
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	3301      	adds	r3, #1
 80061f0:	4a03      	ldr	r2, [pc, #12]	@ (8006200 <_TrySendOverflowPacket+0xe0>)
 80061f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80061f4:	693b      	ldr	r3, [r7, #16]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3730      	adds	r7, #48	@ 0x30
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200143a8 	.word	0x200143a8
 8006204:	e0001004 	.word	0xe0001004

08006208 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	@ 0x28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006214:	4b6d      	ldr	r3, [pc, #436]	@ (80063cc <_SendPacket+0x1c4>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d010      	beq.n	800623e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800621c:	4b6b      	ldr	r3, [pc, #428]	@ (80063cc <_SendPacket+0x1c4>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80a5 	beq.w	8006370 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006226:	4b69      	ldr	r3, [pc, #420]	@ (80063cc <_SendPacket+0x1c4>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d109      	bne.n	8006242 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800622e:	f7ff ff77 	bl	8006120 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006232:	4b66      	ldr	r3, [pc, #408]	@ (80063cc <_SendPacket+0x1c4>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b01      	cmp	r3, #1
 8006238:	f040 809c 	bne.w	8006374 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800623c:	e001      	b.n	8006242 <_SendPacket+0x3a>
    goto Send;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <_SendPacket+0x3c>
Send:
 8006242:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b1f      	cmp	r3, #31
 8006248:	d809      	bhi.n	800625e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800624a:	4b60      	ldr	r3, [pc, #384]	@ (80063cc <_SendPacket+0x1c4>)
 800624c:	69da      	ldr	r2, [r3, #28]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	f040 808d 	bne.w	8006378 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b17      	cmp	r3, #23
 8006262:	d807      	bhi.n	8006274 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3b01      	subs	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e03d      	b.n	80062f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006280:	d912      	bls.n	80062a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	09da      	lsrs	r2, r3, #7
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3b01      	subs	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	3a01      	subs	r2, #1
 800629a:	60fa      	str	r2, [r7, #12]
 800629c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	e006      	b.n	80062b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ba:	d912      	bls.n	80062e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	09da      	lsrs	r2, r3, #7
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	3a01      	subs	r2, #1
 80062d4:	60fa      	str	r2, [r7, #12]
 80062d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e006      	b.n	80062f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062f0:	4b37      	ldr	r3, [pc, #220]	@ (80063d0 <_SendPacket+0x1c8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80062f6:	4b35      	ldr	r3, [pc, #212]	@ (80063cc <_SendPacket+0x1c4>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	e00b      	b.n	8006322 <_SendPacket+0x11a>
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	6279      	str	r1, [r7, #36]	@ 0x24
 8006314:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	623b      	str	r3, [r7, #32]
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	2b7f      	cmp	r3, #127	@ 0x7f
 8006326:	d8f0      	bhi.n	800630a <_SendPacket+0x102>
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	627a      	str	r2, [r7, #36]	@ 0x24
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006338:	4b24      	ldr	r3, [pc, #144]	@ (80063cc <_SendPacket+0x1c4>)
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	4618      	mov	r0, r3
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	461a      	mov	r2, r3
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	f7f9 ff42 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800634c:	4603      	mov	r3, r0
 800634e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006350:	f7ff f9fc 	bl	800574c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800635a:	4a1c      	ldr	r2, [pc, #112]	@ (80063cc <_SendPacket+0x1c4>)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	60d3      	str	r3, [r2, #12]
 8006360:	e00b      	b.n	800637a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006362:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <_SendPacket+0x1c4>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b18      	ldr	r3, [pc, #96]	@ (80063cc <_SendPacket+0x1c4>)
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e004      	b.n	800637a <_SendPacket+0x172>
    goto SendDone;
 8006370:	bf00      	nop
 8006372:	e002      	b.n	800637a <_SendPacket+0x172>
      goto SendDone;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <_SendPacket+0x172>
      goto SendDone;
 8006378:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800637a:	4b14      	ldr	r3, [pc, #80]	@ (80063cc <_SendPacket+0x1c4>)
 800637c:	7e1b      	ldrb	r3, [r3, #24]
 800637e:	4619      	mov	r1, r3
 8006380:	4a14      	ldr	r2, [pc, #80]	@ (80063d4 <_SendPacket+0x1cc>)
 8006382:	460b      	mov	r3, r1
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	440b      	add	r3, r1
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	4413      	add	r3, r2
 800638c:	336c      	adds	r3, #108	@ 0x6c
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <_SendPacket+0x1c4>)
 8006392:	7e1b      	ldrb	r3, [r3, #24]
 8006394:	4618      	mov	r0, r3
 8006396:	490f      	ldr	r1, [pc, #60]	@ (80063d4 <_SendPacket+0x1cc>)
 8006398:	4603      	mov	r3, r0
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4403      	add	r3, r0
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	440b      	add	r3, r1
 80063a2:	3370      	adds	r3, #112	@ 0x70
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d00b      	beq.n	80063c2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80063aa:	4b08      	ldr	r3, [pc, #32]	@ (80063cc <_SendPacket+0x1c4>)
 80063ac:	789b      	ldrb	r3, [r3, #2]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d107      	bne.n	80063c2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80063b2:	4b06      	ldr	r3, [pc, #24]	@ (80063cc <_SendPacket+0x1c4>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80063b8:	f7ff fe42 	bl	8006040 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80063bc:	4b03      	ldr	r3, [pc, #12]	@ (80063cc <_SendPacket+0x1c4>)
 80063be:	2200      	movs	r2, #0
 80063c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80063c2:	bf00      	nop
 80063c4:	3728      	adds	r7, #40	@ 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200143a8 	.word	0x200143a8
 80063d0:	e0001004 	.word	0xe0001004
 80063d4:	20012ee8 	.word	0x20012ee8

080063d8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	3301      	adds	r3, #1
 80063ee:	2b80      	cmp	r3, #128	@ 0x80
 80063f0:	d80a      	bhi.n	8006408 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	1c59      	adds	r1, r3, #1
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6051      	str	r1, [r2, #4]
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b80      	cmp	r3, #128	@ 0x80
 800640e:	d15a      	bne.n	80064c6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	627b      	str	r3, [r7, #36]	@ 0x24
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	e00b      	b.n	800644a <_StoreChar+0x72>
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	1c59      	adds	r1, r3, #1
 800643a:	6279      	str	r1, [r7, #36]	@ 0x24
 800643c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	09db      	lsrs	r3, r3, #7
 8006448:	623b      	str	r3, [r7, #32]
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b7f      	cmp	r3, #127	@ 0x7f
 800644e:	d8f0      	bhi.n	8006432 <_StoreChar+0x5a>
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	627a      	str	r2, [r7, #36]	@ 0x24
 8006456:	6a3a      	ldr	r2, [r7, #32]
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	61fb      	str	r3, [r7, #28]
 8006464:	2300      	movs	r3, #0
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e00b      	b.n	8006482 <_StoreChar+0xaa>
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	1c59      	adds	r1, r3, #1
 8006472:	61f9      	str	r1, [r7, #28]
 8006474:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	09db      	lsrs	r3, r3, #7
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b7f      	cmp	r3, #127	@ 0x7f
 8006486:	d8f0      	bhi.n	800646a <_StoreChar+0x92>
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	61fa      	str	r2, [r7, #28]
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	221a      	movs	r2, #26
 800649e:	6939      	ldr	r1, [r7, #16]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff feb1 	bl	8006208 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fdbb 	bl	8006026 <_PreparePacket>
 80064b0:	4602      	mov	r2, r0
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	611a      	str	r2, [r3, #16]
  }
}
 80064c6:	bf00      	nop
 80064c8:	3728      	adds	r7, #40	@ 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	@ 0x28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80064e2:	2301      	movs	r3, #1
 80064e4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80064e6:	2301      	movs	r3, #1
 80064e8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80064ea:	e007      	b.n	80064fc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80064ec:	6a3a      	ldr	r2, [r7, #32]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	623b      	str	r3, [r7, #32]
    Width++;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	3301      	adds	r3, #1
 80064fa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	d2f3      	bcs.n	80064ec <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	429a      	cmp	r2, r3
 800650a:	d901      	bls.n	8006510 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d000      	beq.n	800651c <_PrintUnsigned+0x4c>
 800651a:	e01f      	b.n	800655c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01c      	beq.n	800655c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <_PrintUnsigned+0x68>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <_PrintUnsigned+0x68>
        c = '0';
 8006532:	2330      	movs	r3, #48	@ 0x30
 8006534:	76fb      	strb	r3, [r7, #27]
 8006536:	e001      	b.n	800653c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006538:	2320      	movs	r3, #32
 800653a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800653c:	e007      	b.n	800654e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	3b01      	subs	r3, #1
 8006542:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006544:	7efb      	ldrb	r3, [r7, #27]
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff ff45 	bl	80063d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <_PrintUnsigned+0x8c>
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	429a      	cmp	r2, r3
 800655a:	d3f0      	bcc.n	800653e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d903      	bls.n	800656a <_PrintUnsigned+0x9a>
      NumDigits--;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	3b01      	subs	r3, #1
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	e009      	b.n	800657e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006572:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	429a      	cmp	r2, r3
 800657a:	d200      	bcs.n	800657e <_PrintUnsigned+0xae>
        break;
 800657c:	e005      	b.n	800658a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	fb02 f303 	mul.w	r3, r2, r3
 8006586:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006588:	e7e8      	b.n	800655c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006592:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006598:	fb02 f303 	mul.w	r3, r2, r3
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80065a2:	4a15      	ldr	r2, [pc, #84]	@ (80065f8 <_PrintUnsigned+0x128>)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f7ff ff13 	bl	80063d8 <_StoreChar>
    Digit /= Base;
 80065b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e3      	bne.n	800658a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80065c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d011      	beq.n	80065f0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065d2:	e006      	b.n	80065e2 <_PrintUnsigned+0x112>
        FieldWidth--;
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	3b01      	subs	r3, #1
 80065d8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80065da:	2120      	movs	r1, #32
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fefb 	bl	80063d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <_PrintUnsigned+0x120>
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3f1      	bcc.n	80065d4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80065f0:	bf00      	nop
 80065f2:	3728      	adds	r7, #40	@ 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	08007f18 	.word	0x08007f18

080065fc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	bfb8      	it	lt
 8006610:	425b      	neglt	r3, r3
 8006612:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006614:	2301      	movs	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006618:	e007      	b.n	800662a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006622:	613b      	str	r3, [r7, #16]
    Width++;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	3301      	adds	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	429a      	cmp	r2, r3
 8006630:	daf3      	bge.n	800661a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	429a      	cmp	r2, r3
 8006638:	d901      	bls.n	800663e <_PrintInt+0x42>
    Width = NumDigits;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <_PrintInt+0x5e>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	db04      	blt.n	8006654 <_PrintInt+0x58>
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <_PrintInt+0x5e>
    FieldWidth--;
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	3b01      	subs	r3, #1
 8006658:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <_PrintInt+0x6e>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d016      	beq.n	8006698 <_PrintInt+0x9c>
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d111      	bne.n	8006698 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800667a:	e006      	b.n	800668a <_PrintInt+0x8e>
        FieldWidth--;
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	3b01      	subs	r3, #1
 8006680:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006682:	2120      	movs	r1, #32
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7ff fea7 	bl	80063d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <_PrintInt+0x9c>
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	429a      	cmp	r2, r3
 8006696:	d3f1      	bcc.n	800667c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	da07      	bge.n	80066ae <_PrintInt+0xb2>
    v = -v;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	425b      	negs	r3, r3
 80066a2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80066a4:	212d      	movs	r1, #45	@ 0x2d
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fe96 	bl	80063d8 <_StoreChar>
 80066ac:	e008      	b.n	80066c0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80066b8:	212b      	movs	r1, #43	@ 0x2b
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff fe8c 	bl	80063d8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d019      	beq.n	80066fe <_PrintInt+0x102>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d114      	bne.n	80066fe <_PrintInt+0x102>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d111      	bne.n	80066fe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00e      	beq.n	80066fe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066e0:	e006      	b.n	80066f0 <_PrintInt+0xf4>
        FieldWidth--;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80066e8:	2130      	movs	r1, #48	@ 0x30
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fe74 	bl	80063d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <_PrintInt+0x102>
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d3f1      	bcc.n	80066e2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff fedf 	bl	80064d0 <_PrintUnsigned>
}
 8006712:	bf00      	nop
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b098      	sub	sp, #96	@ 0x60
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006728:	f3ef 8311 	mrs	r3, BASEPRI
 800672c:	f04f 0120 	mov.w	r1, #32
 8006730:	f381 8811 	msr	BASEPRI, r1
 8006734:	633b      	str	r3, [r7, #48]	@ 0x30
 8006736:	48b7      	ldr	r0, [pc, #732]	@ (8006a14 <_VPrintTarget+0x2f8>)
 8006738:	f7ff fc75 	bl	8006026 <_PreparePacket>
 800673c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800673e:	4bb5      	ldr	r3, [pc, #724]	@ (8006a14 <_VPrintTarget+0x2f8>)
 8006740:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006748:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3301      	adds	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006762:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 8183 	beq.w	8006a72 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800676c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006770:	2b25      	cmp	r3, #37	@ 0x25
 8006772:	f040 8170 	bne.w	8006a56 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006776:	2300      	movs	r3, #0
 8006778:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800677a:	2301      	movs	r3, #1
 800677c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006786:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800678a:	3b23      	subs	r3, #35	@ 0x23
 800678c:	2b0d      	cmp	r3, #13
 800678e:	d83f      	bhi.n	8006810 <_VPrintTarget+0xf4>
 8006790:	a201      	add	r2, pc, #4	@ (adr r2, 8006798 <_VPrintTarget+0x7c>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	08006801 	.word	0x08006801
 800679c:	08006811 	.word	0x08006811
 80067a0:	08006811 	.word	0x08006811
 80067a4:	08006811 	.word	0x08006811
 80067a8:	08006811 	.word	0x08006811
 80067ac:	08006811 	.word	0x08006811
 80067b0:	08006811 	.word	0x08006811
 80067b4:	08006811 	.word	0x08006811
 80067b8:	080067f1 	.word	0x080067f1
 80067bc:	08006811 	.word	0x08006811
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	08006811 	.word	0x08006811
 80067c8:	08006811 	.word	0x08006811
 80067cc:	080067e1 	.word	0x080067e1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80067d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067d2:	f043 0301 	orr.w	r3, r3, #1
 80067d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	e01a      	b.n	8006816 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80067e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e2:	f043 0302 	orr.w	r3, r3, #2
 80067e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	e012      	b.n	8006816 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80067f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f2:	f043 0304 	orr.w	r3, r3, #4
 80067f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	e00a      	b.n	8006816 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006802:	f043 0308 	orr.w	r3, r3, #8
 8006806:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e002      	b.n	8006816 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006810:	2300      	movs	r3, #0
 8006812:	653b      	str	r3, [r7, #80]	@ 0x50
 8006814:	bf00      	nop
        }
      } while (v);
 8006816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1b0      	bne.n	800677e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800681c:	2300      	movs	r3, #0
 800681e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006828:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800682c:	2b2f      	cmp	r3, #47	@ 0x2f
 800682e:	d912      	bls.n	8006856 <_VPrintTarget+0x13a>
 8006830:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006834:	2b39      	cmp	r3, #57	@ 0x39
 8006836:	d80e      	bhi.n	8006856 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800683e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	461a      	mov	r2, r3
 800684a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800684e:	4413      	add	r3, r2
 8006850:	3b30      	subs	r3, #48	@ 0x30
 8006852:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006854:	e7e4      	b.n	8006820 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006856:	2300      	movs	r3, #0
 8006858:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006862:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006866:	2b2e      	cmp	r3, #46	@ 0x2e
 8006868:	d11d      	bne.n	80068a6 <_VPrintTarget+0x18a>
        sFormat++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006878:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800687c:	2b2f      	cmp	r3, #47	@ 0x2f
 800687e:	d912      	bls.n	80068a6 <_VPrintTarget+0x18a>
 8006880:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006884:	2b39      	cmp	r3, #57	@ 0x39
 8006886:	d80e      	bhi.n	80068a6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800688e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	461a      	mov	r2, r3
 800689a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800689e:	4413      	add	r3, r2
 80068a0:	3b30      	subs	r3, #48	@ 0x30
 80068a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80068a4:	e7e4      	b.n	8006870 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80068ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068b2:	2b6c      	cmp	r3, #108	@ 0x6c
 80068b4:	d003      	beq.n	80068be <_VPrintTarget+0x1a2>
 80068b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068ba:	2b68      	cmp	r3, #104	@ 0x68
 80068bc:	d107      	bne.n	80068ce <_VPrintTarget+0x1b2>
          c = *sFormat;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3301      	adds	r3, #1
 80068ca:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80068cc:	e7ef      	b.n	80068ae <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80068ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068d2:	2b25      	cmp	r3, #37	@ 0x25
 80068d4:	f000 80b3 	beq.w	8006a3e <_VPrintTarget+0x322>
 80068d8:	2b25      	cmp	r3, #37	@ 0x25
 80068da:	f2c0 80b7 	blt.w	8006a4c <_VPrintTarget+0x330>
 80068de:	2b78      	cmp	r3, #120	@ 0x78
 80068e0:	f300 80b4 	bgt.w	8006a4c <_VPrintTarget+0x330>
 80068e4:	2b58      	cmp	r3, #88	@ 0x58
 80068e6:	f2c0 80b1 	blt.w	8006a4c <_VPrintTarget+0x330>
 80068ea:	3b58      	subs	r3, #88	@ 0x58
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	f200 80ad 	bhi.w	8006a4c <_VPrintTarget+0x330>
 80068f2:	a201      	add	r2, pc, #4	@ (adr r2, 80068f8 <_VPrintTarget+0x1dc>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	080069ef 	.word	0x080069ef
 80068fc:	08006a4d 	.word	0x08006a4d
 8006900:	08006a4d 	.word	0x08006a4d
 8006904:	08006a4d 	.word	0x08006a4d
 8006908:	08006a4d 	.word	0x08006a4d
 800690c:	08006a4d 	.word	0x08006a4d
 8006910:	08006a4d 	.word	0x08006a4d
 8006914:	08006a4d 	.word	0x08006a4d
 8006918:	08006a4d 	.word	0x08006a4d
 800691c:	08006a4d 	.word	0x08006a4d
 8006920:	08006a4d 	.word	0x08006a4d
 8006924:	0800697d 	.word	0x0800697d
 8006928:	080069a3 	.word	0x080069a3
 800692c:	08006a4d 	.word	0x08006a4d
 8006930:	08006a4d 	.word	0x08006a4d
 8006934:	08006a4d 	.word	0x08006a4d
 8006938:	08006a4d 	.word	0x08006a4d
 800693c:	08006a4d 	.word	0x08006a4d
 8006940:	08006a4d 	.word	0x08006a4d
 8006944:	08006a4d 	.word	0x08006a4d
 8006948:	08006a4d 	.word	0x08006a4d
 800694c:	08006a4d 	.word	0x08006a4d
 8006950:	08006a4d 	.word	0x08006a4d
 8006954:	08006a4d 	.word	0x08006a4d
 8006958:	08006a19 	.word	0x08006a19
 800695c:	08006a4d 	.word	0x08006a4d
 8006960:	08006a4d 	.word	0x08006a4d
 8006964:	08006a4d 	.word	0x08006a4d
 8006968:	08006a4d 	.word	0x08006a4d
 800696c:	080069c9 	.word	0x080069c9
 8006970:	08006a4d 	.word	0x08006a4d
 8006974:	08006a4d 	.word	0x08006a4d
 8006978:	080069ef 	.word	0x080069ef
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	1d19      	adds	r1, r3, #4
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6011      	str	r1, [r2, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800698a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800698c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006990:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006994:	f107 0314 	add.w	r3, r7, #20
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fd1c 	bl	80063d8 <_StoreChar>
        break;
 80069a0:	e055      	b.n	8006a4e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	1d19      	adds	r1, r3, #4
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6011      	str	r1, [r2, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80069b0:	f107 0014 	add.w	r0, r7, #20
 80069b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069be:	220a      	movs	r2, #10
 80069c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069c2:	f7ff fe1b 	bl	80065fc <_PrintInt>
        break;
 80069c6:	e042      	b.n	8006a4e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	1d19      	adds	r1, r3, #4
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6011      	str	r1, [r2, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80069d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069d8:	f107 0014 	add.w	r0, r7, #20
 80069dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e6:	220a      	movs	r2, #10
 80069e8:	f7ff fd72 	bl	80064d0 <_PrintUnsigned>
        break;
 80069ec:	e02f      	b.n	8006a4e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	1d19      	adds	r1, r3, #4
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6011      	str	r1, [r2, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80069fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069fe:	f107 0014 	add.w	r0, r7, #20
 8006a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	f7ff fd5f 	bl	80064d0 <_PrintUnsigned>
        break;
 8006a12:	e01c      	b.n	8006a4e <_VPrintTarget+0x332>
 8006a14:	200143d8 	.word	0x200143d8
      case 'p':
        v = va_arg(*pParamList, int);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	1d19      	adds	r1, r3, #4
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6011      	str	r1, [r2, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006a26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a28:	f107 0014 	add.w	r0, r7, #20
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	2308      	movs	r3, #8
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2308      	movs	r3, #8
 8006a36:	2210      	movs	r2, #16
 8006a38:	f7ff fd4a 	bl	80064d0 <_PrintUnsigned>
        break;
 8006a3c:	e007      	b.n	8006a4e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006a3e:	f107 0314 	add.w	r3, r7, #20
 8006a42:	2125      	movs	r1, #37	@ 0x25
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff fcc7 	bl	80063d8 <_StoreChar>
        break;
 8006a4a:	e000      	b.n	8006a4e <_VPrintTarget+0x332>
      default:
        break;
 8006a4c:	bf00      	nop
      }
      sFormat++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e007      	b.n	8006a66 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006a56:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006a5a:	f107 0314 	add.w	r3, r7, #20
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fcb9 	bl	80063d8 <_StoreChar>
    }
  } while (*sFormat);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f47f ae72 	bne.w	8006754 <_VPrintTarget+0x38>
 8006a70:	e000      	b.n	8006a74 <_VPrintTarget+0x358>
      break;
 8006a72:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d041      	beq.n	8006afe <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a8a:	e00b      	b.n	8006aa4 <_VPrintTarget+0x388>
 8006a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a92:	1c59      	adds	r1, r3, #1
 8006a94:	6439      	str	r1, [r7, #64]	@ 0x40
 8006a96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa0:	09db      	lsrs	r3, r3, #7
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa8:	d8f0      	bhi.n	8006a8c <_VPrintTarget+0x370>
 8006aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ab0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac2:	e00b      	b.n	8006adc <_VPrintTarget+0x3c0>
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ace:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad8:	09db      	lsrs	r3, r3, #7
 8006ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8006adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ade:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ae0:	d8f0      	bhi.n	8006ac4 <_VPrintTarget+0x3a8>
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	69b9      	ldr	r1, [r7, #24]
 8006af6:	221a      	movs	r2, #26
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fb85 	bl	8006208 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006b04:	bf00      	nop
 8006b06:	3758      	adds	r7, #88	@ 0x58
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006b20:	4917      	ldr	r1, [pc, #92]	@ (8006b80 <SEGGER_SYSVIEW_Init+0x74>)
 8006b22:	4818      	ldr	r0, [pc, #96]	@ (8006b84 <SEGGER_SYSVIEW_Init+0x78>)
 8006b24:	f7ff f93e 	bl	8005da4 <SEGGER_RTT_AllocUpBuffer>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	4b16      	ldr	r3, [pc, #88]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b2e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006b30:	4b15      	ldr	r3, [pc, #84]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b32:	785a      	ldrb	r2, [r3, #1]
 8006b34:	4b14      	ldr	r3, [pc, #80]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b36:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b38:	4b13      	ldr	r3, [pc, #76]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b3a:	7e1b      	ldrb	r3, [r3, #24]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	2308      	movs	r3, #8
 8006b44:	4a11      	ldr	r2, [pc, #68]	@ (8006b8c <SEGGER_SYSVIEW_Init+0x80>)
 8006b46:	490f      	ldr	r1, [pc, #60]	@ (8006b84 <SEGGER_SYSVIEW_Init+0x78>)
 8006b48:	f7ff f9b0 	bl	8005eac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006b52:	4b0f      	ldr	r3, [pc, #60]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x84>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a0c      	ldr	r2, [pc, #48]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b58:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006b60:	4a09      	ldr	r2, [pc, #36]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006b66:	4a08      	ldr	r2, [pc, #32]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006b6c:	4a06      	ldr	r2, [pc, #24]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006b72:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	200133a0 	.word	0x200133a0
 8006b84:	08007ee0 	.word	0x08007ee0
 8006b88:	200143a8 	.word	0x200143a8
 8006b8c:	200143a0 	.word	0x200143a0
 8006b90:	e0001004 	.word	0xe0001004

08006b94 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006b9c:	4a04      	ldr	r2, [pc, #16]	@ (8006bb0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6113      	str	r3, [r2, #16]
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	200143a8 	.word	0x200143a8

08006bb4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc0:	f04f 0120 	mov.w	r1, #32
 8006bc4:	f381 8811 	msr	BASEPRI, r1
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	4808      	ldr	r0, [pc, #32]	@ (8006bec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006bcc:	f7ff fa2b 	bl	8006026 <_PreparePacket>
 8006bd0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	68b8      	ldr	r0, [r7, #8]
 8006bd8:	f7ff fb16 	bl	8006208 <_SendPacket>
  RECORD_END();
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f383 8811 	msr	BASEPRI, r3
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	200143d8 	.word	0x200143d8

08006bf0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006bfe:	f04f 0120 	mov.w	r1, #32
 8006c02:	f381 8811 	msr	BASEPRI, r1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	4816      	ldr	r0, [pc, #88]	@ (8006c64 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006c0a:	f7ff fa0c 	bl	8006026 <_PreparePacket>
 8006c0e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	61f9      	str	r1, [r7, #28]
 8006c28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	61fa      	str	r2, [r7, #28]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7ff fad9 	bl	8006208 <_SendPacket>
  RECORD_END();
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f383 8811 	msr	BASEPRI, r3
}
 8006c5c:	bf00      	nop
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	200143d8 	.word	0x200143d8

08006c68 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	@ 0x30
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c74:	f3ef 8311 	mrs	r3, BASEPRI
 8006c78:	f04f 0120 	mov.w	r1, #32
 8006c7c:	f381 8811 	msr	BASEPRI, r1
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	4825      	ldr	r0, [pc, #148]	@ (8006d18 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006c84:	f7ff f9cf 	bl	8006026 <_PreparePacket>
 8006c88:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c96:	e00b      	b.n	8006cb0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ca2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	09db      	lsrs	r3, r3, #7
 8006cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cb4:	d8f0      	bhi.n	8006c98 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	623b      	str	r3, [r7, #32]
 8006cce:	e00b      	b.n	8006ce8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd6:	1c59      	adds	r1, r3, #1
 8006cd8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	09db      	lsrs	r3, r3, #7
 8006ce6:	623b      	str	r3, [r7, #32]
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cec:	d8f0      	bhi.n	8006cd0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cf4:	6a3a      	ldr	r2, [r7, #32]
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	6979      	ldr	r1, [r7, #20]
 8006d02:	69b8      	ldr	r0, [r7, #24]
 8006d04:	f7ff fa80 	bl	8006208 <_SendPacket>
  RECORD_END();
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
 8006d10:	3730      	adds	r7, #48	@ 0x30
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	200143d8 	.word	0x200143d8

08006d1c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	@ 0x38
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d2e:	f04f 0120 	mov.w	r1, #32
 8006d32:	f381 8811 	msr	BASEPRI, r1
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	4832      	ldr	r0, [pc, #200]	@ (8006e04 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006d3a:	f7ff f974 	bl	8006026 <_PreparePacket>
 8006d3e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d4c:	e00b      	b.n	8006d66 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d54:	1c59      	adds	r1, r3, #1
 8006d56:	6379      	str	r1, [r7, #52]	@ 0x34
 8006d58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	09db      	lsrs	r3, r3, #7
 8006d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d6a:	d8f0      	bhi.n	8006d4e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d84:	e00b      	b.n	8006d9e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	1c59      	adds	r1, r3, #1
 8006d8e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	09db      	lsrs	r3, r3, #7
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006da2:	d8f0      	bhi.n	8006d86 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	623b      	str	r3, [r7, #32]
 8006dbc:	e00b      	b.n	8006dd6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc4:	1c59      	adds	r1, r3, #1
 8006dc6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006dc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	09db      	lsrs	r3, r3, #7
 8006dd4:	623b      	str	r3, [r7, #32]
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dda:	d8f0      	bhi.n	8006dbe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006de2:	6a3a      	ldr	r2, [r7, #32]
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	6979      	ldr	r1, [r7, #20]
 8006df0:	69b8      	ldr	r0, [r7, #24]
 8006df2:	f7ff fa09 	bl	8006208 <_SendPacket>
  RECORD_END();
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f383 8811 	msr	BASEPRI, r3
}
 8006dfc:	bf00      	nop
 8006dfe:	3738      	adds	r7, #56	@ 0x38
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	200143d8 	.word	0x200143d8

08006e08 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b090      	sub	sp, #64	@ 0x40
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e16:	f3ef 8311 	mrs	r3, BASEPRI
 8006e1a:	f04f 0120 	mov.w	r1, #32
 8006e1e:	f381 8811 	msr	BASEPRI, r1
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	4840      	ldr	r0, [pc, #256]	@ (8006f28 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006e26:	f7ff f8fe 	bl	8006026 <_PreparePacket>
 8006e2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e38:	e00b      	b.n	8006e52 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e40:	1c59      	adds	r1, r3, #1
 8006e42:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006e44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	09db      	lsrs	r3, r3, #7
 8006e50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e56:	d8f0      	bhi.n	8006e3a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e70:	e00b      	b.n	8006e8a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e78:	1c59      	adds	r1, r3, #1
 8006e7a:	6379      	str	r1, [r7, #52]	@ 0x34
 8006e7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	09db      	lsrs	r3, r3, #7
 8006e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e8e:	d8f0      	bhi.n	8006e72 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ea8:	e00b      	b.n	8006ec2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb0:	1c59      	adds	r1, r3, #1
 8006eb2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006eb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	09db      	lsrs	r3, r3, #7
 8006ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec6:	d8f0      	bhi.n	8006eaa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ede:	623b      	str	r3, [r7, #32]
 8006ee0:	e00b      	b.n	8006efa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	1c59      	adds	r1, r3, #1
 8006eea:	6279      	str	r1, [r7, #36]	@ 0x24
 8006eec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	09db      	lsrs	r3, r3, #7
 8006ef8:	623b      	str	r3, [r7, #32]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006efe:	d8f0      	bhi.n	8006ee2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f06:	6a3a      	ldr	r2, [r7, #32]
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	6979      	ldr	r1, [r7, #20]
 8006f14:	69b8      	ldr	r0, [r7, #24]
 8006f16:	f7ff f977 	bl	8006208 <_SendPacket>
  RECORD_END();
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	f383 8811 	msr	BASEPRI, r3
}
 8006f20:	bf00      	nop
 8006f22:	3740      	adds	r7, #64	@ 0x40
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	200143d8 	.word	0x200143d8

08006f2c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b092      	sub	sp, #72	@ 0x48
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f3e:	f04f 0120 	mov.w	r1, #32
 8006f42:	f381 8811 	msr	BASEPRI, r1
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	484e      	ldr	r0, [pc, #312]	@ (8007084 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006f4a:	f7ff f86c 	bl	8006026 <_PreparePacket>
 8006f4e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f5c:	e00b      	b.n	8006f76 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f64:	1c59      	adds	r1, r3, #1
 8006f66:	6479      	str	r1, [r7, #68]	@ 0x44
 8006f68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f72:	09db      	lsrs	r3, r3, #7
 8006f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f78:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f7a:	d8f0      	bhi.n	8006f5e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f94:	e00b      	b.n	8006fae <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9c:	1c59      	adds	r1, r3, #1
 8006f9e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006fa0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	09db      	lsrs	r3, r3, #7
 8006fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb2:	d8f0      	bhi.n	8006f96 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006fba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fcc:	e00b      	b.n	8006fe6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	1c59      	adds	r1, r3, #1
 8006fd6:	6379      	str	r1, [r7, #52]	@ 0x34
 8006fd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	09db      	lsrs	r3, r3, #7
 8006fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fea:	d8f0      	bhi.n	8006fce <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007004:	e00b      	b.n	800701e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8007006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007008:	b2da      	uxtb	r2, r3
 800700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700c:	1c59      	adds	r1, r3, #1
 800700e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007010:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	09db      	lsrs	r3, r3, #7
 800701c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800701e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007020:	2b7f      	cmp	r3, #127	@ 0x7f
 8007022:	d8f0      	bhi.n	8007006 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8007024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800702a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007032:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	627b      	str	r3, [r7, #36]	@ 0x24
 8007038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800703a:	623b      	str	r3, [r7, #32]
 800703c:	e00b      	b.n	8007056 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	1c59      	adds	r1, r3, #1
 8007046:	6279      	str	r1, [r7, #36]	@ 0x24
 8007048:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	09db      	lsrs	r3, r3, #7
 8007054:	623b      	str	r3, [r7, #32]
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	2b7f      	cmp	r3, #127	@ 0x7f
 800705a:	d8f0      	bhi.n	800703e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	627a      	str	r2, [r7, #36]	@ 0x24
 8007062:	6a3a      	ldr	r2, [r7, #32]
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	6979      	ldr	r1, [r7, #20]
 8007070:	69b8      	ldr	r0, [r7, #24]
 8007072:	f7ff f8c9 	bl	8006208 <_SendPacket>
  RECORD_END();
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f383 8811 	msr	BASEPRI, r3
}
 800707c:	bf00      	nop
 800707e:	3748      	adds	r7, #72	@ 0x48
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	200143d8 	.word	0x200143d8

08007088 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b08c      	sub	sp, #48	@ 0x30
 800708c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800708e:	4b59      	ldr	r3, [pc, #356]	@ (80071f4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007090:	2201      	movs	r2, #1
 8007092:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007094:	f3ef 8311 	mrs	r3, BASEPRI
 8007098:	f04f 0120 	mov.w	r1, #32
 800709c:	f381 8811 	msr	BASEPRI, r1
 80070a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80070a2:	4b54      	ldr	r3, [pc, #336]	@ (80071f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	220a      	movs	r2, #10
 80070a8:	4953      	ldr	r1, [pc, #332]	@ (80071f8 <SEGGER_SYSVIEW_Start+0x170>)
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7f9 f890 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80070b6:	f7fe fb49 	bl	800574c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80070ba:	200a      	movs	r0, #10
 80070bc:	f7ff fd7a 	bl	8006bb4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80070c0:	f3ef 8311 	mrs	r3, BASEPRI
 80070c4:	f04f 0120 	mov.w	r1, #32
 80070c8:	f381 8811 	msr	BASEPRI, r1
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	484b      	ldr	r0, [pc, #300]	@ (80071fc <SEGGER_SYSVIEW_Start+0x174>)
 80070d0:	f7fe ffa9 	bl	8006026 <_PreparePacket>
 80070d4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070de:	4b45      	ldr	r3, [pc, #276]	@ (80071f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070e4:	e00b      	b.n	80070fe <SEGGER_SYSVIEW_Start+0x76>
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ec:	1c59      	adds	r1, r3, #1
 80070ee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80070f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fa:	09db      	lsrs	r3, r3, #7
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	2b7f      	cmp	r3, #127	@ 0x7f
 8007102:	d8f0      	bhi.n	80070e6 <SEGGER_SYSVIEW_Start+0x5e>
 8007104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800710a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007112:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	627b      	str	r3, [r7, #36]	@ 0x24
 8007118:	4b36      	ldr	r3, [pc, #216]	@ (80071f4 <SEGGER_SYSVIEW_Start+0x16c>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	623b      	str	r3, [r7, #32]
 800711e:	e00b      	b.n	8007138 <SEGGER_SYSVIEW_Start+0xb0>
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	b2da      	uxtb	r2, r3
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	1c59      	adds	r1, r3, #1
 8007128:	6279      	str	r1, [r7, #36]	@ 0x24
 800712a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	09db      	lsrs	r3, r3, #7
 8007136:	623b      	str	r3, [r7, #32]
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	2b7f      	cmp	r3, #127	@ 0x7f
 800713c:	d8f0      	bhi.n	8007120 <SEGGER_SYSVIEW_Start+0x98>
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	627a      	str	r2, [r7, #36]	@ 0x24
 8007144:	6a3a      	ldr	r2, [r7, #32]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	4b28      	ldr	r3, [pc, #160]	@ (80071f4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	e00b      	b.n	8007172 <SEGGER_SYSVIEW_Start+0xea>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	1c59      	adds	r1, r3, #1
 8007162:	61f9      	str	r1, [r7, #28]
 8007164:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	09db      	lsrs	r3, r3, #7
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b7f      	cmp	r3, #127	@ 0x7f
 8007176:	d8f0      	bhi.n	800715a <SEGGER_SYSVIEW_Start+0xd2>
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	61fa      	str	r2, [r7, #28]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	701a      	strb	r2, [r3, #0]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	2300      	movs	r3, #0
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	e00b      	b.n	80071aa <SEGGER_SYSVIEW_Start+0x122>
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	1c59      	adds	r1, r3, #1
 800719a:	6179      	str	r1, [r7, #20]
 800719c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	09db      	lsrs	r3, r3, #7
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ae:	d8f0      	bhi.n	8007192 <SEGGER_SYSVIEW_Start+0x10a>
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	617a      	str	r2, [r7, #20]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80071c0:	2218      	movs	r2, #24
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff f81f 	bl	8006208 <_SendPacket>
      RECORD_END();
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80071d0:	4b08      	ldr	r3, [pc, #32]	@ (80071f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80071d8:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80071de:	f000 f9eb 	bl	80075b8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80071e2:	f000 f9b1 	bl	8007548 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80071e6:	f000 fc83 	bl	8007af0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80071ea:	bf00      	nop
 80071ec:	3730      	adds	r7, #48	@ 0x30
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	200143a8 	.word	0x200143a8
 80071f8:	08007f0c 	.word	0x08007f0c
 80071fc:	200143d8 	.word	0x200143d8

08007200 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007206:	f3ef 8311 	mrs	r3, BASEPRI
 800720a:	f04f 0120 	mov.w	r1, #32
 800720e:	f381 8811 	msr	BASEPRI, r1
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	480b      	ldr	r0, [pc, #44]	@ (8007244 <SEGGER_SYSVIEW_Stop+0x44>)
 8007216:	f7fe ff06 	bl	8006026 <_PreparePacket>
 800721a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800721c:	4b0a      	ldr	r3, [pc, #40]	@ (8007248 <SEGGER_SYSVIEW_Stop+0x48>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d007      	beq.n	8007234 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007224:	220b      	movs	r2, #11
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6838      	ldr	r0, [r7, #0]
 800722a:	f7fe ffed 	bl	8006208 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800722e:	4b06      	ldr	r3, [pc, #24]	@ (8007248 <SEGGER_SYSVIEW_Stop+0x48>)
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f383 8811 	msr	BASEPRI, r3
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	200143d8 	.word	0x200143d8
 8007248:	200143a8 	.word	0x200143a8

0800724c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b08c      	sub	sp, #48	@ 0x30
 8007250:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007252:	f3ef 8311 	mrs	r3, BASEPRI
 8007256:	f04f 0120 	mov.w	r1, #32
 800725a:	f381 8811 	msr	BASEPRI, r1
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	4845      	ldr	r0, [pc, #276]	@ (8007378 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007262:	f7fe fee0 	bl	8006026 <_PreparePacket>
 8007266:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007270:	4b42      	ldr	r3, [pc, #264]	@ (800737c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007276:	e00b      	b.n	8007290 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	b2da      	uxtb	r2, r3
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	1c59      	adds	r1, r3, #1
 8007280:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007282:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728c:	09db      	lsrs	r3, r3, #7
 800728e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007292:	2b7f      	cmp	r3, #127	@ 0x7f
 8007294:	d8f0      	bhi.n	8007278 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800729c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80072aa:	4b34      	ldr	r3, [pc, #208]	@ (800737c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	623b      	str	r3, [r7, #32]
 80072b0:	e00b      	b.n	80072ca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	1c59      	adds	r1, r3, #1
 80072ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80072bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	09db      	lsrs	r3, r3, #7
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80072ce:	d8f0      	bhi.n	80072b2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80072d6:	6a3a      	ldr	r2, [r7, #32]
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	61fb      	str	r3, [r7, #28]
 80072e4:	4b25      	ldr	r3, [pc, #148]	@ (800737c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	e00b      	b.n	8007304 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	1c59      	adds	r1, r3, #1
 80072f4:	61f9      	str	r1, [r7, #28]
 80072f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	09db      	lsrs	r3, r3, #7
 8007302:	61bb      	str	r3, [r7, #24]
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2b7f      	cmp	r3, #127	@ 0x7f
 8007308:	d8f0      	bhi.n	80072ec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	61fa      	str	r2, [r7, #28]
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	e00b      	b.n	800733c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	1c59      	adds	r1, r3, #1
 800732c:	6179      	str	r1, [r7, #20]
 800732e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	09db      	lsrs	r3, r3, #7
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007340:	d8f0      	bhi.n	8007324 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	617a      	str	r2, [r7, #20]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007352:	2218      	movs	r2, #24
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	68b8      	ldr	r0, [r7, #8]
 8007358:	f7fe ff56 	bl	8006208 <_SendPacket>
  RECORD_END();
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007362:	4b06      	ldr	r3, [pc, #24]	@ (800737c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800736a:	4b04      	ldr	r3, [pc, #16]	@ (800737c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800736c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736e:	4798      	blx	r3
  }
}
 8007370:	bf00      	nop
 8007372:	3730      	adds	r7, #48	@ 0x30
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200143d8 	.word	0x200143d8
 800737c:	200143a8 	.word	0x200143a8

08007380 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007380:	b580      	push	{r7, lr}
 8007382:	b092      	sub	sp, #72	@ 0x48
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007388:	f3ef 8311 	mrs	r3, BASEPRI
 800738c:	f04f 0120 	mov.w	r1, #32
 8007390:	f381 8811 	msr	BASEPRI, r1
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	486a      	ldr	r0, [pc, #424]	@ (8007540 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007398:	f7fe fe45 	bl	8006026 <_PreparePacket>
 800739c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4b66      	ldr	r3, [pc, #408]	@ (8007544 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80073b2:	e00b      	b.n	80073cc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80073b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ba:	1c59      	adds	r1, r3, #1
 80073bc:	6479      	str	r1, [r7, #68]	@ 0x44
 80073be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073c8:	09db      	lsrs	r3, r3, #7
 80073ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80073cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80073d0:	d8f0      	bhi.n	80073b4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80073d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80073d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073ec:	e00b      	b.n	8007406 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f4:	1c59      	adds	r1, r3, #1
 80073f6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80073f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073fc:	b2d2      	uxtb	r2, r2
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007402:	09db      	lsrs	r3, r3, #7
 8007404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	2b7f      	cmp	r3, #127	@ 0x7f
 800740a:	d8f0      	bhi.n	80073ee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800740c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007412:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	4619      	mov	r1, r3
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7fe fdb1 	bl	8005f8c <_EncodeStr>
 800742a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800742c:	2209      	movs	r2, #9
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	6938      	ldr	r0, [r7, #16]
 8007432:	f7fe fee9 	bl	8006208 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4b40      	ldr	r3, [pc, #256]	@ (8007544 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	633b      	str	r3, [r7, #48]	@ 0x30
 800744a:	e00b      	b.n	8007464 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	b2da      	uxtb	r2, r3
 8007450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007452:	1c59      	adds	r1, r3, #1
 8007454:	6379      	str	r1, [r7, #52]	@ 0x34
 8007456:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	09db      	lsrs	r3, r3, #7
 8007462:	633b      	str	r3, [r7, #48]	@ 0x30
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	2b7f      	cmp	r3, #127	@ 0x7f
 8007468:	d8f0      	bhi.n	800744c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800746a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	637a      	str	r2, [r7, #52]	@ 0x34
 8007470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007478:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007484:	e00b      	b.n	800749e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	b2da      	uxtb	r2, r3
 800748a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748c:	1c59      	adds	r1, r3, #1
 800748e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007490:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	09db      	lsrs	r3, r3, #7
 800749c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80074a2:	d8f0      	bhi.n	8007486 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	623b      	str	r3, [r7, #32]
 80074be:	e00b      	b.n	80074d8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	1c59      	adds	r1, r3, #1
 80074c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80074ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	09db      	lsrs	r3, r3, #7
 80074d6:	623b      	str	r3, [r7, #32]
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	2b7f      	cmp	r3, #127	@ 0x7f
 80074dc:	d8f0      	bhi.n	80074c0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80074e4:	6a3a      	ldr	r2, [r7, #32]
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	e00b      	b.n	8007510 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	1c59      	adds	r1, r3, #1
 8007500:	61f9      	str	r1, [r7, #28]
 8007502:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	09db      	lsrs	r3, r3, #7
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b7f      	cmp	r3, #127	@ 0x7f
 8007514:	d8f0      	bhi.n	80074f8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	61fa      	str	r2, [r7, #28]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007526:	2215      	movs	r2, #21
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	6938      	ldr	r0, [r7, #16]
 800752c:	f7fe fe6c 	bl	8006208 <_SendPacket>
  RECORD_END();
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f383 8811 	msr	BASEPRI, r3
}
 8007536:	bf00      	nop
 8007538:	3748      	adds	r7, #72	@ 0x48
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	200143d8 	.word	0x200143d8
 8007544:	200143a8 	.word	0x200143a8

08007548 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800754c:	4b07      	ldr	r3, [pc, #28]	@ (800756c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d008      	beq.n	8007566 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007554:	4b05      	ldr	r3, [pc, #20]	@ (800756c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800755e:	4b03      	ldr	r3, [pc, #12]	@ (800756c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4798      	blx	r3
  }
}
 8007566:	bf00      	nop
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200143a8 	.word	0x200143a8

08007570 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007578:	f3ef 8311 	mrs	r3, BASEPRI
 800757c:	f04f 0120 	mov.w	r1, #32
 8007580:	f381 8811 	msr	BASEPRI, r1
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	480b      	ldr	r0, [pc, #44]	@ (80075b4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007588:	f7fe fd4d 	bl	8006026 <_PreparePacket>
 800758c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800758e:	2280      	movs	r2, #128	@ 0x80
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	6938      	ldr	r0, [r7, #16]
 8007594:	f7fe fcfa 	bl	8005f8c <_EncodeStr>
 8007598:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800759a:	220e      	movs	r2, #14
 800759c:	68f9      	ldr	r1, [r7, #12]
 800759e:	6938      	ldr	r0, [r7, #16]
 80075a0:	f7fe fe32 	bl	8006208 <_SendPacket>
  RECORD_END();
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f383 8811 	msr	BASEPRI, r3
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	200143d8 	.word	0x200143d8

080075b8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80075b8:	b590      	push	{r4, r7, lr}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80075be:	4b15      	ldr	r3, [pc, #84]	@ (8007614 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01a      	beq.n	80075fc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80075c6:	4b13      	ldr	r3, [pc, #76]	@ (8007614 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d015      	beq.n	80075fc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80075d0:	4b10      	ldr	r3, [pc, #64]	@ (8007614 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4798      	blx	r3
 80075d8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80075dc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80075de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	000a      	movs	r2, r1
 80075ec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80075ee:	4613      	mov	r3, r2
 80075f0:	461a      	mov	r2, r3
 80075f2:	4621      	mov	r1, r4
 80075f4:	200d      	movs	r0, #13
 80075f6:	f7ff fb37 	bl	8006c68 <SEGGER_SYSVIEW_RecordU32x2>
 80075fa:	e006      	b.n	800760a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80075fc:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4619      	mov	r1, r3
 8007602:	200c      	movs	r0, #12
 8007604:	f7ff faf4 	bl	8006bf0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	bd90      	pop	{r4, r7, pc}
 8007612:	bf00      	nop
 8007614:	200143a8 	.word	0x200143a8
 8007618:	e0001004 	.word	0xe0001004

0800761c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007622:	f3ef 8311 	mrs	r3, BASEPRI
 8007626:	f04f 0120 	mov.w	r1, #32
 800762a:	f381 8811 	msr	BASEPRI, r1
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	4819      	ldr	r0, [pc, #100]	@ (8007698 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007632:	f7fe fcf8 	bl	8006026 <_PreparePacket>
 8007636:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800763c:	4b17      	ldr	r3, [pc, #92]	@ (800769c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007644:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	e00b      	b.n	8007668 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	b2da      	uxtb	r2, r3
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	1c59      	adds	r1, r3, #1
 8007658:	6179      	str	r1, [r7, #20]
 800765a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	09db      	lsrs	r3, r3, #7
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b7f      	cmp	r3, #127	@ 0x7f
 800766c:	d8f0      	bhi.n	8007650 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	617a      	str	r2, [r7, #20]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800767e:	2202      	movs	r2, #2
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	68b8      	ldr	r0, [r7, #8]
 8007684:	f7fe fdc0 	bl	8006208 <_SendPacket>
  RECORD_END();
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f383 8811 	msr	BASEPRI, r3
}
 800768e:	bf00      	nop
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200143d8 	.word	0x200143d8
 800769c:	e000ed04 	.word	0xe000ed04

080076a0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80076a6:	f3ef 8311 	mrs	r3, BASEPRI
 80076aa:	f04f 0120 	mov.w	r1, #32
 80076ae:	f381 8811 	msr	BASEPRI, r1
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	4807      	ldr	r0, [pc, #28]	@ (80076d4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80076b6:	f7fe fcb6 	bl	8006026 <_PreparePacket>
 80076ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80076bc:	2203      	movs	r2, #3
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6838      	ldr	r0, [r7, #0]
 80076c2:	f7fe fda1 	bl	8006208 <_SendPacket>
  RECORD_END();
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f383 8811 	msr	BASEPRI, r3
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200143d8 	.word	0x200143d8

080076d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80076de:	f3ef 8311 	mrs	r3, BASEPRI
 80076e2:	f04f 0120 	mov.w	r1, #32
 80076e6:	f381 8811 	msr	BASEPRI, r1
 80076ea:	607b      	str	r3, [r7, #4]
 80076ec:	4807      	ldr	r0, [pc, #28]	@ (800770c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80076ee:	f7fe fc9a 	bl	8006026 <_PreparePacket>
 80076f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80076f4:	2212      	movs	r2, #18
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6838      	ldr	r0, [r7, #0]
 80076fa:	f7fe fd85 	bl	8006208 <_SendPacket>
  RECORD_END();
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f383 8811 	msr	BASEPRI, r3
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200143d8 	.word	0x200143d8

08007710 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007716:	f3ef 8311 	mrs	r3, BASEPRI
 800771a:	f04f 0120 	mov.w	r1, #32
 800771e:	f381 8811 	msr	BASEPRI, r1
 8007722:	607b      	str	r3, [r7, #4]
 8007724:	4807      	ldr	r0, [pc, #28]	@ (8007744 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007726:	f7fe fc7e 	bl	8006026 <_PreparePacket>
 800772a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800772c:	2211      	movs	r2, #17
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6838      	ldr	r0, [r7, #0]
 8007732:	f7fe fd69 	bl	8006208 <_SendPacket>
  RECORD_END();
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f383 8811 	msr	BASEPRI, r3
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	200143d8 	.word	0x200143d8

08007748 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007750:	f3ef 8311 	mrs	r3, BASEPRI
 8007754:	f04f 0120 	mov.w	r1, #32
 8007758:	f381 8811 	msr	BASEPRI, r1
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	4819      	ldr	r0, [pc, #100]	@ (80077c4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007760:	f7fe fc61 	bl	8006026 <_PreparePacket>
 8007764:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800776a:	4b17      	ldr	r3, [pc, #92]	@ (80077c8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	61bb      	str	r3, [r7, #24]
 800777c:	e00b      	b.n	8007796 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	1c59      	adds	r1, r3, #1
 8007786:	61f9      	str	r1, [r7, #28]
 8007788:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	09db      	lsrs	r3, r3, #7
 8007794:	61bb      	str	r3, [r7, #24]
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b7f      	cmp	r3, #127	@ 0x7f
 800779a:	d8f0      	bhi.n	800777e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	61fa      	str	r2, [r7, #28]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	701a      	strb	r2, [r3, #0]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80077ac:	2208      	movs	r2, #8
 80077ae:	68f9      	ldr	r1, [r7, #12]
 80077b0:	6938      	ldr	r0, [r7, #16]
 80077b2:	f7fe fd29 	bl	8006208 <_SendPacket>
  RECORD_END();
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f383 8811 	msr	BASEPRI, r3
}
 80077bc:	bf00      	nop
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200143d8 	.word	0x200143d8
 80077c8:	200143a8 	.word	0x200143a8

080077cc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077d4:	f3ef 8311 	mrs	r3, BASEPRI
 80077d8:	f04f 0120 	mov.w	r1, #32
 80077dc:	f381 8811 	msr	BASEPRI, r1
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	4819      	ldr	r0, [pc, #100]	@ (8007848 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80077e4:	f7fe fc1f 	bl	8006026 <_PreparePacket>
 80077e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80077ee:	4b17      	ldr	r3, [pc, #92]	@ (800784c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	e00b      	b.n	800781a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	b2da      	uxtb	r2, r3
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	1c59      	adds	r1, r3, #1
 800780a:	61f9      	str	r1, [r7, #28]
 800780c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	09db      	lsrs	r3, r3, #7
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b7f      	cmp	r3, #127	@ 0x7f
 800781e:	d8f0      	bhi.n	8007802 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	61fa      	str	r2, [r7, #28]
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007830:	2204      	movs	r2, #4
 8007832:	68f9      	ldr	r1, [r7, #12]
 8007834:	6938      	ldr	r0, [r7, #16]
 8007836:	f7fe fce7 	bl	8006208 <_SendPacket>
  RECORD_END();
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f383 8811 	msr	BASEPRI, r3
}
 8007840:	bf00      	nop
 8007842:	3720      	adds	r7, #32
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	200143d8 	.word	0x200143d8
 800784c:	200143a8 	.word	0x200143a8

08007850 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007858:	f3ef 8311 	mrs	r3, BASEPRI
 800785c:	f04f 0120 	mov.w	r1, #32
 8007860:	f381 8811 	msr	BASEPRI, r1
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	4819      	ldr	r0, [pc, #100]	@ (80078cc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007868:	f7fe fbdd 	bl	8006026 <_PreparePacket>
 800786c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007872:	4b17      	ldr	r3, [pc, #92]	@ (80078d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	61fb      	str	r3, [r7, #28]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	61bb      	str	r3, [r7, #24]
 8007884:	e00b      	b.n	800789e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	b2da      	uxtb	r2, r3
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	1c59      	adds	r1, r3, #1
 800788e:	61f9      	str	r1, [r7, #28]
 8007890:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	09db      	lsrs	r3, r3, #7
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80078a2:	d8f0      	bhi.n	8007886 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	61fa      	str	r2, [r7, #28]
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80078b4:	2206      	movs	r2, #6
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	6938      	ldr	r0, [r7, #16]
 80078ba:	f7fe fca5 	bl	8006208 <_SendPacket>
  RECORD_END();
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f383 8811 	msr	BASEPRI, r3
}
 80078c4:	bf00      	nop
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	200143d8 	.word	0x200143d8
 80078d0:	200143a8 	.word	0x200143a8

080078d4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	@ 0x28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80078de:	f3ef 8311 	mrs	r3, BASEPRI
 80078e2:	f04f 0120 	mov.w	r1, #32
 80078e6:	f381 8811 	msr	BASEPRI, r1
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	4827      	ldr	r0, [pc, #156]	@ (800798c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80078ee:	f7fe fb9a 	bl	8006026 <_PreparePacket>
 80078f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80078f8:	4b25      	ldr	r3, [pc, #148]	@ (8007990 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	627b      	str	r3, [r7, #36]	@ 0x24
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	623b      	str	r3, [r7, #32]
 800790a:	e00b      	b.n	8007924 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	b2da      	uxtb	r2, r3
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	1c59      	adds	r1, r3, #1
 8007914:	6279      	str	r1, [r7, #36]	@ 0x24
 8007916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	09db      	lsrs	r3, r3, #7
 8007922:	623b      	str	r3, [r7, #32]
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	2b7f      	cmp	r3, #127	@ 0x7f
 8007928:	d8f0      	bhi.n	800790c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007930:	6a3a      	ldr	r2, [r7, #32]
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	61fb      	str	r3, [r7, #28]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	e00b      	b.n	800795c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	61f9      	str	r1, [r7, #28]
 800794e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	09db      	lsrs	r3, r3, #7
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007960:	d8f0      	bhi.n	8007944 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	61fa      	str	r2, [r7, #28]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007972:	2207      	movs	r2, #7
 8007974:	68f9      	ldr	r1, [r7, #12]
 8007976:	6938      	ldr	r0, [r7, #16]
 8007978:	f7fe fc46 	bl	8006208 <_SendPacket>
  RECORD_END();
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f383 8811 	msr	BASEPRI, r3
}
 8007982:	bf00      	nop
 8007984:	3728      	adds	r7, #40	@ 0x28
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	200143d8 	.word	0x200143d8
 8007990:	200143a8 	.word	0x200143a8

08007994 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800799c:	4b04      	ldr	r3, [pc, #16]	@ (80079b0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	1ad3      	subs	r3, r2, r3
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	200143a8 	.word	0x200143a8

080079b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08c      	sub	sp, #48	@ 0x30
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80079be:	4b3b      	ldr	r3, [pc, #236]	@ (8007aac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d06d      	beq.n	8007aa2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80079c6:	4b39      	ldr	r3, [pc, #228]	@ (8007aac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80079cc:	2300      	movs	r3, #0
 80079ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079d0:	e008      	b.n	80079e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80079d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80079d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	3301      	adds	r3, #1
 80079e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d3f2      	bcc.n	80079d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80079ec:	e000      	b.n	80079f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80079ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80079f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d055      	beq.n	8007aa2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079f6:	f3ef 8311 	mrs	r3, BASEPRI
 80079fa:	f04f 0120 	mov.w	r1, #32
 80079fe:	f381 8811 	msr	BASEPRI, r1
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	482a      	ldr	r0, [pc, #168]	@ (8007ab0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007a06:	f7fe fb0e 	bl	8006026 <_PreparePacket>
 8007a0a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	623b      	str	r3, [r7, #32]
 8007a18:	e00b      	b.n	8007a32 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	1c59      	adds	r1, r3, #1
 8007a22:	6279      	str	r1, [r7, #36]	@ 0x24
 8007a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	09db      	lsrs	r3, r3, #7
 8007a30:	623b      	str	r3, [r7, #32]
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a36:	d8f0      	bhi.n	8007a1a <SEGGER_SYSVIEW_SendModule+0x66>
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a3e:	6a3a      	ldr	r2, [r7, #32]
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	e00b      	b.n	8007a6c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	1c59      	adds	r1, r3, #1
 8007a5c:	61f9      	str	r1, [r7, #28]
 8007a5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	09db      	lsrs	r3, r3, #7
 8007a6a:	61bb      	str	r3, [r7, #24]
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a70:	d8f0      	bhi.n	8007a54 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	61fa      	str	r2, [r7, #28]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2280      	movs	r2, #128	@ 0x80
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7fe fa7e 	bl	8005f8c <_EncodeStr>
 8007a90:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007a92:	2216      	movs	r2, #22
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	6938      	ldr	r0, [r7, #16]
 8007a98:	f7fe fbb6 	bl	8006208 <_SendPacket>
      RECORD_END();
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3730      	adds	r7, #48	@ 0x30
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	200143d0 	.word	0x200143d0
 8007ab0:	200143d8 	.word	0x200143d8

08007ab4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007aba:	4b0c      	ldr	r3, [pc, #48]	@ (8007aec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00f      	beq.n	8007ae2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8007aec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f2      	bne.n	8007ac8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	200143d0 	.word	0x200143d0

08007af0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007af6:	f3ef 8311 	mrs	r3, BASEPRI
 8007afa:	f04f 0120 	mov.w	r1, #32
 8007afe:	f381 8811 	msr	BASEPRI, r1
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	4817      	ldr	r0, [pc, #92]	@ (8007b64 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007b06:	f7fe fa8e 	bl	8006026 <_PreparePacket>
 8007b0a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	4b14      	ldr	r3, [pc, #80]	@ (8007b68 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	e00b      	b.n	8007b34 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	1c59      	adds	r1, r3, #1
 8007b24:	6179      	str	r1, [r7, #20]
 8007b26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	09db      	lsrs	r3, r3, #7
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b38:	d8f0      	bhi.n	8007b1c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	617a      	str	r2, [r7, #20]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007b4a:	221b      	movs	r2, #27
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	68b8      	ldr	r0, [r7, #8]
 8007b50:	f7fe fb5a 	bl	8006208 <_SendPacket>
  RECORD_END();
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f383 8811 	msr	BASEPRI, r3
}
 8007b5a:	bf00      	nop
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	200143d8 	.word	0x200143d8
 8007b68:	200143d4 	.word	0x200143d4

08007b6c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007b6c:	b40f      	push	{r0, r1, r2, r3}
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007b7a:	1d3b      	adds	r3, r7, #4
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2100      	movs	r1, #0
 8007b80:	6938      	ldr	r0, [r7, #16]
 8007b82:	f7fe fdcb 	bl	800671c <_VPrintTarget>
  va_end(ParamList);
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b90:	b004      	add	sp, #16
 8007b92:	4770      	bx	lr

08007b94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	@ 0x28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007ba0:	f04f 0120 	mov.w	r1, #32
 8007ba4:	f381 8811 	msr	BASEPRI, r1
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	4827      	ldr	r0, [pc, #156]	@ (8007c48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007bac:	f7fe fa3b 	bl	8006026 <_PreparePacket>
 8007bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bb2:	2280      	movs	r2, #128	@ 0x80
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	6938      	ldr	r0, [r7, #16]
 8007bb8:	f7fe f9e8 	bl	8005f8c <_EncodeStr>
 8007bbc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	e00b      	b.n	8007be0 <SEGGER_SYSVIEW_Warn+0x4c>
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	1c59      	adds	r1, r3, #1
 8007bd0:	6279      	str	r1, [r7, #36]	@ 0x24
 8007bd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	09db      	lsrs	r3, r3, #7
 8007bde:	623b      	str	r3, [r7, #32]
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007be4:	d8f0      	bhi.n	8007bc8 <SEGGER_SYSVIEW_Warn+0x34>
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bec:	6a3a      	ldr	r2, [r7, #32]
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	e00b      	b.n	8007c18 <SEGGER_SYSVIEW_Warn+0x84>
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	1c59      	adds	r1, r3, #1
 8007c08:	61f9      	str	r1, [r7, #28]
 8007c0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	09db      	lsrs	r3, r3, #7
 8007c16:	61bb      	str	r3, [r7, #24]
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c1c:	d8f0      	bhi.n	8007c00 <SEGGER_SYSVIEW_Warn+0x6c>
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	61fa      	str	r2, [r7, #28]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	b2d2      	uxtb	r2, r2
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007c2e:	221a      	movs	r2, #26
 8007c30:	68f9      	ldr	r1, [r7, #12]
 8007c32:	6938      	ldr	r0, [r7, #16]
 8007c34:	f7fe fae8 	bl	8006208 <_SendPacket>
  RECORD_END();
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f383 8811 	msr	BASEPRI, r3
}
 8007c3e:	bf00      	nop
 8007c40:	3728      	adds	r7, #40	@ 0x28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200143d8 	.word	0x200143d8

08007c4c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007c50:	4b13      	ldr	r3, [pc, #76]	@ (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c52:	7e1b      	ldrb	r3, [r3, #24]
 8007c54:	4619      	mov	r1, r3
 8007c56:	4a13      	ldr	r2, [pc, #76]	@ (8007ca4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007c58:	460b      	mov	r3, r1
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	440b      	add	r3, r1
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	336c      	adds	r3, #108	@ 0x6c
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c68:	7e1b      	ldrb	r3, [r3, #24]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	490d      	ldr	r1, [pc, #52]	@ (8007ca4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007c6e:	4603      	mov	r3, r0
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	4403      	add	r3, r0
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	440b      	add	r3, r1
 8007c78:	3370      	adds	r3, #112	@ 0x70
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d00b      	beq.n	8007c98 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007c80:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c82:	789b      	ldrb	r3, [r3, #2]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d107      	bne.n	8007c98 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007c88:	4b05      	ldr	r3, [pc, #20]	@ (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007c8e:	f7fe f9d7 	bl	8006040 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007c92:	4b03      	ldr	r3, [pc, #12]	@ (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007c98:	4b01      	ldr	r3, [pc, #4]	@ (8007ca0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	200143a8 	.word	0x200143a8
 8007ca4:	20012ee8 	.word	0x20012ee8

08007ca8 <memcmp>:
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	3901      	subs	r1, #1
 8007cac:	4402      	add	r2, r0
 8007cae:	4290      	cmp	r0, r2
 8007cb0:	d101      	bne.n	8007cb6 <memcmp+0xe>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e005      	b.n	8007cc2 <memcmp+0x1a>
 8007cb6:	7803      	ldrb	r3, [r0, #0]
 8007cb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d001      	beq.n	8007cc4 <memcmp+0x1c>
 8007cc0:	1b18      	subs	r0, r3, r4
 8007cc2:	bd10      	pop	{r4, pc}
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	e7f2      	b.n	8007cae <memcmp+0x6>

08007cc8 <memset>:
 8007cc8:	4402      	add	r2, r0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d100      	bne.n	8007cd2 <memset+0xa>
 8007cd0:	4770      	bx	lr
 8007cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd6:	e7f9      	b.n	8007ccc <memset+0x4>

08007cd8 <__libc_init_array>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	4d0d      	ldr	r5, [pc, #52]	@ (8007d10 <__libc_init_array+0x38>)
 8007cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8007d14 <__libc_init_array+0x3c>)
 8007cde:	1b64      	subs	r4, r4, r5
 8007ce0:	10a4      	asrs	r4, r4, #2
 8007ce2:	2600      	movs	r6, #0
 8007ce4:	42a6      	cmp	r6, r4
 8007ce6:	d109      	bne.n	8007cfc <__libc_init_array+0x24>
 8007ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8007d18 <__libc_init_array+0x40>)
 8007cea:	4c0c      	ldr	r4, [pc, #48]	@ (8007d1c <__libc_init_array+0x44>)
 8007cec:	f000 f826 	bl	8007d3c <_init>
 8007cf0:	1b64      	subs	r4, r4, r5
 8007cf2:	10a4      	asrs	r4, r4, #2
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	42a6      	cmp	r6, r4
 8007cf8:	d105      	bne.n	8007d06 <__libc_init_array+0x2e>
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d00:	4798      	blx	r3
 8007d02:	3601      	adds	r6, #1
 8007d04:	e7ee      	b.n	8007ce4 <__libc_init_array+0xc>
 8007d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0a:	4798      	blx	r3
 8007d0c:	3601      	adds	r6, #1
 8007d0e:	e7f2      	b.n	8007cf6 <__libc_init_array+0x1e>
 8007d10:	08007f30 	.word	0x08007f30
 8007d14:	08007f30 	.word	0x08007f30
 8007d18:	08007f30 	.word	0x08007f30
 8007d1c:	08007f34 	.word	0x08007f34

08007d20 <memcpy>:
 8007d20:	440a      	add	r2, r1
 8007d22:	4291      	cmp	r1, r2
 8007d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d28:	d100      	bne.n	8007d2c <memcpy+0xc>
 8007d2a:	4770      	bx	lr
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d36:	4291      	cmp	r1, r2
 8007d38:	d1f9      	bne.n	8007d2e <memcpy+0xe>
 8007d3a:	bd10      	pop	{r4, pc}

08007d3c <_init>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr

08007d48 <_fini>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr
