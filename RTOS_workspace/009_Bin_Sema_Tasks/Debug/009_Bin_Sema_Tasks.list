
009_Bin_Sema_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007264  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ec  080075ec  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  080075ec  080075ec  000085ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075f4  080075f4  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f4  080075f4  000085f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075f8  080075f8  000085f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080075fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009070  2**0
                  CONTENTS
 10 .bss          000130ac  20000070  20000070  00009070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001311c  2001311c  00009070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132c0  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f46  00000000  00000000  0001c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  0001f2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2d  00000000  00000000  000204e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bbe  00000000  00000000  00021315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b3b  00000000  00000000  00044ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d68ca  00000000  00000000  0005aa0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001312d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005718  00000000  00000000  0013131c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00136a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073dc 	.word	0x080073dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080073dc 	.word	0x080073dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fd3b 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f877 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f909 	bl	8000794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8dd 	bl	8000740 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
 8000586:	492f      	ldr	r1, [pc, #188]	@ (8000644 <main+0xd4>)
 8000588:	482f      	ldr	r0, [pc, #188]	@ (8000648 <main+0xd8>)
 800058a:	f005 fe73 	bl	8006274 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)usr_msg, strlen(usr_msg));
 800058e:	482e      	ldr	r0, [pc, #184]	@ (8000648 <main+0xd8>)
 8000590:	f7ff fe1e 	bl	80001d0 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	b29b      	uxth	r3, r3
 8000598:	461a      	mov	r2, r3
 800059a:	492b      	ldr	r1, [pc, #172]	@ (8000648 <main+0xd8>)
 800059c:	482b      	ldr	r0, [pc, #172]	@ (800064c <main+0xdc>)
 800059e:	f002 f873 	bl	8002688 <HAL_UART_Transmit_IT>
	HAL_Delay(500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a6:	f000 fd65 	bl	8001074 <HAL_Delay>

	/* Before a semaphore is used it must be explicitly created.
	* In this example a binary semaphore is created . */
	vSemaphoreCreateBinary(xWork);
 80005aa:	2203      	movs	r2, #3
 80005ac:	2100      	movs	r1, #0
 80005ae:	2001      	movs	r0, #1
 80005b0:	f003 f88c 	bl	80036cc <xQueueGenericCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a26      	ldr	r2, [pc, #152]	@ (8000650 <main+0xe0>)
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	4b25      	ldr	r3, [pc, #148]	@ (8000650 <main+0xe0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d006      	beq.n	80005d0 <main+0x60>
 80005c2:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <main+0xe0>)
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	f003 f904 	bl	80037d8 <xQueueGenericSend>

	/* The queue is created to hold a maximum of 1 Element. */
	xWorkQueue = xQueueCreate(1, sizeof(unsigned int));
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	2001      	movs	r0, #1
 80005d6:	f003 f879 	bl	80036cc <xQueueGenericCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000654 <main+0xe4>)
 80005de:	6013      	str	r3, [r2, #0]

	/* Check the semaphore and queue was created successfully. */
	if((xWork != NULL) && (xWorkQueue != NULL))
 80005e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <main+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d01c      	beq.n	8000622 <main+0xb2>
 80005e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <main+0xe4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d018      	beq.n	8000622 <main+0xb2>
	{
		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
		xTaskCreate(vManagerTask, "Manager", 500, NULL, 3, NULL);
 80005f0:	2300      	movs	r3, #0
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2303      	movs	r3, #3
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005fe:	4916      	ldr	r1, [pc, #88]	@ (8000658 <main+0xe8>)
 8000600:	4816      	ldr	r0, [pc, #88]	@ (800065c <main+0xec>)
 8000602:	f003 fe11 	bl	8004228 <xTaskCreate>

		/* Create a employee task with less priority than manager */
		xTaskCreate(vEmployeeTask, "Employee", 500, NULL, 1, NULL);
 8000606:	2300      	movs	r3, #0
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000614:	4912      	ldr	r1, [pc, #72]	@ (8000660 <main+0xf0>)
 8000616:	4813      	ldr	r0, [pc, #76]	@ (8000664 <main+0xf4>)
 8000618:	f003 fe06 	bl	8004228 <xTaskCreate>

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
 800061c:	f003 ff80 	bl	8004520 <vTaskStartScheduler>
 8000620:	e00d      	b.n	800063e <main+0xce>
	}else
	{
		sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 8000622:	4911      	ldr	r1, [pc, #68]	@ (8000668 <main+0xf8>)
 8000624:	4808      	ldr	r0, [pc, #32]	@ (8000648 <main+0xd8>)
 8000626:	f005 fe25 	bl	8006274 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)usr_msg, strlen(usr_msg));
 800062a:	4807      	ldr	r0, [pc, #28]	@ (8000648 <main+0xd8>)
 800062c:	f7ff fdd0 	bl	80001d0 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29b      	uxth	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	4904      	ldr	r1, [pc, #16]	@ (8000648 <main+0xd8>)
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <main+0xdc>)
 800063a:	f002 f825 	bl	8002688 <HAL_UART_Transmit_IT>
	insufficient heap memory available for a resource to be created. */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	bf00      	nop
 8000640:	e7fd      	b.n	800063e <main+0xce>
 8000642:	bf00      	nop
 8000644:	080073f4 	.word	0x080073f4
 8000648:	200000d4 	.word	0x200000d4
 800064c:	2000008c 	.word	0x2000008c
 8000650:	200001d0 	.word	0x200001d0
 8000654:	200001d4 	.word	0x200001d4
 8000658:	08007428 	.word	0x08007428
 800065c:	08000a51 	.word	0x08000a51
 8000660:	08007430 	.word	0x08007430
 8000664:	08000b09 	.word	0x08000b09
 8000668:	0800743c 	.word	0x0800743c

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	@ 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fe5d 	bl	800633a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	@ (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	@ (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	@ (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e0:	23a8      	movs	r3, #168	@ 0xa8
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f80d 	bl	8001710 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006fc:	f000 fa4c 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fa6e 	bl	8001c00 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072a:	f000 fa35 	bl	8000b98 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <MX_USART2_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_USART2_UART_Init+0x4c>)
 8000778:	f001 ff36 	bl	80025e8 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 fa09 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000008c 	.word	0x2000008c
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4ba2      	ldr	r3, [pc, #648]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4aa1      	ldr	r2, [pc, #644]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b9f      	ldr	r3, [pc, #636]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b9b      	ldr	r3, [pc, #620]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a9a      	ldr	r2, [pc, #616]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b98      	ldr	r3, [pc, #608]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b94      	ldr	r3, [pc, #592]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a93      	ldr	r2, [pc, #588]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b91      	ldr	r3, [pc, #580]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b8d      	ldr	r3, [pc, #564]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a8c      	ldr	r2, [pc, #560]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b8a      	ldr	r3, [pc, #552]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b86      	ldr	r3, [pc, #536]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a85      	ldr	r2, [pc, #532]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b83      	ldr	r3, [pc, #524]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a7e      	ldr	r2, [pc, #504]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b7c      	ldr	r3, [pc, #496]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4879      	ldr	r0, [pc, #484]	@ (8000a3c <MX_GPIO_Init+0x2a8>)
 8000858:	f000 ff40 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4877      	ldr	r0, [pc, #476]	@ (8000a40 <MX_GPIO_Init+0x2ac>)
 8000862:	f000 ff3b 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800086c:	4875      	ldr	r0, [pc, #468]	@ (8000a44 <MX_GPIO_Init+0x2b0>)
 800086e:	f000 ff35 	bl	80016dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	486c      	ldr	r0, [pc, #432]	@ (8000a3c <MX_GPIO_Init+0x2a8>)
 800088a:	f000 fd8b 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4866      	ldr	r0, [pc, #408]	@ (8000a40 <MX_GPIO_Init+0x2ac>)
 80008a6:	f000 fd7d 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	485e      	ldr	r0, [pc, #376]	@ (8000a40 <MX_GPIO_Init+0x2ac>)
 80008c6:	f000 fd6d 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	485a      	ldr	r0, [pc, #360]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 80008e0:	f000 fd60 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e4:	2310      	movs	r3, #16
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f4:	2306      	movs	r3, #6
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4852      	ldr	r0, [pc, #328]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 8000900:	f000 fd50 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000904:	23e0      	movs	r3, #224	@ 0xe0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000914:	2305      	movs	r3, #5
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	484a      	ldr	r0, [pc, #296]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 8000920:	f000 fd40 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000924:	2304      	movs	r3, #4
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <MX_GPIO_Init+0x2b8>)
 8000938:	f000 fd34 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800093c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094e:	2305      	movs	r3, #5
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	483c      	ldr	r0, [pc, #240]	@ (8000a4c <MX_GPIO_Init+0x2b8>)
 800095a:	f000 fd23 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000962:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4833      	ldr	r0, [pc, #204]	@ (8000a44 <MX_GPIO_Init+0x2b0>)
 8000978:	f000 fd14 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800097c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098e:	2306      	movs	r3, #6
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4829      	ldr	r0, [pc, #164]	@ (8000a40 <MX_GPIO_Init+0x2ac>)
 800099a:	f000 fd03 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4825      	ldr	r0, [pc, #148]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 80009b4:	f000 fcf6 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ca:	230a      	movs	r3, #10
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	481c      	ldr	r0, [pc, #112]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 80009d6:	f000 fce5 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009da:	2320      	movs	r3, #32
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4815      	ldr	r0, [pc, #84]	@ (8000a44 <MX_GPIO_Init+0x2b0>)
 80009ee:	f000 fcd9 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f8:	2312      	movs	r3, #18
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a04:	2304      	movs	r3, #4
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480f      	ldr	r0, [pc, #60]	@ (8000a4c <MX_GPIO_Init+0x2b8>)
 8000a10:	f000 fcc8 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a18:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_GPIO_Init+0x2a8>)
 8000a2a:	f000 fcbb 	bl	80013a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	@ 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400

08000a50 <vManagerTask>:

/* USER CODE BEGIN 4 */
//function prototypes
void vManagerTask( void *pvParameters )
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	can subsequently be taken (obtained) */

	while(1)
	{
		/* get a work ticket id(some random number) */
		xWorkTicketId = (rand() & 0x1FF);
 8000a58:	f005 fb0c 	bl	8006074 <rand>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a62:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend(xWorkQueue, &xWorkTicketId, portMAX_DELAY); //Post an item on back of the queue
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <vManagerTask+0x5c>)
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	f107 0108 	add.w	r1, r7, #8
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a72:	f002 feb1 	bl	80037d8 <xQueueGenericSend>
 8000a76:	60f8      	str	r0, [r7, #12]

		if(xStatus != pdPASS)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d00e      	beq.n	8000a9c <vManagerTask+0x4c>
		{
			sprintf(usr_msg, "Could not send to the queue.\r\n");
 8000a7e:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <vManagerTask+0x60>)
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <vManagerTask+0x64>)
 8000a82:	f005 fbf7 	bl	8006274 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)usr_msg, strlen(usr_msg));
 8000a86:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <vManagerTask+0x64>)
 8000a88:	f7ff fba2 	bl	80001d0 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	@ (8000ab4 <vManagerTask+0x64>)
 8000a94:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <vManagerTask+0x68>)
 8000a96:	f001 fdf7 	bl	8002688 <HAL_UART_Transmit_IT>
 8000a9a:	e7dd      	b.n	8000a58 <vManagerTask+0x8>
		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive(xWork);
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <vManagerTask+0x6c>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f002 fe97 	bl	80037d8 <xQueueGenericSend>
		xWorkTicketId = (rand() & 0x1FF);
 8000aaa:	e7d5      	b.n	8000a58 <vManagerTask+0x8>
 8000aac:	200001d4 	.word	0x200001d4
 8000ab0:	0800745c 	.word	0x0800745c
 8000ab4:	200000d4 	.word	0x200000d4
 8000ab8:	2000008c 	.word	0x2000008c
 8000abc:	200001d0 	.word	0x200001d0

08000ac0 <EmployeeDoWork>:
	}
}
/*-----------------------------------------------------------*/

void EmployeeDoWork(unsigned char TicketId)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	461a      	mov	r2, r3
 8000ace:	490b      	ldr	r1, [pc, #44]	@ (8000afc <EmployeeDoWork+0x3c>)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <EmployeeDoWork+0x40>)
 8000ad2:	f005 fbcf 	bl	8006274 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)usr_msg, strlen(usr_msg));
 8000ad6:	480a      	ldr	r0, [pc, #40]	@ (8000b00 <EmployeeDoWork+0x40>)
 8000ad8:	f7ff fb7a 	bl	80001d0 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4907      	ldr	r1, [pc, #28]	@ (8000b00 <EmployeeDoWork+0x40>)
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <EmployeeDoWork+0x44>)
 8000ae6:	f001 fdcf 	bl	8002688 <HAL_UART_Transmit_IT>
	vTaskDelay(TicketId);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fce1 	bl	80044b4 <vTaskDelay>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	0800747c 	.word	0x0800747c
 8000b00:	200000d4 	.word	0x200000d4
 8000b04:	2000008c 	.word	0x2000008c

08000b08 <vEmployeeTask>:

static void vEmployeeTask(void *pvParameters)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
	/* As per most tasks, this task is implemented within an infinite loop. */
	while(1)
	{
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake(xWork, portMAX_DELAY);
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <vEmployeeTask+0x58>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 f8ef 	bl	8003cfc <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive(xWorkQueue, &xWorkTicketId, portMAX_DELAY);
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <vEmployeeTask+0x5c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f107 010b 	add.w	r1, r7, #11
 8000b26:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 f804 	bl	8003b38 <xQueueReceive>
 8000b30:	60f8      	str	r0, [r7, #12]

		if(xStatus == pdPASS )
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d104      	bne.n	8000b42 <vEmployeeTask+0x3a>
		{
			/* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8000b38:	7afb      	ldrb	r3, [r7, #11]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ffc0 	bl	8000ac0 <EmployeeDoWork>
 8000b40:	e7e6      	b.n	8000b10 <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 8000b42:	4909      	ldr	r1, [pc, #36]	@ (8000b68 <vEmployeeTask+0x60>)
 8000b44:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <vEmployeeTask+0x64>)
 8000b46:	f005 fb95 	bl	8006274 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)usr_msg, strlen(usr_msg));
 8000b4a:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <vEmployeeTask+0x64>)
 8000b4c:	f7ff fb40 	bl	80001d0 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	4905      	ldr	r1, [pc, #20]	@ (8000b6c <vEmployeeTask+0x64>)
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <vEmployeeTask+0x68>)
 8000b5a:	f001 fd95 	bl	8002688 <HAL_UART_Transmit_IT>
		xSemaphoreTake(xWork, portMAX_DELAY);
 8000b5e:	e7d7      	b.n	8000b10 <vEmployeeTask+0x8>
 8000b60:	200001d0 	.word	0x200001d0
 8000b64:	200001d4 	.word	0x200001d4
 8000b68:	080074a8 	.word	0x080074a8
 8000b6c:	200000d4 	.word	0x200000d4
 8000b70:	2000008c 	.word	0x2000008c

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 fa55 	bl	8001034 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40001000 	.word	0x40001000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1d      	ldr	r2, [pc, #116]	@ (8000c88 <HAL_UART_MspInit+0x94>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d133      	bne.n	8000c7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <HAL_UART_MspInit+0x9c>)
 8000c6a:	f000 fb9b 	bl	80013a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2106      	movs	r1, #6
 8000c72:	2026      	movs	r0, #38	@ 0x26
 8000c74:	f000 fada 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c78:	2026      	movs	r0, #38	@ 0x26
 8000c7a:	f000 faf3 	bl	8001264 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	@ 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	@ 0x38
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b33      	ldr	r3, [pc, #204]	@ (8000d78 <HAL_InitTick+0xe4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a32      	ldr	r2, [pc, #200]	@ (8000d78 <HAL_InitTick+0xe4>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb4:	4b30      	ldr	r3, [pc, #192]	@ (8000d78 <HAL_InitTick+0xe4>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc0:	f107 0210 	add.w	r2, r7, #16
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f9b8 	bl	8002040 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cda:	f001 f989 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8000cde:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ce2:	f001 f985 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cee:	4a23      	ldr	r2, [pc, #140]	@ (8000d7c <HAL_InitTick+0xe8>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	0c9b      	lsrs	r3, r3, #18
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <HAL_InitTick+0xec>)
 8000cfc:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <HAL_InitTick+0xf0>)
 8000cfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <HAL_InitTick+0xec>)
 8000d02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d08:	4a1d      	ldr	r2, [pc, #116]	@ (8000d80 <HAL_InitTick+0xec>)
 8000d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <HAL_InitTick+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <HAL_InitTick+0xec>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_InitTick+0xec>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d20:	4817      	ldr	r0, [pc, #92]	@ (8000d80 <HAL_InitTick+0xec>)
 8000d22:	f001 f9bf 	bl	80020a4 <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d11b      	bne.n	8000d6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d34:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <HAL_InitTick+0xec>)
 8000d36:	f001 fa0f 	bl	8002158 <HAL_TIM_Base_Start_IT>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d111      	bne.n	8000d6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d48:	2036      	movs	r0, #54	@ 0x36
 8000d4a:	f000 fa8b 	bl	8001264 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d808      	bhi.n	8000d66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2036      	movs	r0, #54	@ 0x36
 8000d5a:	f000 fa67 	bl	800122c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_InitTick+0xf4>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e002      	b.n	8000d6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3738      	adds	r7, #56	@ 0x38
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	200001d8 	.word	0x200001d8
 8000d84:	40001000 	.word	0x40001000
 8000d88:	20000004 	.word	0x20000004

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <NMI_Handler+0x4>

08000d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <MemManage_Handler+0x4>

08000da4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc8:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <USART2_IRQHandler+0x10>)
 8000dca:	f001 fc93 	bl	80026f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000008c 	.word	0x2000008c

08000dd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <TIM6_DAC_IRQHandler+0x10>)
 8000dde:	f001 fa2b 	bl	8002238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001d8 	.word	0x200001d8

08000dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return 1;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_kill>:

int _kill(int pid, int sig)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e06:	f005 fae7 	bl	80063d8 <__errno>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2216      	movs	r2, #22
 8000e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_exit>:

void _exit (int status)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ffe7 	bl	8000dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e2e:	bf00      	nop
 8000e30:	e7fd      	b.n	8000e2e <_exit+0x12>

08000e32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e00a      	b.n	8000e5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e44:	f3af 8000 	nop.w
 8000e48:	4601      	mov	r1, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	60ba      	str	r2, [r7, #8]
 8000e50:	b2ca      	uxtb	r2, r1
 8000e52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3301      	adds	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dbf0      	blt.n	8000e44 <_read+0x12>
  }

  return len;
 8000e62:	687b      	ldr	r3, [r7, #4]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e009      	b.n	8000e92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	60ba      	str	r2, [r7, #8]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	dbf1      	blt.n	8000e7e <_write+0x12>
  }
  return len;
 8000e9a:	687b      	ldr	r3, [r7, #4]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_close>:

int _close(int file)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ecc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_isatty>:

int _isatty(int file)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee4:	2301      	movs	r3, #1
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f14:	4a14      	ldr	r2, [pc, #80]	@ (8000f68 <_sbrk+0x5c>)
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <_sbrk+0x60>)
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <_sbrk+0x64>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	@ (8000f74 <_sbrk+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d207      	bcs.n	8000f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f3c:	f005 fa4c 	bl	80063d8 <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	220c      	movs	r2, #12
 8000f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e009      	b.n	8000f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <_sbrk+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20020000 	.word	0x20020000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	20000220 	.word	0x20000220
 8000f74:	20013120 	.word	0x20013120

08000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa0:	f7ff ffea 	bl	8000f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	@ (8000fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fca:	f005 fa0b 	bl	80063e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff facf 	bl	8000570 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fe0:	080075fc 	.word	0x080075fc
  ldr r2, =_sbss
 8000fe4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fe8:	2001311c 	.word	0x2001311c

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f8fc 	bl	8001216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	200f      	movs	r0, #15
 8001020:	f7ff fe38 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fdbe 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	20000224 	.word	0x20000224

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000224 	.word	0x20000224

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	@ (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	@ (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	@ (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff4c 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff61 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb1 	bl	80011b0 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff80 	bl	800115c <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff54 	bl	8001120 <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800128e:	f7ff fee5 	bl	800105c <HAL_GetTick>
 8001292:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d008      	beq.n	80012b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2280      	movs	r2, #128	@ 0x80
 80012a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e052      	b.n	8001358 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0216 	bic.w	r2, r2, #22
 80012c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695a      	ldr	r2, [r3, #20]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <HAL_DMA_Abort+0x62>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0208 	bic.w	r2, r2, #8
 80012f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0201 	bic.w	r2, r2, #1
 8001300:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001302:	e013      	b.n	800132c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001304:	f7ff feaa 	bl	800105c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b05      	cmp	r3, #5
 8001310:	d90c      	bls.n	800132c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2220      	movs	r2, #32
 8001316:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e015      	b.n	8001358 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1e4      	bne.n	8001304 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133e:	223f      	movs	r2, #63	@ 0x3f
 8001340:	409a      	lsls	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d004      	beq.n	800137e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2280      	movs	r2, #128	@ 0x80
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00c      	b.n	8001398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2205      	movs	r2, #5
 8001382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	@ 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e16b      	b.n	8001698 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013c0:	2201      	movs	r2, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	429a      	cmp	r2, r3
 80013da:	f040 815a 	bne.w	8001692 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d005      	beq.n	80013f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d130      	bne.n	8001458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f003 0201 	and.w	r2, r3, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b03      	cmp	r3, #3
 8001462:	d017      	beq.n	8001494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d123      	bne.n	80014e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	08da      	lsrs	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3208      	adds	r2, #8
 80014a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	220f      	movs	r2, #15
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	69b9      	ldr	r1, [r7, #24]
 80014e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0203 	and.w	r2, r3, #3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80b4 	beq.w	8001692 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b60      	ldr	r3, [pc, #384]	@ (80016b0 <HAL_GPIO_Init+0x30c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	4a5f      	ldr	r2, [pc, #380]	@ (80016b0 <HAL_GPIO_Init+0x30c>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001538:	6453      	str	r3, [r2, #68]	@ 0x44
 800153a:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <HAL_GPIO_Init+0x30c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001546:	4a5b      	ldr	r2, [pc, #364]	@ (80016b4 <HAL_GPIO_Init+0x310>)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a52      	ldr	r2, [pc, #328]	@ (80016b8 <HAL_GPIO_Init+0x314>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d02b      	beq.n	80015ca <HAL_GPIO_Init+0x226>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a51      	ldr	r2, [pc, #324]	@ (80016bc <HAL_GPIO_Init+0x318>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d025      	beq.n	80015c6 <HAL_GPIO_Init+0x222>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a50      	ldr	r2, [pc, #320]	@ (80016c0 <HAL_GPIO_Init+0x31c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d01f      	beq.n	80015c2 <HAL_GPIO_Init+0x21e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4f      	ldr	r2, [pc, #316]	@ (80016c4 <HAL_GPIO_Init+0x320>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d019      	beq.n	80015be <HAL_GPIO_Init+0x21a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4e      	ldr	r2, [pc, #312]	@ (80016c8 <HAL_GPIO_Init+0x324>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0x216>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4d      	ldr	r2, [pc, #308]	@ (80016cc <HAL_GPIO_Init+0x328>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x212>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4c      	ldr	r2, [pc, #304]	@ (80016d0 <HAL_GPIO_Init+0x32c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x20e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4b      	ldr	r2, [pc, #300]	@ (80016d4 <HAL_GPIO_Init+0x330>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x20a>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e00e      	b.n	80015cc <HAL_GPIO_Init+0x228>
 80015ae:	2308      	movs	r3, #8
 80015b0:	e00c      	b.n	80015cc <HAL_GPIO_Init+0x228>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e00a      	b.n	80015cc <HAL_GPIO_Init+0x228>
 80015b6:	2305      	movs	r3, #5
 80015b8:	e008      	b.n	80015cc <HAL_GPIO_Init+0x228>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x228>
 80015be:	2303      	movs	r3, #3
 80015c0:	e004      	b.n	80015cc <HAL_GPIO_Init+0x228>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_Init+0x228>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_Init+0x228>
 80015ca:	2300      	movs	r3, #0
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	f002 0203 	and.w	r2, r2, #3
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	4093      	lsls	r3, r2
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015dc:	4935      	ldr	r1, [pc, #212]	@ (80016b4 <HAL_GPIO_Init+0x310>)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ea:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <HAL_GPIO_Init+0x334>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160e:	4a32      	ldr	r2, [pc, #200]	@ (80016d8 <HAL_GPIO_Init+0x334>)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001614:	4b30      	ldr	r3, [pc, #192]	@ (80016d8 <HAL_GPIO_Init+0x334>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001638:	4a27      	ldr	r2, [pc, #156]	@ (80016d8 <HAL_GPIO_Init+0x334>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163e:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <HAL_GPIO_Init+0x334>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001662:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <HAL_GPIO_Init+0x334>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <HAL_GPIO_Init+0x334>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168c:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <HAL_GPIO_Init+0x334>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	f67f ae90 	bls.w	80013c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3724      	adds	r7, #36	@ 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40013800 	.word	0x40013800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40020800 	.word	0x40020800
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40021400 	.word	0x40021400
 80016d0:	40021800 	.word	0x40021800
 80016d4:	40021c00 	.word	0x40021c00
 80016d8:	40013c00 	.word	0x40013c00

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e267      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d075      	beq.n	800181a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800172e:	4b88      	ldr	r3, [pc, #544]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b04      	cmp	r3, #4
 8001738:	d00c      	beq.n	8001754 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b85      	ldr	r3, [pc, #532]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001742:	2b08      	cmp	r3, #8
 8001744:	d112      	bne.n	800176c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001746:	4b82      	ldr	r3, [pc, #520]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001752:	d10b      	bne.n	800176c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	4b7e      	ldr	r3, [pc, #504]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d05b      	beq.n	8001818 <HAL_RCC_OscConfig+0x108>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d157      	bne.n	8001818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e242      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001774:	d106      	bne.n	8001784 <HAL_RCC_OscConfig+0x74>
 8001776:	4b76      	ldr	r3, [pc, #472]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a75      	ldr	r2, [pc, #468]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xb0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x98>
 800178e:	4b70      	ldr	r3, [pc, #448]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6f      	ldr	r2, [pc, #444]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6d      	ldr	r3, [pc, #436]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6c      	ldr	r2, [pc, #432]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xb0>
 80017a8:	4b69      	ldr	r3, [pc, #420]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a68      	ldr	r2, [pc, #416]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b66      	ldr	r3, [pc, #408]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a65      	ldr	r2, [pc, #404]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc48 	bl	800105c <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fc44 	bl	800105c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e207      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xc0>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc34 	bl	800105c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fc30 	bl	800105c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1f3      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b51      	ldr	r3, [pc, #324]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0xe8>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001826:	4b4a      	ldr	r3, [pc, #296]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b47      	ldr	r3, [pc, #284]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183e:	4b44      	ldr	r3, [pc, #272]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b41      	ldr	r3, [pc, #260]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x152>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1c7      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3b      	ldr	r3, [pc, #236]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4937      	ldr	r1, [pc, #220]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <HAL_RCC_OscConfig+0x244>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff fbe9 	bl	800105c <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fbe5 	bl	800105c <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1a8      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4925      	ldr	r1, [pc, #148]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <HAL_RCC_OscConfig+0x244>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fbc8 	bl	800105c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fbc4 	bl	800105c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e187      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d036      	beq.n	8001968 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d016      	beq.n	8001930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_RCC_OscConfig+0x248>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fba8 	bl	800105c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fba4 	bl	800105c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e167      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_RCC_OscConfig+0x240>)
 8001924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x200>
 800192e:	e01b      	b.n	8001968 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_RCC_OscConfig+0x248>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff fb91 	bl	800105c <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	e00e      	b.n	800195c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff fb8d 	bl	800105c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d907      	bls.n	800195c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e150      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
 8001950:	40023800 	.word	0x40023800
 8001954:	42470000 	.word	0x42470000
 8001958:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	4b88      	ldr	r3, [pc, #544]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ea      	bne.n	800193e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8097 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b81      	ldr	r3, [pc, #516]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10f      	bne.n	80019a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b7a      	ldr	r3, [pc, #488]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	4b77      	ldr	r3, [pc, #476]	@ (8001b84 <HAL_RCC_OscConfig+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b2:	4b74      	ldr	r3, [pc, #464]	@ (8001b84 <HAL_RCC_OscConfig+0x474>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a73      	ldr	r2, [pc, #460]	@ (8001b84 <HAL_RCC_OscConfig+0x474>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7ff fb4d 	bl	800105c <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c6:	f7ff fb49 	bl	800105c <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e10c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b84 <HAL_RCC_OscConfig+0x474>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x2ea>
 80019ec:	4b64      	ldr	r3, [pc, #400]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f0:	4a63      	ldr	r2, [pc, #396]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f8:	e01c      	b.n	8001a34 <HAL_RCC_OscConfig+0x324>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x30c>
 8001a02:	4b5f      	ldr	r3, [pc, #380]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a06:	4a5e      	ldr	r2, [pc, #376]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	4a5b      	ldr	r2, [pc, #364]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0x324>
 8001a1c:	4b58      	ldr	r3, [pc, #352]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a20:	4a57      	ldr	r2, [pc, #348]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a28:	4b55      	ldr	r3, [pc, #340]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2c:	4a54      	ldr	r2, [pc, #336]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f023 0304 	bic.w	r3, r3, #4
 8001a32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d015      	beq.n	8001a68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fb0e 	bl	800105c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7ff fb0a 	bl	800105c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e0cb      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5a:	4b49      	ldr	r3, [pc, #292]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0ee      	beq.n	8001a44 <HAL_RCC_OscConfig+0x334>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff faf8 	bl	800105c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a70:	f7ff faf4 	bl	800105c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e0b5      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a86:	4b3e      	ldr	r3, [pc, #248]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ee      	bne.n	8001a70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a1 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aae:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d05c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d141      	bne.n	8001b46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b31      	ldr	r3, [pc, #196]	@ (8001b88 <HAL_RCC_OscConfig+0x478>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fac8 	bl	800105c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff fac4 	bl	800105c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e087      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	4b27      	ldr	r3, [pc, #156]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	3b01      	subs	r3, #1
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	491b      	ldr	r1, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_RCC_OscConfig+0x478>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fa9d 	bl	800105c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff fa99 	bl	800105c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e05c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x416>
 8001b44:	e054      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_RCC_OscConfig+0x478>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fa86 	bl	800105c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fa82 	bl	800105c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e045      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_RCC_OscConfig+0x470>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x444>
 8001b72:	e03d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e038      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000
 8001b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_OscConfig+0x4ec>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d028      	beq.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d121      	bne.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d11a      	bne.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d111      	bne.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0cc      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b68      	ldr	r3, [pc, #416]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d90c      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b65      	ldr	r3, [pc, #404]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b63      	ldr	r3, [pc, #396]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0b8      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c54:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a58      	ldr	r2, [pc, #352]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c6c:	4b53      	ldr	r3, [pc, #332]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	494d      	ldr	r1, [pc, #308]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d044      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d119      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e07f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e067      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4934      	ldr	r1, [pc, #208]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f9b4 	bl	800105c <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f9b0 	bl	800105c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e04f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d20c      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e032      	b.n	8001dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4916      	ldr	r1, [pc, #88]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d86:	f000 f821 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490a      	ldr	r1, [pc, #40]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ff74 	bl	8000c94 <HAL_InitTick>

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023c00 	.word	0x40023c00
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	080074f4 	.word	0x080074f4
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd0:	b094      	sub	sp, #80	@ 0x50
 8001dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de4:	4b79      	ldr	r3, [pc, #484]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d00d      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x40>
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	f200 80e1 	bhi.w	8001fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfe:	e0db      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b73      	ldr	r3, [pc, #460]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e04:	e0db      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e06:	4b73      	ldr	r3, [pc, #460]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e0a:	e0d8      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e16:	4b6d      	ldr	r3, [pc, #436]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d063      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e22:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	099b      	lsrs	r3, r3, #6
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e3e:	4622      	mov	r2, r4
 8001e40:	462b      	mov	r3, r5
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	0159      	lsls	r1, r3, #5
 8001e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e50:	0150      	lsls	r0, r2, #5
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4621      	mov	r1, r4
 8001e58:	1a51      	subs	r1, r2, r1
 8001e5a:	6139      	str	r1, [r7, #16]
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e70:	4659      	mov	r1, fp
 8001e72:	018b      	lsls	r3, r1, #6
 8001e74:	4651      	mov	r1, sl
 8001e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	018a      	lsls	r2, r1, #6
 8001e7e:	4651      	mov	r1, sl
 8001e80:	ebb2 0801 	subs.w	r8, r2, r1
 8001e84:	4659      	mov	r1, fp
 8001e86:	eb63 0901 	sbc.w	r9, r3, r1
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	eb18 0303 	adds.w	r3, r8, r3
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	462b      	mov	r3, r5
 8001eac:	eb49 0303 	adc.w	r3, r9, r3
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	024b      	lsls	r3, r1, #9
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec8:	4621      	mov	r1, r4
 8001eca:	024a      	lsls	r2, r1, #9
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001edc:	f7fe f9d0 	bl	8000280 <__aeabi_uldivmod>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ee8:	e058      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eea:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f04:	4642      	mov	r2, r8
 8001f06:	464b      	mov	r3, r9
 8001f08:	f04f 0000 	mov.w	r0, #0
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	0159      	lsls	r1, r3, #5
 8001f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f16:	0150      	lsls	r0, r2, #5
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f22:	4649      	mov	r1, r9
 8001f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f40:	eb63 050b 	sbc.w	r5, r3, fp
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	00eb      	lsls	r3, r5, #3
 8001f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f52:	00e2      	lsls	r2, r4, #3
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4643      	mov	r3, r8
 8001f5a:	18e3      	adds	r3, r4, r3
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	464b      	mov	r3, r9
 8001f60:	eb45 0303 	adc.w	r3, r5, r3
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f72:	4629      	mov	r1, r5
 8001f74:	028b      	lsls	r3, r1, #10
 8001f76:	4621      	mov	r1, r4
 8001f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	028a      	lsls	r2, r1, #10
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f86:	2200      	movs	r2, #0
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	61fa      	str	r2, [r7, #28]
 8001f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f90:	f7fe f976 	bl	8000280 <__aeabi_uldivmod>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3750      	adds	r7, #80	@ 0x50
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	007a1200 	.word	0x007a1200

08001fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <HAL_RCC_GetHCLKFreq+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000000 	.word	0x20000000

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff4:	f7ff fff0 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0a9b      	lsrs	r3, r3, #10
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	@ (8002014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08007504 	.word	0x08007504

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800201c:	f7ff ffdc 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	0b5b      	lsrs	r3, r3, #13
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	@ (800203c <HAL_RCC_GetPCLK2Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40023800 	.word	0x40023800
 800203c:	08007504 	.word	0x08007504

08002040 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	220f      	movs	r2, #15
 800204e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_RCC_GetClockConfig+0x5c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0203 	and.w	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_RCC_GetClockConfig+0x5c>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <HAL_RCC_GetClockConfig+0x5c>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_GetClockConfig+0x5c>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <HAL_RCC_GetClockConfig+0x60>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0207 	and.w	r2, r3, #7
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	601a      	str	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40023c00 	.word	0x40023c00

080020a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e041      	b.n	800213a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f839 	bl	8002142 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3304      	adds	r3, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f000 f9c0 	bl	8002468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d001      	beq.n	8002170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e04e      	b.n	800220e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a23      	ldr	r2, [pc, #140]	@ (800221c <HAL_TIM_Base_Start_IT+0xc4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d022      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x80>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219a:	d01d      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x80>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <HAL_TIM_Base_Start_IT+0xc8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d018      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x80>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002224 <HAL_TIM_Base_Start_IT+0xcc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x80>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002228 <HAL_TIM_Base_Start_IT+0xd0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00e      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x80>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <HAL_TIM_Base_Start_IT+0xd4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d009      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x80>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <HAL_TIM_Base_Start_IT+0xd8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d004      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x80>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a18      	ldr	r2, [pc, #96]	@ (8002234 <HAL_TIM_Base_Start_IT+0xdc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d111      	bne.n	80021fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d010      	beq.n	800220c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021fa:	e007      	b.n	800220c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800
 8002228:	40000c00 	.word	0x40000c00
 800222c:	40010400 	.word	0x40010400
 8002230:	40014000 	.word	0x40014000
 8002234:	40001800 	.word	0x40001800

08002238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d020      	beq.n	800229c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01b      	beq.n	800229c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0202 	mvn.w	r2, #2
 800226c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8d2 	bl	800242c <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8c4 	bl	8002418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f8d5 	bl	8002440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d020      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01b      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0204 	mvn.w	r2, #4
 80022b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8ac 	bl	800242c <HAL_TIM_IC_CaptureCallback>
 80022d4:	e005      	b.n	80022e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f89e 	bl	8002418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f8af 	bl	8002440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d020      	beq.n	8002334 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01b      	beq.n	8002334 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0208 	mvn.w	r2, #8
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2204      	movs	r2, #4
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f886 	bl	800242c <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f878 	bl	8002418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f889 	bl	8002440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d020      	beq.n	8002380 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01b      	beq.n	8002380 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0210 	mvn.w	r2, #16
 8002350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2208      	movs	r2, #8
 8002356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f860 	bl	800242c <HAL_TIM_IC_CaptureCallback>
 800236c:	e005      	b.n	800237a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f852 	bl	8002418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f863 	bl	8002440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00c      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0201 	mvn.w	r2, #1
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fbe8 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f906 	bl	80025d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f834 	bl	8002454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00c      	beq.n	8002410 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0220 	mvn.w	r2, #32
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8d8 	bl	80025c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a46      	ldr	r2, [pc, #280]	@ (8002594 <TIM_Base_SetConfig+0x12c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <TIM_Base_SetConfig+0x40>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002486:	d00f      	beq.n	80024a8 <TIM_Base_SetConfig+0x40>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a43      	ldr	r2, [pc, #268]	@ (8002598 <TIM_Base_SetConfig+0x130>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00b      	beq.n	80024a8 <TIM_Base_SetConfig+0x40>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a42      	ldr	r2, [pc, #264]	@ (800259c <TIM_Base_SetConfig+0x134>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <TIM_Base_SetConfig+0x40>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a41      	ldr	r2, [pc, #260]	@ (80025a0 <TIM_Base_SetConfig+0x138>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0x40>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a40      	ldr	r2, [pc, #256]	@ (80025a4 <TIM_Base_SetConfig+0x13c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a35      	ldr	r2, [pc, #212]	@ (8002594 <TIM_Base_SetConfig+0x12c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02b      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d027      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a32      	ldr	r2, [pc, #200]	@ (8002598 <TIM_Base_SetConfig+0x130>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d023      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a31      	ldr	r2, [pc, #196]	@ (800259c <TIM_Base_SetConfig+0x134>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01f      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a30      	ldr	r2, [pc, #192]	@ (80025a0 <TIM_Base_SetConfig+0x138>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01b      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a2f      	ldr	r2, [pc, #188]	@ (80025a4 <TIM_Base_SetConfig+0x13c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d017      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a2e      	ldr	r2, [pc, #184]	@ (80025a8 <TIM_Base_SetConfig+0x140>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a2d      	ldr	r2, [pc, #180]	@ (80025ac <TIM_Base_SetConfig+0x144>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00f      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a2c      	ldr	r2, [pc, #176]	@ (80025b0 <TIM_Base_SetConfig+0x148>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00b      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a2b      	ldr	r2, [pc, #172]	@ (80025b4 <TIM_Base_SetConfig+0x14c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a2a      	ldr	r2, [pc, #168]	@ (80025b8 <TIM_Base_SetConfig+0x150>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d003      	beq.n	800251a <TIM_Base_SetConfig+0xb2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a29      	ldr	r2, [pc, #164]	@ (80025bc <TIM_Base_SetConfig+0x154>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d108      	bne.n	800252c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a10      	ldr	r2, [pc, #64]	@ (8002594 <TIM_Base_SetConfig+0x12c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0xf8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a12      	ldr	r2, [pc, #72]	@ (80025a4 <TIM_Base_SetConfig+0x13c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d103      	bne.n	8002568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d105      	bne.n	8002586 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f023 0201 	bic.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	611a      	str	r2, [r3, #16]
  }
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40010000 	.word	0x40010000
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800
 80025a0:	40000c00 	.word	0x40000c00
 80025a4:	40010400 	.word	0x40010400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800
 80025b4:	40001800 	.word	0x40001800
 80025b8:	40001c00 	.word	0x40001c00
 80025bc:	40002000 	.word	0x40002000

080025c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e042      	b.n	8002680 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe faf0 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	@ 0x24
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800262a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fcbb 	bl	8002fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d121      	bne.n	80026e6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_UART_Transmit_IT+0x26>
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e01a      	b.n	80026e8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	88fa      	ldrh	r2, [r7, #6]
 80026c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2221      	movs	r2, #33	@ 0x21
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b0ba      	sub	sp, #232	@ 0xe8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800273a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_UART_IRQHandler+0x66>
 8002746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fb69 	bl	8002e2a <UART_Receive_IT>
      return;
 8002758:	e25b      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800275a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80de 	beq.w	8002920 <HAL_UART_IRQHandler+0x22c>
 8002764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002774:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80d1 	beq.w	8002920 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_UART_IRQHandler+0xae>
 800278a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800278e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_UART_IRQHandler+0xd2>
 80027ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f043 0202 	orr.w	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_UART_IRQHandler+0xf6>
 80027d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d011      	beq.n	800281a <HAL_UART_IRQHandler+0x126>
 80027f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f043 0208 	orr.w	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 81f2 	beq.w	8002c08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_UART_IRQHandler+0x14e>
 8002830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 faf4 	bl	8002e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284c:	2b40      	cmp	r3, #64	@ 0x40
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_UART_IRQHandler+0x17a>
 8002866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d04f      	beq.n	800290e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f9fc 	bl	8002c6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287e:	2b40      	cmp	r3, #64	@ 0x40
 8002880:	d141      	bne.n	8002906 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800289c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028be:	e841 2300 	strex	r3, r2, [r1]
 80028c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1d9      	bne.n	8002882 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d013      	beq.n	80028fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028da:	4a7e      	ldr	r2, [pc, #504]	@ (8002ad4 <HAL_UART_IRQHandler+0x3e0>)
 80028dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fd3c 	bl	8001360 <HAL_DMA_Abort_IT>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028f8:	4610      	mov	r0, r2
 80028fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fc:	e00e      	b.n	800291c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f99e 	bl	8002c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002904:	e00a      	b.n	800291c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f99a 	bl	8002c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	e006      	b.n	800291c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f996 	bl	8002c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800291a:	e175      	b.n	8002c08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	bf00      	nop
    return;
 800291e:	e173      	b.n	8002c08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002924:	2b01      	cmp	r3, #1
 8002926:	f040 814f 	bne.w	8002bc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8148 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8141 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002966:	2b40      	cmp	r3, #64	@ 0x40
 8002968:	f040 80b6 	bne.w	8002ad8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8145 	beq.w	8002c0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800298a:	429a      	cmp	r2, r3
 800298c:	f080 813e 	bcs.w	8002c0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002996:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a2:	f000 8088 	beq.w	8002ab6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1d9      	bne.n	80029a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3314      	adds	r3, #20
 8002a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e1      	bne.n	80029f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3314      	adds	r3, #20
 8002a34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a38:	e853 3f00 	ldrex	r3, [r3]
 8002a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a5a:	e841 2300 	strex	r3, r2, [r1]
 8002a5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e3      	bne.n	8002a2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a7e:	e853 3f00 	ldrex	r3, [r3]
 8002a82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a86:	f023 0310 	bic.w	r3, r3, #16
 8002a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002aa0:	e841 2300 	strex	r3, r2, [r1]
 8002aa4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e3      	bne.n	8002a74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fbe5 	bl	8001280 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8c1 	bl	8002c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ad2:	e09b      	b.n	8002c0c <HAL_UART_IRQHandler+0x518>
 8002ad4:	08002d33 	.word	0x08002d33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 808e 	beq.w	8002c10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8089 	beq.w	8002c10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	330c      	adds	r3, #12
 8002b04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b22:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e3      	bne.n	8002afe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3314      	adds	r3, #20
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	623b      	str	r3, [r7, #32]
   return(result);
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3314      	adds	r3, #20
 8002b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e3      	bne.n	8002b36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0310 	bic.w	r3, r3, #16
 8002b92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ba0:	61fa      	str	r2, [r7, #28]
 8002ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	617b      	str	r3, [r7, #20]
   return(result);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e3      	bne.n	8002b7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f847 	bl	8002c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bc6:	e023      	b.n	8002c10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_UART_IRQHandler+0x4f4>
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8ba 	bl	8002d5a <UART_Transmit_IT>
    return;
 8002be6:	e014      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <HAL_UART_IRQHandler+0x51e>
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f8fa 	bl	8002dfa <UART_EndTransmit_IT>
    return;
 8002c06:	e004      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c10:	bf00      	nop
  }
}
 8002c12:	37e8      	adds	r7, #232	@ 0xe8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b095      	sub	sp, #84	@ 0x54
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c94:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c9c:	e841 2300 	strex	r3, r2, [r1]
 8002ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e5      	bne.n	8002c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3314      	adds	r3, #20
 8002cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	e853 3f00 	ldrex	r3, [r3]
 8002cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cd0:	e841 2300 	strex	r3, r2, [r1]
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e5      	bne.n	8002ca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d119      	bne.n	8002d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f023 0310 	bic.w	r3, r3, #16
 8002cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d04:	61ba      	str	r2, [r7, #24]
 8002d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6979      	ldr	r1, [r7, #20]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	613b      	str	r3, [r7, #16]
   return(result);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e5      	bne.n	8002ce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d26:	bf00      	nop
 8002d28:	3754      	adds	r7, #84	@ 0x54
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff ff77 	bl	8002c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b21      	cmp	r3, #33	@ 0x21
 8002d6c:	d13e      	bne.n	8002dec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d76:	d114      	bne.n	8002da2 <UART_Transmit_IT+0x48>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d110      	bne.n	8002da2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	1c9a      	adds	r2, r3, #2
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	621a      	str	r2, [r3, #32]
 8002da0:	e008      	b.n	8002db4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	1c59      	adds	r1, r3, #1
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6211      	str	r1, [r2, #32]
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10f      	bne.n	8002de8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e000      	b.n	8002dee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fefc 	bl	8002c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b08c      	sub	sp, #48	@ 0x30
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b22      	cmp	r3, #34	@ 0x22
 8002e3c:	f040 80ae 	bne.w	8002f9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e48:	d117      	bne.n	8002e7a <UART_Receive_IT+0x50>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d113      	bne.n	8002e7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	1c9a      	adds	r2, r3, #2
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e78:	e026      	b.n	8002ec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e8c:	d007      	beq.n	8002e9e <UART_Receive_IT+0x74>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <UART_Receive_IT+0x82>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e008      	b.n	8002ebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d15d      	bne.n	8002f98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0220 	bic.w	r2, r2, #32
 8002eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d135      	bne.n	8002f8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	613b      	str	r3, [r7, #16]
   return(result);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f48:	623a      	str	r2, [r7, #32]
 8002f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	69f9      	ldr	r1, [r7, #28]
 8002f4e:	6a3a      	ldr	r2, [r7, #32]
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e5      	bne.n	8002f28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d10a      	bne.n	8002f80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fe64 	bl	8002c54 <HAL_UARTEx_RxEventCallback>
 8002f8c:	e002      	b.n	8002f94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fe4c 	bl	8002c2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e002      	b.n	8002f9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3730      	adds	r7, #48	@ 0x30
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fac:	b0c0      	sub	sp, #256	@ 0x100
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc4:	68d9      	ldr	r1, [r3, #12]
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	ea40 0301 	orr.w	r3, r0, r1
 8002fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003000:	f021 010c 	bic.w	r1, r1, #12
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800300e:	430b      	orrs	r3, r1
 8003010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003022:	6999      	ldr	r1, [r3, #24]
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	ea40 0301 	orr.w	r3, r0, r1
 800302e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b8f      	ldr	r3, [pc, #572]	@ (8003274 <UART_SetConfig+0x2cc>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d005      	beq.n	8003048 <UART_SetConfig+0xa0>
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b8d      	ldr	r3, [pc, #564]	@ (8003278 <UART_SetConfig+0x2d0>)
 8003044:	429a      	cmp	r2, r3
 8003046:	d104      	bne.n	8003052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7fe ffe6 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 800304c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003050:	e003      	b.n	800305a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003052:	f7fe ffcd 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8003056:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003064:	f040 810c 	bne.w	8003280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306c:	2200      	movs	r2, #0
 800306e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003072:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	1891      	adds	r1, r2, r2
 8003080:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003082:	415b      	adcs	r3, r3
 8003084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800308a:	4621      	mov	r1, r4
 800308c:	eb12 0801 	adds.w	r8, r2, r1
 8003090:	4629      	mov	r1, r5
 8003092:	eb43 0901 	adc.w	r9, r3, r1
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030aa:	4690      	mov	r8, r2
 80030ac:	4699      	mov	r9, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	eb18 0303 	adds.w	r3, r8, r3
 80030b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030b8:	462b      	mov	r3, r5
 80030ba:	eb49 0303 	adc.w	r3, r9, r3
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030d6:	460b      	mov	r3, r1
 80030d8:	18db      	adds	r3, r3, r3
 80030da:	653b      	str	r3, [r7, #80]	@ 0x50
 80030dc:	4613      	mov	r3, r2
 80030de:	eb42 0303 	adc.w	r3, r2, r3
 80030e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80030e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030ec:	f7fd f8c8 	bl	8000280 <__aeabi_uldivmod>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4b61      	ldr	r3, [pc, #388]	@ (800327c <UART_SetConfig+0x2d4>)
 80030f6:	fba3 2302 	umull	r2, r3, r3, r2
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	011c      	lsls	r4, r3, #4
 80030fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003102:	2200      	movs	r2, #0
 8003104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003108:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800310c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003110:	4642      	mov	r2, r8
 8003112:	464b      	mov	r3, r9
 8003114:	1891      	adds	r1, r2, r2
 8003116:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003118:	415b      	adcs	r3, r3
 800311a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800311c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003120:	4641      	mov	r1, r8
 8003122:	eb12 0a01 	adds.w	sl, r2, r1
 8003126:	4649      	mov	r1, r9
 8003128:	eb43 0b01 	adc.w	fp, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800313c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003140:	4692      	mov	sl, r2
 8003142:	469b      	mov	fp, r3
 8003144:	4643      	mov	r3, r8
 8003146:	eb1a 0303 	adds.w	r3, sl, r3
 800314a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800314e:	464b      	mov	r3, r9
 8003150:	eb4b 0303 	adc.w	r3, fp, r3
 8003154:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003164:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800316c:	460b      	mov	r3, r1
 800316e:	18db      	adds	r3, r3, r3
 8003170:	643b      	str	r3, [r7, #64]	@ 0x40
 8003172:	4613      	mov	r3, r2
 8003174:	eb42 0303 	adc.w	r3, r2, r3
 8003178:	647b      	str	r3, [r7, #68]	@ 0x44
 800317a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800317e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003182:	f7fd f87d 	bl	8000280 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4611      	mov	r1, r2
 800318c:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <UART_SetConfig+0x2d4>)
 800318e:	fba3 2301 	umull	r2, r3, r3, r1
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2264      	movs	r2, #100	@ 0x64
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	1acb      	subs	r3, r1, r3
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031a2:	4b36      	ldr	r3, [pc, #216]	@ (800327c <UART_SetConfig+0x2d4>)
 80031a4:	fba3 2302 	umull	r2, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031b0:	441c      	add	r4, r3
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031cc:	415b      	adcs	r3, r3
 80031ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031d4:	4641      	mov	r1, r8
 80031d6:	1851      	adds	r1, r2, r1
 80031d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80031da:	4649      	mov	r1, r9
 80031dc:	414b      	adcs	r3, r1
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031ec:	4659      	mov	r1, fp
 80031ee:	00cb      	lsls	r3, r1, #3
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f6:	4651      	mov	r1, sl
 80031f8:	00ca      	lsls	r2, r1, #3
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	4642      	mov	r2, r8
 8003202:	189b      	adds	r3, r3, r2
 8003204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003208:	464b      	mov	r3, r9
 800320a:	460a      	mov	r2, r1
 800320c:	eb42 0303 	adc.w	r3, r2, r3
 8003210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003220:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003228:	460b      	mov	r3, r1
 800322a:	18db      	adds	r3, r3, r3
 800322c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800322e:	4613      	mov	r3, r2
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800323a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800323e:	f7fd f81f 	bl	8000280 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <UART_SetConfig+0x2d4>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	@ 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	3332      	adds	r3, #50	@ 0x32
 800325a:	4a08      	ldr	r2, [pc, #32]	@ (800327c <UART_SetConfig+0x2d4>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4422      	add	r2, r4
 800326e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003270:	e106      	b.n	8003480 <UART_SetConfig+0x4d8>
 8003272:	bf00      	nop
 8003274:	40011000 	.word	0x40011000
 8003278:	40011400 	.word	0x40011400
 800327c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800328a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800328e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003292:	4642      	mov	r2, r8
 8003294:	464b      	mov	r3, r9
 8003296:	1891      	adds	r1, r2, r2
 8003298:	6239      	str	r1, [r7, #32]
 800329a:	415b      	adcs	r3, r3
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
 800329e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032a2:	4641      	mov	r1, r8
 80032a4:	1854      	adds	r4, r2, r1
 80032a6:	4649      	mov	r1, r9
 80032a8:	eb43 0501 	adc.w	r5, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	00eb      	lsls	r3, r5, #3
 80032b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ba:	00e2      	lsls	r2, r4, #3
 80032bc:	4614      	mov	r4, r2
 80032be:	461d      	mov	r5, r3
 80032c0:	4643      	mov	r3, r8
 80032c2:	18e3      	adds	r3, r4, r3
 80032c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032c8:	464b      	mov	r3, r9
 80032ca:	eb45 0303 	adc.w	r3, r5, r3
 80032ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032ee:	4629      	mov	r1, r5
 80032f0:	008b      	lsls	r3, r1, #2
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f8:	4621      	mov	r1, r4
 80032fa:	008a      	lsls	r2, r1, #2
 80032fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003300:	f7fc ffbe 	bl	8000280 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4b60      	ldr	r3, [pc, #384]	@ (800348c <UART_SetConfig+0x4e4>)
 800330a:	fba3 2302 	umull	r2, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	011c      	lsls	r4, r3, #4
 8003312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800331c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003324:	4642      	mov	r2, r8
 8003326:	464b      	mov	r3, r9
 8003328:	1891      	adds	r1, r2, r2
 800332a:	61b9      	str	r1, [r7, #24]
 800332c:	415b      	adcs	r3, r3
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003334:	4641      	mov	r1, r8
 8003336:	1851      	adds	r1, r2, r1
 8003338:	6139      	str	r1, [r7, #16]
 800333a:	4649      	mov	r1, r9
 800333c:	414b      	adcs	r3, r1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800334c:	4659      	mov	r1, fp
 800334e:	00cb      	lsls	r3, r1, #3
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003356:	4651      	mov	r1, sl
 8003358:	00ca      	lsls	r2, r1, #3
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	4603      	mov	r3, r0
 8003360:	4642      	mov	r2, r8
 8003362:	189b      	adds	r3, r3, r2
 8003364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003368:	464b      	mov	r3, r9
 800336a:	460a      	mov	r2, r1
 800336c:	eb42 0303 	adc.w	r3, r2, r3
 8003370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800337e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800338c:	4649      	mov	r1, r9
 800338e:	008b      	lsls	r3, r1, #2
 8003390:	4641      	mov	r1, r8
 8003392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003396:	4641      	mov	r1, r8
 8003398:	008a      	lsls	r2, r1, #2
 800339a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800339e:	f7fc ff6f 	bl	8000280 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	4b38      	ldr	r3, [pc, #224]	@ (800348c <UART_SetConfig+0x4e4>)
 80033aa:	fba3 2301 	umull	r2, r3, r3, r1
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2264      	movs	r2, #100	@ 0x64
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	1acb      	subs	r3, r1, r3
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	3332      	adds	r3, #50	@ 0x32
 80033bc:	4a33      	ldr	r2, [pc, #204]	@ (800348c <UART_SetConfig+0x4e4>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033c8:	441c      	add	r4, r3
 80033ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ce:	2200      	movs	r2, #0
 80033d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80033d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80033d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033d8:	4642      	mov	r2, r8
 80033da:	464b      	mov	r3, r9
 80033dc:	1891      	adds	r1, r2, r2
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	415b      	adcs	r3, r3
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e8:	4641      	mov	r1, r8
 80033ea:	1851      	adds	r1, r2, r1
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	4649      	mov	r1, r9
 80033f0:	414b      	adcs	r3, r1
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003400:	4659      	mov	r1, fp
 8003402:	00cb      	lsls	r3, r1, #3
 8003404:	4651      	mov	r1, sl
 8003406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340a:	4651      	mov	r1, sl
 800340c:	00ca      	lsls	r2, r1, #3
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	4603      	mov	r3, r0
 8003414:	4642      	mov	r2, r8
 8003416:	189b      	adds	r3, r3, r2
 8003418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800341a:	464b      	mov	r3, r9
 800341c:	460a      	mov	r2, r1
 800341e:	eb42 0303 	adc.w	r3, r2, r3
 8003422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	663b      	str	r3, [r7, #96]	@ 0x60
 800342e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800343c:	4649      	mov	r1, r9
 800343e:	008b      	lsls	r3, r1, #2
 8003440:	4641      	mov	r1, r8
 8003442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003446:	4641      	mov	r1, r8
 8003448:	008a      	lsls	r2, r1, #2
 800344a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800344e:	f7fc ff17 	bl	8000280 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4b0d      	ldr	r3, [pc, #52]	@ (800348c <UART_SetConfig+0x4e4>)
 8003458:	fba3 1302 	umull	r1, r3, r3, r2
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	2164      	movs	r1, #100	@ 0x64
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	3332      	adds	r3, #50	@ 0x32
 800346a:	4a08      	ldr	r2, [pc, #32]	@ (800348c <UART_SetConfig+0x4e4>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4422      	add	r2, r4
 800347e:	609a      	str	r2, [r3, #8]
}
 8003480:	bf00      	nop
 8003482:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003486:	46bd      	mov	sp, r7
 8003488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348c:	51eb851f 	.word	0x51eb851f

08003490 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f103 0208 	add.w	r2, r3, #8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295
 80034a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f103 0208 	add.w	r2, r3, #8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 0208 	add.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	601a      	str	r2, [r3, #0]
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d103      	bne.n	8003552 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e00c      	b.n	800356c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3308      	adds	r3, #8
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e002      	b.n	8003560 <vListInsert+0x2e>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	d2f6      	bcs.n	800355a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6892      	ldr	r2, [r2, #8]
 80035ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d103      	bne.n	80035d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1e5a      	subs	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003624:	f002 f9fa 	bl	8005a1c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	441a      	add	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	3b01      	subs	r3, #1
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	441a      	add	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	22ff      	movs	r2, #255	@ 0xff
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	22ff      	movs	r2, #255	@ 0xff
 8003670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d114      	bne.n	80036a4 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01a      	beq.n	80036b8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3310      	adds	r3, #16
 8003686:	4618      	mov	r0, r3
 8003688:	f001 f9c0 	bl	8004a0c <xTaskRemoveFromEventList>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003692:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <xQueueGenericReset+0xd0>)
 8003694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	e009      	b.n	80036b8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3310      	adds	r3, #16
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fef1 	bl	8003490 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3324      	adds	r3, #36	@ 0x24
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff feec 	bl	8003490 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80036b8:	f002 f9e2 	bl	8005a80 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80036bc:	2301      	movs	r3, #1
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	@ 0x30
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	4613      	mov	r3, r2
 80036d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <xQueueGenericCreate+0x2c>
        __asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	61bb      	str	r3, [r7, #24]
    }
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
 80036f6:	e7fd      	b.n	80036f4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d006      	beq.n	8003716 <xQueueGenericCreate+0x4a>
 8003708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	429a      	cmp	r2, r3
 8003714:	d101      	bne.n	800371a <xQueueGenericCreate+0x4e>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericCreate+0x50>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <xQueueGenericCreate+0x6c>
        __asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	617b      	str	r3, [r7, #20]
    }
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800373e:	d90b      	bls.n	8003758 <xQueueGenericCreate+0x8c>
        __asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	613b      	str	r3, [r7, #16]
    }
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	e7fd      	b.n	8003754 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	3350      	adds	r3, #80	@ 0x50
 800375c:	4618      	mov	r0, r3
 800375e:	f002 fa87 	bl	8005c70 <pvPortMalloc>
 8003762:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3350      	adds	r3, #80	@ 0x50
 8003772:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003774:	79fa      	ldrb	r2, [r7, #7]
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	4613      	mov	r3, r2
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f805 	bl	8003790 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003786:	6a3b      	ldr	r3, [r7, #32]
    }
 8003788:	4618      	mov	r0, r3
 800378a:	3728      	adds	r7, #40	@ 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e002      	b.n	80037b2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037be:	2101      	movs	r1, #1
 80037c0:	69b8      	ldr	r0, [r7, #24]
 80037c2:	f7ff ff19 	bl	80035f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08e      	sub	sp, #56	@ 0x38
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037e6:	2300      	movs	r3, #0
 80037e8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <xQueueGenericSend+0x34>
        __asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <xQueueGenericSend+0x42>
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <xQueueGenericSend+0x46>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xQueueGenericSend+0x48>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10b      	bne.n	800383c <xQueueGenericSend+0x64>
        __asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d103      	bne.n	800384a <xQueueGenericSend+0x72>
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <xQueueGenericSend+0x76>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <xQueueGenericSend+0x78>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <xQueueGenericSend+0x94>
        __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	623b      	str	r3, [r7, #32]
    }
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800386c:	f001 fa6e 	bl	8004d4c <xTaskGetSchedulerState>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <xQueueGenericSend+0xa4>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <xQueueGenericSend+0xa8>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <xQueueGenericSend+0xaa>
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <xQueueGenericSend+0xc6>
        __asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	61fb      	str	r3, [r7, #28]
    }
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	e7fd      	b.n	800389a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800389e:	f002 f8bd 	bl	8005a1c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <xQueueGenericSend+0xdc>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d129      	bne.n	8003908 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038ba:	f000 fb47 	bl	8003f4c <prvCopyDataToQueue>
 80038be:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ca:	3324      	adds	r3, #36	@ 0x24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 f89d 	bl	8004a0c <xTaskRemoveFromEventList>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80038d8:	4b3f      	ldr	r3, [pc, #252]	@ (80039d8 <xQueueGenericSend+0x200>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	e00a      	b.n	8003900 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80038ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80038f0:	4b39      	ldr	r3, [pc, #228]	@ (80039d8 <xQueueGenericSend+0x200>)
 80038f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003900:	f002 f8be 	bl	8005a80 <vPortExitCritical>
                return pdPASS;
 8003904:	2301      	movs	r3, #1
 8003906:	e063      	b.n	80039d0 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800390e:	f002 f8b7 	bl	8005a80 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003912:	2300      	movs	r3, #0
 8003914:	e05c      	b.n	80039d0 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	4618      	mov	r0, r3
 8003922:	f001 f8d7 	bl	8004ad4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003926:	2301      	movs	r3, #1
 8003928:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800392a:	f002 f8a9 	bl	8005a80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800392e:	f000 fe49 	bl	80045c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003932:	f002 f873 	bl	8005a1c <vPortEnterCritical>
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800393c:	b25b      	sxtb	r3, r3
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d103      	bne.n	800394c <xQueueGenericSend+0x174>
 8003944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003952:	b25b      	sxtb	r3, r3
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d103      	bne.n	8003962 <xQueueGenericSend+0x18a>
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003962:	f002 f88d 	bl	8005a80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003966:	1d3a      	adds	r2, r7, #4
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f001 f8c6 	bl	8004b00 <xTaskCheckForTimeOut>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d124      	bne.n	80039c4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800397a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800397c:	f000 fbde 	bl	800413c <prvIsQueueFull>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	3310      	adds	r3, #16
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 ffea 	bl	8004968 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003996:	f000 fb69 	bl	800406c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800399a:	f000 fe21 	bl	80045e0 <xTaskResumeAll>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f47f af7c 	bne.w	800389e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80039a6:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <xQueueGenericSend+0x200>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	e772      	b.n	800389e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80039b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039ba:	f000 fb57 	bl	800406c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80039be:	f000 fe0f 	bl	80045e0 <xTaskResumeAll>
 80039c2:	e76c      	b.n	800389e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80039c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039c6:	f000 fb51 	bl	800406c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80039ca:	f000 fe09 	bl	80045e0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80039ce:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3738      	adds	r7, #56	@ 0x38
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b090      	sub	sp, #64	@ 0x40
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <xQueueGenericSendFromISR+0x3e>
 8003a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <xQueueGenericSendFromISR+0x42>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <xQueueGenericSendFromISR+0x44>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	e7fd      	b.n	8003a38 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d103      	bne.n	8003a4a <xQueueGenericSendFromISR+0x6e>
 8003a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <xQueueGenericSendFromISR+0x72>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericSendFromISR+0x74>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
    }
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a6c:	f002 f8be 	bl	8005bec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003a70:	f3ef 8211 	mrs	r2, BASEPRI
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	61fa      	str	r2, [r7, #28]
 8003a86:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003a88:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a8a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d302      	bcc.n	8003a9e <xQueueGenericSendFromISR+0xc2>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d13f      	bne.n	8003b1e <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003ab4:	f000 fa4a 	bl	8003f4c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003ab8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d112      	bne.n	8003ae8 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d026      	beq.n	8003b18 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	3324      	adds	r3, #36	@ 0x24
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 ff9c 	bl	8004a0c <xTaskRemoveFromEventList>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01e      	beq.n	8003b18 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e017      	b.n	8003b18 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003ae8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003aec:	2b7f      	cmp	r3, #127	@ 0x7f
 8003aee:	d10b      	bne.n	8003b08 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	617b      	str	r3, [r7, #20]
    }
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
 8003b06:	e7fd      	b.n	8003b04 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	b25a      	sxtb	r2, r3
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8003b1c:	e001      	b.n	8003b22 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b24:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b2c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3740      	adds	r7, #64	@ 0x40
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	@ 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10b      	bne.n	8003b6a <xQueueReceive+0x32>
        __asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	623b      	str	r3, [r7, #32]
    }
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	e7fd      	b.n	8003b66 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <xQueueReceive+0x40>
 8003b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <xQueueReceive+0x44>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <xQueueReceive+0x46>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <xQueueReceive+0x62>
        __asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	61fb      	str	r3, [r7, #28]
    }
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b9a:	f001 f8d7 	bl	8004d4c <xTaskGetSchedulerState>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <xQueueReceive+0x72>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <xQueueReceive+0x76>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <xQueueReceive+0x78>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <xQueueReceive+0x94>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	61bb      	str	r3, [r7, #24]
    }
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003bcc:	f001 ff26 	bl	8005a1c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01f      	beq.n	8003c1c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003be0:	f000 fa1e 	bl	8004020 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	1e5a      	subs	r2, r3, #1
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00f      	beq.n	8003c14 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf6:	3310      	adds	r3, #16
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 ff07 	bl	8004a0c <xTaskRemoveFromEventList>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003c04:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf8 <xQueueReceive+0x1c0>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003c14:	f001 ff34 	bl	8005a80 <vPortExitCritical>
                return pdPASS;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e069      	b.n	8003cf0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c22:	f001 ff2d 	bl	8005a80 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e062      	b.n	8003cf0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c30:	f107 0310 	add.w	r3, r7, #16
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 ff4d 	bl	8004ad4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c3e:	f001 ff1f 	bl	8005a80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c42:	f000 fcbf 	bl	80045c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c46:	f001 fee9 	bl	8005a1c <vPortEnterCritical>
 8003c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c50:	b25b      	sxtb	r3, r3
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d103      	bne.n	8003c60 <xQueueReceive+0x128>
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d103      	bne.n	8003c76 <xQueueReceive+0x13e>
 8003c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c76:	f001 ff03 	bl	8005a80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c7a:	1d3a      	adds	r2, r7, #4
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff3c 	bl	8004b00 <xTaskCheckForTimeOut>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d123      	bne.n	8003cd6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c90:	f000 fa3e 	bl	8004110 <prvIsQueueEmpty>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d017      	beq.n	8003cca <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	3324      	adds	r3, #36	@ 0x24
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fe60 	bl	8004968 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003caa:	f000 f9df 	bl	800406c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003cae:	f000 fc97 	bl	80045e0 <xTaskResumeAll>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d189      	bne.n	8003bcc <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <xQueueReceive+0x1c0>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	e780      	b.n	8003bcc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ccc:	f000 f9ce 	bl	800406c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003cd0:	f000 fc86 	bl	80045e0 <xTaskResumeAll>
 8003cd4:	e77a      	b.n	8003bcc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cd8:	f000 f9c8 	bl	800406c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003cdc:	f000 fc80 	bl	80045e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ce2:	f000 fa15 	bl	8004110 <prvIsQueueEmpty>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f43f af6f 	beq.w	8003bcc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003cee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3730      	adds	r7, #48	@ 0x30
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	@ 0x38
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	623b      	str	r3, [r7, #32]
    }
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	61fb      	str	r3, [r7, #28]
    }
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d50:	f000 fffc 	bl	8004d4c <xTaskGetSchedulerState>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <xQueueSemaphoreTake+0x64>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <xQueueSemaphoreTake+0x68>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <xQueueSemaphoreTake+0x6a>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <xQueueSemaphoreTake+0x86>
        __asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	61bb      	str	r3, [r7, #24]
    }
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d82:	f001 fe4b 	bl	8005a1c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d024      	beq.n	8003ddc <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d98:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003da2:	f001 f973 	bl	800508c <pvTaskIncrementMutexHeldCount>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00f      	beq.n	8003dd4 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	3310      	adds	r3, #16
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fe27 	bl	8004a0c <xTaskRemoveFromEventList>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003dc4:	4b54      	ldr	r3, [pc, #336]	@ (8003f18 <xQueueSemaphoreTake+0x21c>)
 8003dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003dd4:	f001 fe54 	bl	8005a80 <vPortExitCritical>
                return pdPASS;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e098      	b.n	8003f0e <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d112      	bne.n	8003e08 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00b      	beq.n	8003e00 <xQueueSemaphoreTake+0x104>
        __asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	617b      	str	r3, [r7, #20]
    }
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003e00:	f001 fe3e 	bl	8005a80 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e082      	b.n	8003f0e <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fe5e 	bl	8004ad4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e1c:	f001 fe30 	bl	8005a80 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e20:	f000 fbd0 	bl	80045c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e24:	f001 fdfa 	bl	8005a1c <vPortEnterCritical>
 8003e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d103      	bne.n	8003e3e <xQueueSemaphoreTake+0x142>
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d103      	bne.n	8003e54 <xQueueSemaphoreTake+0x158>
 8003e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e54:	f001 fe14 	bl	8005a80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e58:	463a      	mov	r2, r7
 8003e5a:	f107 030c 	add.w	r3, r7, #12
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fe4d 	bl	8004b00 <xTaskCheckForTimeOut>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d132      	bne.n	8003ed2 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e6e:	f000 f94f 	bl	8004110 <prvIsQueueEmpty>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d026      	beq.n	8003ec6 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 8003e80:	f001 fdcc 	bl	8005a1c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 ff7d 	bl	8004d88 <xTaskPriorityInherit>
 8003e8e:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8003e90:	f001 fdf6 	bl	8005a80 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	3324      	adds	r3, #36	@ 0x24
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fd63 	bl	8004968 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ea2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ea4:	f000 f8e2 	bl	800406c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003ea8:	f000 fb9a 	bl	80045e0 <xTaskResumeAll>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f47f af67 	bne.w	8003d82 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8003eb4:	4b18      	ldr	r3, [pc, #96]	@ (8003f18 <xQueueSemaphoreTake+0x21c>)
 8003eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	e75d      	b.n	8003d82 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003ec6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ec8:	f000 f8d0 	bl	800406c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ecc:	f000 fb88 	bl	80045e0 <xTaskResumeAll>
 8003ed0:	e757      	b.n	8003d82 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003ed2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ed4:	f000 f8ca 	bl	800406c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ed8:	f000 fb82 	bl	80045e0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003edc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ede:	f000 f917 	bl	8004110 <prvIsQueueEmpty>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f43f af4c 	beq.w	8003d82 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00d      	beq.n	8003f0c <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 8003ef0:	f001 fd94 	bl	8005a1c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ef4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ef6:	f000 f811 	bl	8003f1c <prvGetDisinheritPriorityAfterTimeout>
 8003efa:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 f832 	bl	8004f6c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003f08:	f001 fdba 	bl	8005a80 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003f0c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3738      	adds	r7, #56	@ 0x38
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1c3 0305 	rsb	r3, r3, #5
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e001      	b.n	8003f3e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
    }
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d14d      	bne.n	800400e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 ff7c 	bl	8004e74 <xTaskPriorityDisinherit>
 8003f7c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	e043      	b.n	800400e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d119      	bne.n	8003fc0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6858      	ldr	r0, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	461a      	mov	r2, r3
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	f002 fa4b 	bl	8006432 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d32b      	bcc.n	800400e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	e026      	b.n	800400e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68d8      	ldr	r0, [r3, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	f002 fa31 	bl	8006432 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	425b      	negs	r3, r3
 8003fda:	441a      	add	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d207      	bcs.n	8003ffc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff4:	425b      	negs	r3, r3
 8003ff6:	441a      	add	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d105      	bne.n	800400e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	3b01      	subs	r3, #1
 800400c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004016:	697b      	ldr	r3, [r7, #20]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d018      	beq.n	8004064 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	441a      	add	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	429a      	cmp	r2, r3
 800404a:	d303      	bcc.n	8004054 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68d9      	ldr	r1, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	461a      	mov	r2, r3
 800405e:	6838      	ldr	r0, [r7, #0]
 8004060:	f002 f9e7 	bl	8006432 <memcpy>
    }
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004074:	f001 fcd2 	bl	8005a1c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800407e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004080:	e011      	b.n	80040a6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d012      	beq.n	80040b0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3324      	adds	r3, #36	@ 0x24
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fcbc 	bl	8004a0c <xTaskRemoveFromEventList>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800409a:	f000 fd99 	bl	8004bd0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80040a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	dce9      	bgt.n	8004082 <prvUnlockQueue+0x16>
 80040ae:	e000      	b.n	80040b2 <prvUnlockQueue+0x46>
                        break;
 80040b0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	22ff      	movs	r2, #255	@ 0xff
 80040b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80040ba:	f001 fce1 	bl	8005a80 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80040be:	f001 fcad 	bl	8005a1c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040c8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ca:	e011      	b.n	80040f0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d012      	beq.n	80040fa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3310      	adds	r3, #16
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fc97 	bl	8004a0c <xTaskRemoveFromEventList>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80040e4:	f000 fd74 	bl	8004bd0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80040e8:	7bbb      	ldrb	r3, [r7, #14]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80040f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	dce9      	bgt.n	80040cc <prvUnlockQueue+0x60>
 80040f8:	e000      	b.n	80040fc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80040fa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	22ff      	movs	r2, #255	@ 0xff
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004104:	f001 fcbc 	bl	8005a80 <vPortExitCritical>
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004118:	f001 fc80 	bl	8005a1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e001      	b.n	800412e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800412e:	f001 fca7 	bl	8005a80 <vPortExitCritical>

    return xReturn;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004144:	f001 fc6a 	bl	8005a1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	429a      	cmp	r2, r3
 8004152:	d102      	bne.n	800415a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004154:	2301      	movs	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	e001      	b.n	800415e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800415e:	f001 fc8f 	bl	8005a80 <vPortExitCritical>

    return xReturn;
 8004162:	68fb      	ldr	r3, [r7, #12]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	e014      	b.n	80041a6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800417c:	4a0f      	ldr	r2, [pc, #60]	@ (80041bc <vQueueAddToRegistry+0x50>)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004188:	490c      	ldr	r1, [pc, #48]	@ (80041bc <vQueueAddToRegistry+0x50>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004192:	4a0a      	ldr	r2, [pc, #40]	@ (80041bc <vQueueAddToRegistry+0x50>)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800419e:	e006      	b.n	80041ae <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3301      	adds	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b07      	cmp	r3, #7
 80041aa:	d9e7      	bls.n	800417c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000228 	.word	0x20000228

080041c0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80041d0:	f001 fc24 	bl	8005a1c <vPortEnterCritical>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d103      	bne.n	80041ea <vQueueWaitForMessageRestricted+0x2a>
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d103      	bne.n	8004200 <vQueueWaitForMessageRestricted+0x40>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004200:	f001 fc3e 	bl	8005a80 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3324      	adds	r3, #36	@ 0x24
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fbcd 	bl	80049b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800421a:	6978      	ldr	r0, [r7, #20]
 800421c:	f7ff ff26 	bl	800406c <prvUnlockQueue>
    }
 8004220:	bf00      	nop
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004228:	b580      	push	{r7, lr}
 800422a:	b08c      	sub	sp, #48	@ 0x30
 800422c:	af04      	add	r7, sp, #16
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f001 fd17 	bl	8005c70 <pvPortMalloc>
 8004242:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00e      	beq.n	8004268 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800424a:	2058      	movs	r0, #88	@ 0x58
 800424c:	f001 fd10 	bl	8005c70 <pvPortMalloc>
 8004250:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
 800425e:	e005      	b.n	800426c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004260:	6978      	ldr	r0, [r7, #20]
 8004262:	f001 fde7 	bl	8005e34 <vPortFree>
 8004266:	e001      	b.n	800426c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d013      	beq.n	800429a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	2300      	movs	r3, #0
 8004276:	9303      	str	r3, [sp, #12]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f80e 	bl	80042aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800428e:	69f8      	ldr	r0, [r7, #28]
 8004290:	f000 f8a2 	bl	80043d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004294:	2301      	movs	r3, #1
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e002      	b.n	80042a0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80042a0:	69bb      	ldr	r3, [r7, #24]
    }
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b088      	sub	sp, #32
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	461a      	mov	r2, r3
 80042c2:	21a5      	movs	r1, #165	@ 0xa5
 80042c4:	f002 f839 	bl	800633a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042d2:	3b01      	subs	r3, #1
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f023 0307 	bic.w	r3, r3, #7
 80042e0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00b      	beq.n	8004304 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	617b      	str	r3, [r7, #20]
    }
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01f      	beq.n	800434a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	e012      	b.n	8004336 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	7819      	ldrb	r1, [r3, #0]
 8004318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	3334      	adds	r3, #52	@ 0x34
 8004320:	460a      	mov	r2, r1
 8004322:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d006      	beq.n	800433e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	3301      	adds	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b09      	cmp	r3, #9
 800433a:	d9e9      	bls.n	8004310 <prvInitialiseNewTask+0x66>
 800433c:	e000      	b.n	8004340 <prvInitialiseNewTask+0x96>
            {
                break;
 800433e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004348:	e003      	b.n	8004352 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	2b04      	cmp	r3, #4
 8004356:	d901      	bls.n	800435c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004358:	2304      	movs	r3, #4
 800435a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004360:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004366:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	2200      	movs	r2, #0
 800436c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	3304      	adds	r3, #4
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff f8ac 	bl	80034d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	3318      	adds	r3, #24
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff f8a7 	bl	80034d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004386:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	f1c3 0205 	rsb	r2, r3, #5
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004396:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	3350      	adds	r3, #80	@ 0x50
 800439c:	2204      	movs	r2, #4
 800439e:	2100      	movs	r1, #0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 ffca 	bl	800633a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	3354      	adds	r3, #84	@ 0x54
 80043aa:	2201      	movs	r2, #1
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 ffc3 	bl	800633a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	69b8      	ldr	r0, [r7, #24]
 80043ba:	f001 f9ff 	bl	80057bc <pxPortInitialiseStack>
 80043be:	4602      	mov	r2, r0
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80043c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043d0:	bf00      	nop
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80043e0:	f001 fb1c 	bl	8005a1c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80043e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004498 <prvAddNewTaskToReadyList+0xc0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004498 <prvAddNewTaskToReadyList+0xc0>)
 80043ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80043ee:	4b2b      	ldr	r3, [pc, #172]	@ (800449c <prvAddNewTaskToReadyList+0xc4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80043f6:	4a29      	ldr	r2, [pc, #164]	@ (800449c <prvAddNewTaskToReadyList+0xc4>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043fc:	4b26      	ldr	r3, [pc, #152]	@ (8004498 <prvAddNewTaskToReadyList+0xc0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d110      	bne.n	8004426 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004404:	f000 fc08 	bl	8004c18 <prvInitialiseTaskLists>
 8004408:	e00d      	b.n	8004426 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800440a:	4b25      	ldr	r3, [pc, #148]	@ (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004412:	4b22      	ldr	r3, [pc, #136]	@ (800449c <prvAddNewTaskToReadyList+0xc4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	429a      	cmp	r2, r3
 800441e:	d802      	bhi.n	8004426 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004420:	4a1e      	ldr	r2, [pc, #120]	@ (800449c <prvAddNewTaskToReadyList+0xc4>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004426:	4b1f      	ldr	r3, [pc, #124]	@ (80044a4 <prvAddNewTaskToReadyList+0xcc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a1d      	ldr	r2, [pc, #116]	@ (80044a4 <prvAddNewTaskToReadyList+0xcc>)
 800442e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004430:	4b1c      	ldr	r3, [pc, #112]	@ (80044a4 <prvAddNewTaskToReadyList+0xcc>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	2201      	movs	r2, #1
 800443e:	409a      	lsls	r2, r3
 8004440:	4b19      	ldr	r3, [pc, #100]	@ (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4313      	orrs	r3, r2
 8004446:	4a18      	ldr	r2, [pc, #96]	@ (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4a15      	ldr	r2, [pc, #84]	@ (80044ac <prvAddNewTaskToReadyList+0xd4>)
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f7ff f842 	bl	80034ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004466:	f001 fb0b 	bl	8005a80 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800446a:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00e      	beq.n	8004490 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004472:	4b0a      	ldr	r3, [pc, #40]	@ (800449c <prvAddNewTaskToReadyList+0xc4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	429a      	cmp	r2, r3
 800447e:	d207      	bcs.n	8004490 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <prvAddNewTaskToReadyList+0xd8>)
 8004482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000340 	.word	0x20000340
 800449c:	20000268 	.word	0x20000268
 80044a0:	2000034c 	.word	0x2000034c
 80044a4:	2000035c 	.word	0x2000035c
 80044a8:	20000348 	.word	0x20000348
 80044ac:	2000026c 	.word	0x2000026c
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d018      	beq.n	80044f8 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80044c6:	4b14      	ldr	r3, [pc, #80]	@ (8004518 <vTaskDelay+0x64>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <vTaskDelay+0x32>
        __asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60bb      	str	r3, [r7, #8]
    }
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80044e6:	f000 f86d 	bl	80045c4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044ea:	2100      	movs	r1, #0
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fde1 	bl	80050b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80044f2:	f000 f875 	bl	80045e0 <xTaskResumeAll>
 80044f6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d107      	bne.n	800450e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80044fe:	4b07      	ldr	r3, [pc, #28]	@ (800451c <vTaskDelay+0x68>)
 8004500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000368 	.word	0x20000368
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004526:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <vTaskStartScheduler+0x88>)
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	2300      	movs	r3, #0
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	2300      	movs	r3, #0
 8004530:	2282      	movs	r2, #130	@ 0x82
 8004532:	491e      	ldr	r1, [pc, #120]	@ (80045ac <vTaskStartScheduler+0x8c>)
 8004534:	481e      	ldr	r0, [pc, #120]	@ (80045b0 <vTaskStartScheduler+0x90>)
 8004536:	f7ff fe77 	bl	8004228 <xTaskCreate>
 800453a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004542:	f000 fe1d 	bl	8005180 <xTimerCreateTimerTask>
 8004546:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d116      	bne.n	800457c <vTaskStartScheduler+0x5c>
        __asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	60bb      	str	r3, [r7, #8]
    }
 8004560:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004562:	4b14      	ldr	r3, [pc, #80]	@ (80045b4 <vTaskStartScheduler+0x94>)
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <vTaskStartScheduler+0x98>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004570:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <vTaskStartScheduler+0x9c>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004576:	f001 f9ad 	bl	80058d4 <xPortStartScheduler>
 800457a:	e00f      	b.n	800459c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d10b      	bne.n	800459c <vTaskStartScheduler+0x7c>
        __asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	607b      	str	r3, [r7, #4]
    }
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800459c:	4b08      	ldr	r3, [pc, #32]	@ (80045c0 <vTaskStartScheduler+0xa0>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000364 	.word	0x20000364
 80045ac:	080074dc 	.word	0x080074dc
 80045b0:	08004be9 	.word	0x08004be9
 80045b4:	20000360 	.word	0x20000360
 80045b8:	2000034c 	.word	0x2000034c
 80045bc:	20000344 	.word	0x20000344
 80045c0:	2000000c 	.word	0x2000000c

080045c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80045c8:	4b04      	ldr	r3, [pc, #16]	@ (80045dc <vTaskSuspendAll+0x18>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	4a03      	ldr	r2, [pc, #12]	@ (80045dc <vTaskSuspendAll+0x18>)
 80045d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80045d2:	bf00      	nop
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	20000368 	.word	0x20000368

080045e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80045ee:	4b42      	ldr	r3, [pc, #264]	@ (80046f8 <xTaskResumeAll+0x118>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <xTaskResumeAll+0x2e>
        __asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	603b      	str	r3, [r7, #0]
    }
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800460e:	f001 fa05 	bl	8005a1c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004612:	4b39      	ldr	r3, [pc, #228]	@ (80046f8 <xTaskResumeAll+0x118>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3b01      	subs	r3, #1
 8004618:	4a37      	ldr	r2, [pc, #220]	@ (80046f8 <xTaskResumeAll+0x118>)
 800461a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800461c:	4b36      	ldr	r3, [pc, #216]	@ (80046f8 <xTaskResumeAll+0x118>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d161      	bne.n	80046e8 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004624:	4b35      	ldr	r3, [pc, #212]	@ (80046fc <xTaskResumeAll+0x11c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d05d      	beq.n	80046e8 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800462c:	e02e      	b.n	800468c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800462e:	4b34      	ldr	r3, [pc, #208]	@ (8004700 <xTaskResumeAll+0x120>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3318      	adds	r3, #24
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe ffb2 	bl	80035a4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3304      	adds	r3, #4
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe ffad 	bl	80035a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	2201      	movs	r2, #1
 8004650:	409a      	lsls	r2, r3
 8004652:	4b2c      	ldr	r3, [pc, #176]	@ (8004704 <xTaskResumeAll+0x124>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	4a2a      	ldr	r2, [pc, #168]	@ (8004704 <xTaskResumeAll+0x124>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a27      	ldr	r2, [pc, #156]	@ (8004708 <xTaskResumeAll+0x128>)
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe ff39 	bl	80034ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800467c:	4b23      	ldr	r3, [pc, #140]	@ (800470c <xTaskResumeAll+0x12c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8004686:	4b22      	ldr	r3, [pc, #136]	@ (8004710 <xTaskResumeAll+0x130>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800468c:	4b1c      	ldr	r3, [pc, #112]	@ (8004700 <xTaskResumeAll+0x120>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1cc      	bne.n	800462e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800469a:	f000 fb3b 	bl	8004d14 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800469e:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <xTaskResumeAll+0x134>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80046aa:	f000 f847 	bl	800473c <xTaskIncrementTick>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80046b4:	4b16      	ldr	r3, [pc, #88]	@ (8004710 <xTaskResumeAll+0x130>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3b01      	subs	r3, #1
 80046be:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f1      	bne.n	80046aa <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80046c6:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <xTaskResumeAll+0x134>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80046cc:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <xTaskResumeAll+0x130>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80046d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004718 <xTaskResumeAll+0x138>)
 80046da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80046e8:	f001 f9ca 	bl	8005a80 <vPortExitCritical>

    return xAlreadyYielded;
 80046ec:	68bb      	ldr	r3, [r7, #8]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000368 	.word	0x20000368
 80046fc:	20000340 	.word	0x20000340
 8004700:	20000300 	.word	0x20000300
 8004704:	20000348 	.word	0x20000348
 8004708:	2000026c 	.word	0x2000026c
 800470c:	20000268 	.word	0x20000268
 8004710:	20000354 	.word	0x20000354
 8004714:	20000350 	.word	0x20000350
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <xTaskGetTickCount+0x1c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004728:	687b      	ldr	r3, [r7, #4]
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000344 	.word	0x20000344

0800473c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004746:	4b4f      	ldr	r3, [pc, #316]	@ (8004884 <xTaskIncrementTick+0x148>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 808f 	bne.w	800486e <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004750:	4b4d      	ldr	r3, [pc, #308]	@ (8004888 <xTaskIncrementTick+0x14c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004758:	4a4b      	ldr	r2, [pc, #300]	@ (8004888 <xTaskIncrementTick+0x14c>)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d121      	bne.n	80047a8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004764:	4b49      	ldr	r3, [pc, #292]	@ (800488c <xTaskIncrementTick+0x150>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <xTaskIncrementTick+0x4a>
        __asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	603b      	str	r3, [r7, #0]
    }
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	e7fd      	b.n	8004782 <xTaskIncrementTick+0x46>
 8004786:	4b41      	ldr	r3, [pc, #260]	@ (800488c <xTaskIncrementTick+0x150>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	4b40      	ldr	r3, [pc, #256]	@ (8004890 <xTaskIncrementTick+0x154>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a3e      	ldr	r2, [pc, #248]	@ (800488c <xTaskIncrementTick+0x150>)
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4a3e      	ldr	r2, [pc, #248]	@ (8004890 <xTaskIncrementTick+0x154>)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b3e      	ldr	r3, [pc, #248]	@ (8004894 <xTaskIncrementTick+0x158>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3301      	adds	r3, #1
 80047a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004894 <xTaskIncrementTick+0x158>)
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	f000 fab6 	bl	8004d14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80047a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004898 <xTaskIncrementTick+0x15c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d348      	bcc.n	8004844 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b2:	4b36      	ldr	r3, [pc, #216]	@ (800488c <xTaskIncrementTick+0x150>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047bc:	4b36      	ldr	r3, [pc, #216]	@ (8004898 <xTaskIncrementTick+0x15c>)
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	601a      	str	r2, [r3, #0]
                    break;
 80047c4:	e03e      	b.n	8004844 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c6:	4b31      	ldr	r3, [pc, #196]	@ (800488c <xTaskIncrementTick+0x150>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d203      	bcs.n	80047e6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80047de:	4a2e      	ldr	r2, [pc, #184]	@ (8004898 <xTaskIncrementTick+0x15c>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047e4:	e02e      	b.n	8004844 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe feda 	bl	80035a4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	3318      	adds	r3, #24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe fed1 	bl	80035a4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004806:	2201      	movs	r2, #1
 8004808:	409a      	lsls	r2, r3
 800480a:	4b24      	ldr	r3, [pc, #144]	@ (800489c <xTaskIncrementTick+0x160>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	4a22      	ldr	r2, [pc, #136]	@ (800489c <xTaskIncrementTick+0x160>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4a1f      	ldr	r2, [pc, #124]	@ (80048a0 <xTaskIncrementTick+0x164>)
 8004822:	441a      	add	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f7fe fe5d 	bl	80034ea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004834:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <xTaskIncrementTick+0x168>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	429a      	cmp	r2, r3
 800483c:	d3b9      	bcc.n	80047b2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800483e:	2301      	movs	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004842:	e7b6      	b.n	80047b2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004844:	4b17      	ldr	r3, [pc, #92]	@ (80048a4 <xTaskIncrementTick+0x168>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484a:	4915      	ldr	r1, [pc, #84]	@ (80048a0 <xTaskIncrementTick+0x164>)
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d901      	bls.n	8004860 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 800485c:	2301      	movs	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004860:	4b11      	ldr	r3, [pc, #68]	@ (80048a8 <xTaskIncrementTick+0x16c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8004868:	2301      	movs	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	e004      	b.n	8004878 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800486e:	4b0f      	ldr	r3, [pc, #60]	@ (80048ac <xTaskIncrementTick+0x170>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a0d      	ldr	r2, [pc, #52]	@ (80048ac <xTaskIncrementTick+0x170>)
 8004876:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004878:	697b      	ldr	r3, [r7, #20]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000368 	.word	0x20000368
 8004888:	20000344 	.word	0x20000344
 800488c:	200002f8 	.word	0x200002f8
 8004890:	200002fc 	.word	0x200002fc
 8004894:	20000358 	.word	0x20000358
 8004898:	20000360 	.word	0x20000360
 800489c:	20000348 	.word	0x20000348
 80048a0:	2000026c 	.word	0x2000026c
 80048a4:	20000268 	.word	0x20000268
 80048a8:	20000354 	.word	0x20000354
 80048ac:	20000350 	.word	0x20000350

080048b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048b6:	4b27      	ldr	r3, [pc, #156]	@ (8004954 <vTaskSwitchContext+0xa4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80048be:	4b26      	ldr	r3, [pc, #152]	@ (8004958 <vTaskSwitchContext+0xa8>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80048c4:	e040      	b.n	8004948 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80048c6:	4b24      	ldr	r3, [pc, #144]	@ (8004958 <vTaskSwitchContext+0xa8>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048cc:	4b23      	ldr	r3, [pc, #140]	@ (800495c <vTaskSwitchContext+0xac>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80048da:	7afb      	ldrb	r3, [r7, #11]
 80048dc:	f1c3 031f 	rsb	r3, r3, #31
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	491f      	ldr	r1, [pc, #124]	@ (8004960 <vTaskSwitchContext+0xb0>)
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <vTaskSwitchContext+0x5e>
        __asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	607b      	str	r3, [r7, #4]
    }
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	e7fd      	b.n	800490a <vTaskSwitchContext+0x5a>
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4a11      	ldr	r2, [pc, #68]	@ (8004960 <vTaskSwitchContext+0xb0>)
 800491a:	4413      	add	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3308      	adds	r3, #8
 8004930:	429a      	cmp	r2, r3
 8004932:	d104      	bne.n	800493e <vTaskSwitchContext+0x8e>
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a07      	ldr	r2, [pc, #28]	@ (8004964 <vTaskSwitchContext+0xb4>)
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	20000368 	.word	0x20000368
 8004958:	20000354 	.word	0x20000354
 800495c:	20000348 	.word	0x20000348
 8004960:	2000026c 	.word	0x2000026c
 8004964:	20000268 	.word	0x20000268

08004968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	60fb      	str	r3, [r7, #12]
    }
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004990:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <vTaskPlaceOnEventList+0x48>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3318      	adds	r3, #24
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fe fdca 	bl	8003532 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800499e:	2101      	movs	r1, #1
 80049a0:	6838      	ldr	r0, [r7, #0]
 80049a2:	f000 fb87 	bl	80050b4 <prvAddCurrentTaskToDelayedList>
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000268 	.word	0x20000268

080049b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	617b      	str	r3, [r7, #20]
    }
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049de:	4b0a      	ldr	r3, [pc, #40]	@ (8004a08 <vTaskPlaceOnEventListRestricted+0x54>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3318      	adds	r3, #24
 80049e4:	4619      	mov	r1, r3
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7fe fd7f 	bl	80034ea <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295
 80049f6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	68b8      	ldr	r0, [r7, #8]
 80049fc:	f000 fb5a 	bl	80050b4 <prvAddCurrentTaskToDelayedList>
    }
 8004a00:	bf00      	nop
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000268 	.word	0x20000268

08004a0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	60fb      	str	r3, [r7, #12]
    }
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	e7fd      	b.n	8004a36 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fdb0 	bl	80035a4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a44:	4b1d      	ldr	r3, [pc, #116]	@ (8004abc <xTaskRemoveFromEventList+0xb0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11c      	bne.n	8004a86 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fda7 	bl	80035a4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	4b18      	ldr	r3, [pc, #96]	@ (8004ac0 <xTaskRemoveFromEventList+0xb4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	4a16      	ldr	r2, [pc, #88]	@ (8004ac0 <xTaskRemoveFromEventList+0xb4>)
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4a13      	ldr	r2, [pc, #76]	@ (8004ac4 <xTaskRemoveFromEventList+0xb8>)
 8004a76:	441a      	add	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7fe fd33 	bl	80034ea <vListInsertEnd>
 8004a84:	e005      	b.n	8004a92 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	3318      	adds	r3, #24
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	480e      	ldr	r0, [pc, #56]	@ (8004ac8 <xTaskRemoveFromEventList+0xbc>)
 8004a8e:	f7fe fd2c 	bl	80034ea <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <xTaskRemoveFromEventList+0xc0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d905      	bls.n	8004aac <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <xTaskRemoveFromEventList+0xc4>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e001      	b.n	8004ab0 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004ab0:	697b      	ldr	r3, [r7, #20]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000368 	.word	0x20000368
 8004ac0:	20000348 	.word	0x20000348
 8004ac4:	2000026c 	.word	0x2000026c
 8004ac8:	20000300 	.word	0x20000300
 8004acc:	20000268 	.word	0x20000268
 8004ad0:	20000354 	.word	0x20000354

08004ad4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004adc:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <vTaskInternalSetTimeOutState+0x24>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <vTaskInternalSetTimeOutState+0x28>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	605a      	str	r2, [r3, #4]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	20000358 	.word	0x20000358
 8004afc:	20000344 	.word	0x20000344

08004b00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
    }
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	60fb      	str	r3, [r7, #12]
    }
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004b46:	f000 ff69 	bl	8005a1c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc8 <xTaskCheckForTimeOut+0xc8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d102      	bne.n	8004b6a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	e026      	b.n	8004bb8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b17      	ldr	r3, [pc, #92]	@ (8004bcc <xTaskCheckForTimeOut+0xcc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d00a      	beq.n	8004b8c <xTaskCheckForTimeOut+0x8c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d305      	bcc.n	8004b8c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e015      	b.n	8004bb8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d20b      	bcs.n	8004bae <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	1ad2      	subs	r2, r2, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff ff96 	bl	8004ad4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	e004      	b.n	8004bb8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004bb8:	f000 ff62 	bl	8005a80 <vPortExitCritical>

    return xReturn;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000344 	.word	0x20000344
 8004bcc:	20000358 	.word	0x20000358

08004bd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <vTaskMissedYield+0x14>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	20000354 	.word	0x20000354

08004be8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004bf0:	f000 f852 	bl	8004c98 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bf4:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <prvIdleTask+0x28>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d9f9      	bls.n	8004bf0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <prvIdleTask+0x2c>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004c0c:	e7f0      	b.n	8004bf0 <prvIdleTask+0x8>
 8004c0e:	bf00      	nop
 8004c10:	2000026c 	.word	0x2000026c
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	e00c      	b.n	8004c3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <prvInitialiseTaskLists+0x60>)
 8004c30:	4413      	add	r3, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fc2c 	bl	8003490 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d9ef      	bls.n	8004c24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004c44:	480d      	ldr	r0, [pc, #52]	@ (8004c7c <prvInitialiseTaskLists+0x64>)
 8004c46:	f7fe fc23 	bl	8003490 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004c4a:	480d      	ldr	r0, [pc, #52]	@ (8004c80 <prvInitialiseTaskLists+0x68>)
 8004c4c:	f7fe fc20 	bl	8003490 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004c50:	480c      	ldr	r0, [pc, #48]	@ (8004c84 <prvInitialiseTaskLists+0x6c>)
 8004c52:	f7fe fc1d 	bl	8003490 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004c56:	480c      	ldr	r0, [pc, #48]	@ (8004c88 <prvInitialiseTaskLists+0x70>)
 8004c58:	f7fe fc1a 	bl	8003490 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004c5c:	480b      	ldr	r0, [pc, #44]	@ (8004c8c <prvInitialiseTaskLists+0x74>)
 8004c5e:	f7fe fc17 	bl	8003490 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <prvInitialiseTaskLists+0x78>)
 8004c64:	4a05      	ldr	r2, [pc, #20]	@ (8004c7c <prvInitialiseTaskLists+0x64>)
 8004c66:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <prvInitialiseTaskLists+0x7c>)
 8004c6a:	4a05      	ldr	r2, [pc, #20]	@ (8004c80 <prvInitialiseTaskLists+0x68>)
 8004c6c:	601a      	str	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	2000026c 	.word	0x2000026c
 8004c7c:	200002d0 	.word	0x200002d0
 8004c80:	200002e4 	.word	0x200002e4
 8004c84:	20000300 	.word	0x20000300
 8004c88:	20000314 	.word	0x20000314
 8004c8c:	2000032c 	.word	0x2000032c
 8004c90:	200002f8 	.word	0x200002f8
 8004c94:	200002fc 	.word	0x200002fc

08004c98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c9e:	e019      	b.n	8004cd4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004ca0:	f000 febc 	bl	8005a1c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca4:	4b10      	ldr	r3, [pc, #64]	@ (8004ce8 <prvCheckTasksWaitingTermination+0x50>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe fc77 	bl	80035a4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <prvCheckTasksWaitingTermination+0x54>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8004cec <prvCheckTasksWaitingTermination+0x54>)
 8004cbe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <prvCheckTasksWaitingTermination+0x58>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf0 <prvCheckTasksWaitingTermination+0x58>)
 8004cc8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004cca:	f000 fed9 	bl	8005a80 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f810 	bl	8004cf4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cd4:	4b06      	ldr	r3, [pc, #24]	@ (8004cf0 <prvCheckTasksWaitingTermination+0x58>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e1      	bne.n	8004ca0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000314 	.word	0x20000314
 8004cec:	20000340 	.word	0x20000340
 8004cf0:	20000328 	.word	0x20000328

08004cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 f897 	bl	8005e34 <vPortFree>
                vPortFree( pxTCB );
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f001 f894 	bl	8005e34 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d18:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <prvResetNextTaskUnblockTime+0x30>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004d22:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <prvResetNextTaskUnblockTime+0x34>)
 8004d24:	f04f 32ff 	mov.w	r2, #4294967295
 8004d28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004d2a:	e005      	b.n	8004d38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <prvResetNextTaskUnblockTime+0x30>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a04      	ldr	r2, [pc, #16]	@ (8004d48 <prvResetNextTaskUnblockTime+0x34>)
 8004d36:	6013      	str	r3, [r2, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	200002f8 	.word	0x200002f8
 8004d48:	20000360 	.word	0x20000360

08004d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004d52:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <xTaskGetSchedulerState+0x34>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	e008      	b.n	8004d72 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d60:	4b08      	ldr	r3, [pc, #32]	@ (8004d84 <xTaskGetSchedulerState+0x38>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	e001      	b.n	8004d72 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004d72:	687b      	ldr	r3, [r7, #4]
    }
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	2000034c 	.word	0x2000034c
 8004d84:	20000368 	.word	0x20000368

08004d88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d05e      	beq.n	8004e5c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4b31      	ldr	r3, [pc, #196]	@ (8004e68 <xTaskPriorityInherit+0xe0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d24e      	bcs.n	8004e4a <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db06      	blt.n	8004dc2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db4:	4b2c      	ldr	r3, [pc, #176]	@ (8004e68 <xTaskPriorityInherit+0xe0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	f1c3 0205 	rsb	r2, r3, #5
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6959      	ldr	r1, [r3, #20]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4a26      	ldr	r2, [pc, #152]	@ (8004e6c <xTaskPriorityInherit+0xe4>)
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4299      	cmp	r1, r3
 8004dd8:	d12f      	bne.n	8004e3a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fbe0 	bl	80035a4 <uxListRemove>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	2201      	movs	r2, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43da      	mvns	r2, r3
 8004df6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <xTaskPriorityInherit+0xe8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004e70 <xTaskPriorityInherit+0xe8>)
 8004dfe:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e00:	4b19      	ldr	r3, [pc, #100]	@ (8004e68 <xTaskPriorityInherit+0xe0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	2201      	movs	r2, #1
 8004e10:	409a      	lsls	r2, r3
 8004e12:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <xTaskPriorityInherit+0xe8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <xTaskPriorityInherit+0xe8>)
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4a10      	ldr	r2, [pc, #64]	@ (8004e6c <xTaskPriorityInherit+0xe4>)
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7fe fb59 	bl	80034ea <vListInsertEnd>
 8004e38:	e004      	b.n	8004e44 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <xTaskPriorityInherit+0xe0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e008      	b.n	8004e5c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e4e:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <xTaskPriorityInherit+0xe0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d201      	bcs.n	8004e5c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
    }
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000268 	.word	0x20000268
 8004e6c:	2000026c 	.word	0x2000026c
 8004e70:	20000348 	.word	0x20000348

08004e74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d065      	beq.n	8004f56 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004e8a:	4b35      	ldr	r3, [pc, #212]	@ (8004f60 <xTaskPriorityDisinherit+0xec>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d00b      	beq.n	8004eac <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	60fb      	str	r3, [r7, #12]
    }
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
 8004eaa:	e7fd      	b.n	8004ea8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10b      	bne.n	8004ecc <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	60bb      	str	r3, [r7, #8]
    }
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	e7fd      	b.n	8004ec8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed0:	1e5a      	subs	r2, r3, #1
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d039      	beq.n	8004f56 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d135      	bne.n	8004f56 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe fb58 	bl	80035a4 <uxListRemove>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	2201      	movs	r2, #1
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	43da      	mvns	r2, r3
 8004f06:	4b17      	ldr	r3, [pc, #92]	@ (8004f64 <xTaskPriorityDisinherit+0xf0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	4a15      	ldr	r2, [pc, #84]	@ (8004f64 <xTaskPriorityDisinherit+0xf0>)
 8004f0e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	f1c3 0205 	rsb	r2, r3, #5
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	2201      	movs	r2, #1
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f64 <xTaskPriorityDisinherit+0xf0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	4a0c      	ldr	r2, [pc, #48]	@ (8004f64 <xTaskPriorityDisinherit+0xf0>)
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <xTaskPriorityDisinherit+0xf4>)
 8004f44:	441a      	add	r2, r3
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f7fe facc 	bl	80034ea <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004f56:	697b      	ldr	r3, [r7, #20]
    }
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000268 	.word	0x20000268
 8004f64:	20000348 	.word	0x20000348
 8004f68:	2000026c 	.word	0x2000026c

08004f6c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d079      	beq.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
    }
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d902      	bls.n	8004fb4 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e002      	b.n	8004fba <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb8:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d059      	beq.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d154      	bne.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004fce:	4b2c      	ldr	r3, [pc, #176]	@ (8005080 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d10b      	bne.n	8004ff0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	60bb      	str	r3, [r7, #8]
    }
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	db04      	blt.n	800500e <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f1c3 0205 	rsb	r2, r3, #5
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	6959      	ldr	r1, [r3, #20]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800501e:	4413      	add	r3, r2
 8005020:	4299      	cmp	r1, r3
 8005022:	d129      	bne.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	3304      	adds	r3, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fabb 	bl	80035a4 <uxListRemove>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	2201      	movs	r2, #1
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	43da      	mvns	r2, r3
 8005040:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4013      	ands	r3, r2
 8005046:	4a10      	ldr	r2, [pc, #64]	@ (8005088 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005048:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504e:	2201      	movs	r2, #1
 8005050:	409a      	lsls	r2, r3
 8005052:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4313      	orrs	r3, r2
 8005058:	4a0b      	ldr	r2, [pc, #44]	@ (8005088 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4a06      	ldr	r2, [pc, #24]	@ (8005084 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800506a:	441a      	add	r2, r3
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fe fa39 	bl	80034ea <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005078:	bf00      	nop
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000268 	.word	0x20000268
 8005084:	2000026c 	.word	0x2000026c
 8005088:	20000348 	.word	0x20000348

0800508c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005090:	4b07      	ldr	r3, [pc, #28]	@ (80050b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800509e:	3201      	adds	r2, #1
 80050a0:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 80050a2:	4b03      	ldr	r3, [pc, #12]	@ (80050b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050a4:	681b      	ldr	r3, [r3, #0]
    }
 80050a6:	4618      	mov	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	20000268 	.word	0x20000268

080050b4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80050be:	4b29      	ldr	r3, [pc, #164]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c4:	4b28      	ldr	r3, [pc, #160]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fa6a 	bl	80035a4 <uxListRemove>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050d6:	4b24      	ldr	r3, [pc, #144]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	2201      	movs	r2, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4013      	ands	r3, r2
 80050ea:	4a20      	ldr	r2, [pc, #128]	@ (800516c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d10a      	bne.n	800510c <prvAddCurrentTaskToDelayedList+0x58>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	481a      	ldr	r0, [pc, #104]	@ (8005170 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005106:	f7fe f9f0 	bl	80034ea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800510a:	e026      	b.n	800515a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005114:	4b14      	ldr	r3, [pc, #80]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	429a      	cmp	r2, r3
 8005122:	d209      	bcs.n	8005138 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005124:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b0f      	ldr	r3, [pc, #60]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7fe f9fe 	bl	8003532 <vListInsert>
}
 8005136:	e010      	b.n	800515a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005138:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xc4>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b0a      	ldr	r3, [pc, #40]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f7fe f9f4 	bl	8003532 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800514a:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <prvAddCurrentTaskToDelayedList+0xc8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	d202      	bcs.n	800515a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005154:	4a09      	ldr	r2, [pc, #36]	@ (800517c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6013      	str	r3, [r2, #0]
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000344 	.word	0x20000344
 8005168:	20000268 	.word	0x20000268
 800516c:	20000348 	.word	0x20000348
 8005170:	2000032c 	.word	0x2000032c
 8005174:	200002fc 	.word	0x200002fc
 8005178:	200002f8 	.word	0x200002f8
 800517c:	20000360 	.word	0x20000360

08005180 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800518a:	f000 fae1 	bl	8005750 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800518e:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <xTimerCreateTimerTask+0x58>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005196:	4b11      	ldr	r3, [pc, #68]	@ (80051dc <xTimerCreateTimerTask+0x5c>)
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	2302      	movs	r3, #2
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	2300      	movs	r3, #0
 80051a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80051a4:	490e      	ldr	r1, [pc, #56]	@ (80051e0 <xTimerCreateTimerTask+0x60>)
 80051a6:	480f      	ldr	r0, [pc, #60]	@ (80051e4 <xTimerCreateTimerTask+0x64>)
 80051a8:	f7ff f83e 	bl	8004228 <xTaskCreate>
 80051ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	603b      	str	r3, [r7, #0]
    }
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80051cc:	687b      	ldr	r3, [r7, #4]
    }
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	2000039c 	.word	0x2000039c
 80051dc:	200003a0 	.word	0x200003a0
 80051e0:	080074e4 	.word	0x080074e4
 80051e4:	08005321 	.word	0x08005321

080051e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	@ 0x28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <xTimerGenericCommand+0x30>
        __asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	623b      	str	r3, [r7, #32]
    }
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005218:	4b19      	ldr	r3, [pc, #100]	@ (8005280 <xTimerGenericCommand+0x98>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d02a      	beq.n	8005276 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b05      	cmp	r3, #5
 8005230:	dc18      	bgt.n	8005264 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005232:	f7ff fd8b 	bl	8004d4c <xTaskGetSchedulerState>
 8005236:	4603      	mov	r3, r0
 8005238:	2b02      	cmp	r3, #2
 800523a:	d109      	bne.n	8005250 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800523c:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <xTimerGenericCommand+0x98>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	f107 0114 	add.w	r1, r7, #20
 8005244:	2300      	movs	r3, #0
 8005246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005248:	f7fe fac6 	bl	80037d8 <xQueueGenericSend>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24
 800524e:	e012      	b.n	8005276 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005250:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <xTimerGenericCommand+0x98>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	f107 0114 	add.w	r1, r7, #20
 8005258:	2300      	movs	r3, #0
 800525a:	2200      	movs	r2, #0
 800525c:	f7fe fabc 	bl	80037d8 <xQueueGenericSend>
 8005260:	6278      	str	r0, [r7, #36]	@ 0x24
 8005262:	e008      	b.n	8005276 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005264:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <xTimerGenericCommand+0x98>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	f107 0114 	add.w	r1, r7, #20
 800526c:	2300      	movs	r3, #0
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	f7fe fbb4 	bl	80039dc <xQueueGenericSendFromISR>
 8005274:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	@ 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	2000039c 	.word	0x2000039c

08005284 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800528e:	4b23      	ldr	r3, [pc, #140]	@ (800531c <prvProcessExpiredTimer+0x98>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe f981 	bl	80035a4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d023      	beq.n	80052f8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	18d1      	adds	r1, r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	6978      	ldr	r0, [r7, #20]
 80052be:	f000 f8d5 	bl	800546c <prvInsertTimerInActiveList>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d020      	beq.n	800530a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052c8:	2300      	movs	r3, #0
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2300      	movs	r3, #0
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	2100      	movs	r1, #0
 80052d2:	6978      	ldr	r0, [r7, #20]
 80052d4:	f7ff ff88 	bl	80051e8 <xTimerGenericCommand>
 80052d8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d114      	bne.n	800530a <prvProcessExpiredTimer+0x86>
        __asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
    }
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	b2da      	uxtb	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	6978      	ldr	r0, [r7, #20]
 8005310:	4798      	blx	r3
    }
 8005312:	bf00      	nop
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000394 	.word	0x20000394

08005320 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005328:	f107 0308 	add.w	r3, r7, #8
 800532c:	4618      	mov	r0, r3
 800532e:	f000 f859 	bl	80053e4 <prvGetNextExpireTime>
 8005332:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4619      	mov	r1, r3
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f805 	bl	8005348 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800533e:	f000 f8d7 	bl	80054f0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005342:	bf00      	nop
 8005344:	e7f0      	b.n	8005328 <prvTimerTask+0x8>
	...

08005348 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005352:	f7ff f937 	bl	80045c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f866 	bl	800542c <prvSampleTimeNow>
 8005360:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d130      	bne.n	80053ca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <prvProcessTimerOrBlockTask+0x3c>
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	429a      	cmp	r2, r3
 8005374:	d806      	bhi.n	8005384 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005376:	f7ff f933 	bl	80045e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800537a:	68f9      	ldr	r1, [r7, #12]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff ff81 	bl	8005284 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005382:	e024      	b.n	80053ce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800538a:	4b13      	ldr	r3, [pc, #76]	@ (80053d8 <prvProcessTimerOrBlockTask+0x90>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <prvProcessTimerOrBlockTask+0x50>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <prvProcessTimerOrBlockTask+0x52>
 8005398:	2300      	movs	r3, #0
 800539a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800539c:	4b0f      	ldr	r3, [pc, #60]	@ (80053dc <prvProcessTimerOrBlockTask+0x94>)
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	4619      	mov	r1, r3
 80053aa:	f7fe ff09 	bl	80041c0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80053ae:	f7ff f917 	bl	80045e0 <xTaskResumeAll>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10a      	bne.n	80053ce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80053b8:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <prvProcessTimerOrBlockTask+0x98>)
 80053ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	f3bf 8f6f 	isb	sy
    }
 80053c8:	e001      	b.n	80053ce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80053ca:	f7ff f909 	bl	80045e0 <xTaskResumeAll>
    }
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000398 	.word	0x20000398
 80053dc:	2000039c 	.word	0x2000039c
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005428 <prvGetNextExpireTime+0x44>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <prvGetNextExpireTime+0x16>
 80053f6:	2201      	movs	r2, #1
 80053f8:	e000      	b.n	80053fc <prvGetNextExpireTime+0x18>
 80053fa:	2200      	movs	r2, #0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d105      	bne.n	8005414 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005408:	4b07      	ldr	r3, [pc, #28]	@ (8005428 <prvGetNextExpireTime+0x44>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e001      	b.n	8005418 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005418:	68fb      	ldr	r3, [r7, #12]
    }
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000394 	.word	0x20000394

0800542c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005434:	f7ff f972 	bl	800471c <xTaskGetTickCount>
 8005438:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800543a:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <prvSampleTimeNow+0x3c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	429a      	cmp	r2, r3
 8005442:	d205      	bcs.n	8005450 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005444:	f000 f91e 	bl	8005684 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e002      	b.n	8005456 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005456:	4a04      	ldr	r2, [pc, #16]	@ (8005468 <prvSampleTimeNow+0x3c>)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800545c:	68fb      	ldr	r3, [r7, #12]
    }
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200003a4 	.word	0x200003a4

0800546c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d812      	bhi.n	80054b8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e01b      	b.n	80054de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054a6:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <prvInsertTimerInActiveList+0x7c>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f7fe f83e 	bl	8003532 <vListInsert>
 80054b6:	e012      	b.n	80054de <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d206      	bcs.n	80054ce <prvInsertTimerInActiveList+0x62>
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e007      	b.n	80054de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054ce:	4b07      	ldr	r3, [pc, #28]	@ (80054ec <prvInsertTimerInActiveList+0x80>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fe f82a 	bl	8003532 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80054de:	697b      	ldr	r3, [r7, #20]
    }
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000398 	.word	0x20000398
 80054ec:	20000394 	.word	0x20000394

080054f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	@ 0x30
 80054f4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054f6:	e0b2      	b.n	800565e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f2c0 80af 	blt.w	800565e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	3304      	adds	r3, #4
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe f847 	bl	80035a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005516:	1d3b      	adds	r3, r7, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff ff87 	bl	800542c <prvSampleTimeNow>
 800551e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b09      	cmp	r3, #9
 8005524:	f200 8098 	bhi.w	8005658 <prvProcessReceivedCommands+0x168>
 8005528:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <prvProcessReceivedCommands+0x40>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005559 	.word	0x08005559
 8005534:	08005559 	.word	0x08005559
 8005538:	08005559 	.word	0x08005559
 800553c:	080055cf 	.word	0x080055cf
 8005540:	080055e3 	.word	0x080055e3
 8005544:	0800562f 	.word	0x0800562f
 8005548:	08005559 	.word	0x08005559
 800554c:	08005559 	.word	0x08005559
 8005550:	080055cf 	.word	0x080055cf
 8005554:	080055e3 	.word	0x080055e3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	18d1      	adds	r1, r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a3a      	ldr	r2, [r7, #32]
 8005576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005578:	f7ff ff78 	bl	800546c <prvInsertTimerInActiveList>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d06c      	beq.n	800565c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005588:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d061      	beq.n	800565c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	441a      	add	r2, r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	2100      	movs	r1, #0
 80055a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055aa:	f7ff fe1d 	bl	80051e8 <xTimerGenericCommand>
 80055ae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d152      	bne.n	800565c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	61bb      	str	r3, [r7, #24]
    }
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80055e0:	e03d      	b.n	800565e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	617b      	str	r3, [r7, #20]
    }
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	18d1      	adds	r1, r2, r3
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005628:	f7ff ff20 	bl	800546c <prvInsertTimerInActiveList>
                        break;
 800562c:	e017      	b.n	800565e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800563c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800563e:	f000 fbf9 	bl	8005e34 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005642:	e00c      	b.n	800565e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005656:	e002      	b.n	800565e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <prvProcessReceivedCommands+0x16e>
                        break;
 800565c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800565e:	4b08      	ldr	r3, [pc, #32]	@ (8005680 <prvProcessReceivedCommands+0x190>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f107 0108 	add.w	r1, r7, #8
 8005666:	2200      	movs	r2, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fa65 	bl	8003b38 <xQueueReceive>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f af41 	bne.w	80054f8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	3728      	adds	r7, #40	@ 0x28
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	2000039c 	.word	0x2000039c

08005684 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800568a:	e049      	b.n	8005720 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800568c:	4b2e      	ldr	r3, [pc, #184]	@ (8005748 <prvSwitchTimerLists+0xc4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	4b2c      	ldr	r3, [pc, #176]	@ (8005748 <prvSwitchTimerLists+0xc4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fd ff7d 	bl	80035a4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d02f      	beq.n	8005720 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d90e      	bls.n	80056f0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056de:	4b1a      	ldr	r3, [pc, #104]	@ (8005748 <prvSwitchTimerLists+0xc4>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7fd ff22 	bl	8003532 <vListInsert>
 80056ee:	e017      	b.n	8005720 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056f0:	2300      	movs	r3, #0
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	2100      	movs	r1, #0
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fd74 	bl	80051e8 <xTimerGenericCommand>
 8005700:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	603b      	str	r3, [r7, #0]
    }
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005720:	4b09      	ldr	r3, [pc, #36]	@ (8005748 <prvSwitchTimerLists+0xc4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1b0      	bne.n	800568c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800572a:	4b07      	ldr	r3, [pc, #28]	@ (8005748 <prvSwitchTimerLists+0xc4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005730:	4b06      	ldr	r3, [pc, #24]	@ (800574c <prvSwitchTimerLists+0xc8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a04      	ldr	r2, [pc, #16]	@ (8005748 <prvSwitchTimerLists+0xc4>)
 8005736:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005738:	4a04      	ldr	r2, [pc, #16]	@ (800574c <prvSwitchTimerLists+0xc8>)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	6013      	str	r3, [r2, #0]
    }
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000394 	.word	0x20000394
 800574c:	20000398 	.word	0x20000398

08005750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005754:	f000 f962 	bl	8005a1c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005758:	4b12      	ldr	r3, [pc, #72]	@ (80057a4 <prvCheckForValidListAndQueue+0x54>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d11d      	bne.n	800579c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005760:	4811      	ldr	r0, [pc, #68]	@ (80057a8 <prvCheckForValidListAndQueue+0x58>)
 8005762:	f7fd fe95 	bl	8003490 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005766:	4811      	ldr	r0, [pc, #68]	@ (80057ac <prvCheckForValidListAndQueue+0x5c>)
 8005768:	f7fd fe92 	bl	8003490 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800576c:	4b10      	ldr	r3, [pc, #64]	@ (80057b0 <prvCheckForValidListAndQueue+0x60>)
 800576e:	4a0e      	ldr	r2, [pc, #56]	@ (80057a8 <prvCheckForValidListAndQueue+0x58>)
 8005770:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005772:	4b10      	ldr	r3, [pc, #64]	@ (80057b4 <prvCheckForValidListAndQueue+0x64>)
 8005774:	4a0d      	ldr	r2, [pc, #52]	@ (80057ac <prvCheckForValidListAndQueue+0x5c>)
 8005776:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005778:	2200      	movs	r2, #0
 800577a:	210c      	movs	r1, #12
 800577c:	200a      	movs	r0, #10
 800577e:	f7fd ffa5 	bl	80036cc <xQueueGenericCreate>
 8005782:	4603      	mov	r3, r0
 8005784:	4a07      	ldr	r2, [pc, #28]	@ (80057a4 <prvCheckForValidListAndQueue+0x54>)
 8005786:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005788:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <prvCheckForValidListAndQueue+0x54>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005790:	4b04      	ldr	r3, [pc, #16]	@ (80057a4 <prvCheckForValidListAndQueue+0x54>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4908      	ldr	r1, [pc, #32]	@ (80057b8 <prvCheckForValidListAndQueue+0x68>)
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fce8 	bl	800416c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800579c:	f000 f970 	bl	8005a80 <vPortExitCritical>
    }
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	2000039c 	.word	0x2000039c
 80057a8:	2000036c 	.word	0x2000036c
 80057ac:	20000380 	.word	0x20000380
 80057b0:	20000394 	.word	0x20000394
 80057b4:	20000398 	.word	0x20000398
 80057b8:	080074ec 	.word	0x080074ec

080057bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3b04      	subs	r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b04      	subs	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3b04      	subs	r3, #4
 80057ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80057ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005820 <pxPortInitialiseStack+0x64>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b14      	subs	r3, #20
 80057f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b04      	subs	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f06f 0202 	mvn.w	r2, #2
 800580a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3b20      	subs	r3, #32
 8005810:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005812:	68fb      	ldr	r3, [r7, #12]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	08005825 	.word	0x08005825

08005824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800582e:	4b13      	ldr	r3, [pc, #76]	@ (800587c <prvTaskExitError+0x58>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d00b      	beq.n	8005850 <prvTaskExitError+0x2c>
        __asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	60fb      	str	r3, [r7, #12]
    }
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <prvTaskExitError+0x28>
        __asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60bb      	str	r3, [r7, #8]
    }
 8005862:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005864:	bf00      	nop
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0fc      	beq.n	8005866 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000010 	.word	0x20000010

08005880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005880:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <pxCurrentTCBConst2>)
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	6808      	ldr	r0, [r1, #0]
 8005886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	f380 8809 	msr	PSP, r0
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8811 	msr	BASEPRI, r0
 800589a:	4770      	bx	lr
 800589c:	f3af 8000 	nop.w

080058a0 <pxCurrentTCBConst2>:
 80058a0:	20000268 	.word	0x20000268
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop

080058a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80058a8:	4808      	ldr	r0, [pc, #32]	@ (80058cc <prvPortStartFirstTask+0x24>)
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	f380 8808 	msr	MSP, r0
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8814 	msr	CONTROL, r0
 80058ba:	b662      	cpsie	i
 80058bc:	b661      	cpsie	f
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	df00      	svc	0
 80058c8:	bf00      	nop
 80058ca:	0000      	.short	0x0000
 80058cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop

080058d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058da:	4b47      	ldr	r3, [pc, #284]	@ (80059f8 <xPortStartScheduler+0x124>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a47      	ldr	r2, [pc, #284]	@ (80059fc <xPortStartScheduler+0x128>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10b      	bne.n	80058fc <xPortStartScheduler+0x28>
        __asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	613b      	str	r3, [r7, #16]
    }
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058fc:	4b3e      	ldr	r3, [pc, #248]	@ (80059f8 <xPortStartScheduler+0x124>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3f      	ldr	r2, [pc, #252]	@ (8005a00 <xPortStartScheduler+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10b      	bne.n	800591e <xPortStartScheduler+0x4a>
        __asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60fb      	str	r3, [r7, #12]
    }
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800591e:	4b39      	ldr	r3, [pc, #228]	@ (8005a04 <xPortStartScheduler+0x130>)
 8005920:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	22ff      	movs	r2, #255	@ 0xff
 800592e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4b31      	ldr	r3, [pc, #196]	@ (8005a08 <xPortStartScheduler+0x134>)
 8005944:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005946:	4b31      	ldr	r3, [pc, #196]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005948:	2207      	movs	r2, #7
 800594a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800594c:	e009      	b.n	8005962 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800594e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3b01      	subs	r3, #1
 8005954:	4a2d      	ldr	r2, [pc, #180]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005956:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596a:	2b80      	cmp	r3, #128	@ 0x80
 800596c:	d0ef      	beq.n	800594e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800596e:	4b27      	ldr	r3, [pc, #156]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1c3 0307 	rsb	r3, r3, #7
 8005976:	2b04      	cmp	r3, #4
 8005978:	d00b      	beq.n	8005992 <xPortStartScheduler+0xbe>
        __asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	60bb      	str	r3, [r7, #8]
    }
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	e7fd      	b.n	800598e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005992:	4b1e      	ldr	r3, [pc, #120]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	4a1c      	ldr	r2, [pc, #112]	@ (8005a0c <xPortStartScheduler+0x138>)
 800599a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800599c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a0c <xPortStartScheduler+0x138>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059a4:	4a19      	ldr	r2, [pc, #100]	@ (8005a0c <xPortStartScheduler+0x138>)
 80059a6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80059b0:	4b17      	ldr	r3, [pc, #92]	@ (8005a10 <xPortStartScheduler+0x13c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a16      	ldr	r2, [pc, #88]	@ (8005a10 <xPortStartScheduler+0x13c>)
 80059b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80059bc:	4b14      	ldr	r3, [pc, #80]	@ (8005a10 <xPortStartScheduler+0x13c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a13      	ldr	r2, [pc, #76]	@ (8005a10 <xPortStartScheduler+0x13c>)
 80059c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059c6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80059c8:	f000 f8e0 	bl	8005b8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80059cc:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <xPortStartScheduler+0x140>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80059d2:	f000 f8ff 	bl	8005bd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059d6:	4b10      	ldr	r3, [pc, #64]	@ (8005a18 <xPortStartScheduler+0x144>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a0f      	ldr	r2, [pc, #60]	@ (8005a18 <xPortStartScheduler+0x144>)
 80059dc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059e0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80059e2:	f7ff ff61 	bl	80058a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80059e6:	f7fe ff63 	bl	80048b0 <vTaskSwitchContext>
    prvTaskExitError();
 80059ea:	f7ff ff1b 	bl	8005824 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000ed00 	.word	0xe000ed00
 80059fc:	410fc271 	.word	0x410fc271
 8005a00:	410fc270 	.word	0x410fc270
 8005a04:	e000e400 	.word	0xe000e400
 8005a08:	200003a8 	.word	0x200003a8
 8005a0c:	200003ac 	.word	0x200003ac
 8005a10:	e000ed20 	.word	0xe000ed20
 8005a14:	20000010 	.word	0x20000010
 8005a18:	e000ef34 	.word	0xe000ef34

08005a1c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
        __asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	607b      	str	r3, [r7, #4]
    }
 8005a34:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005a36:	4b10      	ldr	r3, [pc, #64]	@ (8005a78 <vPortEnterCritical+0x5c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8005a78 <vPortEnterCritical+0x5c>)
 8005a3e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005a40:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <vPortEnterCritical+0x5c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d110      	bne.n	8005a6a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <vPortEnterCritical+0x60>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <vPortEnterCritical+0x4e>
        __asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	603b      	str	r3, [r7, #0]
    }
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <vPortEnterCritical+0x4a>
    }
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000010 	.word	0x20000010
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005a86:	4b12      	ldr	r3, [pc, #72]	@ (8005ad0 <vPortExitCritical+0x50>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10b      	bne.n	8005aa6 <vPortExitCritical+0x26>
        __asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	607b      	str	r3, [r7, #4]
    }
 8005aa0:	bf00      	nop
 8005aa2:	bf00      	nop
 8005aa4:	e7fd      	b.n	8005aa2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad0 <vPortExitCritical+0x50>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a08      	ldr	r2, [pc, #32]	@ (8005ad0 <vPortExitCritical+0x50>)
 8005aae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005ab0:	4b07      	ldr	r3, [pc, #28]	@ (8005ad0 <vPortExitCritical+0x50>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <vPortExitCritical+0x44>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	f383 8811 	msr	BASEPRI, r3
    }
 8005ac2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	20000010 	.word	0x20000010
	...

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7fe fece 	bl	80048b0 <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	20000268 	.word	0x20000268
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
    }
 8005b60:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005b62:	f7fe fdeb 	bl	800473c <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <SysTick_Handler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
    }
 8005b7e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bae:	4b04      	ldr	r3, [pc, #16]	@ (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
 8005be2:	0000      	.short	0x0000
 8005be4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop

08005bec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005bf2:	f3ef 8305 	mrs	r3, IPSR
 8005bf6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d915      	bls.n	8005c2a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfe:	4a18      	ldr	r2, [pc, #96]	@ (8005c60 <vPortValidateInterruptPriority+0x74>)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c08:	4b16      	ldr	r3, [pc, #88]	@ (8005c64 <vPortValidateInterruptPriority+0x78>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	7afa      	ldrb	r2, [r7, #11]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d20b      	bcs.n	8005c2a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	607b      	str	r3, [r7, #4]
    }
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop
 8005c28:	e7fd      	b.n	8005c26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c68 <vPortValidateInterruptPriority+0x7c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c32:	4b0e      	ldr	r3, [pc, #56]	@ (8005c6c <vPortValidateInterruptPriority+0x80>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d90b      	bls.n	8005c52 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	603b      	str	r3, [r7, #0]
    }
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <vPortValidateInterruptPriority+0x62>
    }
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	e000e3f0 	.word	0xe000e3f0
 8005c64:	200003a8 	.word	0x200003a8
 8005c68:	e000ed0c 	.word	0xe000ed0c
 8005c6c:	200003ac 	.word	0x200003ac

08005c70 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	@ 0x28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005c7c:	f7fe fca2 	bl	80045c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005c80:	4b66      	ldr	r3, [pc, #408]	@ (8005e1c <pvPortMalloc+0x1ac>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005c88:	f000 f938 	bl	8005efc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c8c:	4b64      	ldr	r3, [pc, #400]	@ (8005e20 <pvPortMalloc+0x1b0>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 80a9 	bne.w	8005dec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d02e      	beq.n	8005cfe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d228      	bcs.n	8005cfe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8005cac:	2208      	movs	r2, #8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d022      	beq.n	8005d04 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d215      	bcs.n	8005cf8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f023 0307 	bic.w	r3, r3, #7
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d011      	beq.n	8005d04 <pvPortMalloc+0x94>
        __asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	617b      	str	r3, [r7, #20]
    }
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cfc:	e002      	b.n	8005d04 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	e000      	b.n	8005d06 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d04:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d06f      	beq.n	8005dec <pvPortMalloc+0x17c>
 8005d0c:	4b45      	ldr	r3, [pc, #276]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d86a      	bhi.n	8005dec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005d16:	4b44      	ldr	r3, [pc, #272]	@ (8005e28 <pvPortMalloc+0x1b8>)
 8005d18:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005d1a:	4b43      	ldr	r3, [pc, #268]	@ (8005e28 <pvPortMalloc+0x1b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d20:	e004      	b.n	8005d2c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d903      	bls.n	8005d3e <pvPortMalloc+0xce>
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f1      	bne.n	8005d22 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005d3e:	4b37      	ldr	r3, [pc, #220]	@ (8005e1c <pvPortMalloc+0x1ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d051      	beq.n	8005dec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	4413      	add	r3, r2
 8005d50:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	1ad2      	subs	r2, r2, r3
 8005d62:	2308      	movs	r3, #8
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d920      	bls.n	8005dac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4413      	add	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <pvPortMalloc+0x124>
        __asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
    }
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	1ad2      	subs	r2, r2, r3
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005da6:	69b8      	ldr	r0, [r7, #24]
 8005da8:	f000 f90a 	bl	8005fc0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dac:	4b1d      	ldr	r3, [pc, #116]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005db8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dba:	4b1a      	ldr	r3, [pc, #104]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005e2c <pvPortMalloc+0x1bc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d203      	bcs.n	8005dce <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dc6:	4b17      	ldr	r3, [pc, #92]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a18      	ldr	r2, [pc, #96]	@ (8005e2c <pvPortMalloc+0x1bc>)
 8005dcc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4b13      	ldr	r3, [pc, #76]	@ (8005e20 <pvPortMalloc+0x1b0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005de2:	4b13      	ldr	r3, [pc, #76]	@ (8005e30 <pvPortMalloc+0x1c0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	4a11      	ldr	r2, [pc, #68]	@ (8005e30 <pvPortMalloc+0x1c0>)
 8005dea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005dec:	f7fe fbf8 	bl	80045e0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <pvPortMalloc+0x1a2>
        __asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	60fb      	str	r3, [r7, #12]
    }
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	e7fd      	b.n	8005e0e <pvPortMalloc+0x19e>
    return pvReturn;
 8005e12:	69fb      	ldr	r3, [r7, #28]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3728      	adds	r7, #40	@ 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20012fb8 	.word	0x20012fb8
 8005e20:	20012fcc 	.word	0x20012fcc
 8005e24:	20012fbc 	.word	0x20012fbc
 8005e28:	20012fb0 	.word	0x20012fb0
 8005e2c:	20012fc0 	.word	0x20012fc0
 8005e30:	20012fc4 	.word	0x20012fc4

08005e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d04f      	beq.n	8005ee6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005e46:	2308      	movs	r3, #8
 8005e48:	425b      	negs	r3, r3
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	4b25      	ldr	r3, [pc, #148]	@ (8005ef0 <vPortFree+0xbc>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10b      	bne.n	8005e7a <vPortFree+0x46>
        __asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	60fb      	str	r3, [r7, #12]
    }
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	e7fd      	b.n	8005e76 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <vPortFree+0x66>
        __asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60bb      	str	r3, [r7, #8]
    }
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ef0 <vPortFree+0xbc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01e      	beq.n	8005ee6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11a      	bne.n	8005ee6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <vPortFree+0xbc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	401a      	ands	r2, r3
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005ec0:	f7fe fb80 	bl	80045c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <vPortFree+0xc0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4413      	add	r3, r2
 8005ece:	4a09      	ldr	r2, [pc, #36]	@ (8005ef4 <vPortFree+0xc0>)
 8005ed0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ed2:	6938      	ldr	r0, [r7, #16]
 8005ed4:	f000 f874 	bl	8005fc0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005ed8:	4b07      	ldr	r3, [pc, #28]	@ (8005ef8 <vPortFree+0xc4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	4a06      	ldr	r2, [pc, #24]	@ (8005ef8 <vPortFree+0xc4>)
 8005ee0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005ee2:	f7fe fb7d 	bl	80045e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005ee6:	bf00      	nop
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20012fcc 	.word	0x20012fcc
 8005ef4:	20012fbc 	.word	0x20012fbc
 8005ef8:	20012fc8 	.word	0x20012fc8

08005efc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f02:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005f06:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005f08:	4b27      	ldr	r3, [pc, #156]	@ (8005fa8 <prvHeapInit+0xac>)
 8005f0a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00c      	beq.n	8005f30 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3307      	adds	r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0307 	bic.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <prvHeapInit+0xac>)
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f34:	4a1d      	ldr	r2, [pc, #116]	@ (8005fac <prvHeapInit+0xb0>)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fac <prvHeapInit+0xb0>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	4413      	add	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005f48:	2208      	movs	r2, #8
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <prvHeapInit+0xb4>)
 8005f5c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <prvHeapInit+0xb4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005f66:	4b12      	ldr	r3, [pc, #72]	@ (8005fb0 <prvHeapInit+0xb4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	1ad2      	subs	r2, r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <prvHeapInit+0xb4>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb4 <prvHeapInit+0xb8>)
 8005f8a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a09      	ldr	r2, [pc, #36]	@ (8005fb8 <prvHeapInit+0xbc>)
 8005f92:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f94:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <prvHeapInit+0xc0>)
 8005f96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f9a:	601a      	str	r2, [r3, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	200003b0 	.word	0x200003b0
 8005fac:	20012fb0 	.word	0x20012fb0
 8005fb0:	20012fb8 	.word	0x20012fb8
 8005fb4:	20012fc0 	.word	0x20012fc0
 8005fb8:	20012fbc 	.word	0x20012fbc
 8005fbc:	20012fcc 	.word	0x20012fcc

08005fc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fc8:	4b28      	ldr	r3, [pc, #160]	@ (800606c <prvInsertBlockIntoFreeList+0xac>)
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e002      	b.n	8005fd4 <prvInsertBlockIntoFreeList+0x14>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d8f7      	bhi.n	8005fce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4413      	add	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d108      	bne.n	8006002 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	441a      	add	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	441a      	add	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d118      	bne.n	8006048 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b15      	ldr	r3, [pc, #84]	@ (8006070 <prvInsertBlockIntoFreeList+0xb0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d00d      	beq.n	800603e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	441a      	add	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e008      	b.n	8006050 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800603e:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <prvInsertBlockIntoFreeList+0xb0>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e003      	b.n	8006050 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d002      	beq.n	800605e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20012fb0 	.word	0x20012fb0
 8006070:	20012fb8 	.word	0x20012fb8

08006074 <rand>:
 8006074:	4b16      	ldr	r3, [pc, #88]	@ (80060d0 <rand+0x5c>)
 8006076:	b510      	push	{r4, lr}
 8006078:	681c      	ldr	r4, [r3, #0]
 800607a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800607c:	b9b3      	cbnz	r3, 80060ac <rand+0x38>
 800607e:	2018      	movs	r0, #24
 8006080:	f000 fa4e 	bl	8006520 <malloc>
 8006084:	4602      	mov	r2, r0
 8006086:	6320      	str	r0, [r4, #48]	@ 0x30
 8006088:	b920      	cbnz	r0, 8006094 <rand+0x20>
 800608a:	4b12      	ldr	r3, [pc, #72]	@ (80060d4 <rand+0x60>)
 800608c:	4812      	ldr	r0, [pc, #72]	@ (80060d8 <rand+0x64>)
 800608e:	2152      	movs	r1, #82	@ 0x52
 8006090:	f000 f9de 	bl	8006450 <__assert_func>
 8006094:	4911      	ldr	r1, [pc, #68]	@ (80060dc <rand+0x68>)
 8006096:	4b12      	ldr	r3, [pc, #72]	@ (80060e0 <rand+0x6c>)
 8006098:	e9c0 1300 	strd	r1, r3, [r0]
 800609c:	4b11      	ldr	r3, [pc, #68]	@ (80060e4 <rand+0x70>)
 800609e:	6083      	str	r3, [r0, #8]
 80060a0:	230b      	movs	r3, #11
 80060a2:	8183      	strh	r3, [r0, #12]
 80060a4:	2100      	movs	r1, #0
 80060a6:	2001      	movs	r0, #1
 80060a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80060ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060ae:	480e      	ldr	r0, [pc, #56]	@ (80060e8 <rand+0x74>)
 80060b0:	690b      	ldr	r3, [r1, #16]
 80060b2:	694c      	ldr	r4, [r1, #20]
 80060b4:	4a0d      	ldr	r2, [pc, #52]	@ (80060ec <rand+0x78>)
 80060b6:	4358      	muls	r0, r3
 80060b8:	fb02 0004 	mla	r0, r2, r4, r0
 80060bc:	fba3 3202 	umull	r3, r2, r3, r2
 80060c0:	3301      	adds	r3, #1
 80060c2:	eb40 0002 	adc.w	r0, r0, r2
 80060c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80060ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80060ce:	bd10      	pop	{r4, pc}
 80060d0:	20000020 	.word	0x20000020
 80060d4:	0800750c 	.word	0x0800750c
 80060d8:	08007523 	.word	0x08007523
 80060dc:	abcd330e 	.word	0xabcd330e
 80060e0:	e66d1234 	.word	0xe66d1234
 80060e4:	0005deec 	.word	0x0005deec
 80060e8:	5851f42d 	.word	0x5851f42d
 80060ec:	4c957f2d 	.word	0x4c957f2d

080060f0 <std>:
 80060f0:	2300      	movs	r3, #0
 80060f2:	b510      	push	{r4, lr}
 80060f4:	4604      	mov	r4, r0
 80060f6:	e9c0 3300 	strd	r3, r3, [r0]
 80060fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060fe:	6083      	str	r3, [r0, #8]
 8006100:	8181      	strh	r1, [r0, #12]
 8006102:	6643      	str	r3, [r0, #100]	@ 0x64
 8006104:	81c2      	strh	r2, [r0, #14]
 8006106:	6183      	str	r3, [r0, #24]
 8006108:	4619      	mov	r1, r3
 800610a:	2208      	movs	r2, #8
 800610c:	305c      	adds	r0, #92	@ 0x5c
 800610e:	f000 f914 	bl	800633a <memset>
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <std+0x58>)
 8006114:	6263      	str	r3, [r4, #36]	@ 0x24
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <std+0x5c>)
 8006118:	62a3      	str	r3, [r4, #40]	@ 0x28
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <std+0x60>)
 800611c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800611e:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <std+0x64>)
 8006120:	6323      	str	r3, [r4, #48]	@ 0x30
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <std+0x68>)
 8006124:	6224      	str	r4, [r4, #32]
 8006126:	429c      	cmp	r4, r3
 8006128:	d006      	beq.n	8006138 <std+0x48>
 800612a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800612e:	4294      	cmp	r4, r2
 8006130:	d002      	beq.n	8006138 <std+0x48>
 8006132:	33d0      	adds	r3, #208	@ 0xd0
 8006134:	429c      	cmp	r4, r3
 8006136:	d105      	bne.n	8006144 <std+0x54>
 8006138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800613c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006140:	f000 b974 	b.w	800642c <__retarget_lock_init_recursive>
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop
 8006148:	080062b5 	.word	0x080062b5
 800614c:	080062d7 	.word	0x080062d7
 8006150:	0800630f 	.word	0x0800630f
 8006154:	08006333 	.word	0x08006333
 8006158:	20012fd0 	.word	0x20012fd0

0800615c <stdio_exit_handler>:
 800615c:	4a02      	ldr	r2, [pc, #8]	@ (8006168 <stdio_exit_handler+0xc>)
 800615e:	4903      	ldr	r1, [pc, #12]	@ (800616c <stdio_exit_handler+0x10>)
 8006160:	4803      	ldr	r0, [pc, #12]	@ (8006170 <stdio_exit_handler+0x14>)
 8006162:	f000 b869 	b.w	8006238 <_fwalk_sglue>
 8006166:	bf00      	nop
 8006168:	20000014 	.word	0x20000014
 800616c:	08006d61 	.word	0x08006d61
 8006170:	20000024 	.word	0x20000024

08006174 <cleanup_stdio>:
 8006174:	6841      	ldr	r1, [r0, #4]
 8006176:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <cleanup_stdio+0x34>)
 8006178:	4299      	cmp	r1, r3
 800617a:	b510      	push	{r4, lr}
 800617c:	4604      	mov	r4, r0
 800617e:	d001      	beq.n	8006184 <cleanup_stdio+0x10>
 8006180:	f000 fdee 	bl	8006d60 <_fflush_r>
 8006184:	68a1      	ldr	r1, [r4, #8]
 8006186:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <cleanup_stdio+0x38>)
 8006188:	4299      	cmp	r1, r3
 800618a:	d002      	beq.n	8006192 <cleanup_stdio+0x1e>
 800618c:	4620      	mov	r0, r4
 800618e:	f000 fde7 	bl	8006d60 <_fflush_r>
 8006192:	68e1      	ldr	r1, [r4, #12]
 8006194:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <cleanup_stdio+0x3c>)
 8006196:	4299      	cmp	r1, r3
 8006198:	d004      	beq.n	80061a4 <cleanup_stdio+0x30>
 800619a:	4620      	mov	r0, r4
 800619c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a0:	f000 bdde 	b.w	8006d60 <_fflush_r>
 80061a4:	bd10      	pop	{r4, pc}
 80061a6:	bf00      	nop
 80061a8:	20012fd0 	.word	0x20012fd0
 80061ac:	20013038 	.word	0x20013038
 80061b0:	200130a0 	.word	0x200130a0

080061b4 <global_stdio_init.part.0>:
 80061b4:	b510      	push	{r4, lr}
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <global_stdio_init.part.0+0x30>)
 80061b8:	4c0b      	ldr	r4, [pc, #44]	@ (80061e8 <global_stdio_init.part.0+0x34>)
 80061ba:	4a0c      	ldr	r2, [pc, #48]	@ (80061ec <global_stdio_init.part.0+0x38>)
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	4620      	mov	r0, r4
 80061c0:	2200      	movs	r2, #0
 80061c2:	2104      	movs	r1, #4
 80061c4:	f7ff ff94 	bl	80060f0 <std>
 80061c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061cc:	2201      	movs	r2, #1
 80061ce:	2109      	movs	r1, #9
 80061d0:	f7ff ff8e 	bl	80060f0 <std>
 80061d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061d8:	2202      	movs	r2, #2
 80061da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061de:	2112      	movs	r1, #18
 80061e0:	f7ff bf86 	b.w	80060f0 <std>
 80061e4:	20013108 	.word	0x20013108
 80061e8:	20012fd0 	.word	0x20012fd0
 80061ec:	0800615d 	.word	0x0800615d

080061f0 <__sfp_lock_acquire>:
 80061f0:	4801      	ldr	r0, [pc, #4]	@ (80061f8 <__sfp_lock_acquire+0x8>)
 80061f2:	f000 b91c 	b.w	800642e <__retarget_lock_acquire_recursive>
 80061f6:	bf00      	nop
 80061f8:	20013111 	.word	0x20013111

080061fc <__sfp_lock_release>:
 80061fc:	4801      	ldr	r0, [pc, #4]	@ (8006204 <__sfp_lock_release+0x8>)
 80061fe:	f000 b917 	b.w	8006430 <__retarget_lock_release_recursive>
 8006202:	bf00      	nop
 8006204:	20013111 	.word	0x20013111

08006208 <__sinit>:
 8006208:	b510      	push	{r4, lr}
 800620a:	4604      	mov	r4, r0
 800620c:	f7ff fff0 	bl	80061f0 <__sfp_lock_acquire>
 8006210:	6a23      	ldr	r3, [r4, #32]
 8006212:	b11b      	cbz	r3, 800621c <__sinit+0x14>
 8006214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006218:	f7ff bff0 	b.w	80061fc <__sfp_lock_release>
 800621c:	4b04      	ldr	r3, [pc, #16]	@ (8006230 <__sinit+0x28>)
 800621e:	6223      	str	r3, [r4, #32]
 8006220:	4b04      	ldr	r3, [pc, #16]	@ (8006234 <__sinit+0x2c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f5      	bne.n	8006214 <__sinit+0xc>
 8006228:	f7ff ffc4 	bl	80061b4 <global_stdio_init.part.0>
 800622c:	e7f2      	b.n	8006214 <__sinit+0xc>
 800622e:	bf00      	nop
 8006230:	08006175 	.word	0x08006175
 8006234:	20013108 	.word	0x20013108

08006238 <_fwalk_sglue>:
 8006238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800623c:	4607      	mov	r7, r0
 800623e:	4688      	mov	r8, r1
 8006240:	4614      	mov	r4, r2
 8006242:	2600      	movs	r6, #0
 8006244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006248:	f1b9 0901 	subs.w	r9, r9, #1
 800624c:	d505      	bpl.n	800625a <_fwalk_sglue+0x22>
 800624e:	6824      	ldr	r4, [r4, #0]
 8006250:	2c00      	cmp	r4, #0
 8006252:	d1f7      	bne.n	8006244 <_fwalk_sglue+0xc>
 8006254:	4630      	mov	r0, r6
 8006256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d907      	bls.n	8006270 <_fwalk_sglue+0x38>
 8006260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006264:	3301      	adds	r3, #1
 8006266:	d003      	beq.n	8006270 <_fwalk_sglue+0x38>
 8006268:	4629      	mov	r1, r5
 800626a:	4638      	mov	r0, r7
 800626c:	47c0      	blx	r8
 800626e:	4306      	orrs	r6, r0
 8006270:	3568      	adds	r5, #104	@ 0x68
 8006272:	e7e9      	b.n	8006248 <_fwalk_sglue+0x10>

08006274 <siprintf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b500      	push	{lr}
 8006278:	b09c      	sub	sp, #112	@ 0x70
 800627a:	ab1d      	add	r3, sp, #116	@ 0x74
 800627c:	9002      	str	r0, [sp, #8]
 800627e:	9006      	str	r0, [sp, #24]
 8006280:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006284:	4809      	ldr	r0, [pc, #36]	@ (80062ac <siprintf+0x38>)
 8006286:	9107      	str	r1, [sp, #28]
 8006288:	9104      	str	r1, [sp, #16]
 800628a:	4909      	ldr	r1, [pc, #36]	@ (80062b0 <siprintf+0x3c>)
 800628c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006290:	9105      	str	r1, [sp, #20]
 8006292:	6800      	ldr	r0, [r0, #0]
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	a902      	add	r1, sp, #8
 8006298:	f000 fa54 	bl	8006744 <_svfiprintf_r>
 800629c:	9b02      	ldr	r3, [sp, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	b01c      	add	sp, #112	@ 0x70
 80062a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a8:	b003      	add	sp, #12
 80062aa:	4770      	bx	lr
 80062ac:	20000020 	.word	0x20000020
 80062b0:	ffff0208 	.word	0xffff0208

080062b4 <__sread>:
 80062b4:	b510      	push	{r4, lr}
 80062b6:	460c      	mov	r4, r1
 80062b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062bc:	f000 f868 	bl	8006390 <_read_r>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	bfab      	itete	ge
 80062c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062c6:	89a3      	ldrhlt	r3, [r4, #12]
 80062c8:	181b      	addge	r3, r3, r0
 80062ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062ce:	bfac      	ite	ge
 80062d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062d2:	81a3      	strhlt	r3, [r4, #12]
 80062d4:	bd10      	pop	{r4, pc}

080062d6 <__swrite>:
 80062d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062da:	461f      	mov	r7, r3
 80062dc:	898b      	ldrh	r3, [r1, #12]
 80062de:	05db      	lsls	r3, r3, #23
 80062e0:	4605      	mov	r5, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	4616      	mov	r6, r2
 80062e6:	d505      	bpl.n	80062f4 <__swrite+0x1e>
 80062e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ec:	2302      	movs	r3, #2
 80062ee:	2200      	movs	r2, #0
 80062f0:	f000 f83c 	bl	800636c <_lseek_r>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062fe:	81a3      	strh	r3, [r4, #12]
 8006300:	4632      	mov	r2, r6
 8006302:	463b      	mov	r3, r7
 8006304:	4628      	mov	r0, r5
 8006306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800630a:	f000 b853 	b.w	80063b4 <_write_r>

0800630e <__sseek>:
 800630e:	b510      	push	{r4, lr}
 8006310:	460c      	mov	r4, r1
 8006312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006316:	f000 f829 	bl	800636c <_lseek_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	bf15      	itete	ne
 8006320:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800632a:	81a3      	strheq	r3, [r4, #12]
 800632c:	bf18      	it	ne
 800632e:	81a3      	strhne	r3, [r4, #12]
 8006330:	bd10      	pop	{r4, pc}

08006332 <__sclose>:
 8006332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006336:	f000 b809 	b.w	800634c <_close_r>

0800633a <memset>:
 800633a:	4402      	add	r2, r0
 800633c:	4603      	mov	r3, r0
 800633e:	4293      	cmp	r3, r2
 8006340:	d100      	bne.n	8006344 <memset+0xa>
 8006342:	4770      	bx	lr
 8006344:	f803 1b01 	strb.w	r1, [r3], #1
 8006348:	e7f9      	b.n	800633e <memset+0x4>
	...

0800634c <_close_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	@ (8006368 <_close_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fa fda4 	bl	8000ea4 <_close>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_close_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_close_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	2001310c 	.word	0x2001310c

0800636c <_lseek_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d07      	ldr	r5, [pc, #28]	@ (800638c <_lseek_r+0x20>)
 8006370:	4604      	mov	r4, r0
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	2200      	movs	r2, #0
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f7fa fdb9 	bl	8000ef2 <_lseek>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_lseek_r+0x1e>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_lseek_r+0x1e>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	2001310c 	.word	0x2001310c

08006390 <_read_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	@ (80063b0 <_read_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fa fd47 	bl	8000e32 <_read>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_read_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_read_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	2001310c 	.word	0x2001310c

080063b4 <_write_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d07      	ldr	r5, [pc, #28]	@ (80063d4 <_write_r+0x20>)
 80063b8:	4604      	mov	r4, r0
 80063ba:	4608      	mov	r0, r1
 80063bc:	4611      	mov	r1, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	602a      	str	r2, [r5, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f7fa fd52 	bl	8000e6c <_write>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_write_r+0x1e>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_write_r+0x1e>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	2001310c 	.word	0x2001310c

080063d8 <__errno>:
 80063d8:	4b01      	ldr	r3, [pc, #4]	@ (80063e0 <__errno+0x8>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000020 	.word	0x20000020

080063e4 <__libc_init_array>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4d0d      	ldr	r5, [pc, #52]	@ (800641c <__libc_init_array+0x38>)
 80063e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006420 <__libc_init_array+0x3c>)
 80063ea:	1b64      	subs	r4, r4, r5
 80063ec:	10a4      	asrs	r4, r4, #2
 80063ee:	2600      	movs	r6, #0
 80063f0:	42a6      	cmp	r6, r4
 80063f2:	d109      	bne.n	8006408 <__libc_init_array+0x24>
 80063f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006424 <__libc_init_array+0x40>)
 80063f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006428 <__libc_init_array+0x44>)
 80063f8:	f000 fff0 	bl	80073dc <_init>
 80063fc:	1b64      	subs	r4, r4, r5
 80063fe:	10a4      	asrs	r4, r4, #2
 8006400:	2600      	movs	r6, #0
 8006402:	42a6      	cmp	r6, r4
 8006404:	d105      	bne.n	8006412 <__libc_init_array+0x2e>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	f855 3b04 	ldr.w	r3, [r5], #4
 800640c:	4798      	blx	r3
 800640e:	3601      	adds	r6, #1
 8006410:	e7ee      	b.n	80063f0 <__libc_init_array+0xc>
 8006412:	f855 3b04 	ldr.w	r3, [r5], #4
 8006416:	4798      	blx	r3
 8006418:	3601      	adds	r6, #1
 800641a:	e7f2      	b.n	8006402 <__libc_init_array+0x1e>
 800641c:	080075f4 	.word	0x080075f4
 8006420:	080075f4 	.word	0x080075f4
 8006424:	080075f4 	.word	0x080075f4
 8006428:	080075f8 	.word	0x080075f8

0800642c <__retarget_lock_init_recursive>:
 800642c:	4770      	bx	lr

0800642e <__retarget_lock_acquire_recursive>:
 800642e:	4770      	bx	lr

08006430 <__retarget_lock_release_recursive>:
 8006430:	4770      	bx	lr

08006432 <memcpy>:
 8006432:	440a      	add	r2, r1
 8006434:	4291      	cmp	r1, r2
 8006436:	f100 33ff 	add.w	r3, r0, #4294967295
 800643a:	d100      	bne.n	800643e <memcpy+0xc>
 800643c:	4770      	bx	lr
 800643e:	b510      	push	{r4, lr}
 8006440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006448:	4291      	cmp	r1, r2
 800644a:	d1f9      	bne.n	8006440 <memcpy+0xe>
 800644c:	bd10      	pop	{r4, pc}
	...

08006450 <__assert_func>:
 8006450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006452:	4614      	mov	r4, r2
 8006454:	461a      	mov	r2, r3
 8006456:	4b09      	ldr	r3, [pc, #36]	@ (800647c <__assert_func+0x2c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4605      	mov	r5, r0
 800645c:	68d8      	ldr	r0, [r3, #12]
 800645e:	b954      	cbnz	r4, 8006476 <__assert_func+0x26>
 8006460:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <__assert_func+0x30>)
 8006462:	461c      	mov	r4, r3
 8006464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006468:	9100      	str	r1, [sp, #0]
 800646a:	462b      	mov	r3, r5
 800646c:	4905      	ldr	r1, [pc, #20]	@ (8006484 <__assert_func+0x34>)
 800646e:	f000 fc9f 	bl	8006db0 <fiprintf>
 8006472:	f000 fcd9 	bl	8006e28 <abort>
 8006476:	4b04      	ldr	r3, [pc, #16]	@ (8006488 <__assert_func+0x38>)
 8006478:	e7f4      	b.n	8006464 <__assert_func+0x14>
 800647a:	bf00      	nop
 800647c:	20000020 	.word	0x20000020
 8006480:	080075b6 	.word	0x080075b6
 8006484:	08007588 	.word	0x08007588
 8006488:	0800757b 	.word	0x0800757b

0800648c <_free_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4605      	mov	r5, r0
 8006490:	2900      	cmp	r1, #0
 8006492:	d041      	beq.n	8006518 <_free_r+0x8c>
 8006494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006498:	1f0c      	subs	r4, r1, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	bfb8      	it	lt
 800649e:	18e4      	addlt	r4, r4, r3
 80064a0:	f000 f8e8 	bl	8006674 <__malloc_lock>
 80064a4:	4a1d      	ldr	r2, [pc, #116]	@ (800651c <_free_r+0x90>)
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	b933      	cbnz	r3, 80064b8 <_free_r+0x2c>
 80064aa:	6063      	str	r3, [r4, #4]
 80064ac:	6014      	str	r4, [r2, #0]
 80064ae:	4628      	mov	r0, r5
 80064b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064b4:	f000 b8e4 	b.w	8006680 <__malloc_unlock>
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	d908      	bls.n	80064ce <_free_r+0x42>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	1821      	adds	r1, r4, r0
 80064c0:	428b      	cmp	r3, r1
 80064c2:	bf01      	itttt	eq
 80064c4:	6819      	ldreq	r1, [r3, #0]
 80064c6:	685b      	ldreq	r3, [r3, #4]
 80064c8:	1809      	addeq	r1, r1, r0
 80064ca:	6021      	streq	r1, [r4, #0]
 80064cc:	e7ed      	b.n	80064aa <_free_r+0x1e>
 80064ce:	461a      	mov	r2, r3
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	b10b      	cbz	r3, 80064d8 <_free_r+0x4c>
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	d9fa      	bls.n	80064ce <_free_r+0x42>
 80064d8:	6811      	ldr	r1, [r2, #0]
 80064da:	1850      	adds	r0, r2, r1
 80064dc:	42a0      	cmp	r0, r4
 80064de:	d10b      	bne.n	80064f8 <_free_r+0x6c>
 80064e0:	6820      	ldr	r0, [r4, #0]
 80064e2:	4401      	add	r1, r0
 80064e4:	1850      	adds	r0, r2, r1
 80064e6:	4283      	cmp	r3, r0
 80064e8:	6011      	str	r1, [r2, #0]
 80064ea:	d1e0      	bne.n	80064ae <_free_r+0x22>
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	6053      	str	r3, [r2, #4]
 80064f2:	4408      	add	r0, r1
 80064f4:	6010      	str	r0, [r2, #0]
 80064f6:	e7da      	b.n	80064ae <_free_r+0x22>
 80064f8:	d902      	bls.n	8006500 <_free_r+0x74>
 80064fa:	230c      	movs	r3, #12
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	e7d6      	b.n	80064ae <_free_r+0x22>
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	1821      	adds	r1, r4, r0
 8006504:	428b      	cmp	r3, r1
 8006506:	bf04      	itt	eq
 8006508:	6819      	ldreq	r1, [r3, #0]
 800650a:	685b      	ldreq	r3, [r3, #4]
 800650c:	6063      	str	r3, [r4, #4]
 800650e:	bf04      	itt	eq
 8006510:	1809      	addeq	r1, r1, r0
 8006512:	6021      	streq	r1, [r4, #0]
 8006514:	6054      	str	r4, [r2, #4]
 8006516:	e7ca      	b.n	80064ae <_free_r+0x22>
 8006518:	bd38      	pop	{r3, r4, r5, pc}
 800651a:	bf00      	nop
 800651c:	20013118 	.word	0x20013118

08006520 <malloc>:
 8006520:	4b02      	ldr	r3, [pc, #8]	@ (800652c <malloc+0xc>)
 8006522:	4601      	mov	r1, r0
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	f000 b825 	b.w	8006574 <_malloc_r>
 800652a:	bf00      	nop
 800652c:	20000020 	.word	0x20000020

08006530 <sbrk_aligned>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4e0f      	ldr	r6, [pc, #60]	@ (8006570 <sbrk_aligned+0x40>)
 8006534:	460c      	mov	r4, r1
 8006536:	6831      	ldr	r1, [r6, #0]
 8006538:	4605      	mov	r5, r0
 800653a:	b911      	cbnz	r1, 8006542 <sbrk_aligned+0x12>
 800653c:	f000 fc64 	bl	8006e08 <_sbrk_r>
 8006540:	6030      	str	r0, [r6, #0]
 8006542:	4621      	mov	r1, r4
 8006544:	4628      	mov	r0, r5
 8006546:	f000 fc5f 	bl	8006e08 <_sbrk_r>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	d103      	bne.n	8006556 <sbrk_aligned+0x26>
 800654e:	f04f 34ff 	mov.w	r4, #4294967295
 8006552:	4620      	mov	r0, r4
 8006554:	bd70      	pop	{r4, r5, r6, pc}
 8006556:	1cc4      	adds	r4, r0, #3
 8006558:	f024 0403 	bic.w	r4, r4, #3
 800655c:	42a0      	cmp	r0, r4
 800655e:	d0f8      	beq.n	8006552 <sbrk_aligned+0x22>
 8006560:	1a21      	subs	r1, r4, r0
 8006562:	4628      	mov	r0, r5
 8006564:	f000 fc50 	bl	8006e08 <_sbrk_r>
 8006568:	3001      	adds	r0, #1
 800656a:	d1f2      	bne.n	8006552 <sbrk_aligned+0x22>
 800656c:	e7ef      	b.n	800654e <sbrk_aligned+0x1e>
 800656e:	bf00      	nop
 8006570:	20013114 	.word	0x20013114

08006574 <_malloc_r>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	1ccd      	adds	r5, r1, #3
 800657a:	f025 0503 	bic.w	r5, r5, #3
 800657e:	3508      	adds	r5, #8
 8006580:	2d0c      	cmp	r5, #12
 8006582:	bf38      	it	cc
 8006584:	250c      	movcc	r5, #12
 8006586:	2d00      	cmp	r5, #0
 8006588:	4606      	mov	r6, r0
 800658a:	db01      	blt.n	8006590 <_malloc_r+0x1c>
 800658c:	42a9      	cmp	r1, r5
 800658e:	d904      	bls.n	800659a <_malloc_r+0x26>
 8006590:	230c      	movs	r3, #12
 8006592:	6033      	str	r3, [r6, #0]
 8006594:	2000      	movs	r0, #0
 8006596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006670 <_malloc_r+0xfc>
 800659e:	f000 f869 	bl	8006674 <__malloc_lock>
 80065a2:	f8d8 3000 	ldr.w	r3, [r8]
 80065a6:	461c      	mov	r4, r3
 80065a8:	bb44      	cbnz	r4, 80065fc <_malloc_r+0x88>
 80065aa:	4629      	mov	r1, r5
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7ff ffbf 	bl	8006530 <sbrk_aligned>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	4604      	mov	r4, r0
 80065b6:	d158      	bne.n	800666a <_malloc_r+0xf6>
 80065b8:	f8d8 4000 	ldr.w	r4, [r8]
 80065bc:	4627      	mov	r7, r4
 80065be:	2f00      	cmp	r7, #0
 80065c0:	d143      	bne.n	800664a <_malloc_r+0xd6>
 80065c2:	2c00      	cmp	r4, #0
 80065c4:	d04b      	beq.n	800665e <_malloc_r+0xea>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	4639      	mov	r1, r7
 80065ca:	4630      	mov	r0, r6
 80065cc:	eb04 0903 	add.w	r9, r4, r3
 80065d0:	f000 fc1a 	bl	8006e08 <_sbrk_r>
 80065d4:	4581      	cmp	r9, r0
 80065d6:	d142      	bne.n	800665e <_malloc_r+0xea>
 80065d8:	6821      	ldr	r1, [r4, #0]
 80065da:	1a6d      	subs	r5, r5, r1
 80065dc:	4629      	mov	r1, r5
 80065de:	4630      	mov	r0, r6
 80065e0:	f7ff ffa6 	bl	8006530 <sbrk_aligned>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d03a      	beq.n	800665e <_malloc_r+0xea>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	442b      	add	r3, r5
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	f8d8 3000 	ldr.w	r3, [r8]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	bb62      	cbnz	r2, 8006650 <_malloc_r+0xdc>
 80065f6:	f8c8 7000 	str.w	r7, [r8]
 80065fa:	e00f      	b.n	800661c <_malloc_r+0xa8>
 80065fc:	6822      	ldr	r2, [r4, #0]
 80065fe:	1b52      	subs	r2, r2, r5
 8006600:	d420      	bmi.n	8006644 <_malloc_r+0xd0>
 8006602:	2a0b      	cmp	r2, #11
 8006604:	d917      	bls.n	8006636 <_malloc_r+0xc2>
 8006606:	1961      	adds	r1, r4, r5
 8006608:	42a3      	cmp	r3, r4
 800660a:	6025      	str	r5, [r4, #0]
 800660c:	bf18      	it	ne
 800660e:	6059      	strne	r1, [r3, #4]
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	bf08      	it	eq
 8006614:	f8c8 1000 	streq.w	r1, [r8]
 8006618:	5162      	str	r2, [r4, r5]
 800661a:	604b      	str	r3, [r1, #4]
 800661c:	4630      	mov	r0, r6
 800661e:	f000 f82f 	bl	8006680 <__malloc_unlock>
 8006622:	f104 000b 	add.w	r0, r4, #11
 8006626:	1d23      	adds	r3, r4, #4
 8006628:	f020 0007 	bic.w	r0, r0, #7
 800662c:	1ac2      	subs	r2, r0, r3
 800662e:	bf1c      	itt	ne
 8006630:	1a1b      	subne	r3, r3, r0
 8006632:	50a3      	strne	r3, [r4, r2]
 8006634:	e7af      	b.n	8006596 <_malloc_r+0x22>
 8006636:	6862      	ldr	r2, [r4, #4]
 8006638:	42a3      	cmp	r3, r4
 800663a:	bf0c      	ite	eq
 800663c:	f8c8 2000 	streq.w	r2, [r8]
 8006640:	605a      	strne	r2, [r3, #4]
 8006642:	e7eb      	b.n	800661c <_malloc_r+0xa8>
 8006644:	4623      	mov	r3, r4
 8006646:	6864      	ldr	r4, [r4, #4]
 8006648:	e7ae      	b.n	80065a8 <_malloc_r+0x34>
 800664a:	463c      	mov	r4, r7
 800664c:	687f      	ldr	r7, [r7, #4]
 800664e:	e7b6      	b.n	80065be <_malloc_r+0x4a>
 8006650:	461a      	mov	r2, r3
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	42a3      	cmp	r3, r4
 8006656:	d1fb      	bne.n	8006650 <_malloc_r+0xdc>
 8006658:	2300      	movs	r3, #0
 800665a:	6053      	str	r3, [r2, #4]
 800665c:	e7de      	b.n	800661c <_malloc_r+0xa8>
 800665e:	230c      	movs	r3, #12
 8006660:	6033      	str	r3, [r6, #0]
 8006662:	4630      	mov	r0, r6
 8006664:	f000 f80c 	bl	8006680 <__malloc_unlock>
 8006668:	e794      	b.n	8006594 <_malloc_r+0x20>
 800666a:	6005      	str	r5, [r0, #0]
 800666c:	e7d6      	b.n	800661c <_malloc_r+0xa8>
 800666e:	bf00      	nop
 8006670:	20013118 	.word	0x20013118

08006674 <__malloc_lock>:
 8006674:	4801      	ldr	r0, [pc, #4]	@ (800667c <__malloc_lock+0x8>)
 8006676:	f7ff beda 	b.w	800642e <__retarget_lock_acquire_recursive>
 800667a:	bf00      	nop
 800667c:	20013110 	.word	0x20013110

08006680 <__malloc_unlock>:
 8006680:	4801      	ldr	r0, [pc, #4]	@ (8006688 <__malloc_unlock+0x8>)
 8006682:	f7ff bed5 	b.w	8006430 <__retarget_lock_release_recursive>
 8006686:	bf00      	nop
 8006688:	20013110 	.word	0x20013110

0800668c <__ssputs_r>:
 800668c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006690:	688e      	ldr	r6, [r1, #8]
 8006692:	461f      	mov	r7, r3
 8006694:	42be      	cmp	r6, r7
 8006696:	680b      	ldr	r3, [r1, #0]
 8006698:	4682      	mov	sl, r0
 800669a:	460c      	mov	r4, r1
 800669c:	4690      	mov	r8, r2
 800669e:	d82d      	bhi.n	80066fc <__ssputs_r+0x70>
 80066a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80066a8:	d026      	beq.n	80066f8 <__ssputs_r+0x6c>
 80066aa:	6965      	ldr	r5, [r4, #20]
 80066ac:	6909      	ldr	r1, [r1, #16]
 80066ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066b2:	eba3 0901 	sub.w	r9, r3, r1
 80066b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066ba:	1c7b      	adds	r3, r7, #1
 80066bc:	444b      	add	r3, r9
 80066be:	106d      	asrs	r5, r5, #1
 80066c0:	429d      	cmp	r5, r3
 80066c2:	bf38      	it	cc
 80066c4:	461d      	movcc	r5, r3
 80066c6:	0553      	lsls	r3, r2, #21
 80066c8:	d527      	bpl.n	800671a <__ssputs_r+0x8e>
 80066ca:	4629      	mov	r1, r5
 80066cc:	f7ff ff52 	bl	8006574 <_malloc_r>
 80066d0:	4606      	mov	r6, r0
 80066d2:	b360      	cbz	r0, 800672e <__ssputs_r+0xa2>
 80066d4:	6921      	ldr	r1, [r4, #16]
 80066d6:	464a      	mov	r2, r9
 80066d8:	f7ff feab 	bl	8006432 <memcpy>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	6126      	str	r6, [r4, #16]
 80066ea:	6165      	str	r5, [r4, #20]
 80066ec:	444e      	add	r6, r9
 80066ee:	eba5 0509 	sub.w	r5, r5, r9
 80066f2:	6026      	str	r6, [r4, #0]
 80066f4:	60a5      	str	r5, [r4, #8]
 80066f6:	463e      	mov	r6, r7
 80066f8:	42be      	cmp	r6, r7
 80066fa:	d900      	bls.n	80066fe <__ssputs_r+0x72>
 80066fc:	463e      	mov	r6, r7
 80066fe:	6820      	ldr	r0, [r4, #0]
 8006700:	4632      	mov	r2, r6
 8006702:	4641      	mov	r1, r8
 8006704:	f000 fb66 	bl	8006dd4 <memmove>
 8006708:	68a3      	ldr	r3, [r4, #8]
 800670a:	1b9b      	subs	r3, r3, r6
 800670c:	60a3      	str	r3, [r4, #8]
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	4433      	add	r3, r6
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	2000      	movs	r0, #0
 8006716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671a:	462a      	mov	r2, r5
 800671c:	f000 fb8b 	bl	8006e36 <_realloc_r>
 8006720:	4606      	mov	r6, r0
 8006722:	2800      	cmp	r0, #0
 8006724:	d1e0      	bne.n	80066e8 <__ssputs_r+0x5c>
 8006726:	6921      	ldr	r1, [r4, #16]
 8006728:	4650      	mov	r0, sl
 800672a:	f7ff feaf 	bl	800648c <_free_r>
 800672e:	230c      	movs	r3, #12
 8006730:	f8ca 3000 	str.w	r3, [sl]
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	e7e9      	b.n	8006716 <__ssputs_r+0x8a>
	...

08006744 <_svfiprintf_r>:
 8006744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	4698      	mov	r8, r3
 800674a:	898b      	ldrh	r3, [r1, #12]
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	b09d      	sub	sp, #116	@ 0x74
 8006750:	4607      	mov	r7, r0
 8006752:	460d      	mov	r5, r1
 8006754:	4614      	mov	r4, r2
 8006756:	d510      	bpl.n	800677a <_svfiprintf_r+0x36>
 8006758:	690b      	ldr	r3, [r1, #16]
 800675a:	b973      	cbnz	r3, 800677a <_svfiprintf_r+0x36>
 800675c:	2140      	movs	r1, #64	@ 0x40
 800675e:	f7ff ff09 	bl	8006574 <_malloc_r>
 8006762:	6028      	str	r0, [r5, #0]
 8006764:	6128      	str	r0, [r5, #16]
 8006766:	b930      	cbnz	r0, 8006776 <_svfiprintf_r+0x32>
 8006768:	230c      	movs	r3, #12
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	b01d      	add	sp, #116	@ 0x74
 8006772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006776:	2340      	movs	r3, #64	@ 0x40
 8006778:	616b      	str	r3, [r5, #20]
 800677a:	2300      	movs	r3, #0
 800677c:	9309      	str	r3, [sp, #36]	@ 0x24
 800677e:	2320      	movs	r3, #32
 8006780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006784:	f8cd 800c 	str.w	r8, [sp, #12]
 8006788:	2330      	movs	r3, #48	@ 0x30
 800678a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006928 <_svfiprintf_r+0x1e4>
 800678e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006792:	f04f 0901 	mov.w	r9, #1
 8006796:	4623      	mov	r3, r4
 8006798:	469a      	mov	sl, r3
 800679a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800679e:	b10a      	cbz	r2, 80067a4 <_svfiprintf_r+0x60>
 80067a0:	2a25      	cmp	r2, #37	@ 0x25
 80067a2:	d1f9      	bne.n	8006798 <_svfiprintf_r+0x54>
 80067a4:	ebba 0b04 	subs.w	fp, sl, r4
 80067a8:	d00b      	beq.n	80067c2 <_svfiprintf_r+0x7e>
 80067aa:	465b      	mov	r3, fp
 80067ac:	4622      	mov	r2, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	4638      	mov	r0, r7
 80067b2:	f7ff ff6b 	bl	800668c <__ssputs_r>
 80067b6:	3001      	adds	r0, #1
 80067b8:	f000 80a7 	beq.w	800690a <_svfiprintf_r+0x1c6>
 80067bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067be:	445a      	add	r2, fp
 80067c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80067c2:	f89a 3000 	ldrb.w	r3, [sl]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 809f 	beq.w	800690a <_svfiprintf_r+0x1c6>
 80067cc:	2300      	movs	r3, #0
 80067ce:	f04f 32ff 	mov.w	r2, #4294967295
 80067d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067d6:	f10a 0a01 	add.w	sl, sl, #1
 80067da:	9304      	str	r3, [sp, #16]
 80067dc:	9307      	str	r3, [sp, #28]
 80067de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80067e4:	4654      	mov	r4, sl
 80067e6:	2205      	movs	r2, #5
 80067e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ec:	484e      	ldr	r0, [pc, #312]	@ (8006928 <_svfiprintf_r+0x1e4>)
 80067ee:	f7f9 fcf7 	bl	80001e0 <memchr>
 80067f2:	9a04      	ldr	r2, [sp, #16]
 80067f4:	b9d8      	cbnz	r0, 800682e <_svfiprintf_r+0xea>
 80067f6:	06d0      	lsls	r0, r2, #27
 80067f8:	bf44      	itt	mi
 80067fa:	2320      	movmi	r3, #32
 80067fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006800:	0711      	lsls	r1, r2, #28
 8006802:	bf44      	itt	mi
 8006804:	232b      	movmi	r3, #43	@ 0x2b
 8006806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800680a:	f89a 3000 	ldrb.w	r3, [sl]
 800680e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006810:	d015      	beq.n	800683e <_svfiprintf_r+0xfa>
 8006812:	9a07      	ldr	r2, [sp, #28]
 8006814:	4654      	mov	r4, sl
 8006816:	2000      	movs	r0, #0
 8006818:	f04f 0c0a 	mov.w	ip, #10
 800681c:	4621      	mov	r1, r4
 800681e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006822:	3b30      	subs	r3, #48	@ 0x30
 8006824:	2b09      	cmp	r3, #9
 8006826:	d94b      	bls.n	80068c0 <_svfiprintf_r+0x17c>
 8006828:	b1b0      	cbz	r0, 8006858 <_svfiprintf_r+0x114>
 800682a:	9207      	str	r2, [sp, #28]
 800682c:	e014      	b.n	8006858 <_svfiprintf_r+0x114>
 800682e:	eba0 0308 	sub.w	r3, r0, r8
 8006832:	fa09 f303 	lsl.w	r3, r9, r3
 8006836:	4313      	orrs	r3, r2
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	46a2      	mov	sl, r4
 800683c:	e7d2      	b.n	80067e4 <_svfiprintf_r+0xa0>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	1d19      	adds	r1, r3, #4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	9103      	str	r1, [sp, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	bfbb      	ittet	lt
 800684a:	425b      	neglt	r3, r3
 800684c:	f042 0202 	orrlt.w	r2, r2, #2
 8006850:	9307      	strge	r3, [sp, #28]
 8006852:	9307      	strlt	r3, [sp, #28]
 8006854:	bfb8      	it	lt
 8006856:	9204      	strlt	r2, [sp, #16]
 8006858:	7823      	ldrb	r3, [r4, #0]
 800685a:	2b2e      	cmp	r3, #46	@ 0x2e
 800685c:	d10a      	bne.n	8006874 <_svfiprintf_r+0x130>
 800685e:	7863      	ldrb	r3, [r4, #1]
 8006860:	2b2a      	cmp	r3, #42	@ 0x2a
 8006862:	d132      	bne.n	80068ca <_svfiprintf_r+0x186>
 8006864:	9b03      	ldr	r3, [sp, #12]
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	9203      	str	r2, [sp, #12]
 800686c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006870:	3402      	adds	r4, #2
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006938 <_svfiprintf_r+0x1f4>
 8006878:	7821      	ldrb	r1, [r4, #0]
 800687a:	2203      	movs	r2, #3
 800687c:	4650      	mov	r0, sl
 800687e:	f7f9 fcaf 	bl	80001e0 <memchr>
 8006882:	b138      	cbz	r0, 8006894 <_svfiprintf_r+0x150>
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	eba0 000a 	sub.w	r0, r0, sl
 800688a:	2240      	movs	r2, #64	@ 0x40
 800688c:	4082      	lsls	r2, r0
 800688e:	4313      	orrs	r3, r2
 8006890:	3401      	adds	r4, #1
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006898:	4824      	ldr	r0, [pc, #144]	@ (800692c <_svfiprintf_r+0x1e8>)
 800689a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800689e:	2206      	movs	r2, #6
 80068a0:	f7f9 fc9e 	bl	80001e0 <memchr>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d036      	beq.n	8006916 <_svfiprintf_r+0x1d2>
 80068a8:	4b21      	ldr	r3, [pc, #132]	@ (8006930 <_svfiprintf_r+0x1ec>)
 80068aa:	bb1b      	cbnz	r3, 80068f4 <_svfiprintf_r+0x1b0>
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	3307      	adds	r3, #7
 80068b0:	f023 0307 	bic.w	r3, r3, #7
 80068b4:	3308      	adds	r3, #8
 80068b6:	9303      	str	r3, [sp, #12]
 80068b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ba:	4433      	add	r3, r6
 80068bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80068be:	e76a      	b.n	8006796 <_svfiprintf_r+0x52>
 80068c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068c4:	460c      	mov	r4, r1
 80068c6:	2001      	movs	r0, #1
 80068c8:	e7a8      	b.n	800681c <_svfiprintf_r+0xd8>
 80068ca:	2300      	movs	r3, #0
 80068cc:	3401      	adds	r4, #1
 80068ce:	9305      	str	r3, [sp, #20]
 80068d0:	4619      	mov	r1, r3
 80068d2:	f04f 0c0a 	mov.w	ip, #10
 80068d6:	4620      	mov	r0, r4
 80068d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068dc:	3a30      	subs	r2, #48	@ 0x30
 80068de:	2a09      	cmp	r2, #9
 80068e0:	d903      	bls.n	80068ea <_svfiprintf_r+0x1a6>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0c6      	beq.n	8006874 <_svfiprintf_r+0x130>
 80068e6:	9105      	str	r1, [sp, #20]
 80068e8:	e7c4      	b.n	8006874 <_svfiprintf_r+0x130>
 80068ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ee:	4604      	mov	r4, r0
 80068f0:	2301      	movs	r3, #1
 80068f2:	e7f0      	b.n	80068d6 <_svfiprintf_r+0x192>
 80068f4:	ab03      	add	r3, sp, #12
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	462a      	mov	r2, r5
 80068fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006934 <_svfiprintf_r+0x1f0>)
 80068fc:	a904      	add	r1, sp, #16
 80068fe:	4638      	mov	r0, r7
 8006900:	f3af 8000 	nop.w
 8006904:	1c42      	adds	r2, r0, #1
 8006906:	4606      	mov	r6, r0
 8006908:	d1d6      	bne.n	80068b8 <_svfiprintf_r+0x174>
 800690a:	89ab      	ldrh	r3, [r5, #12]
 800690c:	065b      	lsls	r3, r3, #25
 800690e:	f53f af2d 	bmi.w	800676c <_svfiprintf_r+0x28>
 8006912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006914:	e72c      	b.n	8006770 <_svfiprintf_r+0x2c>
 8006916:	ab03      	add	r3, sp, #12
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	462a      	mov	r2, r5
 800691c:	4b05      	ldr	r3, [pc, #20]	@ (8006934 <_svfiprintf_r+0x1f0>)
 800691e:	a904      	add	r1, sp, #16
 8006920:	4638      	mov	r0, r7
 8006922:	f000 f879 	bl	8006a18 <_printf_i>
 8006926:	e7ed      	b.n	8006904 <_svfiprintf_r+0x1c0>
 8006928:	080075b7 	.word	0x080075b7
 800692c:	080075c1 	.word	0x080075c1
 8006930:	00000000 	.word	0x00000000
 8006934:	0800668d 	.word	0x0800668d
 8006938:	080075bd 	.word	0x080075bd

0800693c <_printf_common>:
 800693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	4616      	mov	r6, r2
 8006942:	4698      	mov	r8, r3
 8006944:	688a      	ldr	r2, [r1, #8]
 8006946:	690b      	ldr	r3, [r1, #16]
 8006948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800694c:	4293      	cmp	r3, r2
 800694e:	bfb8      	it	lt
 8006950:	4613      	movlt	r3, r2
 8006952:	6033      	str	r3, [r6, #0]
 8006954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006958:	4607      	mov	r7, r0
 800695a:	460c      	mov	r4, r1
 800695c:	b10a      	cbz	r2, 8006962 <_printf_common+0x26>
 800695e:	3301      	adds	r3, #1
 8006960:	6033      	str	r3, [r6, #0]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	0699      	lsls	r1, r3, #26
 8006966:	bf42      	ittt	mi
 8006968:	6833      	ldrmi	r3, [r6, #0]
 800696a:	3302      	addmi	r3, #2
 800696c:	6033      	strmi	r3, [r6, #0]
 800696e:	6825      	ldr	r5, [r4, #0]
 8006970:	f015 0506 	ands.w	r5, r5, #6
 8006974:	d106      	bne.n	8006984 <_printf_common+0x48>
 8006976:	f104 0a19 	add.w	sl, r4, #25
 800697a:	68e3      	ldr	r3, [r4, #12]
 800697c:	6832      	ldr	r2, [r6, #0]
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	42ab      	cmp	r3, r5
 8006982:	dc26      	bgt.n	80069d2 <_printf_common+0x96>
 8006984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	3b00      	subs	r3, #0
 800698c:	bf18      	it	ne
 800698e:	2301      	movne	r3, #1
 8006990:	0692      	lsls	r2, r2, #26
 8006992:	d42b      	bmi.n	80069ec <_printf_common+0xb0>
 8006994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006998:	4641      	mov	r1, r8
 800699a:	4638      	mov	r0, r7
 800699c:	47c8      	blx	r9
 800699e:	3001      	adds	r0, #1
 80069a0:	d01e      	beq.n	80069e0 <_printf_common+0xa4>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	6922      	ldr	r2, [r4, #16]
 80069a6:	f003 0306 	and.w	r3, r3, #6
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	bf02      	ittt	eq
 80069ae:	68e5      	ldreq	r5, [r4, #12]
 80069b0:	6833      	ldreq	r3, [r6, #0]
 80069b2:	1aed      	subeq	r5, r5, r3
 80069b4:	68a3      	ldr	r3, [r4, #8]
 80069b6:	bf0c      	ite	eq
 80069b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069bc:	2500      	movne	r5, #0
 80069be:	4293      	cmp	r3, r2
 80069c0:	bfc4      	itt	gt
 80069c2:	1a9b      	subgt	r3, r3, r2
 80069c4:	18ed      	addgt	r5, r5, r3
 80069c6:	2600      	movs	r6, #0
 80069c8:	341a      	adds	r4, #26
 80069ca:	42b5      	cmp	r5, r6
 80069cc:	d11a      	bne.n	8006a04 <_printf_common+0xc8>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e008      	b.n	80069e4 <_printf_common+0xa8>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4652      	mov	r2, sl
 80069d6:	4641      	mov	r1, r8
 80069d8:	4638      	mov	r0, r7
 80069da:	47c8      	blx	r9
 80069dc:	3001      	adds	r0, #1
 80069de:	d103      	bne.n	80069e8 <_printf_common+0xac>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	3501      	adds	r5, #1
 80069ea:	e7c6      	b.n	800697a <_printf_common+0x3e>
 80069ec:	18e1      	adds	r1, r4, r3
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	2030      	movs	r0, #48	@ 0x30
 80069f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069f6:	4422      	add	r2, r4
 80069f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a00:	3302      	adds	r3, #2
 8006a02:	e7c7      	b.n	8006994 <_printf_common+0x58>
 8006a04:	2301      	movs	r3, #1
 8006a06:	4622      	mov	r2, r4
 8006a08:	4641      	mov	r1, r8
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	47c8      	blx	r9
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d0e6      	beq.n	80069e0 <_printf_common+0xa4>
 8006a12:	3601      	adds	r6, #1
 8006a14:	e7d9      	b.n	80069ca <_printf_common+0x8e>
	...

08006a18 <_printf_i>:
 8006a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	7e0f      	ldrb	r7, [r1, #24]
 8006a1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a20:	2f78      	cmp	r7, #120	@ 0x78
 8006a22:	4691      	mov	r9, r2
 8006a24:	4680      	mov	r8, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	469a      	mov	sl, r3
 8006a2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a2e:	d807      	bhi.n	8006a40 <_printf_i+0x28>
 8006a30:	2f62      	cmp	r7, #98	@ 0x62
 8006a32:	d80a      	bhi.n	8006a4a <_printf_i+0x32>
 8006a34:	2f00      	cmp	r7, #0
 8006a36:	f000 80d2 	beq.w	8006bde <_printf_i+0x1c6>
 8006a3a:	2f58      	cmp	r7, #88	@ 0x58
 8006a3c:	f000 80b9 	beq.w	8006bb2 <_printf_i+0x19a>
 8006a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a48:	e03a      	b.n	8006ac0 <_printf_i+0xa8>
 8006a4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a4e:	2b15      	cmp	r3, #21
 8006a50:	d8f6      	bhi.n	8006a40 <_printf_i+0x28>
 8006a52:	a101      	add	r1, pc, #4	@ (adr r1, 8006a58 <_printf_i+0x40>)
 8006a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a58:	08006ab1 	.word	0x08006ab1
 8006a5c:	08006ac5 	.word	0x08006ac5
 8006a60:	08006a41 	.word	0x08006a41
 8006a64:	08006a41 	.word	0x08006a41
 8006a68:	08006a41 	.word	0x08006a41
 8006a6c:	08006a41 	.word	0x08006a41
 8006a70:	08006ac5 	.word	0x08006ac5
 8006a74:	08006a41 	.word	0x08006a41
 8006a78:	08006a41 	.word	0x08006a41
 8006a7c:	08006a41 	.word	0x08006a41
 8006a80:	08006a41 	.word	0x08006a41
 8006a84:	08006bc5 	.word	0x08006bc5
 8006a88:	08006aef 	.word	0x08006aef
 8006a8c:	08006b7f 	.word	0x08006b7f
 8006a90:	08006a41 	.word	0x08006a41
 8006a94:	08006a41 	.word	0x08006a41
 8006a98:	08006be7 	.word	0x08006be7
 8006a9c:	08006a41 	.word	0x08006a41
 8006aa0:	08006aef 	.word	0x08006aef
 8006aa4:	08006a41 	.word	0x08006a41
 8006aa8:	08006a41 	.word	0x08006a41
 8006aac:	08006b87 	.word	0x08006b87
 8006ab0:	6833      	ldr	r3, [r6, #0]
 8006ab2:	1d1a      	adds	r2, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6032      	str	r2, [r6, #0]
 8006ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006abc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e09d      	b.n	8006c00 <_printf_i+0x1e8>
 8006ac4:	6833      	ldr	r3, [r6, #0]
 8006ac6:	6820      	ldr	r0, [r4, #0]
 8006ac8:	1d19      	adds	r1, r3, #4
 8006aca:	6031      	str	r1, [r6, #0]
 8006acc:	0606      	lsls	r6, r0, #24
 8006ace:	d501      	bpl.n	8006ad4 <_printf_i+0xbc>
 8006ad0:	681d      	ldr	r5, [r3, #0]
 8006ad2:	e003      	b.n	8006adc <_printf_i+0xc4>
 8006ad4:	0645      	lsls	r5, r0, #25
 8006ad6:	d5fb      	bpl.n	8006ad0 <_printf_i+0xb8>
 8006ad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	da03      	bge.n	8006ae8 <_printf_i+0xd0>
 8006ae0:	232d      	movs	r3, #45	@ 0x2d
 8006ae2:	426d      	negs	r5, r5
 8006ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae8:	4859      	ldr	r0, [pc, #356]	@ (8006c50 <_printf_i+0x238>)
 8006aea:	230a      	movs	r3, #10
 8006aec:	e011      	b.n	8006b12 <_printf_i+0xfa>
 8006aee:	6821      	ldr	r1, [r4, #0]
 8006af0:	6833      	ldr	r3, [r6, #0]
 8006af2:	0608      	lsls	r0, r1, #24
 8006af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006af8:	d402      	bmi.n	8006b00 <_printf_i+0xe8>
 8006afa:	0649      	lsls	r1, r1, #25
 8006afc:	bf48      	it	mi
 8006afe:	b2ad      	uxthmi	r5, r5
 8006b00:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b02:	4853      	ldr	r0, [pc, #332]	@ (8006c50 <_printf_i+0x238>)
 8006b04:	6033      	str	r3, [r6, #0]
 8006b06:	bf14      	ite	ne
 8006b08:	230a      	movne	r3, #10
 8006b0a:	2308      	moveq	r3, #8
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b12:	6866      	ldr	r6, [r4, #4]
 8006b14:	60a6      	str	r6, [r4, #8]
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	bfa2      	ittt	ge
 8006b1a:	6821      	ldrge	r1, [r4, #0]
 8006b1c:	f021 0104 	bicge.w	r1, r1, #4
 8006b20:	6021      	strge	r1, [r4, #0]
 8006b22:	b90d      	cbnz	r5, 8006b28 <_printf_i+0x110>
 8006b24:	2e00      	cmp	r6, #0
 8006b26:	d04b      	beq.n	8006bc0 <_printf_i+0x1a8>
 8006b28:	4616      	mov	r6, r2
 8006b2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b2e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b32:	5dc7      	ldrb	r7, [r0, r7]
 8006b34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b38:	462f      	mov	r7, r5
 8006b3a:	42bb      	cmp	r3, r7
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	d9f4      	bls.n	8006b2a <_printf_i+0x112>
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d10b      	bne.n	8006b5c <_printf_i+0x144>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	07df      	lsls	r7, r3, #31
 8006b48:	d508      	bpl.n	8006b5c <_printf_i+0x144>
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	6861      	ldr	r1, [r4, #4]
 8006b4e:	4299      	cmp	r1, r3
 8006b50:	bfde      	ittt	le
 8006b52:	2330      	movle	r3, #48	@ 0x30
 8006b54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b5c:	1b92      	subs	r2, r2, r6
 8006b5e:	6122      	str	r2, [r4, #16]
 8006b60:	f8cd a000 	str.w	sl, [sp]
 8006b64:	464b      	mov	r3, r9
 8006b66:	aa03      	add	r2, sp, #12
 8006b68:	4621      	mov	r1, r4
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	f7ff fee6 	bl	800693c <_printf_common>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d14a      	bne.n	8006c0a <_printf_i+0x1f2>
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	b004      	add	sp, #16
 8006b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	f043 0320 	orr.w	r3, r3, #32
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	4833      	ldr	r0, [pc, #204]	@ (8006c54 <_printf_i+0x23c>)
 8006b88:	2778      	movs	r7, #120	@ 0x78
 8006b8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	6831      	ldr	r1, [r6, #0]
 8006b92:	061f      	lsls	r7, r3, #24
 8006b94:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b98:	d402      	bmi.n	8006ba0 <_printf_i+0x188>
 8006b9a:	065f      	lsls	r7, r3, #25
 8006b9c:	bf48      	it	mi
 8006b9e:	b2ad      	uxthmi	r5, r5
 8006ba0:	6031      	str	r1, [r6, #0]
 8006ba2:	07d9      	lsls	r1, r3, #31
 8006ba4:	bf44      	itt	mi
 8006ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8006baa:	6023      	strmi	r3, [r4, #0]
 8006bac:	b11d      	cbz	r5, 8006bb6 <_printf_i+0x19e>
 8006bae:	2310      	movs	r3, #16
 8006bb0:	e7ac      	b.n	8006b0c <_printf_i+0xf4>
 8006bb2:	4827      	ldr	r0, [pc, #156]	@ (8006c50 <_printf_i+0x238>)
 8006bb4:	e7e9      	b.n	8006b8a <_printf_i+0x172>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f023 0320 	bic.w	r3, r3, #32
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	e7f6      	b.n	8006bae <_printf_i+0x196>
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	e7bd      	b.n	8006b40 <_printf_i+0x128>
 8006bc4:	6833      	ldr	r3, [r6, #0]
 8006bc6:	6825      	ldr	r5, [r4, #0]
 8006bc8:	6961      	ldr	r1, [r4, #20]
 8006bca:	1d18      	adds	r0, r3, #4
 8006bcc:	6030      	str	r0, [r6, #0]
 8006bce:	062e      	lsls	r6, r5, #24
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	d501      	bpl.n	8006bd8 <_printf_i+0x1c0>
 8006bd4:	6019      	str	r1, [r3, #0]
 8006bd6:	e002      	b.n	8006bde <_printf_i+0x1c6>
 8006bd8:	0668      	lsls	r0, r5, #25
 8006bda:	d5fb      	bpl.n	8006bd4 <_printf_i+0x1bc>
 8006bdc:	8019      	strh	r1, [r3, #0]
 8006bde:	2300      	movs	r3, #0
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	4616      	mov	r6, r2
 8006be4:	e7bc      	b.n	8006b60 <_printf_i+0x148>
 8006be6:	6833      	ldr	r3, [r6, #0]
 8006be8:	1d1a      	adds	r2, r3, #4
 8006bea:	6032      	str	r2, [r6, #0]
 8006bec:	681e      	ldr	r6, [r3, #0]
 8006bee:	6862      	ldr	r2, [r4, #4]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7f9 faf4 	bl	80001e0 <memchr>
 8006bf8:	b108      	cbz	r0, 8006bfe <_printf_i+0x1e6>
 8006bfa:	1b80      	subs	r0, r0, r6
 8006bfc:	6060      	str	r0, [r4, #4]
 8006bfe:	6863      	ldr	r3, [r4, #4]
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	2300      	movs	r3, #0
 8006c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c08:	e7aa      	b.n	8006b60 <_printf_i+0x148>
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	4649      	mov	r1, r9
 8006c10:	4640      	mov	r0, r8
 8006c12:	47d0      	blx	sl
 8006c14:	3001      	adds	r0, #1
 8006c16:	d0ad      	beq.n	8006b74 <_printf_i+0x15c>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	079b      	lsls	r3, r3, #30
 8006c1c:	d413      	bmi.n	8006c46 <_printf_i+0x22e>
 8006c1e:	68e0      	ldr	r0, [r4, #12]
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	4298      	cmp	r0, r3
 8006c24:	bfb8      	it	lt
 8006c26:	4618      	movlt	r0, r3
 8006c28:	e7a6      	b.n	8006b78 <_printf_i+0x160>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	4649      	mov	r1, r9
 8006c30:	4640      	mov	r0, r8
 8006c32:	47d0      	blx	sl
 8006c34:	3001      	adds	r0, #1
 8006c36:	d09d      	beq.n	8006b74 <_printf_i+0x15c>
 8006c38:	3501      	adds	r5, #1
 8006c3a:	68e3      	ldr	r3, [r4, #12]
 8006c3c:	9903      	ldr	r1, [sp, #12]
 8006c3e:	1a5b      	subs	r3, r3, r1
 8006c40:	42ab      	cmp	r3, r5
 8006c42:	dcf2      	bgt.n	8006c2a <_printf_i+0x212>
 8006c44:	e7eb      	b.n	8006c1e <_printf_i+0x206>
 8006c46:	2500      	movs	r5, #0
 8006c48:	f104 0619 	add.w	r6, r4, #25
 8006c4c:	e7f5      	b.n	8006c3a <_printf_i+0x222>
 8006c4e:	bf00      	nop
 8006c50:	080075c8 	.word	0x080075c8
 8006c54:	080075d9 	.word	0x080075d9

08006c58 <__sflush_r>:
 8006c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	0716      	lsls	r6, r2, #28
 8006c62:	4605      	mov	r5, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	d454      	bmi.n	8006d12 <__sflush_r+0xba>
 8006c68:	684b      	ldr	r3, [r1, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dc02      	bgt.n	8006c74 <__sflush_r+0x1c>
 8006c6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	dd48      	ble.n	8006d06 <__sflush_r+0xae>
 8006c74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c76:	2e00      	cmp	r6, #0
 8006c78:	d045      	beq.n	8006d06 <__sflush_r+0xae>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c80:	682f      	ldr	r7, [r5, #0]
 8006c82:	6a21      	ldr	r1, [r4, #32]
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	d030      	beq.n	8006cea <__sflush_r+0x92>
 8006c88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	0759      	lsls	r1, r3, #29
 8006c8e:	d505      	bpl.n	8006c9c <__sflush_r+0x44>
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	1ad2      	subs	r2, r2, r3
 8006c94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c96:	b10b      	cbz	r3, 8006c9c <__sflush_r+0x44>
 8006c98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ca0:	6a21      	ldr	r1, [r4, #32]
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	47b0      	blx	r6
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	d106      	bne.n	8006cba <__sflush_r+0x62>
 8006cac:	6829      	ldr	r1, [r5, #0]
 8006cae:	291d      	cmp	r1, #29
 8006cb0:	d82b      	bhi.n	8006d0a <__sflush_r+0xb2>
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d5c <__sflush_r+0x104>)
 8006cb4:	410a      	asrs	r2, r1
 8006cb6:	07d6      	lsls	r6, r2, #31
 8006cb8:	d427      	bmi.n	8006d0a <__sflush_r+0xb2>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	6062      	str	r2, [r4, #4]
 8006cbe:	04d9      	lsls	r1, r3, #19
 8006cc0:	6922      	ldr	r2, [r4, #16]
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	d504      	bpl.n	8006cd0 <__sflush_r+0x78>
 8006cc6:	1c42      	adds	r2, r0, #1
 8006cc8:	d101      	bne.n	8006cce <__sflush_r+0x76>
 8006cca:	682b      	ldr	r3, [r5, #0]
 8006ccc:	b903      	cbnz	r3, 8006cd0 <__sflush_r+0x78>
 8006cce:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cd2:	602f      	str	r7, [r5, #0]
 8006cd4:	b1b9      	cbz	r1, 8006d06 <__sflush_r+0xae>
 8006cd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cda:	4299      	cmp	r1, r3
 8006cdc:	d002      	beq.n	8006ce4 <__sflush_r+0x8c>
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f7ff fbd4 	bl	800648c <_free_r>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ce8:	e00d      	b.n	8006d06 <__sflush_r+0xae>
 8006cea:	2301      	movs	r3, #1
 8006cec:	4628      	mov	r0, r5
 8006cee:	47b0      	blx	r6
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	1c50      	adds	r0, r2, #1
 8006cf4:	d1c9      	bne.n	8006c8a <__sflush_r+0x32>
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0c6      	beq.n	8006c8a <__sflush_r+0x32>
 8006cfc:	2b1d      	cmp	r3, #29
 8006cfe:	d001      	beq.n	8006d04 <__sflush_r+0xac>
 8006d00:	2b16      	cmp	r3, #22
 8006d02:	d11e      	bne.n	8006d42 <__sflush_r+0xea>
 8006d04:	602f      	str	r7, [r5, #0]
 8006d06:	2000      	movs	r0, #0
 8006d08:	e022      	b.n	8006d50 <__sflush_r+0xf8>
 8006d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d0e:	b21b      	sxth	r3, r3
 8006d10:	e01b      	b.n	8006d4a <__sflush_r+0xf2>
 8006d12:	690f      	ldr	r7, [r1, #16]
 8006d14:	2f00      	cmp	r7, #0
 8006d16:	d0f6      	beq.n	8006d06 <__sflush_r+0xae>
 8006d18:	0793      	lsls	r3, r2, #30
 8006d1a:	680e      	ldr	r6, [r1, #0]
 8006d1c:	bf08      	it	eq
 8006d1e:	694b      	ldreq	r3, [r1, #20]
 8006d20:	600f      	str	r7, [r1, #0]
 8006d22:	bf18      	it	ne
 8006d24:	2300      	movne	r3, #0
 8006d26:	eba6 0807 	sub.w	r8, r6, r7
 8006d2a:	608b      	str	r3, [r1, #8]
 8006d2c:	f1b8 0f00 	cmp.w	r8, #0
 8006d30:	dde9      	ble.n	8006d06 <__sflush_r+0xae>
 8006d32:	6a21      	ldr	r1, [r4, #32]
 8006d34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d36:	4643      	mov	r3, r8
 8006d38:	463a      	mov	r2, r7
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b0      	blx	r6
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	dc08      	bgt.n	8006d54 <__sflush_r+0xfc>
 8006d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d54:	4407      	add	r7, r0
 8006d56:	eba8 0800 	sub.w	r8, r8, r0
 8006d5a:	e7e7      	b.n	8006d2c <__sflush_r+0xd4>
 8006d5c:	dfbffffe 	.word	0xdfbffffe

08006d60 <_fflush_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	690b      	ldr	r3, [r1, #16]
 8006d64:	4605      	mov	r5, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	b913      	cbnz	r3, 8006d70 <_fflush_r+0x10>
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	b118      	cbz	r0, 8006d7a <_fflush_r+0x1a>
 8006d72:	6a03      	ldr	r3, [r0, #32]
 8006d74:	b90b      	cbnz	r3, 8006d7a <_fflush_r+0x1a>
 8006d76:	f7ff fa47 	bl	8006208 <__sinit>
 8006d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f3      	beq.n	8006d6a <_fflush_r+0xa>
 8006d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d84:	07d0      	lsls	r0, r2, #31
 8006d86:	d404      	bmi.n	8006d92 <_fflush_r+0x32>
 8006d88:	0599      	lsls	r1, r3, #22
 8006d8a:	d402      	bmi.n	8006d92 <_fflush_r+0x32>
 8006d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d8e:	f7ff fb4e 	bl	800642e <__retarget_lock_acquire_recursive>
 8006d92:	4628      	mov	r0, r5
 8006d94:	4621      	mov	r1, r4
 8006d96:	f7ff ff5f 	bl	8006c58 <__sflush_r>
 8006d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d9c:	07da      	lsls	r2, r3, #31
 8006d9e:	4605      	mov	r5, r0
 8006da0:	d4e4      	bmi.n	8006d6c <_fflush_r+0xc>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	059b      	lsls	r3, r3, #22
 8006da6:	d4e1      	bmi.n	8006d6c <_fflush_r+0xc>
 8006da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006daa:	f7ff fb41 	bl	8006430 <__retarget_lock_release_recursive>
 8006dae:	e7dd      	b.n	8006d6c <_fflush_r+0xc>

08006db0 <fiprintf>:
 8006db0:	b40e      	push	{r1, r2, r3}
 8006db2:	b503      	push	{r0, r1, lr}
 8006db4:	4601      	mov	r1, r0
 8006db6:	ab03      	add	r3, sp, #12
 8006db8:	4805      	ldr	r0, [pc, #20]	@ (8006dd0 <fiprintf+0x20>)
 8006dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dbe:	6800      	ldr	r0, [r0, #0]
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	f000 f88f 	bl	8006ee4 <_vfiprintf_r>
 8006dc6:	b002      	add	sp, #8
 8006dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dcc:	b003      	add	sp, #12
 8006dce:	4770      	bx	lr
 8006dd0:	20000020 	.word	0x20000020

08006dd4 <memmove>:
 8006dd4:	4288      	cmp	r0, r1
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	eb01 0402 	add.w	r4, r1, r2
 8006ddc:	d902      	bls.n	8006de4 <memmove+0x10>
 8006dde:	4284      	cmp	r4, r0
 8006de0:	4623      	mov	r3, r4
 8006de2:	d807      	bhi.n	8006df4 <memmove+0x20>
 8006de4:	1e43      	subs	r3, r0, #1
 8006de6:	42a1      	cmp	r1, r4
 8006de8:	d008      	beq.n	8006dfc <memmove+0x28>
 8006dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006df2:	e7f8      	b.n	8006de6 <memmove+0x12>
 8006df4:	4402      	add	r2, r0
 8006df6:	4601      	mov	r1, r0
 8006df8:	428a      	cmp	r2, r1
 8006dfa:	d100      	bne.n	8006dfe <memmove+0x2a>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e06:	e7f7      	b.n	8006df8 <memmove+0x24>

08006e08 <_sbrk_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4d06      	ldr	r5, [pc, #24]	@ (8006e24 <_sbrk_r+0x1c>)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4604      	mov	r4, r0
 8006e10:	4608      	mov	r0, r1
 8006e12:	602b      	str	r3, [r5, #0]
 8006e14:	f7fa f87a 	bl	8000f0c <_sbrk>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_sbrk_r+0x1a>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_sbrk_r+0x1a>
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	2001310c 	.word	0x2001310c

08006e28 <abort>:
 8006e28:	b508      	push	{r3, lr}
 8006e2a:	2006      	movs	r0, #6
 8006e2c:	f000 fa2e 	bl	800728c <raise>
 8006e30:	2001      	movs	r0, #1
 8006e32:	f7f9 fff3 	bl	8000e1c <_exit>

08006e36 <_realloc_r>:
 8006e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	4615      	mov	r5, r2
 8006e3e:	460c      	mov	r4, r1
 8006e40:	b921      	cbnz	r1, 8006e4c <_realloc_r+0x16>
 8006e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	4611      	mov	r1, r2
 8006e48:	f7ff bb94 	b.w	8006574 <_malloc_r>
 8006e4c:	b92a      	cbnz	r2, 8006e5a <_realloc_r+0x24>
 8006e4e:	f7ff fb1d 	bl	800648c <_free_r>
 8006e52:	2400      	movs	r4, #0
 8006e54:	4620      	mov	r0, r4
 8006e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5a:	f000 fa33 	bl	80072c4 <_malloc_usable_size_r>
 8006e5e:	4285      	cmp	r5, r0
 8006e60:	4606      	mov	r6, r0
 8006e62:	d802      	bhi.n	8006e6a <_realloc_r+0x34>
 8006e64:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006e68:	d8f4      	bhi.n	8006e54 <_realloc_r+0x1e>
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	f7ff fb81 	bl	8006574 <_malloc_r>
 8006e72:	4607      	mov	r7, r0
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d0ec      	beq.n	8006e52 <_realloc_r+0x1c>
 8006e78:	42b5      	cmp	r5, r6
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	bf28      	it	cs
 8006e80:	4632      	movcs	r2, r6
 8006e82:	f7ff fad6 	bl	8006432 <memcpy>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4640      	mov	r0, r8
 8006e8a:	f7ff faff 	bl	800648c <_free_r>
 8006e8e:	463c      	mov	r4, r7
 8006e90:	e7e0      	b.n	8006e54 <_realloc_r+0x1e>

08006e92 <__sfputc_r>:
 8006e92:	6893      	ldr	r3, [r2, #8]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	b410      	push	{r4}
 8006e9a:	6093      	str	r3, [r2, #8]
 8006e9c:	da08      	bge.n	8006eb0 <__sfputc_r+0x1e>
 8006e9e:	6994      	ldr	r4, [r2, #24]
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	db01      	blt.n	8006ea8 <__sfputc_r+0x16>
 8006ea4:	290a      	cmp	r1, #10
 8006ea6:	d103      	bne.n	8006eb0 <__sfputc_r+0x1e>
 8006ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eac:	f000 b932 	b.w	8007114 <__swbuf_r>
 8006eb0:	6813      	ldr	r3, [r2, #0]
 8006eb2:	1c58      	adds	r0, r3, #1
 8006eb4:	6010      	str	r0, [r2, #0]
 8006eb6:	7019      	strb	r1, [r3, #0]
 8006eb8:	4608      	mov	r0, r1
 8006eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <__sfputs_r>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460f      	mov	r7, r1
 8006ec6:	4614      	mov	r4, r2
 8006ec8:	18d5      	adds	r5, r2, r3
 8006eca:	42ac      	cmp	r4, r5
 8006ecc:	d101      	bne.n	8006ed2 <__sfputs_r+0x12>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e007      	b.n	8006ee2 <__sfputs_r+0x22>
 8006ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7ff ffda 	bl	8006e92 <__sfputc_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	d1f3      	bne.n	8006eca <__sfputs_r+0xa>
 8006ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ee4 <_vfiprintf_r>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	460d      	mov	r5, r1
 8006eea:	b09d      	sub	sp, #116	@ 0x74
 8006eec:	4614      	mov	r4, r2
 8006eee:	4698      	mov	r8, r3
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	b118      	cbz	r0, 8006efc <_vfiprintf_r+0x18>
 8006ef4:	6a03      	ldr	r3, [r0, #32]
 8006ef6:	b90b      	cbnz	r3, 8006efc <_vfiprintf_r+0x18>
 8006ef8:	f7ff f986 	bl	8006208 <__sinit>
 8006efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006efe:	07d9      	lsls	r1, r3, #31
 8006f00:	d405      	bmi.n	8006f0e <_vfiprintf_r+0x2a>
 8006f02:	89ab      	ldrh	r3, [r5, #12]
 8006f04:	059a      	lsls	r2, r3, #22
 8006f06:	d402      	bmi.n	8006f0e <_vfiprintf_r+0x2a>
 8006f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f0a:	f7ff fa90 	bl	800642e <__retarget_lock_acquire_recursive>
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	071b      	lsls	r3, r3, #28
 8006f12:	d501      	bpl.n	8006f18 <_vfiprintf_r+0x34>
 8006f14:	692b      	ldr	r3, [r5, #16]
 8006f16:	b99b      	cbnz	r3, 8006f40 <_vfiprintf_r+0x5c>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f000 f938 	bl	8007190 <__swsetup_r>
 8006f20:	b170      	cbz	r0, 8006f40 <_vfiprintf_r+0x5c>
 8006f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f24:	07dc      	lsls	r4, r3, #31
 8006f26:	d504      	bpl.n	8006f32 <_vfiprintf_r+0x4e>
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	b01d      	add	sp, #116	@ 0x74
 8006f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f32:	89ab      	ldrh	r3, [r5, #12]
 8006f34:	0598      	lsls	r0, r3, #22
 8006f36:	d4f7      	bmi.n	8006f28 <_vfiprintf_r+0x44>
 8006f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f3a:	f7ff fa79 	bl	8006430 <__retarget_lock_release_recursive>
 8006f3e:	e7f3      	b.n	8006f28 <_vfiprintf_r+0x44>
 8006f40:	2300      	movs	r3, #0
 8006f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f44:	2320      	movs	r3, #32
 8006f46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f4e:	2330      	movs	r3, #48	@ 0x30
 8006f50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007100 <_vfiprintf_r+0x21c>
 8006f54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f58:	f04f 0901 	mov.w	r9, #1
 8006f5c:	4623      	mov	r3, r4
 8006f5e:	469a      	mov	sl, r3
 8006f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f64:	b10a      	cbz	r2, 8006f6a <_vfiprintf_r+0x86>
 8006f66:	2a25      	cmp	r2, #37	@ 0x25
 8006f68:	d1f9      	bne.n	8006f5e <_vfiprintf_r+0x7a>
 8006f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f6e:	d00b      	beq.n	8006f88 <_vfiprintf_r+0xa4>
 8006f70:	465b      	mov	r3, fp
 8006f72:	4622      	mov	r2, r4
 8006f74:	4629      	mov	r1, r5
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7ff ffa2 	bl	8006ec0 <__sfputs_r>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	f000 80a7 	beq.w	80070d0 <_vfiprintf_r+0x1ec>
 8006f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f84:	445a      	add	r2, fp
 8006f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f88:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 809f 	beq.w	80070d0 <_vfiprintf_r+0x1ec>
 8006f92:	2300      	movs	r3, #0
 8006f94:	f04f 32ff 	mov.w	r2, #4294967295
 8006f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f9c:	f10a 0a01 	add.w	sl, sl, #1
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	9307      	str	r3, [sp, #28]
 8006fa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006faa:	4654      	mov	r4, sl
 8006fac:	2205      	movs	r2, #5
 8006fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb2:	4853      	ldr	r0, [pc, #332]	@ (8007100 <_vfiprintf_r+0x21c>)
 8006fb4:	f7f9 f914 	bl	80001e0 <memchr>
 8006fb8:	9a04      	ldr	r2, [sp, #16]
 8006fba:	b9d8      	cbnz	r0, 8006ff4 <_vfiprintf_r+0x110>
 8006fbc:	06d1      	lsls	r1, r2, #27
 8006fbe:	bf44      	itt	mi
 8006fc0:	2320      	movmi	r3, #32
 8006fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fc6:	0713      	lsls	r3, r2, #28
 8006fc8:	bf44      	itt	mi
 8006fca:	232b      	movmi	r3, #43	@ 0x2b
 8006fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fd6:	d015      	beq.n	8007004 <_vfiprintf_r+0x120>
 8006fd8:	9a07      	ldr	r2, [sp, #28]
 8006fda:	4654      	mov	r4, sl
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f04f 0c0a 	mov.w	ip, #10
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe8:	3b30      	subs	r3, #48	@ 0x30
 8006fea:	2b09      	cmp	r3, #9
 8006fec:	d94b      	bls.n	8007086 <_vfiprintf_r+0x1a2>
 8006fee:	b1b0      	cbz	r0, 800701e <_vfiprintf_r+0x13a>
 8006ff0:	9207      	str	r2, [sp, #28]
 8006ff2:	e014      	b.n	800701e <_vfiprintf_r+0x13a>
 8006ff4:	eba0 0308 	sub.w	r3, r0, r8
 8006ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	9304      	str	r3, [sp, #16]
 8007000:	46a2      	mov	sl, r4
 8007002:	e7d2      	b.n	8006faa <_vfiprintf_r+0xc6>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	1d19      	adds	r1, r3, #4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	9103      	str	r1, [sp, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	bfbb      	ittet	lt
 8007010:	425b      	neglt	r3, r3
 8007012:	f042 0202 	orrlt.w	r2, r2, #2
 8007016:	9307      	strge	r3, [sp, #28]
 8007018:	9307      	strlt	r3, [sp, #28]
 800701a:	bfb8      	it	lt
 800701c:	9204      	strlt	r2, [sp, #16]
 800701e:	7823      	ldrb	r3, [r4, #0]
 8007020:	2b2e      	cmp	r3, #46	@ 0x2e
 8007022:	d10a      	bne.n	800703a <_vfiprintf_r+0x156>
 8007024:	7863      	ldrb	r3, [r4, #1]
 8007026:	2b2a      	cmp	r3, #42	@ 0x2a
 8007028:	d132      	bne.n	8007090 <_vfiprintf_r+0x1ac>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	1d1a      	adds	r2, r3, #4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	9203      	str	r2, [sp, #12]
 8007032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007036:	3402      	adds	r4, #2
 8007038:	9305      	str	r3, [sp, #20]
 800703a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007110 <_vfiprintf_r+0x22c>
 800703e:	7821      	ldrb	r1, [r4, #0]
 8007040:	2203      	movs	r2, #3
 8007042:	4650      	mov	r0, sl
 8007044:	f7f9 f8cc 	bl	80001e0 <memchr>
 8007048:	b138      	cbz	r0, 800705a <_vfiprintf_r+0x176>
 800704a:	9b04      	ldr	r3, [sp, #16]
 800704c:	eba0 000a 	sub.w	r0, r0, sl
 8007050:	2240      	movs	r2, #64	@ 0x40
 8007052:	4082      	lsls	r2, r0
 8007054:	4313      	orrs	r3, r2
 8007056:	3401      	adds	r4, #1
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705e:	4829      	ldr	r0, [pc, #164]	@ (8007104 <_vfiprintf_r+0x220>)
 8007060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007064:	2206      	movs	r2, #6
 8007066:	f7f9 f8bb 	bl	80001e0 <memchr>
 800706a:	2800      	cmp	r0, #0
 800706c:	d03f      	beq.n	80070ee <_vfiprintf_r+0x20a>
 800706e:	4b26      	ldr	r3, [pc, #152]	@ (8007108 <_vfiprintf_r+0x224>)
 8007070:	bb1b      	cbnz	r3, 80070ba <_vfiprintf_r+0x1d6>
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	3307      	adds	r3, #7
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	3308      	adds	r3, #8
 800707c:	9303      	str	r3, [sp, #12]
 800707e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007080:	443b      	add	r3, r7
 8007082:	9309      	str	r3, [sp, #36]	@ 0x24
 8007084:	e76a      	b.n	8006f5c <_vfiprintf_r+0x78>
 8007086:	fb0c 3202 	mla	r2, ip, r2, r3
 800708a:	460c      	mov	r4, r1
 800708c:	2001      	movs	r0, #1
 800708e:	e7a8      	b.n	8006fe2 <_vfiprintf_r+0xfe>
 8007090:	2300      	movs	r3, #0
 8007092:	3401      	adds	r4, #1
 8007094:	9305      	str	r3, [sp, #20]
 8007096:	4619      	mov	r1, r3
 8007098:	f04f 0c0a 	mov.w	ip, #10
 800709c:	4620      	mov	r0, r4
 800709e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a2:	3a30      	subs	r2, #48	@ 0x30
 80070a4:	2a09      	cmp	r2, #9
 80070a6:	d903      	bls.n	80070b0 <_vfiprintf_r+0x1cc>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0c6      	beq.n	800703a <_vfiprintf_r+0x156>
 80070ac:	9105      	str	r1, [sp, #20]
 80070ae:	e7c4      	b.n	800703a <_vfiprintf_r+0x156>
 80070b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070b4:	4604      	mov	r4, r0
 80070b6:	2301      	movs	r3, #1
 80070b8:	e7f0      	b.n	800709c <_vfiprintf_r+0x1b8>
 80070ba:	ab03      	add	r3, sp, #12
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	462a      	mov	r2, r5
 80070c0:	4b12      	ldr	r3, [pc, #72]	@ (800710c <_vfiprintf_r+0x228>)
 80070c2:	a904      	add	r1, sp, #16
 80070c4:	4630      	mov	r0, r6
 80070c6:	f3af 8000 	nop.w
 80070ca:	4607      	mov	r7, r0
 80070cc:	1c78      	adds	r0, r7, #1
 80070ce:	d1d6      	bne.n	800707e <_vfiprintf_r+0x19a>
 80070d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070d2:	07d9      	lsls	r1, r3, #31
 80070d4:	d405      	bmi.n	80070e2 <_vfiprintf_r+0x1fe>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	059a      	lsls	r2, r3, #22
 80070da:	d402      	bmi.n	80070e2 <_vfiprintf_r+0x1fe>
 80070dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070de:	f7ff f9a7 	bl	8006430 <__retarget_lock_release_recursive>
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	065b      	lsls	r3, r3, #25
 80070e6:	f53f af1f 	bmi.w	8006f28 <_vfiprintf_r+0x44>
 80070ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070ec:	e71e      	b.n	8006f2c <_vfiprintf_r+0x48>
 80070ee:	ab03      	add	r3, sp, #12
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	462a      	mov	r2, r5
 80070f4:	4b05      	ldr	r3, [pc, #20]	@ (800710c <_vfiprintf_r+0x228>)
 80070f6:	a904      	add	r1, sp, #16
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff fc8d 	bl	8006a18 <_printf_i>
 80070fe:	e7e4      	b.n	80070ca <_vfiprintf_r+0x1e6>
 8007100:	080075b7 	.word	0x080075b7
 8007104:	080075c1 	.word	0x080075c1
 8007108:	00000000 	.word	0x00000000
 800710c:	08006ec1 	.word	0x08006ec1
 8007110:	080075bd 	.word	0x080075bd

08007114 <__swbuf_r>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	460e      	mov	r6, r1
 8007118:	4614      	mov	r4, r2
 800711a:	4605      	mov	r5, r0
 800711c:	b118      	cbz	r0, 8007126 <__swbuf_r+0x12>
 800711e:	6a03      	ldr	r3, [r0, #32]
 8007120:	b90b      	cbnz	r3, 8007126 <__swbuf_r+0x12>
 8007122:	f7ff f871 	bl	8006208 <__sinit>
 8007126:	69a3      	ldr	r3, [r4, #24]
 8007128:	60a3      	str	r3, [r4, #8]
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	071a      	lsls	r2, r3, #28
 800712e:	d501      	bpl.n	8007134 <__swbuf_r+0x20>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	b943      	cbnz	r3, 8007146 <__swbuf_r+0x32>
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 f82a 	bl	8007190 <__swsetup_r>
 800713c:	b118      	cbz	r0, 8007146 <__swbuf_r+0x32>
 800713e:	f04f 37ff 	mov.w	r7, #4294967295
 8007142:	4638      	mov	r0, r7
 8007144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	6922      	ldr	r2, [r4, #16]
 800714a:	1a98      	subs	r0, r3, r2
 800714c:	6963      	ldr	r3, [r4, #20]
 800714e:	b2f6      	uxtb	r6, r6
 8007150:	4283      	cmp	r3, r0
 8007152:	4637      	mov	r7, r6
 8007154:	dc05      	bgt.n	8007162 <__swbuf_r+0x4e>
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f7ff fe01 	bl	8006d60 <_fflush_r>
 800715e:	2800      	cmp	r0, #0
 8007160:	d1ed      	bne.n	800713e <__swbuf_r+0x2a>
 8007162:	68a3      	ldr	r3, [r4, #8]
 8007164:	3b01      	subs	r3, #1
 8007166:	60a3      	str	r3, [r4, #8]
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	6022      	str	r2, [r4, #0]
 800716e:	701e      	strb	r6, [r3, #0]
 8007170:	6962      	ldr	r2, [r4, #20]
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	429a      	cmp	r2, r3
 8007176:	d004      	beq.n	8007182 <__swbuf_r+0x6e>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	07db      	lsls	r3, r3, #31
 800717c:	d5e1      	bpl.n	8007142 <__swbuf_r+0x2e>
 800717e:	2e0a      	cmp	r6, #10
 8007180:	d1df      	bne.n	8007142 <__swbuf_r+0x2e>
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	f7ff fdeb 	bl	8006d60 <_fflush_r>
 800718a:	2800      	cmp	r0, #0
 800718c:	d0d9      	beq.n	8007142 <__swbuf_r+0x2e>
 800718e:	e7d6      	b.n	800713e <__swbuf_r+0x2a>

08007190 <__swsetup_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4b29      	ldr	r3, [pc, #164]	@ (8007238 <__swsetup_r+0xa8>)
 8007194:	4605      	mov	r5, r0
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	460c      	mov	r4, r1
 800719a:	b118      	cbz	r0, 80071a4 <__swsetup_r+0x14>
 800719c:	6a03      	ldr	r3, [r0, #32]
 800719e:	b90b      	cbnz	r3, 80071a4 <__swsetup_r+0x14>
 80071a0:	f7ff f832 	bl	8006208 <__sinit>
 80071a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a8:	0719      	lsls	r1, r3, #28
 80071aa:	d422      	bmi.n	80071f2 <__swsetup_r+0x62>
 80071ac:	06da      	lsls	r2, r3, #27
 80071ae:	d407      	bmi.n	80071c0 <__swsetup_r+0x30>
 80071b0:	2209      	movs	r2, #9
 80071b2:	602a      	str	r2, [r5, #0]
 80071b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	f04f 30ff 	mov.w	r0, #4294967295
 80071be:	e033      	b.n	8007228 <__swsetup_r+0x98>
 80071c0:	0758      	lsls	r0, r3, #29
 80071c2:	d512      	bpl.n	80071ea <__swsetup_r+0x5a>
 80071c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071c6:	b141      	cbz	r1, 80071da <__swsetup_r+0x4a>
 80071c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071cc:	4299      	cmp	r1, r3
 80071ce:	d002      	beq.n	80071d6 <__swsetup_r+0x46>
 80071d0:	4628      	mov	r0, r5
 80071d2:	f7ff f95b 	bl	800648c <_free_r>
 80071d6:	2300      	movs	r3, #0
 80071d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	2300      	movs	r3, #0
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	f043 0308 	orr.w	r3, r3, #8
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	b94b      	cbnz	r3, 800720a <__swsetup_r+0x7a>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007200:	d003      	beq.n	800720a <__swsetup_r+0x7a>
 8007202:	4621      	mov	r1, r4
 8007204:	4628      	mov	r0, r5
 8007206:	f000 f88b 	bl	8007320 <__smakebuf_r>
 800720a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720e:	f013 0201 	ands.w	r2, r3, #1
 8007212:	d00a      	beq.n	800722a <__swsetup_r+0x9a>
 8007214:	2200      	movs	r2, #0
 8007216:	60a2      	str	r2, [r4, #8]
 8007218:	6962      	ldr	r2, [r4, #20]
 800721a:	4252      	negs	r2, r2
 800721c:	61a2      	str	r2, [r4, #24]
 800721e:	6922      	ldr	r2, [r4, #16]
 8007220:	b942      	cbnz	r2, 8007234 <__swsetup_r+0xa4>
 8007222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007226:	d1c5      	bne.n	80071b4 <__swsetup_r+0x24>
 8007228:	bd38      	pop	{r3, r4, r5, pc}
 800722a:	0799      	lsls	r1, r3, #30
 800722c:	bf58      	it	pl
 800722e:	6962      	ldrpl	r2, [r4, #20]
 8007230:	60a2      	str	r2, [r4, #8]
 8007232:	e7f4      	b.n	800721e <__swsetup_r+0x8e>
 8007234:	2000      	movs	r0, #0
 8007236:	e7f7      	b.n	8007228 <__swsetup_r+0x98>
 8007238:	20000020 	.word	0x20000020

0800723c <_raise_r>:
 800723c:	291f      	cmp	r1, #31
 800723e:	b538      	push	{r3, r4, r5, lr}
 8007240:	4605      	mov	r5, r0
 8007242:	460c      	mov	r4, r1
 8007244:	d904      	bls.n	8007250 <_raise_r+0x14>
 8007246:	2316      	movs	r3, #22
 8007248:	6003      	str	r3, [r0, #0]
 800724a:	f04f 30ff 	mov.w	r0, #4294967295
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007252:	b112      	cbz	r2, 800725a <_raise_r+0x1e>
 8007254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007258:	b94b      	cbnz	r3, 800726e <_raise_r+0x32>
 800725a:	4628      	mov	r0, r5
 800725c:	f000 f830 	bl	80072c0 <_getpid_r>
 8007260:	4622      	mov	r2, r4
 8007262:	4601      	mov	r1, r0
 8007264:	4628      	mov	r0, r5
 8007266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726a:	f000 b817 	b.w	800729c <_kill_r>
 800726e:	2b01      	cmp	r3, #1
 8007270:	d00a      	beq.n	8007288 <_raise_r+0x4c>
 8007272:	1c59      	adds	r1, r3, #1
 8007274:	d103      	bne.n	800727e <_raise_r+0x42>
 8007276:	2316      	movs	r3, #22
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	2001      	movs	r0, #1
 800727c:	e7e7      	b.n	800724e <_raise_r+0x12>
 800727e:	2100      	movs	r1, #0
 8007280:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007284:	4620      	mov	r0, r4
 8007286:	4798      	blx	r3
 8007288:	2000      	movs	r0, #0
 800728a:	e7e0      	b.n	800724e <_raise_r+0x12>

0800728c <raise>:
 800728c:	4b02      	ldr	r3, [pc, #8]	@ (8007298 <raise+0xc>)
 800728e:	4601      	mov	r1, r0
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	f7ff bfd3 	b.w	800723c <_raise_r>
 8007296:	bf00      	nop
 8007298:	20000020 	.word	0x20000020

0800729c <_kill_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d07      	ldr	r5, [pc, #28]	@ (80072bc <_kill_r+0x20>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	f7f9 fda7 	bl	8000dfc <_kill>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d102      	bne.n	80072b8 <_kill_r+0x1c>
 80072b2:	682b      	ldr	r3, [r5, #0]
 80072b4:	b103      	cbz	r3, 80072b8 <_kill_r+0x1c>
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
 80072ba:	bf00      	nop
 80072bc:	2001310c 	.word	0x2001310c

080072c0 <_getpid_r>:
 80072c0:	f7f9 bd94 	b.w	8000dec <_getpid>

080072c4 <_malloc_usable_size_r>:
 80072c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c8:	1f18      	subs	r0, r3, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bfbc      	itt	lt
 80072ce:	580b      	ldrlt	r3, [r1, r0]
 80072d0:	18c0      	addlt	r0, r0, r3
 80072d2:	4770      	bx	lr

080072d4 <__swhatbuf_r>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	460c      	mov	r4, r1
 80072d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072dc:	2900      	cmp	r1, #0
 80072de:	b096      	sub	sp, #88	@ 0x58
 80072e0:	4615      	mov	r5, r2
 80072e2:	461e      	mov	r6, r3
 80072e4:	da0d      	bge.n	8007302 <__swhatbuf_r+0x2e>
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072ec:	f04f 0100 	mov.w	r1, #0
 80072f0:	bf14      	ite	ne
 80072f2:	2340      	movne	r3, #64	@ 0x40
 80072f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072f8:	2000      	movs	r0, #0
 80072fa:	6031      	str	r1, [r6, #0]
 80072fc:	602b      	str	r3, [r5, #0]
 80072fe:	b016      	add	sp, #88	@ 0x58
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	466a      	mov	r2, sp
 8007304:	f000 f848 	bl	8007398 <_fstat_r>
 8007308:	2800      	cmp	r0, #0
 800730a:	dbec      	blt.n	80072e6 <__swhatbuf_r+0x12>
 800730c:	9901      	ldr	r1, [sp, #4]
 800730e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007312:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007316:	4259      	negs	r1, r3
 8007318:	4159      	adcs	r1, r3
 800731a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800731e:	e7eb      	b.n	80072f8 <__swhatbuf_r+0x24>

08007320 <__smakebuf_r>:
 8007320:	898b      	ldrh	r3, [r1, #12]
 8007322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007324:	079d      	lsls	r5, r3, #30
 8007326:	4606      	mov	r6, r0
 8007328:	460c      	mov	r4, r1
 800732a:	d507      	bpl.n	800733c <__smakebuf_r+0x1c>
 800732c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	2301      	movs	r3, #1
 8007336:	6163      	str	r3, [r4, #20]
 8007338:	b003      	add	sp, #12
 800733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733c:	ab01      	add	r3, sp, #4
 800733e:	466a      	mov	r2, sp
 8007340:	f7ff ffc8 	bl	80072d4 <__swhatbuf_r>
 8007344:	9f00      	ldr	r7, [sp, #0]
 8007346:	4605      	mov	r5, r0
 8007348:	4639      	mov	r1, r7
 800734a:	4630      	mov	r0, r6
 800734c:	f7ff f912 	bl	8006574 <_malloc_r>
 8007350:	b948      	cbnz	r0, 8007366 <__smakebuf_r+0x46>
 8007352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007356:	059a      	lsls	r2, r3, #22
 8007358:	d4ee      	bmi.n	8007338 <__smakebuf_r+0x18>
 800735a:	f023 0303 	bic.w	r3, r3, #3
 800735e:	f043 0302 	orr.w	r3, r3, #2
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	e7e2      	b.n	800732c <__smakebuf_r+0xc>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	6020      	str	r0, [r4, #0]
 800736a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800736e:	81a3      	strh	r3, [r4, #12]
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007376:	b15b      	cbz	r3, 8007390 <__smakebuf_r+0x70>
 8007378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800737c:	4630      	mov	r0, r6
 800737e:	f000 f81d 	bl	80073bc <_isatty_r>
 8007382:	b128      	cbz	r0, 8007390 <__smakebuf_r+0x70>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	f023 0303 	bic.w	r3, r3, #3
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	431d      	orrs	r5, r3
 8007394:	81a5      	strh	r5, [r4, #12]
 8007396:	e7cf      	b.n	8007338 <__smakebuf_r+0x18>

08007398 <_fstat_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d07      	ldr	r5, [pc, #28]	@ (80073b8 <_fstat_r+0x20>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	f7f9 fd89 	bl	8000ebc <_fstat>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d102      	bne.n	80073b4 <_fstat_r+0x1c>
 80073ae:	682b      	ldr	r3, [r5, #0]
 80073b0:	b103      	cbz	r3, 80073b4 <_fstat_r+0x1c>
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	bf00      	nop
 80073b8:	2001310c 	.word	0x2001310c

080073bc <_isatty_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	@ (80073d8 <_isatty_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7f9 fd88 	bl	8000edc <_isatty>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_isatty_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_isatty_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	2001310c 	.word	0x2001310c

080073dc <_init>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr

080073e8 <_fini>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr
