
008_Queues_and_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008eb8  08008eb8  00009eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f4  080092f4  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  080092f4  080092f4  0000a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092fc  080092fc  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092fc  080092fc  0000a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009300  08009300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009304  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b078  2**0
                  CONTENTS
 10 .bss          00013054  20000078  20000078  0000b078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200130cc  200130cc  0000b078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166dd  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a25  00000000  00000000  00021785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  000251b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe5  00000000  00000000  00026640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252a4  00000000  00000000  00027625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a01c  00000000  00000000  0004c8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc5ef  00000000  00000000  000668e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142ed4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005df8  00000000  00000000  00142f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00148d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ea0 	.word	0x08008ea0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008ea0 	.word	0x08008ea0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <led_effect_stop>:
static void turn_on_odd_leds(void);

static void LED_control(uint8_t i);

void led_effect_stop(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af02      	add	r7, sp, #8
	for(uint8_t i = 0; i < 4; i++)
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	e00e      	b.n	80005ba <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <led_effect_stop+0x3c>)
 80005a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2103      	movs	r1, #3
 80005b0:	f006 fb58 	bl	8006c64 <xTimerGenericCommand>
	for(uint8_t i = 0; i < 4; i++)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	3301      	adds	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d9ed      	bls.n	800059c <led_effect_stop+0xc>
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000120 	.word	0x20000120

080005d0 <led_effect>:

void led_effect(int n)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005d8:	f7ff ffda 	bl	8000590 <led_effect_stop>

	xTimerStart(handle_led_timer[n - 1], portMAX_DELAY);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <led_effect+0x34>)
 80005e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005e6:	f005 fc29 	bl	8005e3c <xTaskGetTickCount>
 80005ea:	4602      	mov	r2, r0
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2101      	movs	r1, #1
 80005f6:	4620      	mov	r0, r4
 80005f8:	f006 fb34 	bl	8006c64 <xTimerGenericCommand>
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bd90      	pop	{r4, r7, pc}
 8000604:	20000120 	.word	0x20000120

08000608 <turn_on_all_leds>:

static void turn_on_all_leds(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000612:	480b      	ldr	r0, [pc, #44]	@ (8000640 <turn_on_all_leds+0x38>)
 8000614:	f001 ff88 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061e:	4808      	ldr	r0, [pc, #32]	@ (8000640 <turn_on_all_leds+0x38>)
 8000620:	f001 ff82 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <turn_on_all_leds+0x38>)
 800062c:	f001 ff7c 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000636:	4802      	ldr	r0, [pc, #8]	@ (8000640 <turn_on_all_leds+0x38>)
 8000638:	f001 ff76 	bl	8002528 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020c00 	.word	0x40020c00

08000644 <turn_off_all_leds>:
static void turn_off_all_leds(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800064e:	480b      	ldr	r0, [pc, #44]	@ (800067c <turn_off_all_leds+0x38>)
 8000650:	f001 ff6a 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065a:	4808      	ldr	r0, [pc, #32]	@ (800067c <turn_off_all_leds+0x38>)
 800065c:	f001 ff64 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <turn_off_all_leds+0x38>)
 8000668:	f001 ff5e 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000672:	4802      	ldr	r0, [pc, #8]	@ (800067c <turn_off_all_leds+0x38>)
 8000674:	f001 ff58 	bl	8002528 <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020c00 	.word	0x40020c00

08000680 <turn_on_even_leds>:

static void turn_on_even_leds(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068a:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <turn_on_even_leds+0x38>)
 800068c:	f001 ff4c 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <turn_on_even_leds+0x38>)
 8000698:	f001 ff46 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <turn_on_even_leds+0x38>)
 80006a4:	f001 ff40 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ae:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <turn_on_even_leds+0x38>)
 80006b0:	f001 ff3a 	bl	8002528 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40020c00 	.word	0x40020c00

080006bc <turn_on_odd_leds>:
static void turn_on_odd_leds(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c6:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <turn_on_odd_leds+0x38>)
 80006c8:	f001 ff2e 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d2:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <turn_on_odd_leds+0x38>)
 80006d4:	f001 ff28 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <turn_on_odd_leds+0x38>)
 80006e0:	f001 ff22 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ea:	4802      	ldr	r0, [pc, #8]	@ (80006f4 <turn_on_odd_leds+0x38>)
 80006ec:	f001 ff1c 	bl	8002528 <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020c00 	.word	0x40020c00

080006f8 <LED_control>:

static void LED_control(uint8_t value)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 4; i++)
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e014      	b.n	8000732 <LED_control+0x3a>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LED1 << i, ((value >> i) & 0x1) );
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	b299      	uxth	r1, r3
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	fa42 f303 	asr.w	r3, r2, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	4807      	ldr	r0, [pc, #28]	@ (8000744 <LED_control+0x4c>)
 8000728:	f001 fefe 	bl	8002528 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 4; i++)
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	3301      	adds	r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	2b03      	cmp	r3, #3
 8000736:	d9e7      	bls.n	8000708 <LED_control+0x10>
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40020c00 	.word	0x40020c00

08000748 <LED_effect1>:

void LED_effect1(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	static uint8_t flag = 1;

	(flag ^= 1) ? turn_on_all_leds() : turn_off_all_leds();
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <LED_effect1+0x28>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f083 0301 	eor.w	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <LED_effect1+0x28>)
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <LED_effect1+0x28>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <LED_effect1+0x20>
 8000762:	f7ff ff51 	bl	8000608 <turn_on_all_leds>
}
 8000766:	e001      	b.n	800076c <LED_effect1+0x24>
	(flag ^= 1) ? turn_on_all_leds() : turn_off_all_leds();
 8000768:	f7ff ff6c 	bl	8000644 <turn_off_all_leds>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000

08000774 <LED_effect2>:

void LED_effect2(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	static uint8_t flag = 1;

	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <LED_effect2+0x28>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f083 0301 	eor.w	r3, r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <LED_effect2+0x28>)
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <LED_effect2+0x28>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <LED_effect2+0x20>
 800078e:	f7ff ff77 	bl	8000680 <turn_on_even_leds>
}
 8000792:	e001      	b.n	8000798 <LED_effect2+0x24>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000794:	f7ff ff92 	bl	80006bc <turn_on_odd_leds>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000001 	.word	0x20000001

080007a0 <LED_effect3>:

void LED_effect3(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	static uint8_t i = 0;

	LED_control(0x1 << (i++ % 4));
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <LED_effect3+0x28>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	b2d1      	uxtb	r1, r2
 80007ac:	4a06      	ldr	r2, [pc, #24]	@ (80007c8 <LED_effect3+0x28>)
 80007ae:	7011      	strb	r1, [r2, #0]
 80007b0:	f003 0303 	and.w	r3, r3, #3
 80007b4:	2201      	movs	r2, #1
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff9b 	bl	80006f8 <LED_control>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000094 	.word	0x20000094

080007cc <LED_effect4>:

void LED_effect4(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	static uint8_t i = 0;

	LED_control(0x8 >> (i++ % 4));
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <LED_effect4+0x28>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	b2d1      	uxtb	r1, r2
 80007d8:	4a06      	ldr	r2, [pc, #24]	@ (80007f4 <LED_effect4+0x28>)
 80007da:	7011      	strb	r1, [r2, #0]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	2208      	movs	r2, #8
 80007e2:	fa42 f303 	asr.w	r3, r2, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff85 	bl	80006f8 <LED_control>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000095 	.word	0x20000095

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b08d      	sub	sp, #52	@ 0x34
 80007fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007fe:	f001 fb41 	bl	8001e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f91f 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f9d9 	bl	8000bbc <MX_GPIO_Init>
  MX_RTC_Init();
 800080a:	f000 f987 	bl	8000b1c <MX_RTC_Init>
  MX_USART2_UART_Init();
 800080e:	f000 f9ab 	bl	8000b68 <MX_USART2_UART_Init>
//    DWT_CTRL |= (1 << 0);
//
//    SEGGER_SYSVIEW_Conf();
  /* USER CODE BEGIN 2 */

	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 8000812:	4b73      	ldr	r3, [pc, #460]	@ (80009e0 <main+0x1e8>)
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	2302      	movs	r3, #2
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	22fa      	movs	r2, #250	@ 0xfa
 800081e:	4971      	ldr	r1, [pc, #452]	@ (80009e4 <main+0x1ec>)
 8000820:	4871      	ldr	r0, [pc, #452]	@ (80009e8 <main+0x1f0>)
 8000822:	f005 f8c7 	bl	80059b4 <xTaskCreate>
 8000826:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d00b      	beq.n	8000846 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800082e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000832:	f383 8811 	msr	BASEPRI, r3
 8000836:	f3bf 8f6f 	isb	sy
 800083a:	f3bf 8f4f 	dsb	sy
 800083e:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	e7fd      	b.n	8000842 <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000846:	4b69      	ldr	r3, [pc, #420]	@ (80009ec <main+0x1f4>)
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	2302      	movs	r3, #2
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2300      	movs	r3, #0
 8000850:	22fa      	movs	r2, #250	@ 0xfa
 8000852:	4967      	ldr	r1, [pc, #412]	@ (80009f0 <main+0x1f8>)
 8000854:	4867      	ldr	r0, [pc, #412]	@ (80009f4 <main+0x1fc>)
 8000856:	f005 f8ad 	bl	80059b4 <xTaskCreate>
 800085a:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d00b      	beq.n	800087a <main+0x82>
        __asm volatile
 8000862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	61bb      	str	r3, [r7, #24]
    }
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <main+0x7e>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800087a:	4b5f      	ldr	r3, [pc, #380]	@ (80009f8 <main+0x200>)
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	2302      	movs	r3, #2
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2300      	movs	r3, #0
 8000884:	22fa      	movs	r2, #250	@ 0xfa
 8000886:	495d      	ldr	r1, [pc, #372]	@ (80009fc <main+0x204>)
 8000888:	485d      	ldr	r0, [pc, #372]	@ (8000a00 <main+0x208>)
 800088a:	f005 f893 	bl	80059b4 <xTaskCreate>
 800088e:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d00b      	beq.n	80008ae <main+0xb6>
        __asm volatile
 8000896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089a:	f383 8811 	msr	BASEPRI, r3
 800089e:	f3bf 8f6f 	isb	sy
 80008a2:	f3bf 8f4f 	dsb	sy
 80008a6:	617b      	str	r3, [r7, #20]
    }
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <main+0xb2>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008ae:	4b55      	ldr	r3, [pc, #340]	@ (8000a04 <main+0x20c>)
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	2302      	movs	r3, #2
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2300      	movs	r3, #0
 80008b8:	22fa      	movs	r2, #250	@ 0xfa
 80008ba:	4953      	ldr	r1, [pc, #332]	@ (8000a08 <main+0x210>)
 80008bc:	4853      	ldr	r0, [pc, #332]	@ (8000a0c <main+0x214>)
 80008be:	f005 f879 	bl	80059b4 <xTaskCreate>
 80008c2:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d00b      	beq.n	80008e2 <main+0xea>
        __asm volatile
 80008ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ce:	f383 8811 	msr	BASEPRI, r3
 80008d2:	f3bf 8f6f 	isb	sy
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	613b      	str	r3, [r7, #16]
    }
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <main+0xe6>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000a10 <main+0x218>)
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	2302      	movs	r3, #2
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2300      	movs	r3, #0
 80008ec:	22fa      	movs	r2, #250	@ 0xfa
 80008ee:	4949      	ldr	r1, [pc, #292]	@ (8000a14 <main+0x21c>)
 80008f0:	4849      	ldr	r0, [pc, #292]	@ (8000a18 <main+0x220>)
 80008f2:	f005 f85f 	bl	80059b4 <xTaskCreate>
 80008f6:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d00b      	beq.n	8000916 <main+0x11e>
        __asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	60fb      	str	r3, [r7, #12]
    }
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <main+0x11a>

	q_data = xQueueCreate(10, sizeof(char));
 8000916:	2200      	movs	r2, #0
 8000918:	2101      	movs	r1, #1
 800091a:	200a      	movs	r0, #10
 800091c:	f004 faec 	bl	8004ef8 <xQueueGenericCreate>
 8000920:	4603      	mov	r3, r0
 8000922:	4a3e      	ldr	r2, [pc, #248]	@ (8000a1c <main+0x224>)
 8000924:	6013      	str	r3, [r2, #0]
	configASSERT(q_data != NULL);
 8000926:	4b3d      	ldr	r3, [pc, #244]	@ (8000a1c <main+0x224>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10b      	bne.n	8000946 <main+0x14e>
        __asm volatile
 800092e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000932:	f383 8811 	msr	BASEPRI, r3
 8000936:	f3bf 8f6f 	isb	sy
 800093a:	f3bf 8f4f 	dsb	sy
 800093e:	60bb      	str	r3, [r7, #8]
    }
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	e7fd      	b.n	8000942 <main+0x14a>

	q_print = xQueueCreate(10, sizeof(size_t));
 8000946:	2200      	movs	r2, #0
 8000948:	2104      	movs	r1, #4
 800094a:	200a      	movs	r0, #10
 800094c:	f004 fad4 	bl	8004ef8 <xQueueGenericCreate>
 8000950:	4603      	mov	r3, r0
 8000952:	4a33      	ldr	r2, [pc, #204]	@ (8000a20 <main+0x228>)
 8000954:	6013      	str	r3, [r2, #0]
	configASSERT(q_print != NULL);
 8000956:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <main+0x228>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10b      	bne.n	8000976 <main+0x17e>
        __asm volatile
 800095e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000962:	f383 8811 	msr	BASEPRI, r3
 8000966:	f3bf 8f6f 	isb	sy
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	607b      	str	r3, [r7, #4]
    }
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	e7fd      	b.n	8000972 <main+0x17a>

	//Create software timer
	for(uint8_t i = 0; i < 4; i++)
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800097c:	e017      	b.n	80009ae <main+0x1b6>
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 800097e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000982:	3301      	adds	r3, #1
 8000984:	461a      	mov	r2, r3
 8000986:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <main+0x22c>)
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	4613      	mov	r3, r2
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000996:	4824      	ldr	r0, [pc, #144]	@ (8000a28 <main+0x230>)
 8000998:	f006 f906 	bl	8006ba8 <xTimerCreate>
 800099c:	4603      	mov	r3, r0
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <main+0x234>)
 80009a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t i = 0; i < 4; i++)
 80009a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009a8:	3301      	adds	r3, #1
 80009aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80009ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d9e3      	bls.n	800097e <main+0x186>

	rtc_timer = xTimerCreate("rtc_timer", pdMS_TO_TICKS(1000), pdTRUE, NULL, rtc_report_callback);
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <main+0x238>)
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009c2:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <main+0x23c>)
 80009c4:	f006 f8f0 	bl	8006ba8 <xTimerCreate>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000a38 <main+0x240>)
 80009cc:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	491a      	ldr	r1, [pc, #104]	@ (8000a3c <main+0x244>)
 80009d2:	481b      	ldr	r0, [pc, #108]	@ (8000a40 <main+0x248>)
 80009d4:	f003 f9f7 	bl	8003dc6 <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009d8:	f005 f932 	bl	8005c40 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <main+0x1e4>
 80009e0:	20000100 	.word	0x20000100
 80009e4:	08008eb8 	.word	0x08008eb8
 80009e8:	080015b5 	.word	0x080015b5
 80009ec:	20000104 	.word	0x20000104
 80009f0:	08008ec4 	.word	0x08008ec4
 80009f4:	08001d15 	.word	0x08001d15
 80009f8:	20000108 	.word	0x20000108
 80009fc:	08008ed0 	.word	0x08008ed0
 8000a00:	08001cd5 	.word	0x08001cd5
 8000a04:	2000010c 	.word	0x2000010c
 8000a08:	08008edc 	.word	0x08008edc
 8000a0c:	08001695 	.word	0x08001695
 8000a10:	20000110 	.word	0x20000110
 8000a14:	08008ee8 	.word	0x08008ee8
 8000a18:	08001809 	.word	0x08001809
 8000a1c:	20000114 	.word	0x20000114
 8000a20:	20000118 	.word	0x20000118
 8000a24:	08000e8d 	.word	0x08000e8d
 8000a28:	08008ef4 	.word	0x08008ef4
 8000a2c:	20000120 	.word	0x20000120
 8000a30:	08000e79 	.word	0x08000e79
 8000a34:	08008f00 	.word	0x08008f00
 8000a38:	20000130 	.word	0x20000130
 8000a3c:	2000011c 	.word	0x2000011c
 8000a40:	200000b8 	.word	0x200000b8

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	@ 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	2230      	movs	r2, #48	@ 0x30
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f007 fa55 	bl	8007f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	4a28      	ldr	r2, [pc, #160]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a78:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <SystemClock_Config+0xd4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a22      	ldr	r2, [pc, #136]	@ (8000b18 <SystemClock_Config+0xd4>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <SystemClock_Config+0xd4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000abc:	23a8      	movs	r3, #168	@ 0xa8
 8000abe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fd45 	bl	800255c <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ad8:	f000 fa5c 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2105      	movs	r1, #5
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 ffa6 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b06:	f000 fa45 	bl	8000f94 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	@ 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_RTC_Init+0x44>)
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <MX_RTC_Init+0x48>)
 8000b24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_RTC_Init+0x44>)
 8000b28:	2240      	movs	r2, #64	@ 0x40
 8000b2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_RTC_Init+0x44>)
 8000b2e:	227f      	movs	r2, #127	@ 0x7f
 8000b30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <MX_RTC_Init+0x44>)
 8000b34:	22ff      	movs	r2, #255	@ 0xff
 8000b36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_RTC_Init+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <MX_RTC_Init+0x44>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_RTC_Init+0x44>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_RTC_Init+0x44>)
 8000b4c:	f002 fab2 	bl	80030b4 <HAL_RTC_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b56:	f000 fa1d 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000098 	.word	0x20000098
 8000b64:	40002800 	.word	0x40002800

08000b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <MX_USART2_UART_Init+0x50>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f003 f836 	bl	8003c10 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f9f3 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000b8 	.word	0x200000b8
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	4ba2      	ldr	r3, [pc, #648]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4aa1      	ldr	r2, [pc, #644]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b9f      	ldr	r3, [pc, #636]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	4b9b      	ldr	r3, [pc, #620]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a9a      	ldr	r2, [pc, #616]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b98      	ldr	r3, [pc, #608]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b94      	ldr	r3, [pc, #592]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a93      	ldr	r2, [pc, #588]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b91      	ldr	r3, [pc, #580]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a8c      	ldr	r2, [pc, #560]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b8a      	ldr	r3, [pc, #552]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b86      	ldr	r3, [pc, #536]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a85      	ldr	r2, [pc, #532]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b83      	ldr	r3, [pc, #524]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b7f      	ldr	r3, [pc, #508]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a7e      	ldr	r2, [pc, #504]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4879      	ldr	r0, [pc, #484]	@ (8000e64 <MX_GPIO_Init+0x2a8>)
 8000c80:	f001 fc52 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2101      	movs	r1, #1
 8000c88:	4877      	ldr	r0, [pc, #476]	@ (8000e68 <MX_GPIO_Init+0x2ac>)
 8000c8a:	f001 fc4d 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c94:	4875      	ldr	r0, [pc, #468]	@ (8000e6c <MX_GPIO_Init+0x2b0>)
 8000c96:	f001 fc47 	bl	8002528 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	486c      	ldr	r0, [pc, #432]	@ (8000e64 <MX_GPIO_Init+0x2a8>)
 8000cb2:	f001 fa9d 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4866      	ldr	r0, [pc, #408]	@ (8000e68 <MX_GPIO_Init+0x2ac>)
 8000cce:	f001 fa8f 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	485e      	ldr	r0, [pc, #376]	@ (8000e68 <MX_GPIO_Init+0x2ac>)
 8000cee:	f001 fa7f 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	485a      	ldr	r0, [pc, #360]	@ (8000e70 <MX_GPIO_Init+0x2b4>)
 8000d08:	f001 fa72 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4852      	ldr	r0, [pc, #328]	@ (8000e70 <MX_GPIO_Init+0x2b4>)
 8000d28:	f001 fa62 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d2c:	23e0      	movs	r3, #224	@ 0xe0
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	484a      	ldr	r0, [pc, #296]	@ (8000e70 <MX_GPIO_Init+0x2b4>)
 8000d48:	f001 fa52 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4845      	ldr	r0, [pc, #276]	@ (8000e74 <MX_GPIO_Init+0x2b8>)
 8000d60:	f001 fa46 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d76:	2305      	movs	r3, #5
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	483c      	ldr	r0, [pc, #240]	@ (8000e74 <MX_GPIO_Init+0x2b8>)
 8000d82:	f001 fa35 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d86:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000d8a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4833      	ldr	r0, [pc, #204]	@ (8000e6c <MX_GPIO_Init+0x2b0>)
 8000da0:	f001 fa26 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000da4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db6:	2306      	movs	r3, #6
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4829      	ldr	r0, [pc, #164]	@ (8000e68 <MX_GPIO_Init+0x2ac>)
 8000dc2:	f001 fa15 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4825      	ldr	r0, [pc, #148]	@ (8000e70 <MX_GPIO_Init+0x2b4>)
 8000ddc:	f001 fa08 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000de0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000df2:	230a      	movs	r3, #10
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481c      	ldr	r0, [pc, #112]	@ (8000e70 <MX_GPIO_Init+0x2b4>)
 8000dfe:	f001 f9f7 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e02:	2320      	movs	r3, #32
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4815      	ldr	r0, [pc, #84]	@ (8000e6c <MX_GPIO_Init+0x2b0>)
 8000e16:	f001 f9eb 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e1a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e20:	2312      	movs	r3, #18
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	480f      	ldr	r0, [pc, #60]	@ (8000e74 <MX_GPIO_Init+0x2b8>)
 8000e38:	f001 f9da 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e40:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4804      	ldr	r0, [pc, #16]	@ (8000e64 <MX_GPIO_Init+0x2a8>)
 8000e52:	f001 f9cd 	bl	80021f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e56:	bf00      	nop
 8000e58:	3730      	adds	r7, #48	@ 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020400 	.word	0x40020400

08000e78 <rtc_report_callback>:

/* USER CODE BEGIN 4 */
void rtc_report_callback(TimerHandle_t xTimer)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	show_time_date_itm();
 8000e80:	f000 f88e 	bl	8000fa0 <show_time_date_itm>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	uint32_t id;

	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f006 f9f9 	bl	800728c <pvTimerGetTimerID>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60fb      	str	r3, [r7, #12]

	switch (id)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d816      	bhi.n	8000ed4 <led_effect_callback+0x48>
 8000ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8000eac <led_effect_callback+0x20>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ebd 	.word	0x08000ebd
 8000eb0:	08000ec3 	.word	0x08000ec3
 8000eb4:	08000ec9 	.word	0x08000ec9
 8000eb8:	08000ecf 	.word	0x08000ecf
	{
		case 1:
			LED_effect1();
 8000ebc:	f7ff fc44 	bl	8000748 <LED_effect1>
			break;
 8000ec0:	e008      	b.n	8000ed4 <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 8000ec2:	f7ff fc57 	bl	8000774 <LED_effect2>
			break;
 8000ec6:	e005      	b.n	8000ed4 <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8000ec8:	f7ff fc6a 	bl	80007a0 <LED_effect3>
			break;
 8000ecc:	e002      	b.n	8000ed4 <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 8000ece:	f7ff fc7d 	bl	80007cc <LED_effect4>
			break;
 8000ed2:	bf00      	nop
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	/*check : is queue full ? */
	if(!(xQueueIsQueueFullFromISR(q_data) == pdTRUE))
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <HAL_UART_RxCpltCallback+0x84>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fcde 	bl	80058aa <xQueueIsQueueFullFromISR>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d007      	beq.n	8000f04 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */
		/*Enqueue data byte */
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <HAL_UART_RxCpltCallback+0x84>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	2200      	movs	r2, #0
 8000efc:	4919      	ldr	r1, [pc, #100]	@ (8000f64 <HAL_UART_RxCpltCallback+0x88>)
 8000efe:	f004 f983 	bl	8005208 <xQueueGenericSendFromISR>
 8000f02:	e013      	b.n	8000f2c <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */
		if(user_data == '\n')
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <HAL_UART_RxCpltCallback+0x88>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b0a      	cmp	r3, #10
 8000f0c:	d10e      	bne.n	8000f2c <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */
			/*make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_UART_RxCpltCallback+0x84>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f107 010f 	add.w	r1, r7, #15
 8000f16:	2200      	movs	r2, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fb05 	bl	8005528 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_UART_RxCpltCallback+0x84>)
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	2200      	movs	r2, #0
 8000f26:	490f      	ldr	r1, [pc, #60]	@ (8000f64 <HAL_UART_RxCpltCallback+0x88>)
 8000f28:	f004 f96e 	bl	8005208 <xQueueGenericSendFromISR>
		}
	}

	/*send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_UART_RxCpltCallback+0x88>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b0a      	cmp	r3, #10
 8000f34:	d10a      	bne.n	8000f4c <HAL_UART_RxCpltCallback+0x70>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task, 0, eNoAction, NULL);
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <HAL_UART_RxCpltCallback+0x8c>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2300      	movs	r3, #0
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	f005 fc8e 	bl	8006868 <xTaskGenericNotifyFromISR>
	}

	/*Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4905      	ldr	r1, [pc, #20]	@ (8000f64 <HAL_UART_RxCpltCallback+0x88>)
 8000f50:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <HAL_UART_RxCpltCallback+0x90>)
 8000f52:	f002 ff38 	bl	8003dc6 <HAL_UART_Receive_IT>


}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000114 	.word	0x20000114
 8000f64:	2000011c 	.word	0x2000011c
 8000f68:	20000104 	.word	0x20000104
 8000f6c:	200000b8 	.word	0x200000b8

08000f70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f82:	f000 ffa1 	bl	8001ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40001000 	.word	0x40001000

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <show_time_date_itm>:
 *      Author: Asus
 */
#include "main.h"

void show_time_date_itm(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	2204      	movs	r2, #4
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 ffa7 	bl	8007f02 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2214      	movs	r2, #20
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f006 ffa1 	bl	8007f02 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4815      	ldr	r0, [pc, #84]	@ (800101c <show_time_date_itm+0x7c>)
 8000fc8:	f002 f991 	bl	80032ee <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4811      	ldr	r0, [pc, #68]	@ (800101c <show_time_date_itm+0x7c>)
 8000fd6:	f002 fa6c 	bl	80034b2 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <show_time_date_itm+0x44>
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <show_time_date_itm+0x80>)
 8000fe2:	e000      	b.n	8000fe6 <show_time_date_itm+0x46>
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <show_time_date_itm+0x84>)
 8000fe6:	61fb      	str	r3, [r7, #28]

	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000fe8:	793b      	ldrb	r3, [r7, #4]
 8000fea:	4619      	mov	r1, r3
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	480b      	ldr	r0, [pc, #44]	@ (8001028 <show_time_date_itm+0x88>)
 8000ffc:	f006 ff0c 	bl	8007e18 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001000:	7e7b      	ldrb	r3, [r7, #25]
 8001002:	4619      	mov	r1, r3
 8001004:	7ebb      	ldrb	r3, [r7, #26]
 8001006:	461a      	mov	r2, r3
 8001008:	7efb      	ldrb	r3, [r7, #27]
 800100a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <show_time_date_itm+0x8c>)
 8001010:	f006 ff02 	bl	8007e18 <iprintf>

}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000098 	.word	0x20000098
 8001020:	08008f0c 	.word	0x08008f0c
 8001024:	08008f10 	.word	0x08008f10
 8001028:	08008f14 	.word	0x08008f14
 800102c:	08008f28 	.word	0x08008f28

08001030 <show_time_date>:

void show_time_date(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	@ 0x30
 8001034:	af02      	add	r7, sp, #8
    static char showdate[40];

    RTC_DateTypeDef rtc_date;
    RTC_TimeTypeDef rtc_time;

    memset(&rtc_date, 0, sizeof(rtc_date));
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2204      	movs	r2, #4
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f006 ff5f 	bl	8007f02 <memset>
    memset(&rtc_time, 0, sizeof(rtc_time));
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2214      	movs	r2, #20
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f006 ff58 	bl	8007f02 <memset>

    /* Get the RTC current Time */
    HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	4824      	ldr	r0, [pc, #144]	@ (80010ec <show_time_date+0xbc>)
 800105c:	f002 f947 	bl	80032ee <HAL_RTC_GetTime>
    /* Get the RTC current Date */
    HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4820      	ldr	r0, [pc, #128]	@ (80010ec <show_time_date+0xbc>)
 800106a:	f002 fa22 	bl	80034b2 <HAL_RTC_GetDate>

    char *format = rtc_time.TimeFormat ? "PM" : "AM";
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <show_time_date+0x48>
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <show_time_date+0xc0>)
 8001076:	e000      	b.n	800107a <show_time_date+0x4a>
 8001078:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <show_time_date+0xc4>)
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Display time Format : hh:mm:ss [AM/PM] */
    sprintf(showtime, "\nCurrent Time&Date:\t %02d:%02d:%02d [%s]", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 800107c:	7b3b      	ldrb	r3, [r7, #12]
 800107e:	4619      	mov	r1, r3
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	4618      	mov	r0, r3
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	461a      	mov	r2, r3
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	9200      	str	r2, [sp, #0]
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	4919      	ldr	r1, [pc, #100]	@ (80010f8 <show_time_date+0xc8>)
 8001094:	4819      	ldr	r0, [pc, #100]	@ (80010fc <show_time_date+0xcc>)
 8001096:	f006 fed1 	bl	8007e3c <siprintf>

    /* Truyền địa chỉ cấp 2 của mảng */
    char **p_showtime = (char**)&showtime;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <show_time_date+0xcc>)
 800109c:	60bb      	str	r3, [r7, #8]
    xQueueSend(q_print, &p_showtime, portMAX_DELAY);
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <show_time_date+0xd0>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	f107 0108 	add.w	r1, r7, #8
 80010a6:	2300      	movs	r3, #0
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	f003 ffaa 	bl	8005004 <xQueueGenericSend>

    /* Display date Format : date-month-year */
    sprintf(showdate, "\t%02d-%02d-%02d\n", rtc_date.Date, rtc_date.Month, rtc_date.Year + 2000);
 80010b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010b4:	461a      	mov	r2, r3
 80010b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010ba:	4619      	mov	r1, r3
 80010bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010c0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	460b      	mov	r3, r1
 80010c8:	490e      	ldr	r1, [pc, #56]	@ (8001104 <show_time_date+0xd4>)
 80010ca:	480f      	ldr	r0, [pc, #60]	@ (8001108 <show_time_date+0xd8>)
 80010cc:	f006 feb6 	bl	8007e3c <siprintf>

    /* Truyền địa chỉ cấp 2 của mảng */
    char **p_showdate = (char**)&showdate;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <show_time_date+0xd8>)
 80010d2:	607b      	str	r3, [r7, #4]
    xQueueSend(q_print, &p_showdate, portMAX_DELAY);
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <show_time_date+0xd0>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	1d39      	adds	r1, r7, #4
 80010da:	2300      	movs	r3, #0
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	f003 ff90 	bl	8005004 <xQueueGenericSend>
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	@ 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000098 	.word	0x20000098
 80010f0:	08008f10 	.word	0x08008f10
 80010f4:	08008f0c 	.word	0x08008f0c
 80010f8:	08008f38 	.word	0x08008f38
 80010fc:	20000138 	.word	0x20000138
 8001100:	20000118 	.word	0x20000118
 8001104:	08008f64 	.word	0x08008f64
 8001108:	20000160 	.word	0x20000160

0800110c <rtc_configure_time>:



void rtc_configure_time(RTC_TimeTypeDef *time)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001126:	2200      	movs	r2, #0
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4803      	ldr	r0, [pc, #12]	@ (8001138 <rtc_configure_time+0x2c>)
 800112c:	f002 f845 	bl	80031ba <HAL_RTC_SetTime>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000098 	.word	0x20000098

0800113c <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <rtc_configure_date+0x1c>)
 800114a:	f002 f92e 	bl	80033aa <HAL_RTC_SetDate>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000098 	.word	0x20000098

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	@ (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001170:	6453      	str	r3, [r2, #68]	@ 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800119a:	f006 f9cf 	bl	800753c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a0c      	ldr	r2, [pc, #48]	@ (80011f8 <HAL_RTC_MspInit+0x4c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d111      	bne.n	80011f0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011cc:	2302      	movs	r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011d4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fe88 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011e6:	f7ff fed5 	bl	8000f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011ea:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <HAL_RTC_MspInit+0x50>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40002800 	.word	0x40002800
 80011fc:	42470e3c 	.word	0x42470e3c

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1d      	ldr	r2, [pc, #116]	@ (8001294 <HAL_UART_MspInit+0x94>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d133      	bne.n	800128a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HAL_UART_MspInit+0x98>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a1b      	ldr	r2, [pc, #108]	@ (8001298 <HAL_UART_MspInit+0x98>)
 800122c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_UART_MspInit+0x98>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_UART_MspInit+0x98>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0x98>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_UART_MspInit+0x98>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800125a:	230c      	movs	r3, #12
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126a:	2307      	movs	r3, #7
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4809      	ldr	r0, [pc, #36]	@ (800129c <HAL_UART_MspInit+0x9c>)
 8001276:	f000 ffbb 	bl	80021f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2106      	movs	r1, #6
 800127e:	2026      	movs	r0, #38	@ 0x26
 8001280:	f000 fefa 	bl	8002078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001284:	2026      	movs	r0, #38	@ 0x26
 8001286:	f000 ff13 	bl	80020b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40004400 	.word	0x40004400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	@ 0x38
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4b33      	ldr	r3, [pc, #204]	@ (8001384 <HAL_InitTick+0xe4>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	4a32      	ldr	r2, [pc, #200]	@ (8001384 <HAL_InitTick+0xe4>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c0:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <HAL_InitTick+0xe4>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012cc:	f107 0210 	add.w	r2, r7, #16
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fdd8 	bl	8002e8c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012e6:	f001 fda9 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 80012ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80012ec:	e004      	b.n	80012f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012ee:	f001 fda5 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 80012f2:	4603      	mov	r3, r0
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <HAL_InitTick+0xe8>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	3b01      	subs	r3, #1
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <HAL_InitTick+0xec>)
 8001308:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <HAL_InitTick+0xf0>)
 800130a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_InitTick+0xec>)
 800130e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001312:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001314:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <HAL_InitTick+0xec>)
 8001316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001318:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800131a:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <HAL_InitTick+0xec>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <HAL_InitTick+0xec>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_InitTick+0xec>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800132c:	4817      	ldr	r0, [pc, #92]	@ (800138c <HAL_InitTick+0xec>)
 800132e:	f002 f9cd 	bl	80036cc <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001338:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800133c:	2b00      	cmp	r3, #0
 800133e:	d11b      	bne.n	8001378 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001340:	4812      	ldr	r0, [pc, #72]	@ (800138c <HAL_InitTick+0xec>)
 8001342:	f002 fa1d 	bl	8003780 <HAL_TIM_Base_Start_IT>
 8001346:	4603      	mov	r3, r0
 8001348:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800134c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001350:	2b00      	cmp	r3, #0
 8001352:	d111      	bne.n	8001378 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001354:	2036      	movs	r0, #54	@ 0x36
 8001356:	f000 feab 	bl	80020b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d808      	bhi.n	8001372 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2036      	movs	r0, #54	@ 0x36
 8001366:	f000 fe87 	bl	8002078 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <HAL_InitTick+0xf4>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e002      	b.n	8001378 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001378:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800137c:	4618      	mov	r0, r3
 800137e:	3738      	adds	r7, #56	@ 0x38
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	431bde83 	.word	0x431bde83
 800138c:	20000188 	.word	0x20000188
 8001390:	40001000 	.word	0x40001000
 8001394:	2000000c 	.word	0x2000000c

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <NMI_Handler+0x4>

080013a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <MemManage_Handler+0x4>

080013b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <UsageFault_Handler+0x4>

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <USART2_IRQHandler+0x10>)
 80013d6:	f002 fd1b 	bl	8003e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000b8 	.word	0x200000b8

080013e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <TIM6_DAC_IRQHandler+0x10>)
 80013ea:	f002 fa39 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000188 	.word	0x20000188

080013f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <ITM_SendChar+0x48>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0e      	ldr	r2, [pc, #56]	@ (8001440 <ITM_SendChar+0x48>)
 8001408:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800140c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800140e:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <ITM_SendChar+0x4c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a0c      	ldr	r2, [pc, #48]	@ (8001444 <ITM_SendChar+0x4c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800141a:	bf00      	nop
 800141c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f8      	beq.n	800141c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800142a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	6013      	str	r3, [r2, #0]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000edfc 	.word	0xe000edfc
 8001444:	e0000e00 	.word	0xe0000e00

08001448 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00a      	b.n	8001470 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800145a:	f3af 8000 	nop.w
 800145e:	4601      	mov	r1, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf0      	blt.n	800145a <_read+0x12>
	}

return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e009      	b.n	80014a8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ffab 	bl	80013f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <_write+0x12>
	}
	return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:

int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f006 fd24 	bl	8007fa0 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20020000 	.word	0x20020000
 8001584:	00000400 	.word	0x00000400
 8001588:	200001d0 	.word	0x200001d0
 800158c:	200130d0 	.word	0x200130d0

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <menu_task>:
static int extract_command(command_t *cmd);

char const *msg_inv = "////Invalid option////\n";

void menu_task(void *param)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	uint8_t option;

	char const *msg_menu = "\n========================\n"
 80015bc:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <menu_task+0xc8>)
 80015be:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80015c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <menu_task+0xcc>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	f107 0108 	add.w	r1, r7, #8
 80015c8:	2300      	movs	r3, #0
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295
 80015ce:	f003 fd19 	bl	8005004 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	f04f 32ff 	mov.w	r2, #4294967295
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2000      	movs	r0, #0
 80015e2:	f004 ffdd 	bl	80065a0 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	7a9b      	ldrb	r3, [r3, #10]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d130      	bne.n	8001654 <menu_task+0xa0>
		{
			option = cmd->payload[0] - 48;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3b30      	subs	r3, #48	@ 0x30
 80015f8:	74fb      	strb	r3, [r7, #19]

			switch(option)
 80015fa:	7cfb      	ldrb	r3, [r7, #19]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d032      	beq.n	8001666 <menu_task+0xb2>
 8001600:	2b02      	cmp	r3, #2
 8001602:	dc1e      	bgt.n	8001642 <menu_task+0x8e>
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <menu_task+0x5a>
 8001608:	2b01      	cmp	r3, #1
 800160a:	d00d      	beq.n	8001628 <menu_task+0x74>
 800160c:	e019      	b.n	8001642 <menu_task+0x8e>
			{
				case 0:
					curr_state = sLedEffect;
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <menu_task+0xd0>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <menu_task+0xd4>)
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	f005 f83d 	bl	80066a0 <xTaskGenericNotify>
					break;
 8001626:	e01f      	b.n	8001668 <menu_task+0xb4>
				case 1:
					curr_state = sRtcMenu;
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <menu_task+0xd0>)
 800162a:	2202      	movs	r2, #2
 800162c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <menu_task+0xd8>)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	f005 f830 	bl	80066a0 <xTaskGenericNotify>
					break;
 8001640:	e012      	b.n	8001668 <menu_task+0xb4>
				case 2:
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <menu_task+0xcc>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	4910      	ldr	r1, [pc, #64]	@ (8001690 <menu_task+0xdc>)
 800164e:	f003 fcd9 	bl	8005004 <xQueueGenericSend>
					continue;
 8001652:	e012      	b.n	800167a <menu_task+0xc6>
			}
		}else
		{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001654:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <menu_task+0xcc>)
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	490c      	ldr	r1, [pc, #48]	@ (8001690 <menu_task+0xdc>)
 8001660:	f003 fcd0 	bl	8005004 <xQueueGenericSend>
			continue;
 8001664:	e009      	b.n	800167a <menu_task+0xc6>
					break;
 8001666:	bf00      	nop
		}

		//wait to run again when some other task notifys
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2000      	movs	r0, #0
 8001676:	f004 ff93 	bl	80065a0 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 800167a:	e7a1      	b.n	80015c0 <menu_task+0xc>
 800167c:	08008f90 	.word	0x08008f90
 8001680:	20000118 	.word	0x20000118
 8001684:	20000134 	.word	0x20000134
 8001688:	2000010c 	.word	0x2000010c
 800168c:	20000110 	.word	0x20000110
 8001690:	20000008 	.word	0x20000008

08001694 <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af02      	add	r7, sp, #8
 800169a:	6078      	str	r0, [r7, #4]
	char const *msg_led = "========================\n"
 800169c:	4b3e      	ldr	r3, [pc, #248]	@ (8001798 <led_task+0x104>)
 800169e:	613b      	str	r3, [r7, #16]
	command_t *cmd;

	while(1)
	{
		/*wait for notification (notify wait)*/
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2300      	movs	r3, #0
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2000      	movs	r0, #0
 80016ae:	f004 ff77 	bl	80065a0 <xTaskGenericNotifyWait>

		/*print led menu*/
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 80016b2:	4b3a      	ldr	r3, [pc, #232]	@ (800179c <led_task+0x108>)
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	f107 0110 	add.w	r1, r7, #16
 80016ba:	2300      	movs	r3, #0
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	f003 fca0 	bl	8005004 <xQueueGenericSend>

		/*wait for LED command (notify wait*/
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	9200      	str	r2, [sp, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2000      	movs	r0, #0
 80016d4:	f004 ff64 	bl	80065a0 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	7a9b      	ldrb	r3, [r3, #10]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d843      	bhi.n	800176c <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload, "none"))
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	492e      	ldr	r1, [pc, #184]	@ (80017a0 <led_task+0x10c>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fd71 	bl	80001d0 <strcmp>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <led_task+0x66>
				led_effect_stop();
 80016f4:	f7fe ff4c 	bl	8000590 <led_effect_stop>
 80016f8:	e040      	b.n	800177c <led_task+0xe8>

			else if(! strcmp((char*)cmd->payload, "e1"))
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	4929      	ldr	r1, [pc, #164]	@ (80017a4 <led_task+0x110>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fd66 	bl	80001d0 <strcmp>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <led_task+0x7e>
				led_effect(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f7fe ff60 	bl	80005d0 <led_effect>
 8001710:	e034      	b.n	800177c <led_task+0xe8>

			else if(! strcmp((char*)cmd->payload, "e2"))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4924      	ldr	r1, [pc, #144]	@ (80017a8 <led_task+0x114>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd5a 	bl	80001d0 <strcmp>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <led_task+0x96>
				led_effect(2);
 8001722:	2002      	movs	r0, #2
 8001724:	f7fe ff54 	bl	80005d0 <led_effect>
 8001728:	e028      	b.n	800177c <led_task+0xe8>

			else if(! strcmp((char*)cmd->payload, "e3"))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	491f      	ldr	r1, [pc, #124]	@ (80017ac <led_task+0x118>)
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fd4e 	bl	80001d0 <strcmp>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <led_task+0xae>
				led_effect(3);
 800173a:	2003      	movs	r0, #3
 800173c:	f7fe ff48 	bl	80005d0 <led_effect>
 8001740:	e01c      	b.n	800177c <led_task+0xe8>

			else if(! strcmp((char*)cmd->payload, "e4"))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	491a      	ldr	r1, [pc, #104]	@ (80017b0 <led_task+0x11c>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd42 	bl	80001d0 <strcmp>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <led_task+0xc6>
				led_effect(4);
 8001752:	2004      	movs	r0, #4
 8001754:	f7fe ff3c 	bl	80005d0 <led_effect>
 8001758:	e010      	b.n	800177c <led_task+0xe8>

			else
				//invalid entry
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <led_task+0x108>)
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	2300      	movs	r3, #0
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	4913      	ldr	r1, [pc, #76]	@ (80017b4 <led_task+0x120>)
 8001766:	f003 fc4d 	bl	8005004 <xQueueGenericSend>
 800176a:	e007      	b.n	800177c <led_task+0xe8>
		}else
		{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <led_task+0x108>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	f04f 32ff 	mov.w	r2, #4294967295
 8001776:	490f      	ldr	r1, [pc, #60]	@ (80017b4 <led_task+0x120>)
 8001778:	f003 fc44 	bl	8005004 <xQueueGenericSend>
		}

		/* update state variable */
		curr_state = sMainMenu;
 800177c:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <led_task+0x124>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <led_task+0x128>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	2300      	movs	r3, #0
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	f004 ff86 	bl	80066a0 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001794:	e784      	b.n	80016a0 <led_task+0xc>
 8001796:	bf00      	nop
 8001798:	08009038 	.word	0x08009038
 800179c:	20000118 	.word	0x20000118
 80017a0:	080090b0 	.word	0x080090b0
 80017a4:	080090b8 	.word	0x080090b8
 80017a8:	080090bc 	.word	0x080090bc
 80017ac:	080090c0 	.word	0x080090c0
 80017b0:	080090c4 	.word	0x080090c4
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000134 	.word	0x20000134
 80017bc:	20000100 	.word	0x20000100

080017c0 <getnumber>:
	}
}


uint8_t getnumber(uint8_t *payload, uint8_t len)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	if(len > 1)
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d90e      	bls.n	80017f0 <getnumber+0x30>
	{
		value = ((payload[0] - 48) * 10 + (payload[1] - 48));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3b10      	subs	r3, #16
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e003      	b.n	80017f8 <getnumber+0x38>
	}else
	{
		value = payload[0] - 48;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3b30      	subs	r3, #48	@ 0x30
 80017f6:	73fb      	strb	r3, [r7, #15]
	}
	return value;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <rtc_task>:

void rtc_task(void *param)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b099      	sub	sp, #100	@ 0x64
 800180c:	af02      	add	r7, sp, #8
 800180e:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = 	"========================\n"
 8001810:	4bac      	ldr	r3, [pc, #688]	@ (8001ac4 <rtc_task+0x2bc>)
 8001812:	64fb      	str	r3, [r7, #76]	@ 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = 	"Configure Time            ----> 0\n"
 8001814:	4bac      	ldr	r3, [pc, #688]	@ (8001ac8 <rtc_task+0x2c0>)
 8001816:	64bb      	str	r3, [r7, #72]	@ 0x48
							"Configure Date            ----> 1\n"
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";

	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001818:	4bac      	ldr	r3, [pc, #688]	@ (8001acc <rtc_task+0x2c4>)
 800181a:	647b      	str	r3, [r7, #68]	@ 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 800181c:	4bac      	ldr	r3, [pc, #688]	@ (8001ad0 <rtc_task+0x2c8>)
 800181e:	643b      	str	r3, [r7, #64]	@ 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001820:	4bac      	ldr	r3, [pc, #688]	@ (8001ad4 <rtc_task+0x2cc>)
 8001822:	63fb      	str	r3, [r7, #60]	@ 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001824:	4bac      	ldr	r3, [pc, #688]	@ (8001ad8 <rtc_task+0x2d0>)
 8001826:	63bb      	str	r3, [r7, #56]	@ 0x38
	const char *msg_rtc_mo  = "Enter month(1-12):";
 8001828:	4bac      	ldr	r3, [pc, #688]	@ (8001adc <rtc_task+0x2d4>)
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
	const char *msg_rtc_dow = "Enter day(1-7 sun:1):";
 800182c:	4bac      	ldr	r3, [pc, #688]	@ (8001ae0 <rtc_task+0x2d8>)
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001830:	4bac      	ldr	r3, [pc, #688]	@ (8001ae4 <rtc_task+0x2dc>)
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001834:	4bac      	ldr	r3, [pc, #688]	@ (8001ae8 <rtc_task+0x2e0>)
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001838:	4bac      	ldr	r3, [pc, #688]	@ (8001aec <rtc_task+0x2e4>)
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	while(1)
	{
		xTaskNotifyWait(0, 0, 0, portMAX_DELAY);
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2300      	movs	r3, #0
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	2000      	movs	r0, #0
 800184a:	f004 fea9 	bl	80065a0 <xTaskGenericNotifyWait>

		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 800184e:	4ba8      	ldr	r3, [pc, #672]	@ (8001af0 <rtc_task+0x2e8>)
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001856:	2300      	movs	r3, #0
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	f003 fbd2 	bl	8005004 <xQueueGenericSend>
		show_time_date();
 8001860:	f7ff fbe6 	bl	8001030 <show_time_date>
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 8001864:	4ba2      	ldr	r3, [pc, #648]	@ (8001af0 <rtc_task+0x2e8>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800186c:	2300      	movs	r3, #0
 800186e:	f04f 32ff 	mov.w	r2, #4294967295
 8001872:	f003 fbc7 	bl	8005004 <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001876:	f107 0320 	add.w	r3, r7, #32
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2000      	movs	r0, #0
 8001886:	f004 fe8b 	bl	80065a0 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	657b      	str	r3, [r7, #84]	@ 0x54

		option = getnumber(cmd->payload, cmd->len);
 800188e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001892:	7a9b      	ldrb	r3, [r3, #10]
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f7ff ff92 	bl	80017c0 <getnumber>
 800189c:	4603      	mov	r3, r0
 800189e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if(option <= 3)
 80018a2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	f200 81ff 	bhi.w	8001caa <rtc_task+0x4a2>
		{
			switch(option)
 80018ac:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	f200 81ed 	bhi.w	8001c90 <rtc_task+0x488>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <rtc_task+0xb4>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	08001a15 	.word	0x08001a15
 80018c4:	08001c03 	.word	0x08001c03
 80018c8:	08001c91 	.word	0x08001c91
			{
				case 0:
					/*************************Hours**************************/
					xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 80018cc:	4b88      	ldr	r3, [pc, #544]	@ (8001af0 <rtc_task+0x2e8>)
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80018d4:	2300      	movs	r3, #0
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	f003 fb93 	bl	8005004 <xQueueGenericSend>
					xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	f04f 32ff 	mov.w	r2, #4294967295
 80018e6:	9200      	str	r2, [sp, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	2000      	movs	r0, #0
 80018ee:	f004 fe57 	bl	80065a0 <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	657b      	str	r3, [r7, #84]	@ 0x54

					value = getnumber(cmd->payload, cmd->len);
 80018f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80018f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018fa:	7a9b      	ldrb	r3, [r3, #10]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f7ff ff5e 	bl	80017c0 <getnumber>
 8001904:	4603      	mov	r3, r0
 8001906:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
					//valid value
					if(value >= 1 && value <= 12){
 800190a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800190e:	2b00      	cmp	r3, #0
 8001910:	d02a      	beq.n	8001968 <rtc_task+0x160>
 8001912:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d826      	bhi.n	8001968 <rtc_task+0x160>
						rtc_time.Hours = value;
 800191a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800191e:	723b      	strb	r3, [r7, #8]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						continue;
					}

					/*************************Minutes**************************/
					xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8001920:	4b73      	ldr	r3, [pc, #460]	@ (8001af0 <rtc_task+0x2e8>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001928:	2300      	movs	r3, #0
 800192a:	f04f 32ff 	mov.w	r2, #4294967295
 800192e:	f003 fb69 	bl	8005004 <xQueueGenericSend>
					xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001932:	f107 0320 	add.w	r3, r7, #32
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f004 fe2d 	bl	80065a0 <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	657b      	str	r3, [r7, #84]	@ 0x54

					value = getnumber(cmd->payload, cmd->len);
 800194a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800194c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194e:	7a9b      	ldrb	r3, [r3, #10]
 8001950:	4619      	mov	r1, r3
 8001952:	4610      	mov	r0, r2
 8001954:	f7ff ff34 	bl	80017c0 <getnumber>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
					//valid value
					if(value >= 0 && value <= 59){
 800195e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001962:	2b3b      	cmp	r3, #59	@ 0x3b
 8001964:	d909      	bls.n	800197a <rtc_task+0x172>
 8001966:	e02f      	b.n	80019c8 <rtc_task+0x1c0>
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001968:	4b61      	ldr	r3, [pc, #388]	@ (8001af0 <rtc_task+0x2e8>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	2300      	movs	r3, #0
 800196e:	f04f 32ff 	mov.w	r2, #4294967295
 8001972:	4960      	ldr	r1, [pc, #384]	@ (8001af4 <rtc_task+0x2ec>)
 8001974:	f003 fb46 	bl	8005004 <xQueueGenericSend>
						continue;
 8001978:	e1a0      	b.n	8001cbc <rtc_task+0x4b4>
						rtc_time.Minutes = value;
 800197a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800197e:	727b      	strb	r3, [r7, #9]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						continue;
					}

					/*************************Seconds**************************/
					xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 8001980:	4b5b      	ldr	r3, [pc, #364]	@ (8001af0 <rtc_task+0x2e8>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001988:	2300      	movs	r3, #0
 800198a:	f04f 32ff 	mov.w	r2, #4294967295
 800198e:	f003 fb39 	bl	8005004 <xQueueGenericSend>
					xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	f04f 32ff 	mov.w	r2, #4294967295
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	2000      	movs	r0, #0
 80019a2:	f004 fdfd 	bl	80065a0 <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	657b      	str	r3, [r7, #84]	@ 0x54

					value = getnumber(cmd->payload, cmd->len);
 80019aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80019ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ae:	7a9b      	ldrb	r3, [r3, #10]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f7ff ff04 	bl	80017c0 <getnumber>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
					//valid value
					if(value >= 0 && value <= 59){
 80019be:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80019c2:	2b3b      	cmp	r3, #59	@ 0x3b
 80019c4:	d81d      	bhi.n	8001a02 <rtc_task+0x1fa>
 80019c6:	e008      	b.n	80019da <rtc_task+0x1d2>
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80019c8:	4b49      	ldr	r3, [pc, #292]	@ (8001af0 <rtc_task+0x2e8>)
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	2300      	movs	r3, #0
 80019ce:	f04f 32ff 	mov.w	r2, #4294967295
 80019d2:	4948      	ldr	r1, [pc, #288]	@ (8001af4 <rtc_task+0x2ec>)
 80019d4:	f003 fb16 	bl	8005004 <xQueueGenericSend>
						continue;
 80019d8:	e170      	b.n	8001cbc <rtc_task+0x4b4>
						rtc_time.Seconds = value;
 80019da:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80019de:	72bb      	strb	r3, [r7, #10]
					}else{  //invalid value
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						continue;
					}

					rtc_configure_time(&rtc_time);
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb91 	bl	800110c <rtc_configure_time>
					xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 80019ea:	4b41      	ldr	r3, [pc, #260]	@ (8001af0 <rtc_task+0x2e8>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80019f2:	2300      	movs	r3, #0
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	f003 fb04 	bl	8005004 <xQueueGenericSend>
					show_time_date();
 80019fc:	f7ff fb18 	bl	8001030 <show_time_date>
					break;
 8001a00:	e146      	b.n	8001c90 <rtc_task+0x488>
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <rtc_task+0x2e8>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	2300      	movs	r3, #0
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	4939      	ldr	r1, [pc, #228]	@ (8001af4 <rtc_task+0x2ec>)
 8001a0e:	f003 faf9 	bl	8005004 <xQueueGenericSend>
						continue;
 8001a12:	e153      	b.n	8001cbc <rtc_task+0x4b4>

				case 1:
					/*************************Date**************************/
					xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8001a14:	4b36      	ldr	r3, [pc, #216]	@ (8001af0 <rtc_task+0x2e8>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a22:	f003 faef 	bl	8005004 <xQueueGenericSend>
					xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2000      	movs	r0, #0
 8001a36:	f004 fdb3 	bl	80065a0 <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	657b      	str	r3, [r7, #84]	@ 0x54

					value = getnumber(cmd->payload, cmd->len);
 8001a3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a42:	7a9b      	ldrb	r3, [r3, #10]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f7ff feba 	bl	80017c0 <getnumber>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
					//valid value
					if(value >= 1 && value <= 31){
 8001a52:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d02a      	beq.n	8001ab0 <rtc_task+0x2a8>
 8001a5a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001a5e:	2b1f      	cmp	r3, #31
 8001a60:	d826      	bhi.n	8001ab0 <rtc_task+0x2a8>
						rtc_date.Date = value;
 8001a62:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001a66:	77bb      	strb	r3, [r7, #30]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						continue;
					}

					/*************************Month**************************/
					xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <rtc_task+0x2e8>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001a70:	2300      	movs	r3, #0
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295
 8001a76:	f003 fac5 	bl	8005004 <xQueueGenericSend>
					xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001a7a:	f107 0320 	add.w	r3, r7, #32
 8001a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a82:	9200      	str	r2, [sp, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f004 fd89 	bl	80065a0 <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	657b      	str	r3, [r7, #84]	@ 0x54

					value = getnumber(cmd->payload, cmd->len);
 8001a92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a96:	7a9b      	ldrb	r3, [r3, #10]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f7ff fe90 	bl	80017c0 <getnumber>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
					//valid value
					if(value >= 1 && value <= 12){
 8001aa6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d124      	bne.n	8001af8 <rtc_task+0x2f0>
 8001aae:	e04e      	b.n	8001b4e <rtc_task+0x346>
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <rtc_task+0x2e8>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aba:	490e      	ldr	r1, [pc, #56]	@ (8001af4 <rtc_task+0x2ec>)
 8001abc:	f003 faa2 	bl	8005004 <xQueueGenericSend>
						continue;
 8001ac0:	e0fc      	b.n	8001cbc <rtc_task+0x4b4>
 8001ac2:	bf00      	nop
 8001ac4:	080090c8 	.word	0x080090c8
 8001ac8:	08009114 	.word	0x08009114
 8001acc:	080091b8 	.word	0x080091b8
 8001ad0:	080091cc 	.word	0x080091cc
 8001ad4:	080091e4 	.word	0x080091e4
 8001ad8:	080091fc 	.word	0x080091fc
 8001adc:	08009210 	.word	0x08009210
 8001ae0:	08009224 	.word	0x08009224
 8001ae4:	0800923c 	.word	0x0800923c
 8001ae8:	08009250 	.word	0x08009250
 8001aec:	0800926c 	.word	0x0800926c
 8001af0:	20000118 	.word	0x20000118
 8001af4:	20000008 	.word	0x20000008
					if(value >= 1 && value <= 12){
 8001af8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	d826      	bhi.n	8001b4e <rtc_task+0x346>
						rtc_date.Month = value;
 8001b00:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001b04:	777b      	strb	r3, [r7, #29]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						continue;
					}

					/*************************Day**************************/
					xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8001b06:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc0 <rtc_task+0x4b8>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	f003 fa76 	bl	8005004 <xQueueGenericSend>
					xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	9200      	str	r2, [sp, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2000      	movs	r0, #0
 8001b28:	f004 fd3a 	bl	80065a0 <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	657b      	str	r3, [r7, #84]	@ 0x54

					value = getnumber(cmd->payload, cmd->len);
 8001b30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b34:	7a9b      	ldrb	r3, [r3, #10]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f7ff fe41 	bl	80017c0 <getnumber>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
					//valid value
					if(value >= 1 && value <= 7){
 8001b44:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <rtc_task+0x358>
 8001b4c:	e033      	b.n	8001bb6 <rtc_task+0x3ae>
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cc0 <rtc_task+0x4b8>)
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	495a      	ldr	r1, [pc, #360]	@ (8001cc4 <rtc_task+0x4bc>)
 8001b5a:	f003 fa53 	bl	8005004 <xQueueGenericSend>
						continue;
 8001b5e:	e0ad      	b.n	8001cbc <rtc_task+0x4b4>
					if(value >= 1 && value <= 7){
 8001b60:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	d826      	bhi.n	8001bb6 <rtc_task+0x3ae>
						rtc_date.WeekDay = value;
 8001b68:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001b6c:	773b      	strb	r3, [r7, #28]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						continue;
					}

					/*************************Year**************************/
					xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8001b6e:	4b54      	ldr	r3, [pc, #336]	@ (8001cc0 <rtc_task+0x4b8>)
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001b76:	2300      	movs	r3, #0
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	f003 fa42 	bl	8005004 <xQueueGenericSend>
					xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	9200      	str	r2, [sp, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f004 fd06 	bl	80065a0 <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	657b      	str	r3, [r7, #84]	@ 0x54

					value = getnumber(cmd->payload, cmd->len);
 8001b98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9c:	7a9b      	ldrb	r3, [r3, #10]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f7ff fe0d 	bl	80017c0 <getnumber>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
					//valid value
					if(value >= 0 && value <= 99){
 8001bac:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001bb0:	2b63      	cmp	r3, #99	@ 0x63
 8001bb2:	d909      	bls.n	8001bc8 <rtc_task+0x3c0>
 8001bb4:	e01c      	b.n	8001bf0 <rtc_task+0x3e8>
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bb6:	4b42      	ldr	r3, [pc, #264]	@ (8001cc0 <rtc_task+0x4b8>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	4940      	ldr	r1, [pc, #256]	@ (8001cc4 <rtc_task+0x4bc>)
 8001bc2:	f003 fa1f 	bl	8005004 <xQueueGenericSend>
						continue;
 8001bc6:	e079      	b.n	8001cbc <rtc_task+0x4b4>
						rtc_date.Year = value;
 8001bc8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001bcc:	77fb      	strb	r3, [r7, #31]
					}else{  //invalid value
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						continue;
					}

					rtc_configure_date(&rtc_date);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fab2 	bl	800113c <rtc_configure_date>
					xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001bd8:	4b39      	ldr	r3, [pc, #228]	@ (8001cc0 <rtc_task+0x4b8>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001be0:	2300      	movs	r3, #0
 8001be2:	f04f 32ff 	mov.w	r2, #4294967295
 8001be6:	f003 fa0d 	bl	8005004 <xQueueGenericSend>
					show_time_date();
 8001bea:	f7ff fa21 	bl	8001030 <show_time_date>
					break;
 8001bee:	e04f      	b.n	8001c90 <rtc_task+0x488>
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bf0:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <rtc_task+0x4b8>)
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfa:	4932      	ldr	r1, [pc, #200]	@ (8001cc4 <rtc_task+0x4bc>)
 8001bfc:	f003 fa02 	bl	8005004 <xQueueGenericSend>
						continue;
 8001c00:	e05c      	b.n	8001cbc <rtc_task+0x4b4>

				case 2: //Report over ITM printf
					xQueueSend(q_print, &msg_rtc_report, portMAX_DELAY);
 8001c02:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <rtc_task+0x4b8>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	f003 f9f8 	bl	8005004 <xQueueGenericSend>
					xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	9200      	str	r2, [sp, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2000      	movs	r0, #0
 8001c24:	f004 fcbc 	bl	80065a0 <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	657b      	str	r3, [r7, #84]	@ 0x54

					if(cmd->payload[0] == 'y'){
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b79      	cmp	r3, #121	@ 0x79
 8001c32:	d115      	bne.n	8001c60 <rtc_task+0x458>
						if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001c34:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <rtc_task+0x4c0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f005 fafd 	bl	8007238 <xTimerIsTimerActive>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d124      	bne.n	8001c8e <rtc_task+0x486>
							xTimerStart(rtc_timer,portMAX_DELAY);
 8001c44:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <rtc_task+0x4c0>)
 8001c46:	681c      	ldr	r4, [r3, #0]
 8001c48:	f004 f8f8 	bl	8005e3c <xTaskGetTickCount>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	2101      	movs	r1, #1
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f005 f803 	bl	8006c64 <xTimerGenericCommand>
					}else if(cmd->payload[0] == 'n'){
						xTimerStop(rtc_timer,portMAX_DELAY);
					}else{
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
					}
					break;
 8001c5e:	e016      	b.n	8001c8e <rtc_task+0x486>
					}else if(cmd->payload[0] == 'n'){
 8001c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b6e      	cmp	r3, #110	@ 0x6e
 8001c66:	d10a      	bne.n	8001c7e <rtc_task+0x476>
						xTimerStop(rtc_timer,portMAX_DELAY);
 8001c68:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <rtc_task+0x4c0>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	2200      	movs	r2, #0
 8001c76:	2103      	movs	r1, #3
 8001c78:	f004 fff4 	bl	8006c64 <xTimerGenericCommand>
					break;
 8001c7c:	e007      	b.n	8001c8e <rtc_task+0x486>
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <rtc_task+0x4b8>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	490e      	ldr	r1, [pc, #56]	@ (8001cc4 <rtc_task+0x4bc>)
 8001c8a:	f003 f9bb 	bl	8005004 <xQueueGenericSend>
					break;
 8001c8e:	bf00      	nop
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
			continue;
		}

		xTaskNotify(handle_menu_task, 0, eNoAction);
 8001c90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <rtc_task+0x4c4>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	f004 fcff 	bl	80066a0 <xTaskGenericNotify>
		curr_state = sMainMenu;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <rtc_task+0x4c8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e5c8      	b.n	800183c <rtc_task+0x34>
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001caa:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <rtc_task+0x4b8>)
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	4903      	ldr	r1, [pc, #12]	@ (8001cc4 <rtc_task+0x4bc>)
 8001cb6:	f003 f9a5 	bl	8005004 <xQueueGenericSend>
			continue;
 8001cba:	bf00      	nop
		xTaskNotifyWait(0, 0, 0, portMAX_DELAY);
 8001cbc:	e5be      	b.n	800183c <rtc_task+0x34>
 8001cbe:	bf00      	nop
 8001cc0:	20000118 	.word	0x20000118
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000130 	.word	0x20000130
 8001ccc:	20000100 	.word	0x20000100
 8001cd0:	20000134 	.word	0x20000134

08001cd4 <print_task>:

	}
}

void print_task(void *param)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <print_task+0x38>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f107 010c 	add.w	r1, r7, #12
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fb3b 	bl	8005364 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001cee:	68fc      	ldr	r4, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fa76 	bl	80001e4 <strlen>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	4621      	mov	r1, r4
 8001d02:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <print_task+0x3c>)
 8001d04:	f001 ffd4 	bl	8003cb0 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001d08:	bf00      	nop
 8001d0a:	e7e7      	b.n	8001cdc <print_task+0x8>
 8001d0c:	20000118 	.word	0x20000118
 8001d10:	200000b8 	.word	0x200000b8

08001d14 <cmd_handler_task>:
	}
}

void cmd_handler_task(void *param)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	6078      	str	r0, [r7, #4]
	command_t cmd;

	while(1)
	{
		/*Implement notify wait */
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f004 fc39 	bl	80065a0 <xTaskGenericNotifyWait>
 8001d2e:	6178      	str	r0, [r7, #20]

		if(ret == pdTRUE)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d1f2      	bne.n	8001d1c <cmd_handler_task+0x8>
		{
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f802 	bl	8001d44 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001d40:	e7ec      	b.n	8001d1c <cmd_handler_task+0x8>
	...

08001d44 <process_command>:
	}
}


static void process_command(command_t *cmd)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f835 	bl	8001dbc <extract_command>

	switch (curr_state)
 8001d52:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <process_command+0x68>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	dc24      	bgt.n	8001da4 <process_command+0x60>
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	da18      	bge.n	8001d90 <process_command+0x4c>
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <process_command+0x24>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d00a      	beq.n	8001d7c <process_command+0x38>

		case sRtcReport:
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
			break;
	}
}
 8001d66:	e01d      	b.n	8001da4 <process_command+0x60>
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <process_command+0x6c>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2303      	movs	r3, #3
 8001d74:	2100      	movs	r1, #0
 8001d76:	f004 fc93 	bl	80066a0 <xTaskGenericNotify>
			break;
 8001d7a:	e013      	b.n	8001da4 <process_command+0x60>
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <process_command+0x70>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2303      	movs	r3, #3
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f004 fc89 	bl	80066a0 <xTaskGenericNotify>
			break;
 8001d8e:	e009      	b.n	8001da4 <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <process_command+0x74>)
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	2300      	movs	r3, #0
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	f004 fc7f 	bl	80066a0 <xTaskGenericNotify>
			break;
 8001da2:	bf00      	nop
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000134 	.word	0x20000134
 8001db0:	20000100 	.word	0x20000100
 8001db4:	2000010c 	.word	0x2000010c
 8001db8:	20000110 	.word	0x20000110

08001dbc <extract_command>:


int extract_command(command_t *cmd)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <extract_command+0x70>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fc3f 	bl	800564c <uxQueueMessagesWaiting>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <extract_command+0x22>
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	e022      	b.n	8001e24 <extract_command+0x68>
	uint8_t i =0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001de2:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <extract_command+0x70>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f107 010f 	add.w	r1, r7, #15
 8001dea:	2200      	movs	r2, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fab9 	bl	8005364 <xQueueReceive>
 8001df2:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <extract_command+0x4c>
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	75fa      	strb	r2, [r7, #23]
 8001e00:	461a      	mov	r2, r3
 8001e02:	7bf9      	ldrb	r1, [r7, #15]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b0a      	cmp	r3, #10
 8001e0c:	d1e9      	bne.n	8001de2 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	2100      	movs	r1, #0
 8001e16:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	729a      	strb	r2, [r3, #10]

	return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000114 	.word	0x20000114

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e34:	f7ff fbac 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	@ (8001e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f006 f8a5 	bl	8007fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7fe fcc9 	bl	80007f8 <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e74:	08009304 	.word	0x08009304
  ldr r2, =_sbss
 8001e78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e7c:	200130cc 	.word	0x200130cc

08001e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_Init+0x40>)
 8001e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 f8d8 	bl	8002062 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f7ff f9f4 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff f950 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	200001d4 	.word	0x200001d4

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	200001d4 	.word	0x200001d4

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	@ (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	@ (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff4c 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208a:	f7ff ff61 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 800208e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	f7ff ffb1 	bl	8001ffc <NVIC_EncodePriority>
 800209a:	4602      	mov	r2, r0
 800209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff80 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff54 	bl	8001f6c <__NVIC_EnableIRQ>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020da:	f7ff ff09 	bl	8001ef0 <HAL_GetTick>
 80020de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d008      	beq.n	80020fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2280      	movs	r2, #128	@ 0x80
 80020f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e052      	b.n	80021a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0216 	bic.w	r2, r2, #22
 800210c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800211c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_DMA_Abort+0x62>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0208 	bic.w	r2, r2, #8
 800213c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214e:	e013      	b.n	8002178 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002150:	f7ff fece 	bl	8001ef0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b05      	cmp	r3, #5
 800215c:	d90c      	bls.n	8002178 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2203      	movs	r2, #3
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e015      	b.n	80021a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e4      	bne.n	8002150 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218a:	223f      	movs	r2, #63	@ 0x3f
 800218c:	409a      	lsls	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d004      	beq.n	80021ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2280      	movs	r2, #128	@ 0x80
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00c      	b.n	80021e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2205      	movs	r2, #5
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	@ 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e16b      	b.n	80024e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 815a 	bne.w	80024de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d005      	beq.n	8002242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	2b02      	cmp	r3, #2
 8002240:	d130      	bne.n	80022a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d017      	beq.n	80022e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80b4 	beq.w	80024de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b60      	ldr	r3, [pc, #384]	@ (80024fc <HAL_GPIO_Init+0x30c>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	4a5f      	ldr	r2, [pc, #380]	@ (80024fc <HAL_GPIO_Init+0x30c>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002384:	6453      	str	r3, [r2, #68]	@ 0x44
 8002386:	4b5d      	ldr	r3, [pc, #372]	@ (80024fc <HAL_GPIO_Init+0x30c>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002392:	4a5b      	ldr	r2, [pc, #364]	@ (8002500 <HAL_GPIO_Init+0x310>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a52      	ldr	r2, [pc, #328]	@ (8002504 <HAL_GPIO_Init+0x314>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02b      	beq.n	8002416 <HAL_GPIO_Init+0x226>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a51      	ldr	r2, [pc, #324]	@ (8002508 <HAL_GPIO_Init+0x318>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d025      	beq.n	8002412 <HAL_GPIO_Init+0x222>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a50      	ldr	r2, [pc, #320]	@ (800250c <HAL_GPIO_Init+0x31c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <HAL_GPIO_Init+0x21e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002510 <HAL_GPIO_Init+0x320>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x21a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002514 <HAL_GPIO_Init+0x324>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x216>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002518 <HAL_GPIO_Init+0x328>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x212>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4c      	ldr	r2, [pc, #304]	@ (800251c <HAL_GPIO_Init+0x32c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002520 <HAL_GPIO_Init+0x330>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x20a>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e00e      	b.n	8002418 <HAL_GPIO_Init+0x228>
 80023fa:	2308      	movs	r3, #8
 80023fc:	e00c      	b.n	8002418 <HAL_GPIO_Init+0x228>
 80023fe:	2306      	movs	r3, #6
 8002400:	e00a      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002402:	2305      	movs	r3, #5
 8002404:	e008      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002406:	2304      	movs	r3, #4
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x228>
 800240a:	2303      	movs	r3, #3
 800240c:	e004      	b.n	8002418 <HAL_GPIO_Init+0x228>
 800240e:	2302      	movs	r3, #2
 8002410:	e002      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002416:	2300      	movs	r3, #0
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f002 0203 	and.w	r2, r2, #3
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4093      	lsls	r3, r2
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002428:	4935      	ldr	r1, [pc, #212]	@ (8002500 <HAL_GPIO_Init+0x310>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_GPIO_Init+0x334>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <HAL_GPIO_Init+0x334>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b30      	ldr	r3, [pc, #192]	@ (8002524 <HAL_GPIO_Init+0x334>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a27      	ldr	r2, [pc, #156]	@ (8002524 <HAL_GPIO_Init+0x334>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248a:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <HAL_GPIO_Init+0x334>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <HAL_GPIO_Init+0x334>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_GPIO_Init+0x334>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d8:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <HAL_GPIO_Init+0x334>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	f67f ae90 	bls.w	800220c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3724      	adds	r7, #36	@ 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40013800 	.word	0x40013800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40020800 	.word	0x40020800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40021000 	.word	0x40021000
 8002518:	40021400 	.word	0x40021400
 800251c:	40021800 	.word	0x40021800
 8002520:	40021c00 	.word	0x40021c00
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e267      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d075      	beq.n	8002666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800257a:	4b88      	ldr	r3, [pc, #544]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b85      	ldr	r3, [pc, #532]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800258e:	2b08      	cmp	r3, #8
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b82      	ldr	r3, [pc, #520]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800259e:	d10b      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	4b7e      	ldr	r3, [pc, #504]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05b      	beq.n	8002664 <HAL_RCC_OscConfig+0x108>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d157      	bne.n	8002664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e242      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x74>
 80025c2:	4b76      	ldr	r3, [pc, #472]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a75      	ldr	r2, [pc, #468]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e01d      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b70      	ldr	r3, [pc, #448]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6f      	ldr	r2, [pc, #444]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6c      	ldr	r2, [pc, #432]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025f4:	4b69      	ldr	r3, [pc, #420]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a68      	ldr	r2, [pc, #416]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b66      	ldr	r3, [pc, #408]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a65      	ldr	r2, [pc, #404]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff fc6c 	bl	8001ef0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff fc68 	bl	8001ef0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e207      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0xc0>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fc58 	bl	8001ef0 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff fc54 	bl	8001ef0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1f3      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	4b51      	ldr	r3, [pc, #324]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0xe8>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d063      	beq.n	800273a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002672:	4b4a      	ldr	r3, [pc, #296]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267e:	4b47      	ldr	r3, [pc, #284]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002686:	2b08      	cmp	r3, #8
 8002688:	d11c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b44      	ldr	r3, [pc, #272]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1c7      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4937      	ldr	r1, [pc, #220]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	e03a      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026cc:	4b34      	ldr	r3, [pc, #208]	@ (80027a0 <HAL_RCC_OscConfig+0x244>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7ff fc0d 	bl	8001ef0 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026da:	f7ff fc09 	bl	8001ef0 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1a8      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4925      	ldr	r1, [pc, #148]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_RCC_OscConfig+0x244>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff fbec 	bl	8001ef0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff fbe8 	bl	8001ef0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e187      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d036      	beq.n	80027b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_RCC_OscConfig+0x248>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7ff fbcc 	bl	8001ef0 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275c:	f7ff fbc8 	bl	8001ef0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e167      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x200>
 800277a:	e01b      	b.n	80027b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_OscConfig+0x248>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7ff fbb5 	bl	8001ef0 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	e00e      	b.n	80027a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278a:	f7ff fbb1 	bl	8001ef0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d907      	bls.n	80027a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e150      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 800279c:	40023800 	.word	0x40023800
 80027a0:	42470000 	.word	0x42470000
 80027a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a8:	4b88      	ldr	r3, [pc, #544]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ea      	bne.n	800278a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8097 	beq.w	80028f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4b81      	ldr	r3, [pc, #516]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b7d      	ldr	r3, [pc, #500]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a7c      	ldr	r2, [pc, #496]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b7a      	ldr	r3, [pc, #488]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b77      	ldr	r3, [pc, #476]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fe:	4b74      	ldr	r3, [pc, #464]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a73      	ldr	r2, [pc, #460]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280a:	f7ff fb71 	bl	8001ef0 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002812:	f7ff fb6d 	bl	8001ef0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e10c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	4b6a      	ldr	r3, [pc, #424]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x2ea>
 8002838:	4b64      	ldr	r3, [pc, #400]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a63      	ldr	r2, [pc, #396]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
 8002844:	e01c      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b05      	cmp	r3, #5
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x30c>
 800284e:	4b5f      	ldr	r3, [pc, #380]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	4a5e      	ldr	r2, [pc, #376]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6713      	str	r3, [r2, #112]	@ 0x70
 800285a:	4b5c      	ldr	r3, [pc, #368]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	4a5b      	ldr	r2, [pc, #364]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	@ 0x70
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002868:	4b58      	ldr	r3, [pc, #352]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	@ 0x70
 8002874:	4b55      	ldr	r3, [pc, #340]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a54      	ldr	r2, [pc, #336]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7ff fb32 	bl	8001ef0 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7ff fb2e 	bl	8001ef0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0cb      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ee      	beq.n	8002890 <HAL_RCC_OscConfig+0x334>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7ff fb1c 	bl	8001ef0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7ff fb18 	bl	8001ef0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0b5      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d2:	4b3e      	ldr	r3, [pc, #248]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ee      	bne.n	80028bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a38      	ldr	r2, [pc, #224]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a1 	beq.w	8002a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fa:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d05c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d141      	bne.n	8002992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b31      	ldr	r3, [pc, #196]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff faec 	bl	8001ef0 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff fae8 	bl	8001ef0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e087      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	3b01      	subs	r3, #1
 8002954:	041b      	lsls	r3, r3, #16
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	491b      	ldr	r1, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7ff fac1 	bl	8001ef0 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7ff fabd 	bl	8001ef0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e05c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x416>
 8002990:	e054      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff faaa 	bl	8001ef0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7ff faa6 	bl	8001ef0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e045      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e038      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x4ec>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d121      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cc      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b65      	ldr	r3, [pc, #404]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a52      	ldr	r2, [pc, #328]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d044      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d119      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e067      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b37      	ldr	r3, [pc, #220]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4934      	ldr	r1, [pc, #208]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7ff f9d8 	bl	8001ef0 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7ff f9d4 	bl	8001ef0 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d20c      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f821 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fb54 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	080092a8 	.word	0x080092a8
 8002c10:	20000004 	.word	0x20000004
 8002c14:	2000000c 	.word	0x2000000c

08002c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c1c:	b094      	sub	sp, #80	@ 0x50
 8002c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c30:	4b79      	ldr	r3, [pc, #484]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d00d      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x40>
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	f200 80e1 	bhi.w	8002e04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x34>
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4a:	e0db      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b73      	ldr	r3, [pc, #460]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c50:	e0db      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b73      	ldr	r3, [pc, #460]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c56:	e0d8      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c58:	4b6f      	ldr	r3, [pc, #444]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c62:	4b6d      	ldr	r3, [pc, #436]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c82:	2300      	movs	r3, #0
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	462b      	mov	r3, r5
 8002c8e:	f04f 0000 	mov.w	r0, #0
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	0159      	lsls	r1, r3, #5
 8002c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9c:	0150      	lsls	r0, r2, #5
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	1a51      	subs	r1, r2, r1
 8002ca6:	6139      	str	r1, [r7, #16]
 8002ca8:	4629      	mov	r1, r5
 8002caa:	eb63 0301 	sbc.w	r3, r3, r1
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	018b      	lsls	r3, r1, #6
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	018a      	lsls	r2, r1, #6
 8002cca:	4651      	mov	r1, sl
 8002ccc:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd0:	4659      	mov	r1, fp
 8002cd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cea:	4690      	mov	r8, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	eb18 0303 	adds.w	r3, r8, r3
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	462b      	mov	r3, r5
 8002cf8:	eb49 0303 	adc.w	r3, r9, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	024b      	lsls	r3, r1, #9
 8002d0e:	4621      	mov	r1, r4
 8002d10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d14:	4621      	mov	r1, r4
 8002d16:	024a      	lsls	r2, r1, #9
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1e:	2200      	movs	r2, #0
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d28:	f7fd faba 	bl	80002a0 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4613      	mov	r3, r2
 8002d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d34:	e058      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d36:	4b38      	ldr	r3, [pc, #224]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	4611      	mov	r1, r2
 8002d42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	0159      	lsls	r1, r3, #5
 8002d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d62:	0150      	lsls	r0, r2, #5
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4641      	mov	r1, r8
 8002d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d6e:	4649      	mov	r1, r9
 8002d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d88:	ebb2 040a 	subs.w	r4, r2, sl
 8002d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	00eb      	lsls	r3, r5, #3
 8002d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9e:	00e2      	lsls	r2, r4, #3
 8002da0:	4614      	mov	r4, r2
 8002da2:	461d      	mov	r5, r3
 8002da4:	4643      	mov	r3, r8
 8002da6:	18e3      	adds	r3, r4, r3
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb45 0303 	adc.w	r3, r5, r3
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	028b      	lsls	r3, r1, #10
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc8:	4621      	mov	r1, r4
 8002dca:	028a      	lsls	r2, r1, #10
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	61fa      	str	r2, [r7, #28]
 8002dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ddc:	f7fd fa60 	bl	80002a0 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	3301      	adds	r3, #1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3750      	adds	r7, #80	@ 0x50
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	007a1200 	.word	0x007a1200

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b03      	ldr	r3, [pc, #12]	@ (8002e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	@ (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	080092b8 	.word	0x080092b8

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffdc 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4903      	ldr	r1, [pc, #12]	@ (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	080092b8 	.word	0x080092b8

08002e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	220f      	movs	r2, #15
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ec0:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <HAL_RCC_GetClockConfig+0x60>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0207 	and.w	r2, r3, #7
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40023c00 	.word	0x40023c00

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d035      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f18:	4b62      	ldr	r3, [pc, #392]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1e:	f7fe ffe7 	bl	8001ef0 <HAL_GetTick>
 8002f22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f26:	f7fe ffe3 	bl	8001ef0 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0b0      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f38:	4b5b      	ldr	r3, [pc, #364]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	019a      	lsls	r2, r3, #6
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	071b      	lsls	r3, r3, #28
 8002f50:	4955      	ldr	r1, [pc, #340]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f58:	4b52      	ldr	r3, [pc, #328]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f5e:	f7fe ffc7 	bl	8001ef0 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f66:	f7fe ffc3 	bl	8001ef0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e090      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f78:	4b4b      	ldr	r3, [pc, #300]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8083 	beq.w	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b44      	ldr	r3, [pc, #272]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a43      	ldr	r2, [pc, #268]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b41      	ldr	r3, [pc, #260]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fae:	4b3f      	ldr	r3, [pc, #252]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a3e      	ldr	r2, [pc, #248]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fba:	f7fe ff99 	bl	8001ef0 <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc2:	f7fe ff95 	bl	8001ef0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e062      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002fd4:	4b35      	ldr	r3, [pc, #212]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe0:	4b31      	ldr	r3, [pc, #196]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02f      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d028      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003006:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003008:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800300e:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003014:	4a24      	ldr	r2, [pc, #144]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800301a:	4b23      	ldr	r3, [pc, #140]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d114      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe ff63 	bl	8001ef0 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe ff5f 	bl	8001ef0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e02a      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800305c:	d10d      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800305e:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800306e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003072:	490d      	ldr	r1, [pc, #52]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]
 8003078:	e005      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800307a:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4a0a      	ldr	r2, [pc, #40]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003080:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003084:	6093      	str	r3, [r2, #8]
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003088:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003092:	4905      	ldr	r1, [pc, #20]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	42470068 	.word	0x42470068
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40007000 	.word	0x40007000
 80030b0:	42470e40 	.word	0x42470e40

080030b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e073      	b.n	80031b2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7f5b      	ldrb	r3, [r3, #29]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe f866 	bl	80011ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d055      	beq.n	80031a0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	22ca      	movs	r2, #202	@ 0xca
 80030fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2253      	movs	r2, #83	@ 0x53
 8003102:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fa49 	bl	800359c <RTC_EnterInitMode>
 800310a:	4603      	mov	r3, r0
 800310c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d12c      	bne.n	800316e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003126:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6899      	ldr	r1, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68d2      	ldr	r2, [r2, #12]
 800314e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6919      	ldr	r1, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	041a      	lsls	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fa50 	bl	800360a <RTC_ExitInitMode>
 800316a:	4603      	mov	r3, r0
 800316c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d110      	bne.n	8003196 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003182:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	22ff      	movs	r2, #255	@ 0xff
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24
 800319e:	e001      	b.n	80031a4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031ba:	b590      	push	{r4, r7, lr}
 80031bc:	b087      	sub	sp, #28
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	7f1b      	ldrb	r3, [r3, #28]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_RTC_SetTime+0x1c>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e087      	b.n	80032e6 <HAL_RTC_SetTime+0x12c>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2202      	movs	r2, #2
 80031e0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d126      	bne.n	8003236 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fa27 	bl	8003654 <RTC_ByteToBcd2>
 8003206:	4603      	mov	r3, r0
 8003208:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa20 	bl	8003654 <RTC_ByteToBcd2>
 8003214:	4603      	mov	r3, r0
 8003216:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003218:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	789b      	ldrb	r3, [r3, #2]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fa18 	bl	8003654 <RTC_ByteToBcd2>
 8003224:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003226:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	78db      	ldrb	r3, [r3, #3]
 800322e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e018      	b.n	8003268 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003256:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800325c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	78db      	ldrb	r3, [r3, #3]
 8003262:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	22ca      	movs	r2, #202	@ 0xca
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2253      	movs	r2, #83	@ 0x53
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f98f 	bl	800359c <RTC_EnterInitMode>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d120      	bne.n	80032ca <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003292:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003296:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f9a2 	bl	800360a <RTC_ExitInitMode>
 80032c6:	4603      	mov	r3, r0
 80032c8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	22ff      	movs	r2, #255	@ 0xff
 80032dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]

  return status;
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}

080032ee <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003320:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003324:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	0d9b      	lsrs	r3, r3, #22
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d11a      	bne.n	80033a0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f98e 	bl	8003690 <RTC_Bcd2ToByte>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f985 	bl	8003690 <RTC_Bcd2ToByte>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	789b      	ldrb	r3, [r3, #2]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f97c 	bl	8003690 <RTC_Bcd2ToByte>
 8003398:	4603      	mov	r3, r0
 800339a:	461a      	mov	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033aa:	b590      	push	{r4, r7, lr}
 80033ac:	b087      	sub	sp, #28
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	7f1b      	ldrb	r3, [r3, #28]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_RTC_SetDate+0x1c>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e071      	b.n	80034aa <HAL_RTC_SetDate+0x100>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2202      	movs	r2, #2
 80033d0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10e      	bne.n	80033f6 <HAL_RTC_SetDate+0x4c>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	f023 0310 	bic.w	r3, r3, #16
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	330a      	adds	r3, #10
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11c      	bne.n	8003436 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	78db      	ldrb	r3, [r3, #3]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f927 	bl	8003654 <RTC_ByteToBcd2>
 8003406:	4603      	mov	r3, r0
 8003408:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f920 	bl	8003654 <RTC_ByteToBcd2>
 8003414:	4603      	mov	r3, r0
 8003416:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003418:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	789b      	ldrb	r3, [r3, #2]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f918 	bl	8003654 <RTC_ByteToBcd2>
 8003424:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003426:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e00e      	b.n	8003454 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003442:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003448:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	22ca      	movs	r2, #202	@ 0xca
 800345a:	625a      	str	r2, [r3, #36]	@ 0x24
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2253      	movs	r2, #83	@ 0x53
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f899 	bl	800359c <RTC_EnterInitMode>
 800346a:	4603      	mov	r3, r0
 800346c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10c      	bne.n	800348e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800347e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003482:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f8c0 	bl	800360a <RTC_ExitInitMode>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	22ff      	movs	r2, #255	@ 0xff
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]

  return status;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}

080034b2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80034d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	0b5b      	lsrs	r3, r3, #13
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d11a      	bne.n	8003546 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	78db      	ldrb	r3, [r3, #3]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f8bb 	bl	8003690 <RTC_Bcd2ToByte>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	785b      	ldrb	r3, [r3, #1]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f8b2 	bl	8003690 <RTC_Bcd2ToByte>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	789b      	ldrb	r3, [r3, #2]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f8a9 	bl	8003690 <RTC_Bcd2ToByte>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0d      	ldr	r2, [pc, #52]	@ (8003598 <HAL_RTC_WaitForSynchro+0x48>)
 8003562:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7fe fcc4 	bl	8001ef0 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800356a:	e009      	b.n	8003580 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800356c:	f7fe fcc0 	bl	8001ef0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800357a:	d901      	bls.n	8003580 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e007      	b.n	8003590 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0ee      	beq.n	800356c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	00017f5f 	.word	0x00017f5f

0800359c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d122      	bne.n	8003600 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035ca:	f7fe fc91 	bl	8001ef0 <HAL_GetTick>
 80035ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035d0:	e00c      	b.n	80035ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035d2:	f7fe fc8d 	bl	8001ef0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035e0:	d904      	bls.n	80035ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2204      	movs	r2, #4
 80035e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <RTC_EnterInitMode+0x64>
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d1e8      	bne.n	80035d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003624:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff8b 	bl	8003550 <HAL_RTC_WaitForSynchro>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2204      	movs	r2, #4
 8003644:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003662:	e005      	b.n	8003670 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	3b0a      	subs	r3, #10
 800366e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	2b09      	cmp	r3, #9
 8003674:	d8f6      	bhi.n	8003664 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	b2da      	uxtb	r2, r3
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	4313      	orrs	r3, r2
 8003682:	b2db      	uxtb	r3, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4413      	add	r3, r2
 80036be:	b2db      	uxtb	r3, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e041      	b.n	8003762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f839 	bl	800376a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f000 f9c0 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d001      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04e      	b.n	8003836 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a23      	ldr	r2, [pc, #140]	@ (8003844 <HAL_TIM_Base_Start_IT+0xc4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d022      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c2:	d01d      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003848 <HAL_TIM_Base_Start_IT+0xc8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d018      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1e      	ldr	r2, [pc, #120]	@ (800384c <HAL_TIM_Base_Start_IT+0xcc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003850 <HAL_TIM_Base_Start_IT+0xd0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003854 <HAL_TIM_Base_Start_IT+0xd4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a19      	ldr	r2, [pc, #100]	@ (8003858 <HAL_TIM_Base_Start_IT+0xd8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	@ (800385c <HAL_TIM_Base_Start_IT+0xdc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40001800 	.word	0x40001800

08003860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0202 	mvn.w	r2, #2
 8003894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8d2 	bl	8003a54 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8c4 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8d5 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0204 	mvn.w	r2, #4
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8ac 	bl	8003a54 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f89e 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8af 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0208 	mvn.w	r2, #8
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f886 	bl	8003a54 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f878 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f889 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f860 	bl	8003a54 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f852 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f863 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0201 	mvn.w	r2, #1
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fad2 	bl	8000f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f906 	bl	8003bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f834 	bl	8003a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0220 	mvn.w	r2, #32
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8d8 	bl	8003be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a46      	ldr	r2, [pc, #280]	@ (8003bbc <TIM_Base_SetConfig+0x12c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aae:	d00f      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a43      	ldr	r2, [pc, #268]	@ (8003bc0 <TIM_Base_SetConfig+0x130>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a42      	ldr	r2, [pc, #264]	@ (8003bc4 <TIM_Base_SetConfig+0x134>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a41      	ldr	r2, [pc, #260]	@ (8003bc8 <TIM_Base_SetConfig+0x138>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a40      	ldr	r2, [pc, #256]	@ (8003bcc <TIM_Base_SetConfig+0x13c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a35      	ldr	r2, [pc, #212]	@ (8003bbc <TIM_Base_SetConfig+0x12c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af0:	d027      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a32      	ldr	r2, [pc, #200]	@ (8003bc0 <TIM_Base_SetConfig+0x130>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d023      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a31      	ldr	r2, [pc, #196]	@ (8003bc4 <TIM_Base_SetConfig+0x134>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01f      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a30      	ldr	r2, [pc, #192]	@ (8003bc8 <TIM_Base_SetConfig+0x138>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bcc <TIM_Base_SetConfig+0x13c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d017      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd0 <TIM_Base_SetConfig+0x140>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd4 <TIM_Base_SetConfig+0x144>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00f      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd8 <TIM_Base_SetConfig+0x148>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <TIM_Base_SetConfig+0x14c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2a      	ldr	r2, [pc, #168]	@ (8003be0 <TIM_Base_SetConfig+0x150>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a29      	ldr	r2, [pc, #164]	@ (8003be4 <TIM_Base_SetConfig+0x154>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a10      	ldr	r2, [pc, #64]	@ (8003bbc <TIM_Base_SetConfig+0x12c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_Base_SetConfig+0xf8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <TIM_Base_SetConfig+0x13c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d103      	bne.n	8003b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	611a      	str	r2, [r3, #16]
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40000c00 	.word	0x40000c00
 8003bcc:	40010400 	.word	0x40010400
 8003bd0:	40014000 	.word	0x40014000
 8003bd4:	40014400 	.word	0x40014400
 8003bd8:	40014800 	.word	0x40014800
 8003bdc:	40001800 	.word	0x40001800
 8003be0:	40001c00 	.word	0x40001c00
 8003be4:	40002000 	.word	0x40002000

08003be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e042      	b.n	8003ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd fae2 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	@ 0x24
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fdbd 	bl	80047d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d175      	bne.n	8003dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_UART_Transmit+0x2c>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e06e      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2221      	movs	r2, #33	@ 0x21
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fe f8ff 	bl	8001ef0 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Transmit+0x6c>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d24:	e02e      	b.n	8003d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	@ 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fb1f 	bl	8004374 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e03a      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3302      	adds	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e007      	b.n	8003d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1cb      	bne.n	8003d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2140      	movs	r1, #64	@ 0x40
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 faeb 	bl	8004374 <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d112      	bne.n	8003e06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Receive_IT+0x26>
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e00b      	b.n	8003e08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fb12 	bl	8004426 <UART_Start_Receive_IT>
 8003e02:	4603      	mov	r3, r0
 8003e04:	e000      	b.n	8003e08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b0ba      	sub	sp, #232	@ 0xe8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10f      	bne.n	8003e76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_UART_IRQHandler+0x66>
 8003e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fbf2 	bl	8004658 <UART_Receive_IT>
      return;
 8003e74:	e25b      	b.n	800432e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80de 	beq.w	800403c <HAL_UART_IRQHandler+0x22c>
 8003e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80d1 	beq.w	800403c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_UART_IRQHandler+0xae>
 8003ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f043 0201 	orr.w	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xd2>
 8003eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f043 0202 	orr.w	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <HAL_UART_IRQHandler+0xf6>
 8003eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	f043 0204 	orr.w	r2, r3, #4
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d011      	beq.n	8003f36 <HAL_UART_IRQHandler+0x126>
 8003f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f043 0208 	orr.w	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 81f2 	beq.w	8004324 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_UART_IRQHandler+0x14e>
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fb7d 	bl	8004658 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f68:	2b40      	cmp	r3, #64	@ 0x40
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <HAL_UART_IRQHandler+0x17a>
 8003f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d04f      	beq.n	800402a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fa85 	bl	800449a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9a:	2b40      	cmp	r3, #64	@ 0x40
 8003f9c:	d141      	bne.n	8004022 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3314      	adds	r3, #20
 8003fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3314      	adds	r3, #20
 8003fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1d9      	bne.n	8003f9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d013      	beq.n	800401a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80041f0 <HAL_UART_IRQHandler+0x3e0>)
 8003ff8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe f8d4 	bl	80021ac <HAL_DMA_Abort_IT>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004014:	4610      	mov	r0, r2
 8004016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004018:	e00e      	b.n	8004038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f994 	bl	8004348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	e00a      	b.n	8004038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f990 	bl	8004348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	e006      	b.n	8004038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f98c 	bl	8004348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004036:	e175      	b.n	8004324 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	bf00      	nop
    return;
 800403a:	e173      	b.n	8004324 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004040:	2b01      	cmp	r3, #1
 8004042:	f040 814f 	bne.w	80042e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8148 	beq.w	80042e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8141 	beq.w	80042e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b40      	cmp	r3, #64	@ 0x40
 8004084:	f040 80b6 	bne.w	80041f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004094:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8145 	beq.w	8004328 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040a6:	429a      	cmp	r2, r3
 80040a8:	f080 813e 	bcs.w	8004328 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040be:	f000 8088 	beq.w	80041d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1d9      	bne.n	80040c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800411e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004132:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004136:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800413a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004144:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e1      	bne.n	800410e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800415a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800415c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3314      	adds	r3, #20
 800416a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800416e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004170:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004174:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800417c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e3      	bne.n	800414a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041a2:	f023 0310 	bic.w	r3, r3, #16
 80041a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e3      	bne.n	8004190 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd ff7d 	bl	80020cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f8b7 	bl	800435c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041ee:	e09b      	b.n	8004328 <HAL_UART_IRQHandler+0x518>
 80041f0:	08004561 	.word	0x08004561
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 808e 	beq.w	800432c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8089 	beq.w	800432c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800422a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004230:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800423e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004240:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004244:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800424c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e3      	bne.n	800421a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3314      	adds	r3, #20
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	623b      	str	r3, [r7, #32]
   return(result);
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3314      	adds	r3, #20
 8004272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004276:	633a      	str	r2, [r7, #48]	@ 0x30
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800427c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e3      	bne.n	8004252 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0310 	bic.w	r3, r3, #16
 80042ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042bc:	61fa      	str	r2, [r7, #28]
 80042be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	69b9      	ldr	r1, [r7, #24]
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	617b      	str	r3, [r7, #20]
   return(result);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e3      	bne.n	8004298 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042da:	4619      	mov	r1, r3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f83d 	bl	800435c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042e2:	e023      	b.n	800432c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HAL_UART_IRQHandler+0x4f4>
 80042f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f943 	bl	8004588 <UART_Transmit_IT>
    return;
 8004302:	e014      	b.n	800432e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <HAL_UART_IRQHandler+0x51e>
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f983 	bl	8004628 <UART_EndTransmit_IT>
    return;
 8004322:	e004      	b.n	800432e <HAL_UART_IRQHandler+0x51e>
    return;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <HAL_UART_IRQHandler+0x51e>
      return;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <HAL_UART_IRQHandler+0x51e>
      return;
 800432c:	bf00      	nop
  }
}
 800432e:	37e8      	adds	r7, #232	@ 0xe8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004384:	e03b      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d037      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fd fdaf 	bl	8001ef0 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e03a      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d023      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b80      	cmp	r3, #128	@ 0x80
 80043ba:	d020      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b40      	cmp	r3, #64	@ 0x40
 80043c0:	d01d      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d116      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f857 	bl	800449a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2208      	movs	r2, #8
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e00f      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	429a      	cmp	r2, r3
 800441a:	d0b4      	beq.n	8004386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	4613      	mov	r3, r2
 8004432:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2222      	movs	r2, #34	@ 0x22
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800446a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0220 	orr.w	r2, r2, #32
 800448a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800449a:	b480      	push	{r7}
 800449c:	b095      	sub	sp, #84	@ 0x54
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80044c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	2b01      	cmp	r3, #1
 8004510:	d119      	bne.n	8004546 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	60bb      	str	r3, [r7, #8]
   return(result);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f023 0310 	bic.w	r3, r3, #16
 8004528:	647b      	str	r3, [r7, #68]	@ 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004532:	61ba      	str	r2, [r7, #24]
 8004534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6979      	ldr	r1, [r7, #20]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	613b      	str	r3, [r7, #16]
   return(result);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004554:	bf00      	nop
 8004556:	3754      	adds	r7, #84	@ 0x54
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fee4 	bl	8004348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b21      	cmp	r3, #33	@ 0x21
 800459a:	d13e      	bne.n	800461a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a4:	d114      	bne.n	80045d0 <UART_Transmit_IT+0x48>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d110      	bne.n	80045d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	1c9a      	adds	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]
 80045ce:	e008      	b.n	80045e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	1c59      	adds	r1, r3, #1
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6211      	str	r1, [r2, #32]
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4619      	mov	r1, r3
 80045f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004604:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004614:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800463e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fe73 	bl	8004334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	@ 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b22      	cmp	r3, #34	@ 0x22
 800466a:	f040 80ae 	bne.w	80047ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004676:	d117      	bne.n	80046a8 <UART_Receive_IT+0x50>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d113      	bne.n	80046a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	b29a      	uxth	r2, r3
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a0:	1c9a      	adds	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80046a6:	e026      	b.n	80046f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ba:	d007      	beq.n	80046cc <UART_Receive_IT+0x74>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <UART_Receive_IT+0x82>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e008      	b.n	80046ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29b      	uxth	r3, r3
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4619      	mov	r1, r3
 8004704:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004706:	2b00      	cmp	r3, #0
 8004708:	d15d      	bne.n	80047c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0220 	bic.w	r2, r2, #32
 8004718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004728:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	d135      	bne.n	80047bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	613b      	str	r3, [r7, #16]
   return(result);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f023 0310 	bic.w	r3, r3, #16
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004776:	623a      	str	r2, [r7, #32]
 8004778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	69f9      	ldr	r1, [r7, #28]
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	61bb      	str	r3, [r7, #24]
   return(result);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b10      	cmp	r3, #16
 8004796:	d10a      	bne.n	80047ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fdd1 	bl	800435c <HAL_UARTEx_RxEventCallback>
 80047ba:	e002      	b.n	80047c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fc fb8d 	bl	8000edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e002      	b.n	80047cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3730      	adds	r7, #48	@ 0x30
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b0c0      	sub	sp, #256	@ 0x100
 80047da:	af00      	add	r7, sp, #0
 80047dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	68d9      	ldr	r1, [r3, #12]
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	ea40 0301 	orr.w	r3, r0, r1
 80047fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	431a      	orrs	r2, r3
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800482c:	f021 010c 	bic.w	r1, r1, #12
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800483a:	430b      	orrs	r3, r1
 800483c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484e:	6999      	ldr	r1, [r3, #24]
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	ea40 0301 	orr.w	r3, r0, r1
 800485a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa0 <UART_SetConfig+0x2cc>)
 8004864:	429a      	cmp	r2, r3
 8004866:	d005      	beq.n	8004874 <UART_SetConfig+0xa0>
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa4 <UART_SetConfig+0x2d0>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d104      	bne.n	800487e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7fe faf6 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004878:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800487c:	e003      	b.n	8004886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800487e:	f7fe fadd 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8004882:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004890:	f040 810c 	bne.w	8004aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004898:	2200      	movs	r2, #0
 800489a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800489e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	1891      	adds	r1, r2, r2
 80048ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048ae:	415b      	adcs	r3, r3
 80048b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048b6:	4621      	mov	r1, r4
 80048b8:	eb12 0801 	adds.w	r8, r2, r1
 80048bc:	4629      	mov	r1, r5
 80048be:	eb43 0901 	adc.w	r9, r3, r1
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d6:	4690      	mov	r8, r2
 80048d8:	4699      	mov	r9, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	eb18 0303 	adds.w	r3, r8, r3
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048e4:	462b      	mov	r3, r5
 80048e6:	eb49 0303 	adc.w	r3, r9, r3
 80048ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004902:	460b      	mov	r3, r1
 8004904:	18db      	adds	r3, r3, r3
 8004906:	653b      	str	r3, [r7, #80]	@ 0x50
 8004908:	4613      	mov	r3, r2
 800490a:	eb42 0303 	adc.w	r3, r2, r3
 800490e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004918:	f7fb fcc2 	bl	80002a0 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4b61      	ldr	r3, [pc, #388]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004922:	fba3 2302 	umull	r2, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	011c      	lsls	r4, r3, #4
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004934:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	1891      	adds	r1, r2, r2
 8004942:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004944:	415b      	adcs	r3, r3
 8004946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800494c:	4641      	mov	r1, r8
 800494e:	eb12 0a01 	adds.w	sl, r2, r1
 8004952:	4649      	mov	r1, r9
 8004954:	eb43 0b01 	adc.w	fp, r3, r1
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496c:	4692      	mov	sl, r2
 800496e:	469b      	mov	fp, r3
 8004970:	4643      	mov	r3, r8
 8004972:	eb1a 0303 	adds.w	r3, sl, r3
 8004976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800497a:	464b      	mov	r3, r9
 800497c:	eb4b 0303 	adc.w	r3, fp, r3
 8004980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004990:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	643b      	str	r3, [r7, #64]	@ 0x40
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049ae:	f7fb fc77 	bl	80002a0 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 80049ba:	fba3 2301 	umull	r2, r3, r3, r1
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2264      	movs	r2, #100	@ 0x64
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	1acb      	subs	r3, r1, r3
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049ce:	4b36      	ldr	r3, [pc, #216]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 80049d0:	fba3 2302 	umull	r2, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049dc:	441c      	add	r4, r3
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049f8:	415b      	adcs	r3, r3
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a54:	460b      	mov	r3, r1
 8004a56:	18db      	adds	r3, r3, r3
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a6a:	f7fb fc19 	bl	80002a0 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	2164      	movs	r1, #100	@ 0x64
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	3332      	adds	r3, #50	@ 0x32
 8004a86:	4a08      	ldr	r2, [pc, #32]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 0207 	and.w	r2, r3, #7
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4422      	add	r2, r4
 8004a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a9c:	e106      	b.n	8004cac <UART_SetConfig+0x4d8>
 8004a9e:	bf00      	nop
 8004aa0:	40011000 	.word	0x40011000
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004abe:	4642      	mov	r2, r8
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	1891      	adds	r1, r2, r2
 8004ac4:	6239      	str	r1, [r7, #32]
 8004ac6:	415b      	adcs	r3, r3
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ace:	4641      	mov	r1, r8
 8004ad0:	1854      	adds	r4, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb43 0501 	adc.w	r5, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	00eb      	lsls	r3, r5, #3
 8004ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae6:	00e2      	lsls	r2, r4, #3
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	4643      	mov	r3, r8
 8004aee:	18e3      	adds	r3, r4, r3
 8004af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af4:	464b      	mov	r3, r9
 8004af6:	eb45 0303 	adc.w	r3, r5, r3
 8004afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	008b      	lsls	r3, r1, #2
 8004b1e:	4621      	mov	r1, r4
 8004b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b24:	4621      	mov	r1, r4
 8004b26:	008a      	lsls	r2, r1, #2
 8004b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b2c:	f7fb fbb8 	bl	80002a0 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4b60      	ldr	r3, [pc, #384]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004b36:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	011c      	lsls	r4, r3, #4
 8004b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	1891      	adds	r1, r2, r2
 8004b56:	61b9      	str	r1, [r7, #24]
 8004b58:	415b      	adcs	r3, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b60:	4641      	mov	r1, r8
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	6139      	str	r1, [r7, #16]
 8004b66:	4649      	mov	r1, r9
 8004b68:	414b      	adcs	r3, r1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b78:	4659      	mov	r1, fp
 8004b7a:	00cb      	lsls	r3, r1, #3
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b82:	4651      	mov	r1, sl
 8004b84:	00ca      	lsls	r2, r1, #3
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b94:	464b      	mov	r3, r9
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004baa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bb8:	4649      	mov	r1, r9
 8004bba:	008b      	lsls	r3, r1, #2
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	008a      	lsls	r2, r1, #2
 8004bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bca:	f7fb fb69 	bl	80002a0 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4b38      	ldr	r3, [pc, #224]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2264      	movs	r2, #100	@ 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	1acb      	subs	r3, r1, r3
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	3332      	adds	r3, #50	@ 0x32
 8004be8:	4a33      	ldr	r2, [pc, #204]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bf4:	441c      	add	r4, r3
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c14:	4641      	mov	r1, r8
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	414b      	adcs	r3, r1
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	00cb      	lsls	r3, r1, #3
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c36:	4651      	mov	r1, sl
 8004c38:	00ca      	lsls	r2, r1, #3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4642      	mov	r2, r8
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c46:	464b      	mov	r3, r9
 8004c48:	460a      	mov	r2, r1
 8004c4a:	eb42 0303 	adc.w	r3, r2, r3
 8004c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c68:	4649      	mov	r1, r9
 8004c6a:	008b      	lsls	r3, r1, #2
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c72:	4641      	mov	r1, r8
 8004c74:	008a      	lsls	r2, r1, #2
 8004c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c7a:	f7fb fb11 	bl	80002a0 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004c84:	fba3 1302 	umull	r1, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2164      	movs	r1, #100	@ 0x64
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	3332      	adds	r3, #50	@ 0x32
 8004c96:	4a08      	ldr	r2, [pc, #32]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4422      	add	r2, r4
 8004caa:	609a      	str	r2, [r3, #8]
}
 8004cac:	bf00      	nop
 8004cae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb8:	51eb851f 	.word	0x51eb851f

08004cbc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 0208 	add.w	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f103 0208 	add.w	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f103 0208 	add.w	r2, r3, #8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d103      	bne.n	8004d7e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e00c      	b.n	8004d98 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3308      	adds	r3, #8
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e002      	b.n	8004d8c <vListInsert+0x2e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d2f6      	bcs.n	8004d86 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6892      	ldr	r2, [r2, #8]
 8004de6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6852      	ldr	r2, [r2, #4]
 8004df0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d103      	bne.n	8004e04 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10b      	bne.n	8004e50 <xQueueGenericReset+0x2c>
        __asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	60bb      	str	r3, [r7, #8]
    }
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	e7fd      	b.n	8004e4c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004e50:	f002 fbf4 	bl	800763c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	441a      	add	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e80:	3b01      	subs	r3, #1
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	441a      	add	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	22ff      	movs	r2, #255	@ 0xff
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	22ff      	movs	r2, #255	@ 0xff
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d114      	bne.n	8004ed0 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01a      	beq.n	8004ee4 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3310      	adds	r3, #16
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f93a 	bl	800612c <xTaskRemoveFromEventList>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d012      	beq.n	8004ee4 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <xQueueGenericReset+0xd0>)
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	e009      	b.n	8004ee4 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3310      	adds	r3, #16
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fef1 	bl	8004cbc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3324      	adds	r3, #36	@ 0x24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff feec 	bl	8004cbc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004ee4:	f002 fbdc 	bl	80076a0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004ee8:	2301      	movs	r3, #1
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed04 	.word	0xe000ed04

08004ef8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	@ 0x30
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <xQueueGenericCreate+0x2c>
        __asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	61bb      	str	r3, [r7, #24]
    }
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	fb02 f303 	mul.w	r3, r2, r3
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <xQueueGenericCreate+0x4a>
 8004f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d101      	bne.n	8004f46 <xQueueGenericCreate+0x4e>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <xQueueGenericCreate+0x50>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <xQueueGenericCreate+0x6c>
        __asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	617b      	str	r3, [r7, #20]
    }
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8004f6a:	d90b      	bls.n	8004f84 <xQueueGenericCreate+0x8c>
        __asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	613b      	str	r3, [r7, #16]
    }
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	3350      	adds	r3, #80	@ 0x50
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 fc81 	bl	8007890 <pvPortMalloc>
 8004f8e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00d      	beq.n	8004fb2 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3350      	adds	r3, #80	@ 0x50
 8004f9e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fa0:	79fa      	ldrb	r2, [r7, #7]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f805 	bl	8004fbc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
    }
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3728      	adds	r7, #40	@ 0x28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e002      	b.n	8004fde <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fea:	2101      	movs	r1, #1
 8004fec:	69b8      	ldr	r0, [r7, #24]
 8004fee:	f7ff ff19 	bl	8004e24 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08e      	sub	sp, #56	@ 0x38
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005012:	2300      	movs	r3, #0
 8005014:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <xQueueGenericSend+0x34>
        __asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <xQueueGenericSend+0x42>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <xQueueGenericSend+0x46>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueGenericSend+0x48>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xQueueGenericSend+0x64>
        __asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d103      	bne.n	8005076 <xQueueGenericSend+0x72>
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <xQueueGenericSend+0x76>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <xQueueGenericSend+0x78>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xQueueGenericSend+0x94>
        __asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	623b      	str	r3, [r7, #32]
    }
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005098:	f001 f9e8 	bl	800646c <xTaskGetSchedulerState>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <xQueueGenericSend+0xa4>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <xQueueGenericSend+0xa8>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <xQueueGenericSend+0xaa>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <xQueueGenericSend+0xc6>
        __asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	61fb      	str	r3, [r7, #28]
    }
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80050ca:	f002 fab7 	bl	800763c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <xQueueGenericSend+0xdc>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d129      	bne.n	8005134 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050e6:	f000 fad0 	bl	800568a <prvCopyDataToQueue>
 80050ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d010      	beq.n	8005116 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	3324      	adds	r3, #36	@ 0x24
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 f817 	bl	800612c <xTaskRemoveFromEventList>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d013      	beq.n	800512c <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005104:	4b3f      	ldr	r3, [pc, #252]	@ (8005204 <xQueueGenericSend+0x200>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	e00a      	b.n	800512c <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800511c:	4b39      	ldr	r3, [pc, #228]	@ (8005204 <xQueueGenericSend+0x200>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800512c:	f002 fab8 	bl	80076a0 <vPortExitCritical>
                return pdPASS;
 8005130:	2301      	movs	r3, #1
 8005132:	e063      	b.n	80051fc <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800513a:	f002 fab1 	bl	80076a0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800513e:	2300      	movs	r3, #0
 8005140:	e05c      	b.n	80051fc <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005148:	f107 0314 	add.w	r3, r7, #20
 800514c:	4618      	mov	r0, r3
 800514e:	f001 f851 	bl	80061f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005152:	2301      	movs	r3, #1
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005156:	f002 faa3 	bl	80076a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800515a:	f000 fdc3 	bl	8005ce4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800515e:	f002 fa6d 	bl	800763c <vPortEnterCritical>
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005168:	b25b      	sxtb	r3, r3
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d103      	bne.n	8005178 <xQueueGenericSend+0x174>
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800517e:	b25b      	sxtb	r3, r3
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d103      	bne.n	800518e <xQueueGenericSend+0x18a>
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800518e:	f002 fa87 	bl	80076a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005192:	1d3a      	adds	r2, r7, #4
 8005194:	f107 0314 	add.w	r3, r7, #20
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f001 f840 	bl	8006220 <xTaskCheckForTimeOut>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d124      	bne.n	80051f0 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051a8:	f000 fb67 	bl	800587a <prvIsQueueFull>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d018      	beq.n	80051e4 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	3310      	adds	r3, #16
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 ff64 	bl	8006088 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80051c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051c2:	f000 faf2 	bl	80057aa <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80051c6:	f000 fd9b 	bl	8005d00 <xTaskResumeAll>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f47f af7c 	bne.w	80050ca <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80051d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005204 <xQueueGenericSend+0x200>)
 80051d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	e772      	b.n	80050ca <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80051e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051e6:	f000 fae0 	bl	80057aa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80051ea:	f000 fd89 	bl	8005d00 <xTaskResumeAll>
 80051ee:	e76c      	b.n	80050ca <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80051f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051f2:	f000 fada 	bl	80057aa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80051f6:	f000 fd83 	bl	8005d00 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80051fa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3738      	adds	r7, #56	@ 0x38
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b090      	sub	sp, #64	@ 0x40
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <xQueueGenericSendFromISR+0x3e>
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <xQueueGenericSendFromISR+0x42>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueGenericSendFromISR+0x44>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d103      	bne.n	8005276 <xQueueGenericSendFromISR+0x6e>
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <xQueueGenericSendFromISR+0x72>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <xQueueGenericSendFromISR+0x74>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	623b      	str	r3, [r7, #32]
    }
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005298:	f002 fab8 	bl	800780c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800529c:	f3ef 8211 	mrs	r2, BASEPRI
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61fa      	str	r2, [r7, #28]
 80052b2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80052b4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052b6:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <xQueueGenericSendFromISR+0xc2>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d13f      	bne.n	800534a <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052e0:	f000 f9d3 	bl	800568a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80052e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d112      	bne.n	8005314 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d026      	beq.n	8005344 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f8:	3324      	adds	r3, #36	@ 0x24
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 ff16 	bl	800612c <xTaskRemoveFromEventList>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01e      	beq.n	8005344 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e017      	b.n	8005344 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005314:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005318:	2b7f      	cmp	r3, #127	@ 0x7f
 800531a:	d10b      	bne.n	8005334 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	617b      	str	r3, [r7, #20]
    }
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	e7fd      	b.n	8005330 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005334:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005338:	3301      	adds	r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	b25a      	sxtb	r2, r3
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005344:	2301      	movs	r3, #1
 8005346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8005348:	e001      	b.n	800534e <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800534a:	2300      	movs	r3, #0
 800534c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800534e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005350:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005358:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800535a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800535c:	4618      	mov	r0, r3
 800535e:	3740      	adds	r7, #64	@ 0x40
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08c      	sub	sp, #48	@ 0x30
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005370:	2300      	movs	r3, #0
 8005372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <xQueueReceive+0x32>
        __asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	623b      	str	r3, [r7, #32]
    }
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	e7fd      	b.n	8005392 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d103      	bne.n	80053a4 <xQueueReceive+0x40>
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <xQueueReceive+0x44>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <xQueueReceive+0x46>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <xQueueReceive+0x62>
        __asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
    }
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053c6:	f001 f851 	bl	800646c <xTaskGetSchedulerState>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <xQueueReceive+0x72>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <xQueueReceive+0x76>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <xQueueReceive+0x78>
 80053da:	2300      	movs	r3, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <xQueueReceive+0x94>
        __asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	61bb      	str	r3, [r7, #24]
    }
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80053f8:	f002 f920 	bl	800763c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01f      	beq.n	8005448 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800540c:	f000 f9a7 	bl	800575e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	1e5a      	subs	r2, r3, #1
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00f      	beq.n	8005440 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	3310      	adds	r3, #16
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fe81 	bl	800612c <xTaskRemoveFromEventList>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005430:	4b3c      	ldr	r3, [pc, #240]	@ (8005524 <xQueueReceive+0x1c0>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005440:	f002 f92e 	bl	80076a0 <vPortExitCritical>
                return pdPASS;
 8005444:	2301      	movs	r3, #1
 8005446:	e069      	b.n	800551c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800544e:	f002 f927 	bl	80076a0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005452:	2300      	movs	r3, #0
 8005454:	e062      	b.n	800551c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800545c:	f107 0310 	add.w	r3, r7, #16
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fec7 	bl	80061f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005466:	2301      	movs	r3, #1
 8005468:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800546a:	f002 f919 	bl	80076a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800546e:	f000 fc39 	bl	8005ce4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005472:	f002 f8e3 	bl	800763c <vPortEnterCritical>
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800547c:	b25b      	sxtb	r3, r3
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d103      	bne.n	800548c <xQueueReceive+0x128>
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005492:	b25b      	sxtb	r3, r3
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d103      	bne.n	80054a2 <xQueueReceive+0x13e>
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a2:	f002 f8fd 	bl	80076a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054a6:	1d3a      	adds	r2, r7, #4
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 feb6 	bl	8006220 <xTaskCheckForTimeOut>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d123      	bne.n	8005502 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054bc:	f000 f9c7 	bl	800584e <prvIsQueueEmpty>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d017      	beq.n	80054f6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	3324      	adds	r3, #36	@ 0x24
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fdda 	bl	8006088 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80054d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d6:	f000 f968 	bl	80057aa <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80054da:	f000 fc11 	bl	8005d00 <xTaskResumeAll>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d189      	bne.n	80053f8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80054e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005524 <xQueueReceive+0x1c0>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	e780      	b.n	80053f8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80054f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054f8:	f000 f957 	bl	80057aa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80054fc:	f000 fc00 	bl	8005d00 <xTaskResumeAll>
 8005500:	e77a      	b.n	80053f8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005504:	f000 f951 	bl	80057aa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005508:	f000 fbfa 	bl	8005d00 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800550c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800550e:	f000 f99e 	bl	800584e <prvIsQueueEmpty>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	f43f af6f 	beq.w	80053f8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800551a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800551c:	4618      	mov	r0, r3
 800551e:	3730      	adds	r7, #48	@ 0x30
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b090      	sub	sp, #64	@ 0x40
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <xQueueReceiveFromISR+0x3c>
 800555c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <xQueueReceiveFromISR+0x40>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <xQueueReceiveFromISR+0x42>
 8005568:	2300      	movs	r3, #0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005586:	f002 f941 	bl	800780c <vPortValidateInterruptPriority>
        __asm volatile
 800558a:	f3ef 8211 	mrs	r2, BASEPRI
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	623a      	str	r2, [r7, #32]
 80055a0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80055a2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055aa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03f      	beq.n	8005632 <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055c0:	f000 f8cd 	bl	800575e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	1e5a      	subs	r2, r3, #1
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80055cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d112      	bne.n	80055fc <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d026      	beq.n	800562c <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	3310      	adds	r3, #16
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fda2 	bl	800612c <xTaskRemoveFromEventList>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01e      	beq.n	800562c <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01b      	beq.n	800562c <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e017      	b.n	800562c <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80055fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005600:	2b7f      	cmp	r3, #127	@ 0x7f
 8005602:	d10b      	bne.n	800561c <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	61bb      	str	r3, [r7, #24]
    }
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800561c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005620:	3301      	adds	r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	b25a      	sxtb	r2, r3
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800562c:	2301      	movs	r3, #1
 800562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005630:	e001      	b.n	8005636 <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8005632:	2300      	movs	r3, #0
 8005634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005638:	617b      	str	r3, [r7, #20]
        __asm volatile
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f383 8811 	msr	BASEPRI, r3
    }
 8005640:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005644:	4618      	mov	r0, r3
 8005646:	3740      	adds	r7, #64	@ 0x40
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
    }
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005672:	f001 ffe3 	bl	800763c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800567c:	f002 f810 	bl	80076a0 <vPortExitCritical>

    return uxReturn;
 8005680:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10d      	bne.n	80056c4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d14d      	bne.n	800574c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fef7 	bl	80064a8 <xTaskPriorityDisinherit>
 80056ba:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	e043      	b.n	800574c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d119      	bne.n	80056fe <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6858      	ldr	r0, [r3, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	461a      	mov	r2, r3
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	f002 fc90 	bl	8007ffa <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d32b      	bcc.n	800574c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	e026      	b.n	800574c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	68d8      	ldr	r0, [r3, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	461a      	mov	r2, r3
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	f002 fc76 	bl	8007ffa <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	425b      	negs	r3, r3
 8005718:	441a      	add	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d207      	bcs.n	800573a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	425b      	negs	r3, r3
 8005734:	441a      	add	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d105      	bne.n	800574c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3b01      	subs	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d018      	beq.n	80057a2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d303      	bcc.n	8005792 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68d9      	ldr	r1, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	461a      	mov	r2, r3
 800579c:	6838      	ldr	r0, [r7, #0]
 800579e:	f002 fc2c 	bl	8007ffa <memcpy>
    }
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80057b2:	f001 ff43 	bl	800763c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057bc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057be:	e011      	b.n	80057e4 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d012      	beq.n	80057ee <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3324      	adds	r3, #36	@ 0x24
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fcad 	bl	800612c <xTaskRemoveFromEventList>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80057d8:	f000 fd8a 	bl	80062f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	3b01      	subs	r3, #1
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dce9      	bgt.n	80057c0 <prvUnlockQueue+0x16>
 80057ec:	e000      	b.n	80057f0 <prvUnlockQueue+0x46>
                        break;
 80057ee:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	22ff      	movs	r2, #255	@ 0xff
 80057f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80057f8:	f001 ff52 	bl	80076a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80057fc:	f001 ff1e 	bl	800763c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005806:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005808:	e011      	b.n	800582e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d012      	beq.n	8005838 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3310      	adds	r3, #16
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fc88 	bl	800612c <xTaskRemoveFromEventList>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005822:	f000 fd65 	bl	80062f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005826:	7bbb      	ldrb	r3, [r7, #14]
 8005828:	3b01      	subs	r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800582e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005832:	2b00      	cmp	r3, #0
 8005834:	dce9      	bgt.n	800580a <prvUnlockQueue+0x60>
 8005836:	e000      	b.n	800583a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005838:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	22ff      	movs	r2, #255	@ 0xff
 800583e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005842:	f001 ff2d 	bl	80076a0 <vPortExitCritical>
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005856:	f001 fef1 	bl	800763c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005862:	2301      	movs	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e001      	b.n	800586c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800586c:	f001 ff18 	bl	80076a0 <vPortExitCritical>

    return xReturn;
 8005870:	68fb      	ldr	r3, [r7, #12]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005882:	f001 fedb 	bl	800763c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588e:	429a      	cmp	r2, r3
 8005890:	d102      	bne.n	8005898 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005892:	2301      	movs	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	e001      	b.n	800589c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800589c:	f001 ff00 	bl	80076a0 <vPortExitCritical>

    return xReturn;
 80058a0:	68fb      	ldr	r3, [r7, #12]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80058aa:	b480      	push	{r7}
 80058ac:	b087      	sub	sp, #28
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60fb      	str	r3, [r7, #12]
    }
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d102      	bne.n	80058e6 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e001      	b.n	80058ea <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80058ea:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80058ec:	4618      	mov	r0, r3
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e014      	b.n	8005932 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005908:	4a0f      	ldr	r2, [pc, #60]	@ (8005948 <vQueueAddToRegistry+0x50>)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005914:	490c      	ldr	r1, [pc, #48]	@ (8005948 <vQueueAddToRegistry+0x50>)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800591e:	4a0a      	ldr	r2, [pc, #40]	@ (8005948 <vQueueAddToRegistry+0x50>)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800592a:	e006      	b.n	800593a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b07      	cmp	r3, #7
 8005936:	d9e7      	bls.n	8005908 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	200001d8 	.word	0x200001d8

0800594c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800595c:	f001 fe6e 	bl	800763c <vPortEnterCritical>
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005966:	b25b      	sxtb	r3, r3
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d103      	bne.n	8005976 <vQueueWaitForMessageRestricted+0x2a>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800597c:	b25b      	sxtb	r3, r3
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d103      	bne.n	800598c <vQueueWaitForMessageRestricted+0x40>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800598c:	f001 fe88 	bl	80076a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3324      	adds	r3, #36	@ 0x24
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fb97 	bl	80060d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80059a6:	6978      	ldr	r0, [r7, #20]
 80059a8:	f7ff feff 	bl	80057aa <prvUnlockQueue>
    }
 80059ac:	bf00      	nop
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	@ 0x30
 80059b8:	af04      	add	r7, sp, #16
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 ff61 	bl	8007890 <pvPortMalloc>
 80059ce:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059d6:	2058      	movs	r0, #88	@ 0x58
 80059d8:	f001 ff5a 	bl	8007890 <pvPortMalloc>
 80059dc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80059ea:	e005      	b.n	80059f8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80059ec:	6978      	ldr	r0, [r7, #20]
 80059ee:	f002 f831 	bl	8007a54 <vPortFree>
 80059f2:	e001      	b.n	80059f8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d013      	beq.n	8005a26 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	2300      	movs	r3, #0
 8005a02:	9303      	str	r3, [sp, #12]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	9302      	str	r3, [sp, #8]
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f80e 	bl	8005a36 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005a1a:	69f8      	ldr	r0, [r7, #28]
 8005a1c:	f000 f8a2 	bl	8005b64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005a20:	2301      	movs	r3, #1
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	e002      	b.n	8005a2c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
    }
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b088      	sub	sp, #32
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	21a5      	movs	r1, #165	@ 0xa5
 8005a50:	f002 fa57 	bl	8007f02 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f023 0307 	bic.w	r3, r3, #7
 8005a6c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	617b      	str	r3, [r7, #20]
    }
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	e7fd      	b.n	8005a8c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01f      	beq.n	8005ad6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	e012      	b.n	8005ac2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	7819      	ldrb	r1, [r3, #0]
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3334      	adds	r3, #52	@ 0x34
 8005aac:	460a      	mov	r2, r1
 8005aae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d006      	beq.n	8005aca <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2b09      	cmp	r3, #9
 8005ac6:	d9e9      	bls.n	8005a9c <prvInitialiseNewTask+0x66>
 8005ac8:	e000      	b.n	8005acc <prvInitialiseNewTask+0x96>
            {
                break;
 8005aca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005ad4:	e003      	b.n	8005ade <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d901      	bls.n	8005ae8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aec:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005af2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	2200      	movs	r2, #0
 8005af8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	3304      	adds	r3, #4
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff f8fc 	bl	8004cfc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	3318      	adds	r3, #24
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff f8f7 	bl	8004cfc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b12:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b16:	f1c3 0205 	rsb	r2, r3, #5
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b22:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	3350      	adds	r3, #80	@ 0x50
 8005b28:	2204      	movs	r2, #4
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f002 f9e8 	bl	8007f02 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	3354      	adds	r3, #84	@ 0x54
 8005b36:	2201      	movs	r2, #1
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f002 f9e1 	bl	8007f02 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	69b8      	ldr	r0, [r7, #24]
 8005b46:	f001 fbc3 	bl	80072d0 <pxPortInitialiseStack>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b5c:	bf00      	nop
 8005b5e:	3720      	adds	r7, #32
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005b6c:	f001 fd66 	bl	800763c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005b70:	4b2c      	ldr	r3, [pc, #176]	@ (8005c24 <prvAddNewTaskToReadyList+0xc0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	4a2b      	ldr	r2, [pc, #172]	@ (8005c24 <prvAddNewTaskToReadyList+0xc0>)
 8005b78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c28 <prvAddNewTaskToReadyList+0xc4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005b82:	4a29      	ldr	r2, [pc, #164]	@ (8005c28 <prvAddNewTaskToReadyList+0xc4>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b88:	4b26      	ldr	r3, [pc, #152]	@ (8005c24 <prvAddNewTaskToReadyList+0xc0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d110      	bne.n	8005bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005b90:	f000 fbd2 	bl	8006338 <prvInitialiseTaskLists>
 8005b94:	e00d      	b.n	8005bb2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005b96:	4b25      	ldr	r3, [pc, #148]	@ (8005c2c <prvAddNewTaskToReadyList+0xc8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b9e:	4b22      	ldr	r3, [pc, #136]	@ (8005c28 <prvAddNewTaskToReadyList+0xc4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d802      	bhi.n	8005bb2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005bac:	4a1e      	ldr	r2, [pc, #120]	@ (8005c28 <prvAddNewTaskToReadyList+0xc4>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005c30 <prvAddNewTaskToReadyList+0xcc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c30 <prvAddNewTaskToReadyList+0xcc>)
 8005bba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c30 <prvAddNewTaskToReadyList+0xcc>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	2201      	movs	r2, #1
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	4b19      	ldr	r3, [pc, #100]	@ (8005c34 <prvAddNewTaskToReadyList+0xd0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <prvAddNewTaskToReadyList+0xd0>)
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <prvAddNewTaskToReadyList+0xd4>)
 8005be4:	441a      	add	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7ff f892 	bl	8004d16 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005bf2:	f001 fd55 	bl	80076a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <prvAddNewTaskToReadyList+0xc8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00e      	beq.n	8005c1c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <prvAddNewTaskToReadyList+0xc4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d207      	bcs.n	8005c1c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <prvAddNewTaskToReadyList+0xd8>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	200002f0 	.word	0x200002f0
 8005c28:	20000218 	.word	0x20000218
 8005c2c:	200002fc 	.word	0x200002fc
 8005c30:	2000030c 	.word	0x2000030c
 8005c34:	200002f8 	.word	0x200002f8
 8005c38:	2000021c 	.word	0x2000021c
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005c46:	4b20      	ldr	r3, [pc, #128]	@ (8005cc8 <vTaskStartScheduler+0x88>)
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2282      	movs	r2, #130	@ 0x82
 8005c52:	491e      	ldr	r1, [pc, #120]	@ (8005ccc <vTaskStartScheduler+0x8c>)
 8005c54:	481e      	ldr	r0, [pc, #120]	@ (8005cd0 <vTaskStartScheduler+0x90>)
 8005c56:	f7ff fead 	bl	80059b4 <xTaskCreate>
 8005c5a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d102      	bne.n	8005c68 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005c62:	f000 ff6d 	bl	8006b40 <xTimerCreateTimerTask>
 8005c66:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d116      	bne.n	8005c9c <vTaskStartScheduler+0x5c>
        __asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	60bb      	str	r3, [r7, #8]
    }
 8005c80:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005c82:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <vTaskStartScheduler+0x94>)
 8005c84:	f04f 32ff 	mov.w	r2, #4294967295
 8005c88:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005c8a:	4b13      	ldr	r3, [pc, #76]	@ (8005cd8 <vTaskStartScheduler+0x98>)
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c90:	4b12      	ldr	r3, [pc, #72]	@ (8005cdc <vTaskStartScheduler+0x9c>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005c96:	f001 fbad 	bl	80073f4 <xPortStartScheduler>
 8005c9a:	e00f      	b.n	8005cbc <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d10b      	bne.n	8005cbc <vTaskStartScheduler+0x7c>
        __asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	607b      	str	r3, [r7, #4]
    }
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005cbc:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <vTaskStartScheduler+0xa0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20000314 	.word	0x20000314
 8005ccc:	08009290 	.word	0x08009290
 8005cd0:	08006309 	.word	0x08006309
 8005cd4:	20000310 	.word	0x20000310
 8005cd8:	200002fc 	.word	0x200002fc
 8005cdc:	200002f4 	.word	0x200002f4
 8005ce0:	20000014 	.word	0x20000014

08005ce4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005ce8:	4b04      	ldr	r3, [pc, #16]	@ (8005cfc <vTaskSuspendAll+0x18>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	4a03      	ldr	r2, [pc, #12]	@ (8005cfc <vTaskSuspendAll+0x18>)
 8005cf0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005cf2:	bf00      	nop
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20000318 	.word	0x20000318

08005d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005d0e:	4b42      	ldr	r3, [pc, #264]	@ (8005e18 <xTaskResumeAll+0x118>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <xTaskResumeAll+0x2e>
        __asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	603b      	str	r3, [r7, #0]
    }
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005d2e:	f001 fc85 	bl	800763c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005d32:	4b39      	ldr	r3, [pc, #228]	@ (8005e18 <xTaskResumeAll+0x118>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	4a37      	ldr	r2, [pc, #220]	@ (8005e18 <xTaskResumeAll+0x118>)
 8005d3a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d3c:	4b36      	ldr	r3, [pc, #216]	@ (8005e18 <xTaskResumeAll+0x118>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d161      	bne.n	8005e08 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d44:	4b35      	ldr	r3, [pc, #212]	@ (8005e1c <xTaskResumeAll+0x11c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d05d      	beq.n	8005e08 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d4c:	e02e      	b.n	8005dac <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4e:	4b34      	ldr	r3, [pc, #208]	@ (8005e20 <xTaskResumeAll+0x120>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3318      	adds	r3, #24
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff f838 	bl	8004dd0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff f833 	bl	8004dd0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6e:	2201      	movs	r2, #1
 8005d70:	409a      	lsls	r2, r3
 8005d72:	4b2c      	ldr	r3, [pc, #176]	@ (8005e24 <xTaskResumeAll+0x124>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	4a2a      	ldr	r2, [pc, #168]	@ (8005e24 <xTaskResumeAll+0x124>)
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4a27      	ldr	r2, [pc, #156]	@ (8005e28 <xTaskResumeAll+0x128>)
 8005d8a:	441a      	add	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7fe ffbf 	bl	8004d16 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d9c:	4b23      	ldr	r3, [pc, #140]	@ (8005e2c <xTaskResumeAll+0x12c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8005da6:	4b22      	ldr	r3, [pc, #136]	@ (8005e30 <xTaskResumeAll+0x130>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dac:	4b1c      	ldr	r3, [pc, #112]	@ (8005e20 <xTaskResumeAll+0x120>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1cc      	bne.n	8005d4e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005dba:	f000 fb3b 	bl	8006434 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <xTaskResumeAll+0x134>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d010      	beq.n	8005dec <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005dca:	f000 f847 	bl	8005e5c <xTaskIncrementTick>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8005dd4:	4b16      	ldr	r3, [pc, #88]	@ (8005e30 <xTaskResumeAll+0x130>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f1      	bne.n	8005dca <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8005de6:	4b13      	ldr	r3, [pc, #76]	@ (8005e34 <xTaskResumeAll+0x134>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005dec:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <xTaskResumeAll+0x130>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005df8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e38 <xTaskResumeAll+0x138>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005e08:	f001 fc4a 	bl	80076a0 <vPortExitCritical>

    return xAlreadyYielded;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000318 	.word	0x20000318
 8005e1c:	200002f0 	.word	0x200002f0
 8005e20:	200002b0 	.word	0x200002b0
 8005e24:	200002f8 	.word	0x200002f8
 8005e28:	2000021c 	.word	0x2000021c
 8005e2c:	20000218 	.word	0x20000218
 8005e30:	20000304 	.word	0x20000304
 8005e34:	20000300 	.word	0x20000300
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005e42:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <xTaskGetTickCount+0x1c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005e48:	687b      	ldr	r3, [r7, #4]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	200002f4 	.word	0x200002f4

08005e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e66:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa4 <xTaskIncrementTick+0x148>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 808f 	bne.w	8005f8e <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e70:	4b4d      	ldr	r3, [pc, #308]	@ (8005fa8 <xTaskIncrementTick+0x14c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005e78:	4a4b      	ldr	r2, [pc, #300]	@ (8005fa8 <xTaskIncrementTick+0x14c>)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d121      	bne.n	8005ec8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005e84:	4b49      	ldr	r3, [pc, #292]	@ (8005fac <xTaskIncrementTick+0x150>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <xTaskIncrementTick+0x4a>
        __asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	603b      	str	r3, [r7, #0]
    }
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
 8005ea4:	e7fd      	b.n	8005ea2 <xTaskIncrementTick+0x46>
 8005ea6:	4b41      	ldr	r3, [pc, #260]	@ (8005fac <xTaskIncrementTick+0x150>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	4b40      	ldr	r3, [pc, #256]	@ (8005fb0 <xTaskIncrementTick+0x154>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8005fac <xTaskIncrementTick+0x150>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb0 <xTaskIncrementTick+0x154>)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb4 <xTaskIncrementTick+0x158>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb4 <xTaskIncrementTick+0x158>)
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	f000 fab6 	bl	8006434 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb8 <xTaskIncrementTick+0x15c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d348      	bcc.n	8005f64 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed2:	4b36      	ldr	r3, [pc, #216]	@ (8005fac <xTaskIncrementTick+0x150>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005edc:	4b36      	ldr	r3, [pc, #216]	@ (8005fb8 <xTaskIncrementTick+0x15c>)
 8005ede:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee2:	601a      	str	r2, [r3, #0]
                    break;
 8005ee4:	e03e      	b.n	8005f64 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee6:	4b31      	ldr	r3, [pc, #196]	@ (8005fac <xTaskIncrementTick+0x150>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d203      	bcs.n	8005f06 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005efe:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb8 <xTaskIncrementTick+0x15c>)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f04:	e02e      	b.n	8005f64 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe ff60 	bl	8004dd0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	3318      	adds	r3, #24
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe ff57 	bl	8004dd0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	2201      	movs	r2, #1
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	4b24      	ldr	r3, [pc, #144]	@ (8005fbc <xTaskIncrementTick+0x160>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	4a22      	ldr	r2, [pc, #136]	@ (8005fbc <xTaskIncrementTick+0x160>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc0 <xTaskIncrementTick+0x164>)
 8005f42:	441a      	add	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7fe fee3 	bl	8004d16 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f54:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc4 <xTaskIncrementTick+0x168>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d3b9      	bcc.n	8005ed2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f62:	e7b6      	b.n	8005ed2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f64:	4b17      	ldr	r3, [pc, #92]	@ (8005fc4 <xTaskIncrementTick+0x168>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6a:	4915      	ldr	r1, [pc, #84]	@ (8005fc0 <xTaskIncrementTick+0x164>)
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d901      	bls.n	8005f80 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005f80:	4b11      	ldr	r3, [pc, #68]	@ (8005fc8 <xTaskIncrementTick+0x16c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e004      	b.n	8005f98 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005fcc <xTaskIncrementTick+0x170>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a0d      	ldr	r2, [pc, #52]	@ (8005fcc <xTaskIncrementTick+0x170>)
 8005f96:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005f98:	697b      	ldr	r3, [r7, #20]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000318 	.word	0x20000318
 8005fa8:	200002f4 	.word	0x200002f4
 8005fac:	200002a8 	.word	0x200002a8
 8005fb0:	200002ac 	.word	0x200002ac
 8005fb4:	20000308 	.word	0x20000308
 8005fb8:	20000310 	.word	0x20000310
 8005fbc:	200002f8 	.word	0x200002f8
 8005fc0:	2000021c 	.word	0x2000021c
 8005fc4:	20000218 	.word	0x20000218
 8005fc8:	20000304 	.word	0x20000304
 8005fcc:	20000300 	.word	0x20000300

08005fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fd6:	4b27      	ldr	r3, [pc, #156]	@ (8006074 <vTaskSwitchContext+0xa4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005fde:	4b26      	ldr	r3, [pc, #152]	@ (8006078 <vTaskSwitchContext+0xa8>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005fe4:	e040      	b.n	8006068 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8005fe6:	4b24      	ldr	r3, [pc, #144]	@ (8006078 <vTaskSwitchContext+0xa8>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fec:	4b23      	ldr	r3, [pc, #140]	@ (800607c <vTaskSwitchContext+0xac>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	fab3 f383 	clz	r3, r3
 8005ff8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	f1c3 031f 	rsb	r3, r3, #31
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	491f      	ldr	r1, [pc, #124]	@ (8006080 <vTaskSwitchContext+0xb0>)
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <vTaskSwitchContext+0x5e>
        __asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	607b      	str	r3, [r7, #4]
    }
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <vTaskSwitchContext+0x5a>
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4a11      	ldr	r2, [pc, #68]	@ (8006080 <vTaskSwitchContext+0xb0>)
 800603a:	4413      	add	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	605a      	str	r2, [r3, #4]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	3308      	adds	r3, #8
 8006050:	429a      	cmp	r2, r3
 8006052:	d104      	bne.n	800605e <vTaskSwitchContext+0x8e>
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4a07      	ldr	r2, [pc, #28]	@ (8006084 <vTaskSwitchContext+0xb4>)
 8006066:	6013      	str	r3, [r2, #0]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20000318 	.word	0x20000318
 8006078:	20000304 	.word	0x20000304
 800607c:	200002f8 	.word	0x200002f8
 8006080:	2000021c 	.word	0x2000021c
 8006084:	20000218 	.word	0x20000218

08006088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10b      	bne.n	80060b0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	60fb      	str	r3, [r7, #12]
    }
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	e7fd      	b.n	80060ac <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <vTaskPlaceOnEventList+0x48>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3318      	adds	r3, #24
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fe fe50 	bl	8004d5e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060be:	2101      	movs	r1, #1
 80060c0:	6838      	ldr	r0, [r7, #0]
 80060c2:	f000 fcd7 	bl	8006a74 <prvAddCurrentTaskToDelayedList>
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000218 	.word	0x20000218

080060d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	617b      	str	r3, [r7, #20]
    }
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <vTaskPlaceOnEventListRestricted+0x54>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3318      	adds	r3, #24
 8006104:	4619      	mov	r1, r3
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7fe fe05 	bl	8004d16 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295
 8006116:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	68b8      	ldr	r0, [r7, #8]
 800611c:	f000 fcaa 	bl	8006a74 <prvAddCurrentTaskToDelayedList>
    }
 8006120:	bf00      	nop
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000218 	.word	0x20000218

0800612c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10b      	bne.n	800615a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60fb      	str	r3, [r7, #12]
    }
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	e7fd      	b.n	8006156 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3318      	adds	r3, #24
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fe36 	bl	8004dd0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006164:	4b1d      	ldr	r3, [pc, #116]	@ (80061dc <xTaskRemoveFromEventList+0xb0>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11c      	bne.n	80061a6 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	3304      	adds	r3, #4
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe fe2d 	bl	8004dd0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	2201      	movs	r2, #1
 800617c:	409a      	lsls	r2, r3
 800617e:	4b18      	ldr	r3, [pc, #96]	@ (80061e0 <xTaskRemoveFromEventList+0xb4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4313      	orrs	r3, r2
 8006184:	4a16      	ldr	r2, [pc, #88]	@ (80061e0 <xTaskRemoveFromEventList+0xb4>)
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4a13      	ldr	r2, [pc, #76]	@ (80061e4 <xTaskRemoveFromEventList+0xb8>)
 8006196:	441a      	add	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fe fdb9 	bl	8004d16 <vListInsertEnd>
 80061a4:	e005      	b.n	80061b2 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3318      	adds	r3, #24
 80061aa:	4619      	mov	r1, r3
 80061ac:	480e      	ldr	r0, [pc, #56]	@ (80061e8 <xTaskRemoveFromEventList+0xbc>)
 80061ae:	f7fe fdb2 	bl	8004d16 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b6:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <xTaskRemoveFromEventList+0xc0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d905      	bls.n	80061cc <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	@ (80061f0 <xTaskRemoveFromEventList+0xc4>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e001      	b.n	80061d0 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000318 	.word	0x20000318
 80061e0:	200002f8 	.word	0x200002f8
 80061e4:	2000021c 	.word	0x2000021c
 80061e8:	200002b0 	.word	0x200002b0
 80061ec:	20000218 	.word	0x20000218
 80061f0:	20000304 	.word	0x20000304

080061f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061fc:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <vTaskInternalSetTimeOutState+0x24>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006204:	4b05      	ldr	r3, [pc, #20]	@ (800621c <vTaskInternalSetTimeOutState+0x28>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20000308 	.word	0x20000308
 800621c:	200002f4 	.word	0x200002f4

08006220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10b      	bne.n	8006248 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	613b      	str	r3, [r7, #16]
    }
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10b      	bne.n	8006266 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	60fb      	str	r3, [r7, #12]
    }
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006266:	f001 f9e9 	bl	800763c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800626a:	4b1f      	ldr	r3, [pc, #124]	@ (80062e8 <xTaskCheckForTimeOut+0xc8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d102      	bne.n	800628a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006284:	2300      	movs	r3, #0
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	e026      	b.n	80062d8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b17      	ldr	r3, [pc, #92]	@ (80062ec <xTaskCheckForTimeOut+0xcc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d00a      	beq.n	80062ac <xTaskCheckForTimeOut+0x8c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	429a      	cmp	r2, r3
 800629e:	d305      	bcc.n	80062ac <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e015      	b.n	80062d8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d20b      	bcs.n	80062ce <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	1ad2      	subs	r2, r2, r3
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff ff96 	bl	80061f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	e004      	b.n	80062d8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80062d8:	f001 f9e2 	bl	80076a0 <vPortExitCritical>

    return xReturn;
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	200002f4 	.word	0x200002f4
 80062ec:	20000308 	.word	0x20000308

080062f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80062f4:	4b03      	ldr	r3, [pc, #12]	@ (8006304 <vTaskMissedYield+0x14>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	20000304 	.word	0x20000304

08006308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006310:	f000 f852 	bl	80063b8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006314:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <prvIdleTask+0x28>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d9f9      	bls.n	8006310 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800631c:	4b05      	ldr	r3, [pc, #20]	@ (8006334 <prvIdleTask+0x2c>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800632c:	e7f0      	b.n	8006310 <prvIdleTask+0x8>
 800632e:	bf00      	nop
 8006330:	2000021c 	.word	0x2000021c
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800633e:	2300      	movs	r3, #0
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	e00c      	b.n	800635e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4a12      	ldr	r2, [pc, #72]	@ (8006398 <prvInitialiseTaskLists+0x60>)
 8006350:	4413      	add	r3, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fcb2 	bl	8004cbc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3301      	adds	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d9ef      	bls.n	8006344 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006364:	480d      	ldr	r0, [pc, #52]	@ (800639c <prvInitialiseTaskLists+0x64>)
 8006366:	f7fe fca9 	bl	8004cbc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800636a:	480d      	ldr	r0, [pc, #52]	@ (80063a0 <prvInitialiseTaskLists+0x68>)
 800636c:	f7fe fca6 	bl	8004cbc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006370:	480c      	ldr	r0, [pc, #48]	@ (80063a4 <prvInitialiseTaskLists+0x6c>)
 8006372:	f7fe fca3 	bl	8004cbc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006376:	480c      	ldr	r0, [pc, #48]	@ (80063a8 <prvInitialiseTaskLists+0x70>)
 8006378:	f7fe fca0 	bl	8004cbc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800637c:	480b      	ldr	r0, [pc, #44]	@ (80063ac <prvInitialiseTaskLists+0x74>)
 800637e:	f7fe fc9d 	bl	8004cbc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006382:	4b0b      	ldr	r3, [pc, #44]	@ (80063b0 <prvInitialiseTaskLists+0x78>)
 8006384:	4a05      	ldr	r2, [pc, #20]	@ (800639c <prvInitialiseTaskLists+0x64>)
 8006386:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006388:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <prvInitialiseTaskLists+0x7c>)
 800638a:	4a05      	ldr	r2, [pc, #20]	@ (80063a0 <prvInitialiseTaskLists+0x68>)
 800638c:	601a      	str	r2, [r3, #0]
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	2000021c 	.word	0x2000021c
 800639c:	20000280 	.word	0x20000280
 80063a0:	20000294 	.word	0x20000294
 80063a4:	200002b0 	.word	0x200002b0
 80063a8:	200002c4 	.word	0x200002c4
 80063ac:	200002dc 	.word	0x200002dc
 80063b0:	200002a8 	.word	0x200002a8
 80063b4:	200002ac 	.word	0x200002ac

080063b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063be:	e019      	b.n	80063f4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80063c0:	f001 f93c 	bl	800763c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c4:	4b10      	ldr	r3, [pc, #64]	@ (8006408 <prvCheckTasksWaitingTermination+0x50>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fcfd 	bl	8004dd0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80063d6:	4b0d      	ldr	r3, [pc, #52]	@ (800640c <prvCheckTasksWaitingTermination+0x54>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3b01      	subs	r3, #1
 80063dc:	4a0b      	ldr	r2, [pc, #44]	@ (800640c <prvCheckTasksWaitingTermination+0x54>)
 80063de:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063e8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80063ea:	f001 f959 	bl	80076a0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f810 	bl	8006414 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f4:	4b06      	ldr	r3, [pc, #24]	@ (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e1      	bne.n	80063c0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	200002c4 	.word	0x200002c4
 800640c:	200002f0 	.word	0x200002f0
 8006410:	200002d8 	.word	0x200002d8

08006414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006420:	4618      	mov	r0, r3
 8006422:	f001 fb17 	bl	8007a54 <vPortFree>
                vPortFree( pxTCB );
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fb14 	bl	8007a54 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006438:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <prvResetNextTaskUnblockTime+0x30>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d104      	bne.n	800644c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006442:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <prvResetNextTaskUnblockTime+0x34>)
 8006444:	f04f 32ff 	mov.w	r2, #4294967295
 8006448:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800644a:	e005      	b.n	8006458 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800644c:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <prvResetNextTaskUnblockTime+0x30>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a04      	ldr	r2, [pc, #16]	@ (8006468 <prvResetNextTaskUnblockTime+0x34>)
 8006456:	6013      	str	r3, [r2, #0]
}
 8006458:	bf00      	nop
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	200002a8 	.word	0x200002a8
 8006468:	20000310 	.word	0x20000310

0800646c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006472:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <xTaskGetSchedulerState+0x34>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800647a:	2301      	movs	r3, #1
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	e008      	b.n	8006492 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006480:	4b08      	ldr	r3, [pc, #32]	@ (80064a4 <xTaskGetSchedulerState+0x38>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006488:	2302      	movs	r3, #2
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	e001      	b.n	8006492 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800648e:	2300      	movs	r3, #0
 8006490:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006492:	687b      	ldr	r3, [r7, #4]
    }
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	200002fc 	.word	0x200002fc
 80064a4:	20000318 	.word	0x20000318

080064a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d065      	beq.n	800658a <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80064be:	4b35      	ldr	r3, [pc, #212]	@ (8006594 <xTaskPriorityDisinherit+0xec>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d00b      	beq.n	80064e0 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	60fb      	str	r3, [r7, #12]
    }
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	e7fd      	b.n	80064dc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	60bb      	str	r3, [r7, #8]
    }
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	e7fd      	b.n	80064fc <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006504:	1e5a      	subs	r2, r3, #1
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006512:	429a      	cmp	r2, r3
 8006514:	d039      	beq.n	800658a <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d135      	bne.n	800658a <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3304      	adds	r3, #4
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fc54 	bl	8004dd0 <uxListRemove>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	2201      	movs	r2, #1
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	43da      	mvns	r2, r3
 800653a:	4b17      	ldr	r3, [pc, #92]	@ (8006598 <xTaskPriorityDisinherit+0xf0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4013      	ands	r3, r2
 8006540:	4a15      	ldr	r2, [pc, #84]	@ (8006598 <xTaskPriorityDisinherit+0xf0>)
 8006542:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	f1c3 0205 	rsb	r2, r3, #5
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655c:	2201      	movs	r2, #1
 800655e:	409a      	lsls	r2, r3
 8006560:	4b0d      	ldr	r3, [pc, #52]	@ (8006598 <xTaskPriorityDisinherit+0xf0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4313      	orrs	r3, r2
 8006566:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <xTaskPriorityDisinherit+0xf0>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a09      	ldr	r2, [pc, #36]	@ (800659c <xTaskPriorityDisinherit+0xf4>)
 8006578:	441a      	add	r2, r3
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe fbc8 	bl	8004d16 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800658a:	697b      	ldr	r3, [r7, #20]
    }
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000218 	.word	0x20000218
 8006598:	200002f8 	.word	0x200002f8
 800659c:	2000021c 	.word	0x2000021c

080065a0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	613b      	str	r3, [r7, #16]
    }
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	e7fd      	b.n	80065c8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80065cc:	f001 f836 	bl	800763c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80065d0:	4b31      	ldr	r3, [pc, #196]	@ (8006698 <xTaskGenericNotifyWait+0xf8>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	3354      	adds	r3, #84	@ 0x54
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d022      	beq.n	8006628 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80065e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006698 <xTaskGenericNotifyWait+0xf8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	3214      	adds	r2, #20
 80065ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	43d2      	mvns	r2, r2
 80065f2:	4011      	ands	r1, r2
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	3214      	adds	r2, #20
 80065f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80065fc:	4b26      	ldr	r3, [pc, #152]	@ (8006698 <xTaskGenericNotifyWait+0xf8>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	3354      	adds	r3, #84	@ 0x54
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006610:	2101      	movs	r1, #1
 8006612:	6a38      	ldr	r0, [r7, #32]
 8006614:	f000 fa2e 	bl	8006a74 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006618:	4b20      	ldr	r3, [pc, #128]	@ (800669c <xTaskGenericNotifyWait+0xfc>)
 800661a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006628:	f001 f83a 	bl	80076a0 <vPortExitCritical>

        taskENTER_CRITICAL();
 800662c:	f001 f806 	bl	800763c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006636:	4b18      	ldr	r3, [pc, #96]	@ (8006698 <xTaskGenericNotifyWait+0xf8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	3214      	adds	r2, #20
 800663e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006646:	4b14      	ldr	r3, [pc, #80]	@ (8006698 <xTaskGenericNotifyWait+0xf8>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	3354      	adds	r3, #84	@ 0x54
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d002      	beq.n	800665e <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e00e      	b.n	800667c <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800665e:	4b0e      	ldr	r3, [pc, #56]	@ (8006698 <xTaskGenericNotifyWait+0xf8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	3214      	adds	r2, #20
 8006666:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	43d2      	mvns	r2, r2
 800666e:	4011      	ands	r1, r2
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	3214      	adds	r2, #20
 8006674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006678:	2301      	movs	r3, #1
 800667a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800667c:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <xTaskGenericNotifyWait+0xf8>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	3354      	adds	r3, #84	@ 0x54
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800668a:	f001 f809 	bl	80076a0 <vPortExitCritical>

        return xReturn;
 800668e:	697b      	ldr	r3, [r7, #20]
    }
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000218 	.word	0x20000218
 800669c:	e000ed04 	.word	0xe000ed04

080066a0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08c      	sub	sp, #48	@ 0x30
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80066ae:	2301      	movs	r3, #1
 80066b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <xTaskGenericNotify+0x30>
        __asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	623b      	str	r3, [r7, #32]
    }
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10b      	bne.n	80066ee <xTaskGenericNotify+0x4e>
        __asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	61fb      	str	r3, [r7, #28]
    }
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	e7fd      	b.n	80066ea <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 80066f2:	f000 ffa3 	bl	800763c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d006      	beq.n	800670a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80066fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	3214      	adds	r2, #20
 8006702:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800670a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4413      	add	r3, r2
 8006710:	3354      	adds	r3, #84	@ 0x54
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4413      	add	r3, r2
 800671e:	3354      	adds	r3, #84	@ 0x54
 8006720:	2202      	movs	r2, #2
 8006722:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	2b04      	cmp	r3, #4
 8006728:	d83b      	bhi.n	80067a2 <xTaskGenericNotify+0x102>
 800672a:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <xTaskGenericNotify+0x90>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	080067c3 	.word	0x080067c3
 8006734:	08006745 	.word	0x08006745
 8006738:	08006761 	.word	0x08006761
 800673c:	08006779 	.word	0x08006779
 8006740:	08006787 	.word	0x08006787
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	3214      	adds	r2, #20
 800674a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	ea42 0103 	orr.w	r1, r2, r3
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	3214      	adds	r2, #20
 800675a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800675e:	e033      	b.n	80067c8 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	3214      	adds	r2, #20
 8006766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676a:	1c59      	adds	r1, r3, #1
 800676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	3214      	adds	r2, #20
 8006772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006776:	e027      	b.n	80067c8 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	3214      	adds	r2, #20
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006784:	e020      	b.n	80067c8 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800678a:	2b02      	cmp	r3, #2
 800678c:	d006      	beq.n	800679c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	3214      	adds	r2, #20
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800679a:	e015      	b.n	80067c8 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800679c:	2300      	movs	r3, #0
 800679e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 80067a0:	e012      	b.n	80067c8 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80067a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006854 <xTaskGenericNotify+0x1b4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00d      	beq.n	80067c6 <xTaskGenericNotify+0x126>
        __asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	61bb      	str	r3, [r7, #24]
    }
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	e7fd      	b.n	80067be <xTaskGenericNotify+0x11e>
                    break;
 80067c2:	bf00      	nop
 80067c4:	e000      	b.n	80067c8 <xTaskGenericNotify+0x128>

                    break;
 80067c6:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80067c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d13a      	bne.n	8006846 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d2:	3304      	adds	r3, #4
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fe fafb 	bl	8004dd0 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80067da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	2201      	movs	r2, #1
 80067e0:	409a      	lsls	r2, r3
 80067e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006858 <xTaskGenericNotify+0x1b8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006858 <xTaskGenericNotify+0x1b8>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4a18      	ldr	r2, [pc, #96]	@ (800685c <xTaskGenericNotify+0x1bc>)
 80067fa:	441a      	add	r2, r3
 80067fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fe fa87 	bl	8004d16 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <xTaskGenericNotify+0x188>
        __asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	617b      	str	r3, [r7, #20]
    }
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	e7fd      	b.n	8006824 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682c:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <xTaskGenericNotify+0x1c0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006832:	429a      	cmp	r2, r3
 8006834:	d907      	bls.n	8006846 <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <xTaskGenericNotify+0x1c4>)
 8006838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006846:	f000 ff2b 	bl	80076a0 <vPortExitCritical>

        return xReturn;
 800684a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800684c:	4618      	mov	r0, r3
 800684e:	3730      	adds	r7, #48	@ 0x30
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	200002f4 	.word	0x200002f4
 8006858:	200002f8 	.word	0x200002f8
 800685c:	2000021c 	.word	0x2000021c
 8006860:	20000218 	.word	0x20000218
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006868:	b580      	push	{r7, lr}
 800686a:	b090      	sub	sp, #64	@ 0x40
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006876:	2301      	movs	r3, #1
 8006878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b6:	f000 ffa9 	bl	800780c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 80068be:	f3ef 8211 	mrs	r2, BASEPRI
 80068c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80068d4:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80068da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	3214      	adds	r2, #20
 80068e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068ec:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80068ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4413      	add	r3, r2
 80068f4:	3354      	adds	r3, #84	@ 0x54
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80068fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4413      	add	r3, r2
 8006902:	3354      	adds	r3, #84	@ 0x54
 8006904:	2202      	movs	r2, #2
 8006906:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d83b      	bhi.n	8006986 <xTaskGenericNotifyFromISR+0x11e>
 800690e:	a201      	add	r2, pc, #4	@ (adr r2, 8006914 <xTaskGenericNotifyFromISR+0xac>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	080069a7 	.word	0x080069a7
 8006918:	08006929 	.word	0x08006929
 800691c:	08006945 	.word	0x08006945
 8006920:	0800695d 	.word	0x0800695d
 8006924:	0800696b 	.word	0x0800696b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	3214      	adds	r2, #20
 800692e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	ea42 0103 	orr.w	r1, r2, r3
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	3214      	adds	r2, #20
 800693e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006942:	e033      	b.n	80069ac <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	3214      	adds	r2, #20
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	3214      	adds	r2, #20
 8006956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800695a:	e027      	b.n	80069ac <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	3214      	adds	r2, #20
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006968:	e020      	b.n	80069ac <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800696a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800696e:	2b02      	cmp	r3, #2
 8006970:	d006      	beq.n	8006980 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	3214      	adds	r2, #20
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800697e:	e015      	b.n	80069ac <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8006984:	e012      	b.n	80069ac <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006986:	4b34      	ldr	r3, [pc, #208]	@ (8006a58 <xTaskGenericNotifyFromISR+0x1f0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61fb      	str	r3, [r7, #28]
    }
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <xTaskGenericNotifyFromISR+0x144>
                    break;
 80069aa:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80069ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d146      	bne.n	8006a42 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61bb      	str	r3, [r7, #24]
    }
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d4:	4b21      	ldr	r3, [pc, #132]	@ (8006a5c <xTaskGenericNotifyFromISR+0x1f4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d11c      	bne.n	8006a16 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069de:	3304      	adds	r3, #4
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe f9f5 	bl	8004dd0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80069e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	2201      	movs	r2, #1
 80069ec:	409a      	lsls	r2, r3
 80069ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006a60 <xTaskGenericNotifyFromISR+0x1f8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006a60 <xTaskGenericNotifyFromISR+0x1f8>)
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4a17      	ldr	r2, [pc, #92]	@ (8006a64 <xTaskGenericNotifyFromISR+0x1fc>)
 8006a06:	441a      	add	r2, r3
 8006a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f7fe f981 	bl	8004d16 <vListInsertEnd>
 8006a14:	e005      	b.n	8006a22 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a18:	3318      	adds	r3, #24
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4812      	ldr	r0, [pc, #72]	@ (8006a68 <xTaskGenericNotifyFromISR+0x200>)
 8006a1e:	f7fe f97a 	bl	8004d16 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a26:	4b11      	ldr	r3, [pc, #68]	@ (8006a6c <xTaskGenericNotifyFromISR+0x204>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d908      	bls.n	8006a42 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a70 <xTaskGenericNotifyFromISR+0x208>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a44:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f383 8811 	msr	BASEPRI, r3
    }
 8006a4c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8006a50:	4618      	mov	r0, r3
 8006a52:	3740      	adds	r7, #64	@ 0x40
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	200002f4 	.word	0x200002f4
 8006a5c:	20000318 	.word	0x20000318
 8006a60:	200002f8 	.word	0x200002f8
 8006a64:	2000021c 	.word	0x2000021c
 8006a68:	200002b0 	.word	0x200002b0
 8006a6c:	20000218 	.word	0x20000218
 8006a70:	20000304 	.word	0x20000304

08006a74 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006a7e:	4b29      	ldr	r3, [pc, #164]	@ (8006b24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a84:	4b28      	ldr	r3, [pc, #160]	@ (8006b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe f9a0 	bl	8004dd0 <uxListRemove>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a96:	4b24      	ldr	r3, [pc, #144]	@ (8006b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	43da      	mvns	r2, r3
 8006aa4:	4b21      	ldr	r3, [pc, #132]	@ (8006b2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	4a20      	ldr	r2, [pc, #128]	@ (8006b2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006aac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d10a      	bne.n	8006acc <prvAddCurrentTaskToDelayedList+0x58>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006abc:	4b1a      	ldr	r3, [pc, #104]	@ (8006b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	481a      	ldr	r0, [pc, #104]	@ (8006b30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006ac6:	f7fe f926 	bl	8004d16 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006aca:	e026      	b.n	8006b1a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ad4:	4b14      	ldr	r3, [pc, #80]	@ (8006b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d209      	bcs.n	8006af8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ae4:	4b13      	ldr	r3, [pc, #76]	@ (8006b34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3304      	adds	r3, #4
 8006aee:	4619      	mov	r1, r3
 8006af0:	4610      	mov	r0, r2
 8006af2:	f7fe f934 	bl	8004d5e <vListInsert>
}
 8006af6:	e010      	b.n	8006b1a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7fe f92a 	bl	8004d5e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d202      	bcs.n	8006b1a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006b14:	4a09      	ldr	r2, [pc, #36]	@ (8006b3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6013      	str	r3, [r2, #0]
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	200002f4 	.word	0x200002f4
 8006b28:	20000218 	.word	0x20000218
 8006b2c:	200002f8 	.word	0x200002f8
 8006b30:	200002dc 	.word	0x200002dc
 8006b34:	200002ac 	.word	0x200002ac
 8006b38:	200002a8 	.word	0x200002a8
 8006b3c:	20000310 	.word	0x20000310

08006b40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006b4a:	f000 fb3f 	bl	80071cc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006b4e:	4b12      	ldr	r3, [pc, #72]	@ (8006b98 <xTimerCreateTimerTask+0x58>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006b56:	4b11      	ldr	r3, [pc, #68]	@ (8006b9c <xTimerCreateTimerTask+0x5c>)
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006b64:	490e      	ldr	r1, [pc, #56]	@ (8006ba0 <xTimerCreateTimerTask+0x60>)
 8006b66:	480f      	ldr	r0, [pc, #60]	@ (8006ba4 <xTimerCreateTimerTask+0x64>)
 8006b68:	f7fe ff24 	bl	80059b4 <xTaskCreate>
 8006b6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	603b      	str	r3, [r7, #0]
    }
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006b8c:	687b      	ldr	r3, [r7, #4]
    }
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	2000034c 	.word	0x2000034c
 8006b9c:	20000350 	.word	0x20000350
 8006ba0:	08009298 	.word	0x08009298
 8006ba4:	08006d9d 	.word	0x08006d9d

08006ba8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006bb6:	202c      	movs	r0, #44	@ 0x2c
 8006bb8:	f000 fe6a 	bl	8007890 <pvPortMalloc>
 8006bbc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00d      	beq.n	8006be0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f805 	bl	8006bea <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006be0:	697b      	ldr	r3, [r7, #20]
        }
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b086      	sub	sp, #24
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	617b      	str	r3, [r7, #20]
    }
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01e      	beq.n	8006c5a <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006c1c:	f000 fad6 	bl	80071cc <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe f85d 	bl	8004cfc <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c4e:	f043 0304 	orr.w	r3, r3, #4
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006c5a:	bf00      	nop
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	@ 0x28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <xTimerGenericCommand+0x30>
        __asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	623b      	str	r3, [r7, #32]
    }
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006c94:	4b19      	ldr	r3, [pc, #100]	@ (8006cfc <xTimerGenericCommand+0x98>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d02a      	beq.n	8006cf2 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	dc18      	bgt.n	8006ce0 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cae:	f7ff fbdd 	bl	800646c <xTaskGetSchedulerState>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d109      	bne.n	8006ccc <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cb8:	4b10      	ldr	r3, [pc, #64]	@ (8006cfc <xTimerGenericCommand+0x98>)
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	f107 0114 	add.w	r1, r7, #20
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc4:	f7fe f99e 	bl	8005004 <xQueueGenericSend>
 8006cc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cca:	e012      	b.n	8006cf2 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <xTimerGenericCommand+0x98>)
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	f107 0114 	add.w	r1, r7, #20
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f7fe f994 	bl	8005004 <xQueueGenericSend>
 8006cdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cde:	e008      	b.n	8006cf2 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ce0:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <xTimerGenericCommand+0x98>)
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	f107 0114 	add.w	r1, r7, #20
 8006ce8:	2300      	movs	r3, #0
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	f7fe fa8c 	bl	8005208 <xQueueGenericSendFromISR>
 8006cf0:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3728      	adds	r7, #40	@ 0x28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	2000034c 	.word	0x2000034c

08006d00 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0a:	4b23      	ldr	r3, [pc, #140]	@ (8006d98 <prvProcessExpiredTimer+0x98>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe f859 	bl	8004dd0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d023      	beq.n	8006d74 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	18d1      	adds	r1, r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	6978      	ldr	r0, [r7, #20]
 8006d3a:	f000 f8d5 	bl	8006ee8 <prvInsertTimerInActiveList>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d020      	beq.n	8006d86 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d44:	2300      	movs	r3, #0
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f7ff ff88 	bl	8006c64 <xTimerGenericCommand>
 8006d54:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d114      	bne.n	8006d86 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60fb      	str	r3, [r7, #12]
    }
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	6978      	ldr	r0, [r7, #20]
 8006d8c:	4798      	blx	r3
    }
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000344 	.word	0x20000344

08006d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006da4:	f107 0308 	add.w	r3, r7, #8
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 f859 	bl	8006e60 <prvGetNextExpireTime>
 8006dae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4619      	mov	r1, r3
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f805 	bl	8006dc4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006dba:	f000 f8d7 	bl	8006f6c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dbe:	bf00      	nop
 8006dc0:	e7f0      	b.n	8006da4 <prvTimerTask+0x8>
	...

08006dc4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006dce:	f7fe ff89 	bl	8005ce4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dd2:	f107 0308 	add.w	r3, r7, #8
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f866 	bl	8006ea8 <prvSampleTimeNow>
 8006ddc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d130      	bne.n	8006e46 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <prvProcessTimerOrBlockTask+0x3c>
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d806      	bhi.n	8006e00 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006df2:	f7fe ff85 	bl	8005d00 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff ff81 	bl	8006d00 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006dfe:	e024      	b.n	8006e4a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e06:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <prvProcessTimerOrBlockTask+0x90>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <prvProcessTimerOrBlockTask+0x50>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <prvProcessTimerOrBlockTask+0x52>
 8006e14:	2300      	movs	r3, #0
 8006e16:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e18:	4b0f      	ldr	r3, [pc, #60]	@ (8006e58 <prvProcessTimerOrBlockTask+0x94>)
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	4619      	mov	r1, r3
 8006e26:	f7fe fd91 	bl	800594c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006e2a:	f7fe ff69 	bl	8005d00 <xTaskResumeAll>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006e34:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <prvProcessTimerOrBlockTask+0x98>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
    }
 8006e44:	e001      	b.n	8006e4a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006e46:	f7fe ff5b 	bl	8005d00 <xTaskResumeAll>
    }
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000348 	.word	0x20000348
 8006e58:	2000034c 	.word	0x2000034c
 8006e5c:	e000ed04 	.word	0xe000ed04

08006e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <prvGetNextExpireTime+0x44>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <prvGetNextExpireTime+0x16>
 8006e72:	2201      	movs	r2, #1
 8006e74:	e000      	b.n	8006e78 <prvGetNextExpireTime+0x18>
 8006e76:	2200      	movs	r2, #0
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e84:	4b07      	ldr	r3, [pc, #28]	@ (8006ea4 <prvGetNextExpireTime+0x44>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	e001      	b.n	8006e94 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006e94:	68fb      	ldr	r3, [r7, #12]
    }
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000344 	.word	0x20000344

08006ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006eb0:	f7fe ffc4 	bl	8005e3c <xTaskGetTickCount>
 8006eb4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee4 <prvSampleTimeNow+0x3c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d205      	bcs.n	8006ecc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006ec0:	f000 f91e 	bl	8007100 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	e002      	b.n	8006ed2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006ed2:	4a04      	ldr	r2, [pc, #16]	@ (8006ee4 <prvSampleTimeNow+0x3c>)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
    }
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000354 	.word	0x20000354

08006ee8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d812      	bhi.n	8006f34 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	1ad2      	subs	r2, r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d302      	bcc.n	8006f22 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	e01b      	b.n	8006f5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f22:	4b10      	ldr	r3, [pc, #64]	@ (8006f64 <prvInsertTimerInActiveList+0x7c>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	f7fd ff16 	bl	8004d5e <vListInsert>
 8006f32:	e012      	b.n	8006f5a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d206      	bcs.n	8006f4a <prvInsertTimerInActiveList+0x62>
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d302      	bcc.n	8006f4a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e007      	b.n	8006f5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f4a:	4b07      	ldr	r3, [pc, #28]	@ (8006f68 <prvInsertTimerInActiveList+0x80>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3304      	adds	r3, #4
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f7fd ff02 	bl	8004d5e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006f5a:	697b      	ldr	r3, [r7, #20]
    }
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000348 	.word	0x20000348
 8006f68:	20000344 	.word	0x20000344

08006f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	@ 0x30
 8006f70:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f72:	e0b2      	b.n	80070da <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f2c0 80af 	blt.w	80070da <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fd ff1f 	bl	8004dd0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f92:	1d3b      	adds	r3, r7, #4
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff ff87 	bl	8006ea8 <prvSampleTimeNow>
 8006f9a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b09      	cmp	r3, #9
 8006fa0:	f200 8098 	bhi.w	80070d4 <prvProcessReceivedCommands+0x168>
 8006fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <prvProcessReceivedCommands+0x40>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08006fd5 	.word	0x08006fd5
 8006fb4:	08006fd5 	.word	0x08006fd5
 8006fb8:	0800704b 	.word	0x0800704b
 8006fbc:	0800705f 	.word	0x0800705f
 8006fc0:	080070ab 	.word	0x080070ab
 8006fc4:	08006fd5 	.word	0x08006fd5
 8006fc8:	08006fd5 	.word	0x08006fd5
 8006fcc:	0800704b 	.word	0x0800704b
 8006fd0:	0800705f 	.word	0x0800705f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	18d1      	adds	r1, r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a3a      	ldr	r2, [r7, #32]
 8006ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ff4:	f7ff ff78 	bl	8006ee8 <prvInsertTimerInActiveList>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d06c      	beq.n	80070d8 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007004:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d061      	beq.n	80070d8 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	441a      	add	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2300      	movs	r3, #0
 8007022:	2100      	movs	r1, #0
 8007024:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007026:	f7ff fe1d 	bl	8006c64 <xTimerGenericCommand>
 800702a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d152      	bne.n	80070d8 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	61bb      	str	r3, [r7, #24]
    }
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	b2da      	uxtb	r2, r3
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800705c:	e03d      	b.n	80070da <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10b      	bne.n	8007096 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	617b      	str	r3, [r7, #20]
    }
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	e7fd      	b.n	8007092 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	699a      	ldr	r2, [r3, #24]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	18d1      	adds	r1, r2, r3
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	6a3a      	ldr	r2, [r7, #32]
 80070a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070a4:	f7ff ff20 	bl	8006ee8 <prvInsertTimerInActiveList>
                        break;
 80070a8:	e017      	b.n	80070da <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d103      	bne.n	80070c0 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80070b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070ba:	f000 fccb 	bl	8007a54 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80070be:	e00c      	b.n	80070da <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80070d2:	e002      	b.n	80070da <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <prvProcessReceivedCommands+0x16e>
                        break;
 80070d8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070da:	4b08      	ldr	r3, [pc, #32]	@ (80070fc <prvProcessReceivedCommands+0x190>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f107 0108 	add.w	r1, r7, #8
 80070e2:	2200      	movs	r2, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe f93d 	bl	8005364 <xQueueReceive>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f47f af41 	bne.w	8006f74 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	3728      	adds	r7, #40	@ 0x28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	2000034c 	.word	0x2000034c

08007100 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007106:	e049      	b.n	800719c <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007108:	4b2e      	ldr	r3, [pc, #184]	@ (80071c4 <prvSwitchTimerLists+0xc4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007112:	4b2c      	ldr	r3, [pc, #176]	@ (80071c4 <prvSwitchTimerLists+0xc4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3304      	adds	r3, #4
 8007120:	4618      	mov	r0, r3
 8007122:	f7fd fe55 	bl	8004dd0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d02f      	beq.n	800719c <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4413      	add	r3, r2
 8007144:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	429a      	cmp	r2, r3
 800714c:	d90e      	bls.n	800716c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800715a:	4b1a      	ldr	r3, [pc, #104]	@ (80071c4 <prvSwitchTimerLists+0xc4>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3304      	adds	r3, #4
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f7fd fdfa 	bl	8004d5e <vListInsert>
 800716a:	e017      	b.n	800719c <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800716c:	2300      	movs	r3, #0
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	2300      	movs	r3, #0
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff fd74 	bl	8006c64 <xTimerGenericCommand>
 800717c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <prvSwitchTimerLists+0x9c>
        __asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	603b      	str	r3, [r7, #0]
    }
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	e7fd      	b.n	8007198 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800719c:	4b09      	ldr	r3, [pc, #36]	@ (80071c4 <prvSwitchTimerLists+0xc4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1b0      	bne.n	8007108 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80071a6:	4b07      	ldr	r3, [pc, #28]	@ (80071c4 <prvSwitchTimerLists+0xc4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <prvSwitchTimerLists+0xc8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a04      	ldr	r2, [pc, #16]	@ (80071c4 <prvSwitchTimerLists+0xc4>)
 80071b2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80071b4:	4a04      	ldr	r2, [pc, #16]	@ (80071c8 <prvSwitchTimerLists+0xc8>)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6013      	str	r3, [r2, #0]
    }
 80071ba:	bf00      	nop
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000344 	.word	0x20000344
 80071c8:	20000348 	.word	0x20000348

080071cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80071d0:	f000 fa34 	bl	800763c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80071d4:	4b12      	ldr	r3, [pc, #72]	@ (8007220 <prvCheckForValidListAndQueue+0x54>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d11d      	bne.n	8007218 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80071dc:	4811      	ldr	r0, [pc, #68]	@ (8007224 <prvCheckForValidListAndQueue+0x58>)
 80071de:	f7fd fd6d 	bl	8004cbc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80071e2:	4811      	ldr	r0, [pc, #68]	@ (8007228 <prvCheckForValidListAndQueue+0x5c>)
 80071e4:	f7fd fd6a 	bl	8004cbc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80071e8:	4b10      	ldr	r3, [pc, #64]	@ (800722c <prvCheckForValidListAndQueue+0x60>)
 80071ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007224 <prvCheckForValidListAndQueue+0x58>)
 80071ec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80071ee:	4b10      	ldr	r3, [pc, #64]	@ (8007230 <prvCheckForValidListAndQueue+0x64>)
 80071f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007228 <prvCheckForValidListAndQueue+0x5c>)
 80071f2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80071f4:	2200      	movs	r2, #0
 80071f6:	210c      	movs	r1, #12
 80071f8:	200a      	movs	r0, #10
 80071fa:	f7fd fe7d 	bl	8004ef8 <xQueueGenericCreate>
 80071fe:	4603      	mov	r3, r0
 8007200:	4a07      	ldr	r2, [pc, #28]	@ (8007220 <prvCheckForValidListAndQueue+0x54>)
 8007202:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007204:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <prvCheckForValidListAndQueue+0x54>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800720c:	4b04      	ldr	r3, [pc, #16]	@ (8007220 <prvCheckForValidListAndQueue+0x54>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4908      	ldr	r1, [pc, #32]	@ (8007234 <prvCheckForValidListAndQueue+0x68>)
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe fb70 	bl	80058f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007218:	f000 fa42 	bl	80076a0 <vPortExitCritical>
    }
 800721c:	bf00      	nop
 800721e:	bd80      	pop	{r7, pc}
 8007220:	2000034c 	.word	0x2000034c
 8007224:	2000031c 	.word	0x2000031c
 8007228:	20000330 	.word	0x20000330
 800722c:	20000344 	.word	0x20000344
 8007230:	20000348 	.word	0x20000348
 8007234:	080092a0 	.word	0x080092a0

08007238 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10b      	bne.n	8007262 <xTimerIsTimerActive+0x2a>
        __asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	60fb      	str	r3, [r7, #12]
    }
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	e7fd      	b.n	800725e <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8007262:	f000 f9eb 	bl	800763c <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <xTimerIsTimerActive+0x42>
            {
                xReturn = pdFALSE;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e001      	b.n	800727e <xTimerIsTimerActive+0x46>
            }
            else
            {
                xReturn = pdTRUE;
 800727a:	2301      	movs	r3, #1
 800727c:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 800727e:	f000 fa0f 	bl	80076a0 <vPortExitCritical>

        return xReturn;
 8007282:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10b      	bne.n	80072b6 <pvTimerGetTimerID+0x2a>
        __asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	60fb      	str	r3, [r7, #12]
    }
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	e7fd      	b.n	80072b2 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80072b6:	f000 f9c1 	bl	800763c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80072c0:	f000 f9ee 	bl	80076a0 <vPortExitCritical>

        return pvReturn;
 80072c4:	693b      	ldr	r3, [r7, #16]
    }
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3b04      	subs	r3, #4
 80072e0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3b04      	subs	r3, #4
 80072ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f023 0201 	bic.w	r2, r3, #1
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3b04      	subs	r3, #4
 80072fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007300:	4a0c      	ldr	r2, [pc, #48]	@ (8007334 <pxPortInitialiseStack+0x64>)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3b14      	subs	r3, #20
 800730a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3b04      	subs	r3, #4
 8007316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f06f 0202 	mvn.w	r2, #2
 800731e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3b20      	subs	r3, #32
 8007324:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007326:	68fb      	ldr	r3, [r7, #12]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	08007339 	.word	0x08007339

08007338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007342:	4b13      	ldr	r3, [pc, #76]	@ (8007390 <prvTaskExitError+0x58>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734a:	d00b      	beq.n	8007364 <prvTaskExitError+0x2c>
        __asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	60fb      	str	r3, [r7, #12]
    }
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <prvTaskExitError+0x28>
        __asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60bb      	str	r3, [r7, #8]
    }
 8007376:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007378:	bf00      	nop
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0fc      	beq.n	800737a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20000018 	.word	0x20000018
	...

080073a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80073a0:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <pxCurrentTCBConst2>)
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	6808      	ldr	r0, [r1, #0]
 80073a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	f380 8809 	msr	PSP, r0
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8811 	msr	BASEPRI, r0
 80073ba:	4770      	bx	lr
 80073bc:	f3af 8000 	nop.w

080073c0 <pxCurrentTCBConst2>:
 80073c0:	20000218 	.word	0x20000218
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop

080073c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80073c8:	4808      	ldr	r0, [pc, #32]	@ (80073ec <prvPortStartFirstTask+0x24>)
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	6800      	ldr	r0, [r0, #0]
 80073ce:	f380 8808 	msr	MSP, r0
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f380 8814 	msr	CONTROL, r0
 80073da:	b662      	cpsie	i
 80073dc:	b661      	cpsie	f
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	df00      	svc	0
 80073e8:	bf00      	nop
 80073ea:	0000      	.short	0x0000
 80073ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop

080073f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073fa:	4b47      	ldr	r3, [pc, #284]	@ (8007518 <xPortStartScheduler+0x124>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a47      	ldr	r2, [pc, #284]	@ (800751c <xPortStartScheduler+0x128>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d10b      	bne.n	800741c <xPortStartScheduler+0x28>
        __asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	613b      	str	r3, [r7, #16]
    }
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800741c:	4b3e      	ldr	r3, [pc, #248]	@ (8007518 <xPortStartScheduler+0x124>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a3f      	ldr	r2, [pc, #252]	@ (8007520 <xPortStartScheduler+0x12c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d10b      	bne.n	800743e <xPortStartScheduler+0x4a>
        __asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	60fb      	str	r3, [r7, #12]
    }
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800743e:	4b39      	ldr	r3, [pc, #228]	@ (8007524 <xPortStartScheduler+0x130>)
 8007440:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	22ff      	movs	r2, #255	@ 0xff
 800744e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007460:	b2da      	uxtb	r2, r3
 8007462:	4b31      	ldr	r3, [pc, #196]	@ (8007528 <xPortStartScheduler+0x134>)
 8007464:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007466:	4b31      	ldr	r3, [pc, #196]	@ (800752c <xPortStartScheduler+0x138>)
 8007468:	2207      	movs	r2, #7
 800746a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800746c:	e009      	b.n	8007482 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800746e:	4b2f      	ldr	r3, [pc, #188]	@ (800752c <xPortStartScheduler+0x138>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3b01      	subs	r3, #1
 8007474:	4a2d      	ldr	r2, [pc, #180]	@ (800752c <xPortStartScheduler+0x138>)
 8007476:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	b2db      	uxtb	r3, r3
 8007480:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748a:	2b80      	cmp	r3, #128	@ 0x80
 800748c:	d0ef      	beq.n	800746e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800748e:	4b27      	ldr	r3, [pc, #156]	@ (800752c <xPortStartScheduler+0x138>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f1c3 0307 	rsb	r3, r3, #7
 8007496:	2b04      	cmp	r3, #4
 8007498:	d00b      	beq.n	80074b2 <xPortStartScheduler+0xbe>
        __asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	60bb      	str	r3, [r7, #8]
    }
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074b2:	4b1e      	ldr	r3, [pc, #120]	@ (800752c <xPortStartScheduler+0x138>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	4a1c      	ldr	r2, [pc, #112]	@ (800752c <xPortStartScheduler+0x138>)
 80074ba:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074bc:	4b1b      	ldr	r3, [pc, #108]	@ (800752c <xPortStartScheduler+0x138>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074c4:	4a19      	ldr	r2, [pc, #100]	@ (800752c <xPortStartScheduler+0x138>)
 80074c6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80074d0:	4b17      	ldr	r3, [pc, #92]	@ (8007530 <xPortStartScheduler+0x13c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a16      	ldr	r2, [pc, #88]	@ (8007530 <xPortStartScheduler+0x13c>)
 80074d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074da:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80074dc:	4b14      	ldr	r3, [pc, #80]	@ (8007530 <xPortStartScheduler+0x13c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a13      	ldr	r2, [pc, #76]	@ (8007530 <xPortStartScheduler+0x13c>)
 80074e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80074e6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80074e8:	f000 f960 	bl	80077ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80074ec:	4b11      	ldr	r3, [pc, #68]	@ (8007534 <xPortStartScheduler+0x140>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80074f2:	f000 f97f 	bl	80077f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074f6:	4b10      	ldr	r3, [pc, #64]	@ (8007538 <xPortStartScheduler+0x144>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a0f      	ldr	r2, [pc, #60]	@ (8007538 <xPortStartScheduler+0x144>)
 80074fc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007500:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007502:	f7ff ff61 	bl	80073c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007506:	f7fe fd63 	bl	8005fd0 <vTaskSwitchContext>
    prvTaskExitError();
 800750a:	f7ff ff15 	bl	8007338 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	e000ed00 	.word	0xe000ed00
 800751c:	410fc271 	.word	0x410fc271
 8007520:	410fc270 	.word	0x410fc270
 8007524:	e000e400 	.word	0xe000e400
 8007528:	20000358 	.word	0x20000358
 800752c:	2000035c 	.word	0x2000035c
 8007530:	e000ed20 	.word	0xe000ed20
 8007534:	20000018 	.word	0x20000018
 8007538:	e000ef34 	.word	0xe000ef34

0800753c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007542:	4b38      	ldr	r3, [pc, #224]	@ (8007624 <vInitPrioGroupValue+0xe8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a38      	ldr	r2, [pc, #224]	@ (8007628 <vInitPrioGroupValue+0xec>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d10b      	bne.n	8007564 <vInitPrioGroupValue+0x28>
        __asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	613b      	str	r3, [r7, #16]
    }
 800755e:	bf00      	nop
 8007560:	bf00      	nop
 8007562:	e7fd      	b.n	8007560 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007564:	4b2f      	ldr	r3, [pc, #188]	@ (8007624 <vInitPrioGroupValue+0xe8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a30      	ldr	r2, [pc, #192]	@ (800762c <vInitPrioGroupValue+0xf0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d10b      	bne.n	8007586 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	60fb      	str	r3, [r7, #12]
    }
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007586:	4b2a      	ldr	r3, [pc, #168]	@ (8007630 <vInitPrioGroupValue+0xf4>)
 8007588:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	22ff      	movs	r2, #255	@ 0xff
 8007596:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	4b22      	ldr	r3, [pc, #136]	@ (8007634 <vInitPrioGroupValue+0xf8>)
 80075ac:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ae:	4b22      	ldr	r3, [pc, #136]	@ (8007638 <vInitPrioGroupValue+0xfc>)
 80075b0:	2207      	movs	r2, #7
 80075b2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075b4:	e009      	b.n	80075ca <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80075b6:	4b20      	ldr	r3, [pc, #128]	@ (8007638 <vInitPrioGroupValue+0xfc>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007638 <vInitPrioGroupValue+0xfc>)
 80075be:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d2:	2b80      	cmp	r3, #128	@ 0x80
 80075d4:	d0ef      	beq.n	80075b6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075d6:	4b18      	ldr	r3, [pc, #96]	@ (8007638 <vInitPrioGroupValue+0xfc>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f1c3 0307 	rsb	r3, r3, #7
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d00b      	beq.n	80075fa <vInitPrioGroupValue+0xbe>
        __asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	60bb      	str	r3, [r7, #8]
    }
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007638 <vInitPrioGroupValue+0xfc>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	4a0d      	ldr	r2, [pc, #52]	@ (8007638 <vInitPrioGroupValue+0xfc>)
 8007602:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007604:	4b0c      	ldr	r3, [pc, #48]	@ (8007638 <vInitPrioGroupValue+0xfc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800760c:	4a0a      	ldr	r2, [pc, #40]	@ (8007638 <vInitPrioGroupValue+0xfc>)
 800760e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	b2da      	uxtb	r2, r3
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8007618:	bf00      	nop
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	e000ed00 	.word	0xe000ed00
 8007628:	410fc271 	.word	0x410fc271
 800762c:	410fc270 	.word	0x410fc270
 8007630:	e000e400 	.word	0xe000e400
 8007634:	20000358 	.word	0x20000358
 8007638:	2000035c 	.word	0x2000035c

0800763c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
        __asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	607b      	str	r3, [r7, #4]
    }
 8007654:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007656:	4b10      	ldr	r3, [pc, #64]	@ (8007698 <vPortEnterCritical+0x5c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	4a0e      	ldr	r2, [pc, #56]	@ (8007698 <vPortEnterCritical+0x5c>)
 800765e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007660:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <vPortEnterCritical+0x5c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d110      	bne.n	800768a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007668:	4b0c      	ldr	r3, [pc, #48]	@ (800769c <vPortEnterCritical+0x60>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <vPortEnterCritical+0x4e>
        __asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	603b      	str	r3, [r7, #0]
    }
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <vPortEnterCritical+0x4a>
    }
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20000018 	.word	0x20000018
 800769c:	e000ed04 	.word	0xe000ed04

080076a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80076a6:	4b12      	ldr	r3, [pc, #72]	@ (80076f0 <vPortExitCritical+0x50>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10b      	bne.n	80076c6 <vPortExitCritical+0x26>
        __asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	607b      	str	r3, [r7, #4]
    }
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80076c6:	4b0a      	ldr	r3, [pc, #40]	@ (80076f0 <vPortExitCritical+0x50>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	4a08      	ldr	r2, [pc, #32]	@ (80076f0 <vPortExitCritical+0x50>)
 80076ce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80076d0:	4b07      	ldr	r3, [pc, #28]	@ (80076f0 <vPortExitCritical+0x50>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <vPortExitCritical+0x44>
 80076d8:	2300      	movs	r3, #0
 80076da:	603b      	str	r3, [r7, #0]
        __asm volatile
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	f383 8811 	msr	BASEPRI, r3
    }
 80076e2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20000018 	.word	0x20000018
	...

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7fe fc4e 	bl	8005fd0 <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	20000218 	.word	0x20000218
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
        __asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
    }
 8007780:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007782:	f7fe fb6b 	bl	8005e5c <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <SysTick_Handler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
    }
 800779e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	@ (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	20000004 	.word	0x20000004
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
 8007802:	0000      	.short	0x0000
 8007804:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop

0800780c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007812:	f3ef 8305 	mrs	r3, IPSR
 8007816:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b0f      	cmp	r3, #15
 800781c:	d915      	bls.n	800784a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781e:	4a18      	ldr	r2, [pc, #96]	@ (8007880 <vPortValidateInterruptPriority+0x74>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007828:	4b16      	ldr	r3, [pc, #88]	@ (8007884 <vPortValidateInterruptPriority+0x78>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	7afa      	ldrb	r2, [r7, #11]
 800782e:	429a      	cmp	r2, r3
 8007830:	d20b      	bcs.n	800784a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	607b      	str	r3, [r7, #4]
    }
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800784a:	4b0f      	ldr	r3, [pc, #60]	@ (8007888 <vPortValidateInterruptPriority+0x7c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007852:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <vPortValidateInterruptPriority+0x80>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d90b      	bls.n	8007872 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	603b      	str	r3, [r7, #0]
    }
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	e7fd      	b.n	800786e <vPortValidateInterruptPriority+0x62>
    }
 8007872:	bf00      	nop
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	e000e3f0 	.word	0xe000e3f0
 8007884:	20000358 	.word	0x20000358
 8007888:	e000ed0c 	.word	0xe000ed0c
 800788c:	2000035c 	.word	0x2000035c

08007890 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	@ 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800789c:	f7fe fa22 	bl	8005ce4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80078a0:	4b66      	ldr	r3, [pc, #408]	@ (8007a3c <pvPortMalloc+0x1ac>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80078a8:	f000 f938 	bl	8007b1c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078ac:	4b64      	ldr	r3, [pc, #400]	@ (8007a40 <pvPortMalloc+0x1b0>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 80a9 	bne.w	8007a0c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d02e      	beq.n	800791e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80078c0:	2208      	movs	r2, #8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d228      	bcs.n	800791e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80078cc:	2208      	movs	r2, #8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d022      	beq.n	8007924 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f023 0307 	bic.w	r3, r3, #7
 80078e4:	3308      	adds	r3, #8
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d215      	bcs.n	8007918 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	3308      	adds	r3, #8
 80078f4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d011      	beq.n	8007924 <pvPortMalloc+0x94>
        __asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	617b      	str	r3, [r7, #20]
    }
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	e7fd      	b.n	8007914 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800791c:	e002      	b.n	8007924 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
 8007922:	e000      	b.n	8007926 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007924:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d06f      	beq.n	8007a0c <pvPortMalloc+0x17c>
 800792c:	4b45      	ldr	r3, [pc, #276]	@ (8007a44 <pvPortMalloc+0x1b4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d86a      	bhi.n	8007a0c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007936:	4b44      	ldr	r3, [pc, #272]	@ (8007a48 <pvPortMalloc+0x1b8>)
 8007938:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800793a:	4b43      	ldr	r3, [pc, #268]	@ (8007a48 <pvPortMalloc+0x1b8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007940:	e004      	b.n	800794c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d903      	bls.n	800795e <pvPortMalloc+0xce>
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f1      	bne.n	8007942 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800795e:	4b37      	ldr	r3, [pc, #220]	@ (8007a3c <pvPortMalloc+0x1ac>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007964:	429a      	cmp	r2, r3
 8007966:	d051      	beq.n	8007a0c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2208      	movs	r2, #8
 800796e:	4413      	add	r3, r2
 8007970:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	1ad2      	subs	r2, r2, r3
 8007982:	2308      	movs	r3, #8
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	429a      	cmp	r2, r3
 8007988:	d920      	bls.n	80079cc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800798a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4413      	add	r3, r2
 8007990:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <pvPortMalloc+0x124>
        __asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	613b      	str	r3, [r7, #16]
    }
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	1ad2      	subs	r2, r2, r3
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079c6:	69b8      	ldr	r0, [r7, #24]
 80079c8:	f000 f90a 	bl	8007be0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007a44 <pvPortMalloc+0x1b4>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007a44 <pvPortMalloc+0x1b4>)
 80079d8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079da:	4b1a      	ldr	r3, [pc, #104]	@ (8007a44 <pvPortMalloc+0x1b4>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b1b      	ldr	r3, [pc, #108]	@ (8007a4c <pvPortMalloc+0x1bc>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d203      	bcs.n	80079ee <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079e6:	4b17      	ldr	r3, [pc, #92]	@ (8007a44 <pvPortMalloc+0x1b4>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a18      	ldr	r2, [pc, #96]	@ (8007a4c <pvPortMalloc+0x1bc>)
 80079ec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	4b13      	ldr	r3, [pc, #76]	@ (8007a40 <pvPortMalloc+0x1b0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	431a      	orrs	r2, r3
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80079fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007a02:	4b13      	ldr	r3, [pc, #76]	@ (8007a50 <pvPortMalloc+0x1c0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3301      	adds	r3, #1
 8007a08:	4a11      	ldr	r2, [pc, #68]	@ (8007a50 <pvPortMalloc+0x1c0>)
 8007a0a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007a0c:	f7fe f978 	bl	8005d00 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00b      	beq.n	8007a32 <pvPortMalloc+0x1a2>
        __asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	60fb      	str	r3, [r7, #12]
    }
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	e7fd      	b.n	8007a2e <pvPortMalloc+0x19e>
    return pvReturn;
 8007a32:	69fb      	ldr	r3, [r7, #28]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3728      	adds	r7, #40	@ 0x28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20012f68 	.word	0x20012f68
 8007a40:	20012f7c 	.word	0x20012f7c
 8007a44:	20012f6c 	.word	0x20012f6c
 8007a48:	20012f60 	.word	0x20012f60
 8007a4c:	20012f70 	.word	0x20012f70
 8007a50:	20012f74 	.word	0x20012f74

08007a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d04f      	beq.n	8007b06 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007a66:	2308      	movs	r3, #8
 8007a68:	425b      	negs	r3, r3
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	4b25      	ldr	r3, [pc, #148]	@ (8007b10 <vPortFree+0xbc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10b      	bne.n	8007a9a <vPortFree+0x46>
        __asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60fb      	str	r3, [r7, #12]
    }
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	e7fd      	b.n	8007a96 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <vPortFree+0x66>
        __asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	60bb      	str	r3, [r7, #8]
    }
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	4b14      	ldr	r3, [pc, #80]	@ (8007b10 <vPortFree+0xbc>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01e      	beq.n	8007b06 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d11a      	bne.n	8007b06 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8007b10 <vPortFree+0xbc>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	401a      	ands	r2, r3
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007ae0:	f7fe f900 	bl	8005ce4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8007b14 <vPortFree+0xc0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4413      	add	r3, r2
 8007aee:	4a09      	ldr	r2, [pc, #36]	@ (8007b14 <vPortFree+0xc0>)
 8007af0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007af2:	6938      	ldr	r0, [r7, #16]
 8007af4:	f000 f874 	bl	8007be0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007af8:	4b07      	ldr	r3, [pc, #28]	@ (8007b18 <vPortFree+0xc4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	4a06      	ldr	r2, [pc, #24]	@ (8007b18 <vPortFree+0xc4>)
 8007b00:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007b02:	f7fe f8fd 	bl	8005d00 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007b06:	bf00      	nop
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20012f7c 	.word	0x20012f7c
 8007b14:	20012f6c 	.word	0x20012f6c
 8007b18:	20012f78 	.word	0x20012f78

08007b1c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b22:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8007b26:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007b28:	4b27      	ldr	r3, [pc, #156]	@ (8007bc8 <prvHeapInit+0xac>)
 8007b2a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3307      	adds	r3, #7
 8007b3a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0307 	bic.w	r3, r3, #7
 8007b42:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007bc8 <prvHeapInit+0xac>)
 8007b4c:	4413      	add	r3, r2
 8007b4e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b54:	4a1d      	ldr	r2, [pc, #116]	@ (8007bcc <prvHeapInit+0xb0>)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bcc <prvHeapInit+0xb0>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	4413      	add	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007b68:	2208      	movs	r2, #8
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1a9b      	subs	r3, r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0307 	bic.w	r3, r3, #7
 8007b76:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4a15      	ldr	r2, [pc, #84]	@ (8007bd0 <prvHeapInit+0xb4>)
 8007b7c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007b7e:	4b14      	ldr	r3, [pc, #80]	@ (8007bd0 <prvHeapInit+0xb4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007b86:	4b12      	ldr	r3, [pc, #72]	@ (8007bd0 <prvHeapInit+0xb4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd0 <prvHeapInit+0xb4>)
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd4 <prvHeapInit+0xb8>)
 8007baa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4a09      	ldr	r2, [pc, #36]	@ (8007bd8 <prvHeapInit+0xbc>)
 8007bb2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bb4:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <prvHeapInit+0xc0>)
 8007bb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007bba:	601a      	str	r2, [r3, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	20000360 	.word	0x20000360
 8007bcc:	20012f60 	.word	0x20012f60
 8007bd0:	20012f68 	.word	0x20012f68
 8007bd4:	20012f70 	.word	0x20012f70
 8007bd8:	20012f6c 	.word	0x20012f6c
 8007bdc:	20012f7c 	.word	0x20012f7c

08007be0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007be8:	4b28      	ldr	r3, [pc, #160]	@ (8007c8c <prvInsertBlockIntoFreeList+0xac>)
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	e002      	b.n	8007bf4 <prvInsertBlockIntoFreeList+0x14>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d8f7      	bhi.n	8007bee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	4413      	add	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d108      	bne.n	8007c22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	441a      	add	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d118      	bne.n	8007c68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b15      	ldr	r3, [pc, #84]	@ (8007c90 <prvInsertBlockIntoFreeList+0xb0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d00d      	beq.n	8007c5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	441a      	add	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	e008      	b.n	8007c70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c90 <prvInsertBlockIntoFreeList+0xb0>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e003      	b.n	8007c70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d002      	beq.n	8007c7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007c7e:	bf00      	nop
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20012f60 	.word	0x20012f60
 8007c90:	20012f68 	.word	0x20012f68

08007c94 <std>:
 8007c94:	2300      	movs	r3, #0
 8007c96:	b510      	push	{r4, lr}
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca2:	6083      	str	r3, [r0, #8]
 8007ca4:	8181      	strh	r1, [r0, #12]
 8007ca6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ca8:	81c2      	strh	r2, [r0, #14]
 8007caa:	6183      	str	r3, [r0, #24]
 8007cac:	4619      	mov	r1, r3
 8007cae:	2208      	movs	r2, #8
 8007cb0:	305c      	adds	r0, #92	@ 0x5c
 8007cb2:	f000 f926 	bl	8007f02 <memset>
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cec <std+0x58>)
 8007cb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cba:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <std+0x5c>)
 8007cbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf4 <std+0x60>)
 8007cc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <std+0x64>)
 8007cc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cfc <std+0x68>)
 8007cc8:	6224      	str	r4, [r4, #32]
 8007cca:	429c      	cmp	r4, r3
 8007ccc:	d006      	beq.n	8007cdc <std+0x48>
 8007cce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cd2:	4294      	cmp	r4, r2
 8007cd4:	d002      	beq.n	8007cdc <std+0x48>
 8007cd6:	33d0      	adds	r3, #208	@ 0xd0
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d105      	bne.n	8007ce8 <std+0x54>
 8007cdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce4:	f000 b986 	b.w	8007ff4 <__retarget_lock_init_recursive>
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop
 8007cec:	08007e7d 	.word	0x08007e7d
 8007cf0:	08007e9f 	.word	0x08007e9f
 8007cf4:	08007ed7 	.word	0x08007ed7
 8007cf8:	08007efb 	.word	0x08007efb
 8007cfc:	20012f80 	.word	0x20012f80

08007d00 <stdio_exit_handler>:
 8007d00:	4a02      	ldr	r2, [pc, #8]	@ (8007d0c <stdio_exit_handler+0xc>)
 8007d02:	4903      	ldr	r1, [pc, #12]	@ (8007d10 <stdio_exit_handler+0x10>)
 8007d04:	4803      	ldr	r0, [pc, #12]	@ (8007d14 <stdio_exit_handler+0x14>)
 8007d06:	f000 b869 	b.w	8007ddc <_fwalk_sglue>
 8007d0a:	bf00      	nop
 8007d0c:	2000001c 	.word	0x2000001c
 8007d10:	08008b61 	.word	0x08008b61
 8007d14:	2000002c 	.word	0x2000002c

08007d18 <cleanup_stdio>:
 8007d18:	6841      	ldr	r1, [r0, #4]
 8007d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d4c <cleanup_stdio+0x34>)
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	4604      	mov	r4, r0
 8007d22:	d001      	beq.n	8007d28 <cleanup_stdio+0x10>
 8007d24:	f000 ff1c 	bl	8008b60 <_fflush_r>
 8007d28:	68a1      	ldr	r1, [r4, #8]
 8007d2a:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <cleanup_stdio+0x38>)
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	d002      	beq.n	8007d36 <cleanup_stdio+0x1e>
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 ff15 	bl	8008b60 <_fflush_r>
 8007d36:	68e1      	ldr	r1, [r4, #12]
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <cleanup_stdio+0x3c>)
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	d004      	beq.n	8007d48 <cleanup_stdio+0x30>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	f000 bf0c 	b.w	8008b60 <_fflush_r>
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20012f80 	.word	0x20012f80
 8007d50:	20012fe8 	.word	0x20012fe8
 8007d54:	20013050 	.word	0x20013050

08007d58 <global_stdio_init.part.0>:
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d88 <global_stdio_init.part.0+0x30>)
 8007d5c:	4c0b      	ldr	r4, [pc, #44]	@ (8007d8c <global_stdio_init.part.0+0x34>)
 8007d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007d90 <global_stdio_init.part.0+0x38>)
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	4620      	mov	r0, r4
 8007d64:	2200      	movs	r2, #0
 8007d66:	2104      	movs	r1, #4
 8007d68:	f7ff ff94 	bl	8007c94 <std>
 8007d6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d70:	2201      	movs	r2, #1
 8007d72:	2109      	movs	r1, #9
 8007d74:	f7ff ff8e 	bl	8007c94 <std>
 8007d78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d82:	2112      	movs	r1, #18
 8007d84:	f7ff bf86 	b.w	8007c94 <std>
 8007d88:	200130b8 	.word	0x200130b8
 8007d8c:	20012f80 	.word	0x20012f80
 8007d90:	08007d01 	.word	0x08007d01

08007d94 <__sfp_lock_acquire>:
 8007d94:	4801      	ldr	r0, [pc, #4]	@ (8007d9c <__sfp_lock_acquire+0x8>)
 8007d96:	f000 b92e 	b.w	8007ff6 <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	200130c1 	.word	0x200130c1

08007da0 <__sfp_lock_release>:
 8007da0:	4801      	ldr	r0, [pc, #4]	@ (8007da8 <__sfp_lock_release+0x8>)
 8007da2:	f000 b929 	b.w	8007ff8 <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	200130c1 	.word	0x200130c1

08007dac <__sinit>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	4604      	mov	r4, r0
 8007db0:	f7ff fff0 	bl	8007d94 <__sfp_lock_acquire>
 8007db4:	6a23      	ldr	r3, [r4, #32]
 8007db6:	b11b      	cbz	r3, 8007dc0 <__sinit+0x14>
 8007db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dbc:	f7ff bff0 	b.w	8007da0 <__sfp_lock_release>
 8007dc0:	4b04      	ldr	r3, [pc, #16]	@ (8007dd4 <__sinit+0x28>)
 8007dc2:	6223      	str	r3, [r4, #32]
 8007dc4:	4b04      	ldr	r3, [pc, #16]	@ (8007dd8 <__sinit+0x2c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f5      	bne.n	8007db8 <__sinit+0xc>
 8007dcc:	f7ff ffc4 	bl	8007d58 <global_stdio_init.part.0>
 8007dd0:	e7f2      	b.n	8007db8 <__sinit+0xc>
 8007dd2:	bf00      	nop
 8007dd4:	08007d19 	.word	0x08007d19
 8007dd8:	200130b8 	.word	0x200130b8

08007ddc <_fwalk_sglue>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	4607      	mov	r7, r0
 8007de2:	4688      	mov	r8, r1
 8007de4:	4614      	mov	r4, r2
 8007de6:	2600      	movs	r6, #0
 8007de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dec:	f1b9 0901 	subs.w	r9, r9, #1
 8007df0:	d505      	bpl.n	8007dfe <_fwalk_sglue+0x22>
 8007df2:	6824      	ldr	r4, [r4, #0]
 8007df4:	2c00      	cmp	r4, #0
 8007df6:	d1f7      	bne.n	8007de8 <_fwalk_sglue+0xc>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d907      	bls.n	8007e14 <_fwalk_sglue+0x38>
 8007e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	d003      	beq.n	8007e14 <_fwalk_sglue+0x38>
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c0      	blx	r8
 8007e12:	4306      	orrs	r6, r0
 8007e14:	3568      	adds	r5, #104	@ 0x68
 8007e16:	e7e9      	b.n	8007dec <_fwalk_sglue+0x10>

08007e18 <iprintf>:
 8007e18:	b40f      	push	{r0, r1, r2, r3}
 8007e1a:	b507      	push	{r0, r1, r2, lr}
 8007e1c:	4906      	ldr	r1, [pc, #24]	@ (8007e38 <iprintf+0x20>)
 8007e1e:	ab04      	add	r3, sp, #16
 8007e20:	6808      	ldr	r0, [r1, #0]
 8007e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e26:	6881      	ldr	r1, [r0, #8]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	f000 fb6f 	bl	800850c <_vfiprintf_r>
 8007e2e:	b003      	add	sp, #12
 8007e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e34:	b004      	add	sp, #16
 8007e36:	4770      	bx	lr
 8007e38:	20000028 	.word	0x20000028

08007e3c <siprintf>:
 8007e3c:	b40e      	push	{r1, r2, r3}
 8007e3e:	b500      	push	{lr}
 8007e40:	b09c      	sub	sp, #112	@ 0x70
 8007e42:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e44:	9002      	str	r0, [sp, #8]
 8007e46:	9006      	str	r0, [sp, #24]
 8007e48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e4c:	4809      	ldr	r0, [pc, #36]	@ (8007e74 <siprintf+0x38>)
 8007e4e:	9107      	str	r1, [sp, #28]
 8007e50:	9104      	str	r1, [sp, #16]
 8007e52:	4909      	ldr	r1, [pc, #36]	@ (8007e78 <siprintf+0x3c>)
 8007e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e58:	9105      	str	r1, [sp, #20]
 8007e5a:	6800      	ldr	r0, [r0, #0]
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	a902      	add	r1, sp, #8
 8007e60:	f000 fa2e 	bl	80082c0 <_svfiprintf_r>
 8007e64:	9b02      	ldr	r3, [sp, #8]
 8007e66:	2200      	movs	r2, #0
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	b01c      	add	sp, #112	@ 0x70
 8007e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e70:	b003      	add	sp, #12
 8007e72:	4770      	bx	lr
 8007e74:	20000028 	.word	0x20000028
 8007e78:	ffff0208 	.word	0xffff0208

08007e7c <__sread>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	460c      	mov	r4, r1
 8007e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e84:	f000 f868 	bl	8007f58 <_read_r>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	bfab      	itete	ge
 8007e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e90:	181b      	addge	r3, r3, r0
 8007e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e96:	bfac      	ite	ge
 8007e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e9a:	81a3      	strhlt	r3, [r4, #12]
 8007e9c:	bd10      	pop	{r4, pc}

08007e9e <__swrite>:
 8007e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	898b      	ldrh	r3, [r1, #12]
 8007ea6:	05db      	lsls	r3, r3, #23
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	4616      	mov	r6, r2
 8007eae:	d505      	bpl.n	8007ebc <__swrite+0x1e>
 8007eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f000 f83c 	bl	8007f34 <_lseek_r>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	4632      	mov	r2, r6
 8007eca:	463b      	mov	r3, r7
 8007ecc:	4628      	mov	r0, r5
 8007ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed2:	f000 b853 	b.w	8007f7c <_write_r>

08007ed6 <__sseek>:
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	460c      	mov	r4, r1
 8007eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ede:	f000 f829 	bl	8007f34 <_lseek_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	bf15      	itete	ne
 8007ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ef2:	81a3      	strheq	r3, [r4, #12]
 8007ef4:	bf18      	it	ne
 8007ef6:	81a3      	strhne	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__sclose>:
 8007efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efe:	f000 b809 	b.w	8007f14 <_close_r>

08007f02 <memset>:
 8007f02:	4402      	add	r2, r0
 8007f04:	4603      	mov	r3, r0
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d100      	bne.n	8007f0c <memset+0xa>
 8007f0a:	4770      	bx	lr
 8007f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f10:	e7f9      	b.n	8007f06 <memset+0x4>
	...

08007f14 <_close_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d06      	ldr	r5, [pc, #24]	@ (8007f30 <_close_r+0x1c>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	602b      	str	r3, [r5, #0]
 8007f20:	f7f9 facb 	bl	80014ba <_close>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d102      	bne.n	8007f2e <_close_r+0x1a>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	b103      	cbz	r3, 8007f2e <_close_r+0x1a>
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	200130bc 	.word	0x200130bc

08007f34 <_lseek_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d07      	ldr	r5, [pc, #28]	@ (8007f54 <_lseek_r+0x20>)
 8007f38:	4604      	mov	r4, r0
 8007f3a:	4608      	mov	r0, r1
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	602a      	str	r2, [r5, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f7f9 fae0 	bl	8001508 <_lseek>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_lseek_r+0x1e>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_lseek_r+0x1e>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	200130bc 	.word	0x200130bc

08007f58 <_read_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d07      	ldr	r5, [pc, #28]	@ (8007f78 <_read_r+0x20>)
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	602a      	str	r2, [r5, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f7f9 fa6e 	bl	8001448 <_read>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_read_r+0x1e>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_read_r+0x1e>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	200130bc 	.word	0x200130bc

08007f7c <_write_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d07      	ldr	r5, [pc, #28]	@ (8007f9c <_write_r+0x20>)
 8007f80:	4604      	mov	r4, r0
 8007f82:	4608      	mov	r0, r1
 8007f84:	4611      	mov	r1, r2
 8007f86:	2200      	movs	r2, #0
 8007f88:	602a      	str	r2, [r5, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f7f9 fa79 	bl	8001482 <_write>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_write_r+0x1e>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_write_r+0x1e>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	200130bc 	.word	0x200130bc

08007fa0 <__errno>:
 8007fa0:	4b01      	ldr	r3, [pc, #4]	@ (8007fa8 <__errno+0x8>)
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	20000028 	.word	0x20000028

08007fac <__libc_init_array>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	4d0d      	ldr	r5, [pc, #52]	@ (8007fe4 <__libc_init_array+0x38>)
 8007fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8007fe8 <__libc_init_array+0x3c>)
 8007fb2:	1b64      	subs	r4, r4, r5
 8007fb4:	10a4      	asrs	r4, r4, #2
 8007fb6:	2600      	movs	r6, #0
 8007fb8:	42a6      	cmp	r6, r4
 8007fba:	d109      	bne.n	8007fd0 <__libc_init_array+0x24>
 8007fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007fec <__libc_init_array+0x40>)
 8007fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007ff0 <__libc_init_array+0x44>)
 8007fc0:	f000 ff6e 	bl	8008ea0 <_init>
 8007fc4:	1b64      	subs	r4, r4, r5
 8007fc6:	10a4      	asrs	r4, r4, #2
 8007fc8:	2600      	movs	r6, #0
 8007fca:	42a6      	cmp	r6, r4
 8007fcc:	d105      	bne.n	8007fda <__libc_init_array+0x2e>
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd4:	4798      	blx	r3
 8007fd6:	3601      	adds	r6, #1
 8007fd8:	e7ee      	b.n	8007fb8 <__libc_init_array+0xc>
 8007fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fde:	4798      	blx	r3
 8007fe0:	3601      	adds	r6, #1
 8007fe2:	e7f2      	b.n	8007fca <__libc_init_array+0x1e>
 8007fe4:	080092fc 	.word	0x080092fc
 8007fe8:	080092fc 	.word	0x080092fc
 8007fec:	080092fc 	.word	0x080092fc
 8007ff0:	08009300 	.word	0x08009300

08007ff4 <__retarget_lock_init_recursive>:
 8007ff4:	4770      	bx	lr

08007ff6 <__retarget_lock_acquire_recursive>:
 8007ff6:	4770      	bx	lr

08007ff8 <__retarget_lock_release_recursive>:
 8007ff8:	4770      	bx	lr

08007ffa <memcpy>:
 8007ffa:	440a      	add	r2, r1
 8007ffc:	4291      	cmp	r1, r2
 8007ffe:	f100 33ff 	add.w	r3, r0, #4294967295
 8008002:	d100      	bne.n	8008006 <memcpy+0xc>
 8008004:	4770      	bx	lr
 8008006:	b510      	push	{r4, lr}
 8008008:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008010:	4291      	cmp	r1, r2
 8008012:	d1f9      	bne.n	8008008 <memcpy+0xe>
 8008014:	bd10      	pop	{r4, pc}
	...

08008018 <_free_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4605      	mov	r5, r0
 800801c:	2900      	cmp	r1, #0
 800801e:	d041      	beq.n	80080a4 <_free_r+0x8c>
 8008020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008024:	1f0c      	subs	r4, r1, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	bfb8      	it	lt
 800802a:	18e4      	addlt	r4, r4, r3
 800802c:	f000 f8e0 	bl	80081f0 <__malloc_lock>
 8008030:	4a1d      	ldr	r2, [pc, #116]	@ (80080a8 <_free_r+0x90>)
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	b933      	cbnz	r3, 8008044 <_free_r+0x2c>
 8008036:	6063      	str	r3, [r4, #4]
 8008038:	6014      	str	r4, [r2, #0]
 800803a:	4628      	mov	r0, r5
 800803c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008040:	f000 b8dc 	b.w	80081fc <__malloc_unlock>
 8008044:	42a3      	cmp	r3, r4
 8008046:	d908      	bls.n	800805a <_free_r+0x42>
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	1821      	adds	r1, r4, r0
 800804c:	428b      	cmp	r3, r1
 800804e:	bf01      	itttt	eq
 8008050:	6819      	ldreq	r1, [r3, #0]
 8008052:	685b      	ldreq	r3, [r3, #4]
 8008054:	1809      	addeq	r1, r1, r0
 8008056:	6021      	streq	r1, [r4, #0]
 8008058:	e7ed      	b.n	8008036 <_free_r+0x1e>
 800805a:	461a      	mov	r2, r3
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	b10b      	cbz	r3, 8008064 <_free_r+0x4c>
 8008060:	42a3      	cmp	r3, r4
 8008062:	d9fa      	bls.n	800805a <_free_r+0x42>
 8008064:	6811      	ldr	r1, [r2, #0]
 8008066:	1850      	adds	r0, r2, r1
 8008068:	42a0      	cmp	r0, r4
 800806a:	d10b      	bne.n	8008084 <_free_r+0x6c>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	4401      	add	r1, r0
 8008070:	1850      	adds	r0, r2, r1
 8008072:	4283      	cmp	r3, r0
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	d1e0      	bne.n	800803a <_free_r+0x22>
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	6053      	str	r3, [r2, #4]
 800807e:	4408      	add	r0, r1
 8008080:	6010      	str	r0, [r2, #0]
 8008082:	e7da      	b.n	800803a <_free_r+0x22>
 8008084:	d902      	bls.n	800808c <_free_r+0x74>
 8008086:	230c      	movs	r3, #12
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	e7d6      	b.n	800803a <_free_r+0x22>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	1821      	adds	r1, r4, r0
 8008090:	428b      	cmp	r3, r1
 8008092:	bf04      	itt	eq
 8008094:	6819      	ldreq	r1, [r3, #0]
 8008096:	685b      	ldreq	r3, [r3, #4]
 8008098:	6063      	str	r3, [r4, #4]
 800809a:	bf04      	itt	eq
 800809c:	1809      	addeq	r1, r1, r0
 800809e:	6021      	streq	r1, [r4, #0]
 80080a0:	6054      	str	r4, [r2, #4]
 80080a2:	e7ca      	b.n	800803a <_free_r+0x22>
 80080a4:	bd38      	pop	{r3, r4, r5, pc}
 80080a6:	bf00      	nop
 80080a8:	200130c8 	.word	0x200130c8

080080ac <sbrk_aligned>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4e0f      	ldr	r6, [pc, #60]	@ (80080ec <sbrk_aligned+0x40>)
 80080b0:	460c      	mov	r4, r1
 80080b2:	6831      	ldr	r1, [r6, #0]
 80080b4:	4605      	mov	r5, r0
 80080b6:	b911      	cbnz	r1, 80080be <sbrk_aligned+0x12>
 80080b8:	f000 fe28 	bl	8008d0c <_sbrk_r>
 80080bc:	6030      	str	r0, [r6, #0]
 80080be:	4621      	mov	r1, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 fe23 	bl	8008d0c <_sbrk_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d103      	bne.n	80080d2 <sbrk_aligned+0x26>
 80080ca:	f04f 34ff 	mov.w	r4, #4294967295
 80080ce:	4620      	mov	r0, r4
 80080d0:	bd70      	pop	{r4, r5, r6, pc}
 80080d2:	1cc4      	adds	r4, r0, #3
 80080d4:	f024 0403 	bic.w	r4, r4, #3
 80080d8:	42a0      	cmp	r0, r4
 80080da:	d0f8      	beq.n	80080ce <sbrk_aligned+0x22>
 80080dc:	1a21      	subs	r1, r4, r0
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 fe14 	bl	8008d0c <_sbrk_r>
 80080e4:	3001      	adds	r0, #1
 80080e6:	d1f2      	bne.n	80080ce <sbrk_aligned+0x22>
 80080e8:	e7ef      	b.n	80080ca <sbrk_aligned+0x1e>
 80080ea:	bf00      	nop
 80080ec:	200130c4 	.word	0x200130c4

080080f0 <_malloc_r>:
 80080f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	1ccd      	adds	r5, r1, #3
 80080f6:	f025 0503 	bic.w	r5, r5, #3
 80080fa:	3508      	adds	r5, #8
 80080fc:	2d0c      	cmp	r5, #12
 80080fe:	bf38      	it	cc
 8008100:	250c      	movcc	r5, #12
 8008102:	2d00      	cmp	r5, #0
 8008104:	4606      	mov	r6, r0
 8008106:	db01      	blt.n	800810c <_malloc_r+0x1c>
 8008108:	42a9      	cmp	r1, r5
 800810a:	d904      	bls.n	8008116 <_malloc_r+0x26>
 800810c:	230c      	movs	r3, #12
 800810e:	6033      	str	r3, [r6, #0]
 8008110:	2000      	movs	r0, #0
 8008112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081ec <_malloc_r+0xfc>
 800811a:	f000 f869 	bl	80081f0 <__malloc_lock>
 800811e:	f8d8 3000 	ldr.w	r3, [r8]
 8008122:	461c      	mov	r4, r3
 8008124:	bb44      	cbnz	r4, 8008178 <_malloc_r+0x88>
 8008126:	4629      	mov	r1, r5
 8008128:	4630      	mov	r0, r6
 800812a:	f7ff ffbf 	bl	80080ac <sbrk_aligned>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	4604      	mov	r4, r0
 8008132:	d158      	bne.n	80081e6 <_malloc_r+0xf6>
 8008134:	f8d8 4000 	ldr.w	r4, [r8]
 8008138:	4627      	mov	r7, r4
 800813a:	2f00      	cmp	r7, #0
 800813c:	d143      	bne.n	80081c6 <_malloc_r+0xd6>
 800813e:	2c00      	cmp	r4, #0
 8008140:	d04b      	beq.n	80081da <_malloc_r+0xea>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	4639      	mov	r1, r7
 8008146:	4630      	mov	r0, r6
 8008148:	eb04 0903 	add.w	r9, r4, r3
 800814c:	f000 fdde 	bl	8008d0c <_sbrk_r>
 8008150:	4581      	cmp	r9, r0
 8008152:	d142      	bne.n	80081da <_malloc_r+0xea>
 8008154:	6821      	ldr	r1, [r4, #0]
 8008156:	1a6d      	subs	r5, r5, r1
 8008158:	4629      	mov	r1, r5
 800815a:	4630      	mov	r0, r6
 800815c:	f7ff ffa6 	bl	80080ac <sbrk_aligned>
 8008160:	3001      	adds	r0, #1
 8008162:	d03a      	beq.n	80081da <_malloc_r+0xea>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	442b      	add	r3, r5
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	f8d8 3000 	ldr.w	r3, [r8]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	bb62      	cbnz	r2, 80081cc <_malloc_r+0xdc>
 8008172:	f8c8 7000 	str.w	r7, [r8]
 8008176:	e00f      	b.n	8008198 <_malloc_r+0xa8>
 8008178:	6822      	ldr	r2, [r4, #0]
 800817a:	1b52      	subs	r2, r2, r5
 800817c:	d420      	bmi.n	80081c0 <_malloc_r+0xd0>
 800817e:	2a0b      	cmp	r2, #11
 8008180:	d917      	bls.n	80081b2 <_malloc_r+0xc2>
 8008182:	1961      	adds	r1, r4, r5
 8008184:	42a3      	cmp	r3, r4
 8008186:	6025      	str	r5, [r4, #0]
 8008188:	bf18      	it	ne
 800818a:	6059      	strne	r1, [r3, #4]
 800818c:	6863      	ldr	r3, [r4, #4]
 800818e:	bf08      	it	eq
 8008190:	f8c8 1000 	streq.w	r1, [r8]
 8008194:	5162      	str	r2, [r4, r5]
 8008196:	604b      	str	r3, [r1, #4]
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f82f 	bl	80081fc <__malloc_unlock>
 800819e:	f104 000b 	add.w	r0, r4, #11
 80081a2:	1d23      	adds	r3, r4, #4
 80081a4:	f020 0007 	bic.w	r0, r0, #7
 80081a8:	1ac2      	subs	r2, r0, r3
 80081aa:	bf1c      	itt	ne
 80081ac:	1a1b      	subne	r3, r3, r0
 80081ae:	50a3      	strne	r3, [r4, r2]
 80081b0:	e7af      	b.n	8008112 <_malloc_r+0x22>
 80081b2:	6862      	ldr	r2, [r4, #4]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	bf0c      	ite	eq
 80081b8:	f8c8 2000 	streq.w	r2, [r8]
 80081bc:	605a      	strne	r2, [r3, #4]
 80081be:	e7eb      	b.n	8008198 <_malloc_r+0xa8>
 80081c0:	4623      	mov	r3, r4
 80081c2:	6864      	ldr	r4, [r4, #4]
 80081c4:	e7ae      	b.n	8008124 <_malloc_r+0x34>
 80081c6:	463c      	mov	r4, r7
 80081c8:	687f      	ldr	r7, [r7, #4]
 80081ca:	e7b6      	b.n	800813a <_malloc_r+0x4a>
 80081cc:	461a      	mov	r2, r3
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d1fb      	bne.n	80081cc <_malloc_r+0xdc>
 80081d4:	2300      	movs	r3, #0
 80081d6:	6053      	str	r3, [r2, #4]
 80081d8:	e7de      	b.n	8008198 <_malloc_r+0xa8>
 80081da:	230c      	movs	r3, #12
 80081dc:	6033      	str	r3, [r6, #0]
 80081de:	4630      	mov	r0, r6
 80081e0:	f000 f80c 	bl	80081fc <__malloc_unlock>
 80081e4:	e794      	b.n	8008110 <_malloc_r+0x20>
 80081e6:	6005      	str	r5, [r0, #0]
 80081e8:	e7d6      	b.n	8008198 <_malloc_r+0xa8>
 80081ea:	bf00      	nop
 80081ec:	200130c8 	.word	0x200130c8

080081f0 <__malloc_lock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	@ (80081f8 <__malloc_lock+0x8>)
 80081f2:	f7ff bf00 	b.w	8007ff6 <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	200130c0 	.word	0x200130c0

080081fc <__malloc_unlock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	@ (8008204 <__malloc_unlock+0x8>)
 80081fe:	f7ff befb 	b.w	8007ff8 <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	200130c0 	.word	0x200130c0

08008208 <__ssputs_r>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	688e      	ldr	r6, [r1, #8]
 800820e:	461f      	mov	r7, r3
 8008210:	42be      	cmp	r6, r7
 8008212:	680b      	ldr	r3, [r1, #0]
 8008214:	4682      	mov	sl, r0
 8008216:	460c      	mov	r4, r1
 8008218:	4690      	mov	r8, r2
 800821a:	d82d      	bhi.n	8008278 <__ssputs_r+0x70>
 800821c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008220:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008224:	d026      	beq.n	8008274 <__ssputs_r+0x6c>
 8008226:	6965      	ldr	r5, [r4, #20]
 8008228:	6909      	ldr	r1, [r1, #16]
 800822a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800822e:	eba3 0901 	sub.w	r9, r3, r1
 8008232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008236:	1c7b      	adds	r3, r7, #1
 8008238:	444b      	add	r3, r9
 800823a:	106d      	asrs	r5, r5, #1
 800823c:	429d      	cmp	r5, r3
 800823e:	bf38      	it	cc
 8008240:	461d      	movcc	r5, r3
 8008242:	0553      	lsls	r3, r2, #21
 8008244:	d527      	bpl.n	8008296 <__ssputs_r+0x8e>
 8008246:	4629      	mov	r1, r5
 8008248:	f7ff ff52 	bl	80080f0 <_malloc_r>
 800824c:	4606      	mov	r6, r0
 800824e:	b360      	cbz	r0, 80082aa <__ssputs_r+0xa2>
 8008250:	6921      	ldr	r1, [r4, #16]
 8008252:	464a      	mov	r2, r9
 8008254:	f7ff fed1 	bl	8007ffa <memcpy>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800825e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	6126      	str	r6, [r4, #16]
 8008266:	6165      	str	r5, [r4, #20]
 8008268:	444e      	add	r6, r9
 800826a:	eba5 0509 	sub.w	r5, r5, r9
 800826e:	6026      	str	r6, [r4, #0]
 8008270:	60a5      	str	r5, [r4, #8]
 8008272:	463e      	mov	r6, r7
 8008274:	42be      	cmp	r6, r7
 8008276:	d900      	bls.n	800827a <__ssputs_r+0x72>
 8008278:	463e      	mov	r6, r7
 800827a:	6820      	ldr	r0, [r4, #0]
 800827c:	4632      	mov	r2, r6
 800827e:	4641      	mov	r1, r8
 8008280:	f000 fd2a 	bl	8008cd8 <memmove>
 8008284:	68a3      	ldr	r3, [r4, #8]
 8008286:	1b9b      	subs	r3, r3, r6
 8008288:	60a3      	str	r3, [r4, #8]
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	4433      	add	r3, r6
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	2000      	movs	r0, #0
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	462a      	mov	r2, r5
 8008298:	f000 fd48 	bl	8008d2c <_realloc_r>
 800829c:	4606      	mov	r6, r0
 800829e:	2800      	cmp	r0, #0
 80082a0:	d1e0      	bne.n	8008264 <__ssputs_r+0x5c>
 80082a2:	6921      	ldr	r1, [r4, #16]
 80082a4:	4650      	mov	r0, sl
 80082a6:	f7ff feb7 	bl	8008018 <_free_r>
 80082aa:	230c      	movs	r3, #12
 80082ac:	f8ca 3000 	str.w	r3, [sl]
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e7e9      	b.n	8008292 <__ssputs_r+0x8a>
	...

080082c0 <_svfiprintf_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	4698      	mov	r8, r3
 80082c6:	898b      	ldrh	r3, [r1, #12]
 80082c8:	061b      	lsls	r3, r3, #24
 80082ca:	b09d      	sub	sp, #116	@ 0x74
 80082cc:	4607      	mov	r7, r0
 80082ce:	460d      	mov	r5, r1
 80082d0:	4614      	mov	r4, r2
 80082d2:	d510      	bpl.n	80082f6 <_svfiprintf_r+0x36>
 80082d4:	690b      	ldr	r3, [r1, #16]
 80082d6:	b973      	cbnz	r3, 80082f6 <_svfiprintf_r+0x36>
 80082d8:	2140      	movs	r1, #64	@ 0x40
 80082da:	f7ff ff09 	bl	80080f0 <_malloc_r>
 80082de:	6028      	str	r0, [r5, #0]
 80082e0:	6128      	str	r0, [r5, #16]
 80082e2:	b930      	cbnz	r0, 80082f2 <_svfiprintf_r+0x32>
 80082e4:	230c      	movs	r3, #12
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	b01d      	add	sp, #116	@ 0x74
 80082ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f2:	2340      	movs	r3, #64	@ 0x40
 80082f4:	616b      	str	r3, [r5, #20]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fa:	2320      	movs	r3, #32
 80082fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008300:	f8cd 800c 	str.w	r8, [sp, #12]
 8008304:	2330      	movs	r3, #48	@ 0x30
 8008306:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084a4 <_svfiprintf_r+0x1e4>
 800830a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800830e:	f04f 0901 	mov.w	r9, #1
 8008312:	4623      	mov	r3, r4
 8008314:	469a      	mov	sl, r3
 8008316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831a:	b10a      	cbz	r2, 8008320 <_svfiprintf_r+0x60>
 800831c:	2a25      	cmp	r2, #37	@ 0x25
 800831e:	d1f9      	bne.n	8008314 <_svfiprintf_r+0x54>
 8008320:	ebba 0b04 	subs.w	fp, sl, r4
 8008324:	d00b      	beq.n	800833e <_svfiprintf_r+0x7e>
 8008326:	465b      	mov	r3, fp
 8008328:	4622      	mov	r2, r4
 800832a:	4629      	mov	r1, r5
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ff6b 	bl	8008208 <__ssputs_r>
 8008332:	3001      	adds	r0, #1
 8008334:	f000 80a7 	beq.w	8008486 <_svfiprintf_r+0x1c6>
 8008338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833a:	445a      	add	r2, fp
 800833c:	9209      	str	r2, [sp, #36]	@ 0x24
 800833e:	f89a 3000 	ldrb.w	r3, [sl]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 809f 	beq.w	8008486 <_svfiprintf_r+0x1c6>
 8008348:	2300      	movs	r3, #0
 800834a:	f04f 32ff 	mov.w	r2, #4294967295
 800834e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008352:	f10a 0a01 	add.w	sl, sl, #1
 8008356:	9304      	str	r3, [sp, #16]
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800835e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008360:	4654      	mov	r4, sl
 8008362:	2205      	movs	r2, #5
 8008364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008368:	484e      	ldr	r0, [pc, #312]	@ (80084a4 <_svfiprintf_r+0x1e4>)
 800836a:	f7f7 ff49 	bl	8000200 <memchr>
 800836e:	9a04      	ldr	r2, [sp, #16]
 8008370:	b9d8      	cbnz	r0, 80083aa <_svfiprintf_r+0xea>
 8008372:	06d0      	lsls	r0, r2, #27
 8008374:	bf44      	itt	mi
 8008376:	2320      	movmi	r3, #32
 8008378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800837c:	0711      	lsls	r1, r2, #28
 800837e:	bf44      	itt	mi
 8008380:	232b      	movmi	r3, #43	@ 0x2b
 8008382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008386:	f89a 3000 	ldrb.w	r3, [sl]
 800838a:	2b2a      	cmp	r3, #42	@ 0x2a
 800838c:	d015      	beq.n	80083ba <_svfiprintf_r+0xfa>
 800838e:	9a07      	ldr	r2, [sp, #28]
 8008390:	4654      	mov	r4, sl
 8008392:	2000      	movs	r0, #0
 8008394:	f04f 0c0a 	mov.w	ip, #10
 8008398:	4621      	mov	r1, r4
 800839a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800839e:	3b30      	subs	r3, #48	@ 0x30
 80083a0:	2b09      	cmp	r3, #9
 80083a2:	d94b      	bls.n	800843c <_svfiprintf_r+0x17c>
 80083a4:	b1b0      	cbz	r0, 80083d4 <_svfiprintf_r+0x114>
 80083a6:	9207      	str	r2, [sp, #28]
 80083a8:	e014      	b.n	80083d4 <_svfiprintf_r+0x114>
 80083aa:	eba0 0308 	sub.w	r3, r0, r8
 80083ae:	fa09 f303 	lsl.w	r3, r9, r3
 80083b2:	4313      	orrs	r3, r2
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	46a2      	mov	sl, r4
 80083b8:	e7d2      	b.n	8008360 <_svfiprintf_r+0xa0>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	1d19      	adds	r1, r3, #4
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	9103      	str	r1, [sp, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bfbb      	ittet	lt
 80083c6:	425b      	neglt	r3, r3
 80083c8:	f042 0202 	orrlt.w	r2, r2, #2
 80083cc:	9307      	strge	r3, [sp, #28]
 80083ce:	9307      	strlt	r3, [sp, #28]
 80083d0:	bfb8      	it	lt
 80083d2:	9204      	strlt	r2, [sp, #16]
 80083d4:	7823      	ldrb	r3, [r4, #0]
 80083d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80083d8:	d10a      	bne.n	80083f0 <_svfiprintf_r+0x130>
 80083da:	7863      	ldrb	r3, [r4, #1]
 80083dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80083de:	d132      	bne.n	8008446 <_svfiprintf_r+0x186>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	1d1a      	adds	r2, r3, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	9203      	str	r2, [sp, #12]
 80083e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083ec:	3402      	adds	r4, #2
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084b4 <_svfiprintf_r+0x1f4>
 80083f4:	7821      	ldrb	r1, [r4, #0]
 80083f6:	2203      	movs	r2, #3
 80083f8:	4650      	mov	r0, sl
 80083fa:	f7f7 ff01 	bl	8000200 <memchr>
 80083fe:	b138      	cbz	r0, 8008410 <_svfiprintf_r+0x150>
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	eba0 000a 	sub.w	r0, r0, sl
 8008406:	2240      	movs	r2, #64	@ 0x40
 8008408:	4082      	lsls	r2, r0
 800840a:	4313      	orrs	r3, r2
 800840c:	3401      	adds	r4, #1
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008414:	4824      	ldr	r0, [pc, #144]	@ (80084a8 <_svfiprintf_r+0x1e8>)
 8008416:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800841a:	2206      	movs	r2, #6
 800841c:	f7f7 fef0 	bl	8000200 <memchr>
 8008420:	2800      	cmp	r0, #0
 8008422:	d036      	beq.n	8008492 <_svfiprintf_r+0x1d2>
 8008424:	4b21      	ldr	r3, [pc, #132]	@ (80084ac <_svfiprintf_r+0x1ec>)
 8008426:	bb1b      	cbnz	r3, 8008470 <_svfiprintf_r+0x1b0>
 8008428:	9b03      	ldr	r3, [sp, #12]
 800842a:	3307      	adds	r3, #7
 800842c:	f023 0307 	bic.w	r3, r3, #7
 8008430:	3308      	adds	r3, #8
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008436:	4433      	add	r3, r6
 8008438:	9309      	str	r3, [sp, #36]	@ 0x24
 800843a:	e76a      	b.n	8008312 <_svfiprintf_r+0x52>
 800843c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008440:	460c      	mov	r4, r1
 8008442:	2001      	movs	r0, #1
 8008444:	e7a8      	b.n	8008398 <_svfiprintf_r+0xd8>
 8008446:	2300      	movs	r3, #0
 8008448:	3401      	adds	r4, #1
 800844a:	9305      	str	r3, [sp, #20]
 800844c:	4619      	mov	r1, r3
 800844e:	f04f 0c0a 	mov.w	ip, #10
 8008452:	4620      	mov	r0, r4
 8008454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008458:	3a30      	subs	r2, #48	@ 0x30
 800845a:	2a09      	cmp	r2, #9
 800845c:	d903      	bls.n	8008466 <_svfiprintf_r+0x1a6>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0c6      	beq.n	80083f0 <_svfiprintf_r+0x130>
 8008462:	9105      	str	r1, [sp, #20]
 8008464:	e7c4      	b.n	80083f0 <_svfiprintf_r+0x130>
 8008466:	fb0c 2101 	mla	r1, ip, r1, r2
 800846a:	4604      	mov	r4, r0
 800846c:	2301      	movs	r3, #1
 800846e:	e7f0      	b.n	8008452 <_svfiprintf_r+0x192>
 8008470:	ab03      	add	r3, sp, #12
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	462a      	mov	r2, r5
 8008476:	4b0e      	ldr	r3, [pc, #56]	@ (80084b0 <_svfiprintf_r+0x1f0>)
 8008478:	a904      	add	r1, sp, #16
 800847a:	4638      	mov	r0, r7
 800847c:	f3af 8000 	nop.w
 8008480:	1c42      	adds	r2, r0, #1
 8008482:	4606      	mov	r6, r0
 8008484:	d1d6      	bne.n	8008434 <_svfiprintf_r+0x174>
 8008486:	89ab      	ldrh	r3, [r5, #12]
 8008488:	065b      	lsls	r3, r3, #25
 800848a:	f53f af2d 	bmi.w	80082e8 <_svfiprintf_r+0x28>
 800848e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008490:	e72c      	b.n	80082ec <_svfiprintf_r+0x2c>
 8008492:	ab03      	add	r3, sp, #12
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	462a      	mov	r2, r5
 8008498:	4b05      	ldr	r3, [pc, #20]	@ (80084b0 <_svfiprintf_r+0x1f0>)
 800849a:	a904      	add	r1, sp, #16
 800849c:	4638      	mov	r0, r7
 800849e:	f000 f9bb 	bl	8008818 <_printf_i>
 80084a2:	e7ed      	b.n	8008480 <_svfiprintf_r+0x1c0>
 80084a4:	080092c0 	.word	0x080092c0
 80084a8:	080092ca 	.word	0x080092ca
 80084ac:	00000000 	.word	0x00000000
 80084b0:	08008209 	.word	0x08008209
 80084b4:	080092c6 	.word	0x080092c6

080084b8 <__sfputc_r>:
 80084b8:	6893      	ldr	r3, [r2, #8]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	b410      	push	{r4}
 80084c0:	6093      	str	r3, [r2, #8]
 80084c2:	da08      	bge.n	80084d6 <__sfputc_r+0x1e>
 80084c4:	6994      	ldr	r4, [r2, #24]
 80084c6:	42a3      	cmp	r3, r4
 80084c8:	db01      	blt.n	80084ce <__sfputc_r+0x16>
 80084ca:	290a      	cmp	r1, #10
 80084cc:	d103      	bne.n	80084d6 <__sfputc_r+0x1e>
 80084ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d2:	f000 bb6d 	b.w	8008bb0 <__swbuf_r>
 80084d6:	6813      	ldr	r3, [r2, #0]
 80084d8:	1c58      	adds	r0, r3, #1
 80084da:	6010      	str	r0, [r2, #0]
 80084dc:	7019      	strb	r1, [r3, #0]
 80084de:	4608      	mov	r0, r1
 80084e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <__sfputs_r>:
 80084e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e8:	4606      	mov	r6, r0
 80084ea:	460f      	mov	r7, r1
 80084ec:	4614      	mov	r4, r2
 80084ee:	18d5      	adds	r5, r2, r3
 80084f0:	42ac      	cmp	r4, r5
 80084f2:	d101      	bne.n	80084f8 <__sfputs_r+0x12>
 80084f4:	2000      	movs	r0, #0
 80084f6:	e007      	b.n	8008508 <__sfputs_r+0x22>
 80084f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fc:	463a      	mov	r2, r7
 80084fe:	4630      	mov	r0, r6
 8008500:	f7ff ffda 	bl	80084b8 <__sfputc_r>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d1f3      	bne.n	80084f0 <__sfputs_r+0xa>
 8008508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800850c <_vfiprintf_r>:
 800850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	460d      	mov	r5, r1
 8008512:	b09d      	sub	sp, #116	@ 0x74
 8008514:	4614      	mov	r4, r2
 8008516:	4698      	mov	r8, r3
 8008518:	4606      	mov	r6, r0
 800851a:	b118      	cbz	r0, 8008524 <_vfiprintf_r+0x18>
 800851c:	6a03      	ldr	r3, [r0, #32]
 800851e:	b90b      	cbnz	r3, 8008524 <_vfiprintf_r+0x18>
 8008520:	f7ff fc44 	bl	8007dac <__sinit>
 8008524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008526:	07d9      	lsls	r1, r3, #31
 8008528:	d405      	bmi.n	8008536 <_vfiprintf_r+0x2a>
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	059a      	lsls	r2, r3, #22
 800852e:	d402      	bmi.n	8008536 <_vfiprintf_r+0x2a>
 8008530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008532:	f7ff fd60 	bl	8007ff6 <__retarget_lock_acquire_recursive>
 8008536:	89ab      	ldrh	r3, [r5, #12]
 8008538:	071b      	lsls	r3, r3, #28
 800853a:	d501      	bpl.n	8008540 <_vfiprintf_r+0x34>
 800853c:	692b      	ldr	r3, [r5, #16]
 800853e:	b99b      	cbnz	r3, 8008568 <_vfiprintf_r+0x5c>
 8008540:	4629      	mov	r1, r5
 8008542:	4630      	mov	r0, r6
 8008544:	f000 fb72 	bl	8008c2c <__swsetup_r>
 8008548:	b170      	cbz	r0, 8008568 <_vfiprintf_r+0x5c>
 800854a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800854c:	07dc      	lsls	r4, r3, #31
 800854e:	d504      	bpl.n	800855a <_vfiprintf_r+0x4e>
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	b01d      	add	sp, #116	@ 0x74
 8008556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855a:	89ab      	ldrh	r3, [r5, #12]
 800855c:	0598      	lsls	r0, r3, #22
 800855e:	d4f7      	bmi.n	8008550 <_vfiprintf_r+0x44>
 8008560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008562:	f7ff fd49 	bl	8007ff8 <__retarget_lock_release_recursive>
 8008566:	e7f3      	b.n	8008550 <_vfiprintf_r+0x44>
 8008568:	2300      	movs	r3, #0
 800856a:	9309      	str	r3, [sp, #36]	@ 0x24
 800856c:	2320      	movs	r3, #32
 800856e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008572:	f8cd 800c 	str.w	r8, [sp, #12]
 8008576:	2330      	movs	r3, #48	@ 0x30
 8008578:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008728 <_vfiprintf_r+0x21c>
 800857c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008580:	f04f 0901 	mov.w	r9, #1
 8008584:	4623      	mov	r3, r4
 8008586:	469a      	mov	sl, r3
 8008588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800858c:	b10a      	cbz	r2, 8008592 <_vfiprintf_r+0x86>
 800858e:	2a25      	cmp	r2, #37	@ 0x25
 8008590:	d1f9      	bne.n	8008586 <_vfiprintf_r+0x7a>
 8008592:	ebba 0b04 	subs.w	fp, sl, r4
 8008596:	d00b      	beq.n	80085b0 <_vfiprintf_r+0xa4>
 8008598:	465b      	mov	r3, fp
 800859a:	4622      	mov	r2, r4
 800859c:	4629      	mov	r1, r5
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff ffa1 	bl	80084e6 <__sfputs_r>
 80085a4:	3001      	adds	r0, #1
 80085a6:	f000 80a7 	beq.w	80086f8 <_vfiprintf_r+0x1ec>
 80085aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ac:	445a      	add	r2, fp
 80085ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80085b0:	f89a 3000 	ldrb.w	r3, [sl]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 809f 	beq.w	80086f8 <_vfiprintf_r+0x1ec>
 80085ba:	2300      	movs	r3, #0
 80085bc:	f04f 32ff 	mov.w	r2, #4294967295
 80085c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c4:	f10a 0a01 	add.w	sl, sl, #1
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	9307      	str	r3, [sp, #28]
 80085cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80085d2:	4654      	mov	r4, sl
 80085d4:	2205      	movs	r2, #5
 80085d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085da:	4853      	ldr	r0, [pc, #332]	@ (8008728 <_vfiprintf_r+0x21c>)
 80085dc:	f7f7 fe10 	bl	8000200 <memchr>
 80085e0:	9a04      	ldr	r2, [sp, #16]
 80085e2:	b9d8      	cbnz	r0, 800861c <_vfiprintf_r+0x110>
 80085e4:	06d1      	lsls	r1, r2, #27
 80085e6:	bf44      	itt	mi
 80085e8:	2320      	movmi	r3, #32
 80085ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085ee:	0713      	lsls	r3, r2, #28
 80085f0:	bf44      	itt	mi
 80085f2:	232b      	movmi	r3, #43	@ 0x2b
 80085f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085f8:	f89a 3000 	ldrb.w	r3, [sl]
 80085fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80085fe:	d015      	beq.n	800862c <_vfiprintf_r+0x120>
 8008600:	9a07      	ldr	r2, [sp, #28]
 8008602:	4654      	mov	r4, sl
 8008604:	2000      	movs	r0, #0
 8008606:	f04f 0c0a 	mov.w	ip, #10
 800860a:	4621      	mov	r1, r4
 800860c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008610:	3b30      	subs	r3, #48	@ 0x30
 8008612:	2b09      	cmp	r3, #9
 8008614:	d94b      	bls.n	80086ae <_vfiprintf_r+0x1a2>
 8008616:	b1b0      	cbz	r0, 8008646 <_vfiprintf_r+0x13a>
 8008618:	9207      	str	r2, [sp, #28]
 800861a:	e014      	b.n	8008646 <_vfiprintf_r+0x13a>
 800861c:	eba0 0308 	sub.w	r3, r0, r8
 8008620:	fa09 f303 	lsl.w	r3, r9, r3
 8008624:	4313      	orrs	r3, r2
 8008626:	9304      	str	r3, [sp, #16]
 8008628:	46a2      	mov	sl, r4
 800862a:	e7d2      	b.n	80085d2 <_vfiprintf_r+0xc6>
 800862c:	9b03      	ldr	r3, [sp, #12]
 800862e:	1d19      	adds	r1, r3, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	9103      	str	r1, [sp, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	bfbb      	ittet	lt
 8008638:	425b      	neglt	r3, r3
 800863a:	f042 0202 	orrlt.w	r2, r2, #2
 800863e:	9307      	strge	r3, [sp, #28]
 8008640:	9307      	strlt	r3, [sp, #28]
 8008642:	bfb8      	it	lt
 8008644:	9204      	strlt	r2, [sp, #16]
 8008646:	7823      	ldrb	r3, [r4, #0]
 8008648:	2b2e      	cmp	r3, #46	@ 0x2e
 800864a:	d10a      	bne.n	8008662 <_vfiprintf_r+0x156>
 800864c:	7863      	ldrb	r3, [r4, #1]
 800864e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008650:	d132      	bne.n	80086b8 <_vfiprintf_r+0x1ac>
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	1d1a      	adds	r2, r3, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	9203      	str	r2, [sp, #12]
 800865a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800865e:	3402      	adds	r4, #2
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008738 <_vfiprintf_r+0x22c>
 8008666:	7821      	ldrb	r1, [r4, #0]
 8008668:	2203      	movs	r2, #3
 800866a:	4650      	mov	r0, sl
 800866c:	f7f7 fdc8 	bl	8000200 <memchr>
 8008670:	b138      	cbz	r0, 8008682 <_vfiprintf_r+0x176>
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	eba0 000a 	sub.w	r0, r0, sl
 8008678:	2240      	movs	r2, #64	@ 0x40
 800867a:	4082      	lsls	r2, r0
 800867c:	4313      	orrs	r3, r2
 800867e:	3401      	adds	r4, #1
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008686:	4829      	ldr	r0, [pc, #164]	@ (800872c <_vfiprintf_r+0x220>)
 8008688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800868c:	2206      	movs	r2, #6
 800868e:	f7f7 fdb7 	bl	8000200 <memchr>
 8008692:	2800      	cmp	r0, #0
 8008694:	d03f      	beq.n	8008716 <_vfiprintf_r+0x20a>
 8008696:	4b26      	ldr	r3, [pc, #152]	@ (8008730 <_vfiprintf_r+0x224>)
 8008698:	bb1b      	cbnz	r3, 80086e2 <_vfiprintf_r+0x1d6>
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	3307      	adds	r3, #7
 800869e:	f023 0307 	bic.w	r3, r3, #7
 80086a2:	3308      	adds	r3, #8
 80086a4:	9303      	str	r3, [sp, #12]
 80086a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a8:	443b      	add	r3, r7
 80086aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ac:	e76a      	b.n	8008584 <_vfiprintf_r+0x78>
 80086ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b2:	460c      	mov	r4, r1
 80086b4:	2001      	movs	r0, #1
 80086b6:	e7a8      	b.n	800860a <_vfiprintf_r+0xfe>
 80086b8:	2300      	movs	r3, #0
 80086ba:	3401      	adds	r4, #1
 80086bc:	9305      	str	r3, [sp, #20]
 80086be:	4619      	mov	r1, r3
 80086c0:	f04f 0c0a 	mov.w	ip, #10
 80086c4:	4620      	mov	r0, r4
 80086c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ca:	3a30      	subs	r2, #48	@ 0x30
 80086cc:	2a09      	cmp	r2, #9
 80086ce:	d903      	bls.n	80086d8 <_vfiprintf_r+0x1cc>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0c6      	beq.n	8008662 <_vfiprintf_r+0x156>
 80086d4:	9105      	str	r1, [sp, #20]
 80086d6:	e7c4      	b.n	8008662 <_vfiprintf_r+0x156>
 80086d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086dc:	4604      	mov	r4, r0
 80086de:	2301      	movs	r3, #1
 80086e0:	e7f0      	b.n	80086c4 <_vfiprintf_r+0x1b8>
 80086e2:	ab03      	add	r3, sp, #12
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	462a      	mov	r2, r5
 80086e8:	4b12      	ldr	r3, [pc, #72]	@ (8008734 <_vfiprintf_r+0x228>)
 80086ea:	a904      	add	r1, sp, #16
 80086ec:	4630      	mov	r0, r6
 80086ee:	f3af 8000 	nop.w
 80086f2:	4607      	mov	r7, r0
 80086f4:	1c78      	adds	r0, r7, #1
 80086f6:	d1d6      	bne.n	80086a6 <_vfiprintf_r+0x19a>
 80086f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086fa:	07d9      	lsls	r1, r3, #31
 80086fc:	d405      	bmi.n	800870a <_vfiprintf_r+0x1fe>
 80086fe:	89ab      	ldrh	r3, [r5, #12]
 8008700:	059a      	lsls	r2, r3, #22
 8008702:	d402      	bmi.n	800870a <_vfiprintf_r+0x1fe>
 8008704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008706:	f7ff fc77 	bl	8007ff8 <__retarget_lock_release_recursive>
 800870a:	89ab      	ldrh	r3, [r5, #12]
 800870c:	065b      	lsls	r3, r3, #25
 800870e:	f53f af1f 	bmi.w	8008550 <_vfiprintf_r+0x44>
 8008712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008714:	e71e      	b.n	8008554 <_vfiprintf_r+0x48>
 8008716:	ab03      	add	r3, sp, #12
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	462a      	mov	r2, r5
 800871c:	4b05      	ldr	r3, [pc, #20]	@ (8008734 <_vfiprintf_r+0x228>)
 800871e:	a904      	add	r1, sp, #16
 8008720:	4630      	mov	r0, r6
 8008722:	f000 f879 	bl	8008818 <_printf_i>
 8008726:	e7e4      	b.n	80086f2 <_vfiprintf_r+0x1e6>
 8008728:	080092c0 	.word	0x080092c0
 800872c:	080092ca 	.word	0x080092ca
 8008730:	00000000 	.word	0x00000000
 8008734:	080084e7 	.word	0x080084e7
 8008738:	080092c6 	.word	0x080092c6

0800873c <_printf_common>:
 800873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	4616      	mov	r6, r2
 8008742:	4698      	mov	r8, r3
 8008744:	688a      	ldr	r2, [r1, #8]
 8008746:	690b      	ldr	r3, [r1, #16]
 8008748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800874c:	4293      	cmp	r3, r2
 800874e:	bfb8      	it	lt
 8008750:	4613      	movlt	r3, r2
 8008752:	6033      	str	r3, [r6, #0]
 8008754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008758:	4607      	mov	r7, r0
 800875a:	460c      	mov	r4, r1
 800875c:	b10a      	cbz	r2, 8008762 <_printf_common+0x26>
 800875e:	3301      	adds	r3, #1
 8008760:	6033      	str	r3, [r6, #0]
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	0699      	lsls	r1, r3, #26
 8008766:	bf42      	ittt	mi
 8008768:	6833      	ldrmi	r3, [r6, #0]
 800876a:	3302      	addmi	r3, #2
 800876c:	6033      	strmi	r3, [r6, #0]
 800876e:	6825      	ldr	r5, [r4, #0]
 8008770:	f015 0506 	ands.w	r5, r5, #6
 8008774:	d106      	bne.n	8008784 <_printf_common+0x48>
 8008776:	f104 0a19 	add.w	sl, r4, #25
 800877a:	68e3      	ldr	r3, [r4, #12]
 800877c:	6832      	ldr	r2, [r6, #0]
 800877e:	1a9b      	subs	r3, r3, r2
 8008780:	42ab      	cmp	r3, r5
 8008782:	dc26      	bgt.n	80087d2 <_printf_common+0x96>
 8008784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	3b00      	subs	r3, #0
 800878c:	bf18      	it	ne
 800878e:	2301      	movne	r3, #1
 8008790:	0692      	lsls	r2, r2, #26
 8008792:	d42b      	bmi.n	80087ec <_printf_common+0xb0>
 8008794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008798:	4641      	mov	r1, r8
 800879a:	4638      	mov	r0, r7
 800879c:	47c8      	blx	r9
 800879e:	3001      	adds	r0, #1
 80087a0:	d01e      	beq.n	80087e0 <_printf_common+0xa4>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	6922      	ldr	r2, [r4, #16]
 80087a6:	f003 0306 	and.w	r3, r3, #6
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	bf02      	ittt	eq
 80087ae:	68e5      	ldreq	r5, [r4, #12]
 80087b0:	6833      	ldreq	r3, [r6, #0]
 80087b2:	1aed      	subeq	r5, r5, r3
 80087b4:	68a3      	ldr	r3, [r4, #8]
 80087b6:	bf0c      	ite	eq
 80087b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087bc:	2500      	movne	r5, #0
 80087be:	4293      	cmp	r3, r2
 80087c0:	bfc4      	itt	gt
 80087c2:	1a9b      	subgt	r3, r3, r2
 80087c4:	18ed      	addgt	r5, r5, r3
 80087c6:	2600      	movs	r6, #0
 80087c8:	341a      	adds	r4, #26
 80087ca:	42b5      	cmp	r5, r6
 80087cc:	d11a      	bne.n	8008804 <_printf_common+0xc8>
 80087ce:	2000      	movs	r0, #0
 80087d0:	e008      	b.n	80087e4 <_printf_common+0xa8>
 80087d2:	2301      	movs	r3, #1
 80087d4:	4652      	mov	r2, sl
 80087d6:	4641      	mov	r1, r8
 80087d8:	4638      	mov	r0, r7
 80087da:	47c8      	blx	r9
 80087dc:	3001      	adds	r0, #1
 80087de:	d103      	bne.n	80087e8 <_printf_common+0xac>
 80087e0:	f04f 30ff 	mov.w	r0, #4294967295
 80087e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e8:	3501      	adds	r5, #1
 80087ea:	e7c6      	b.n	800877a <_printf_common+0x3e>
 80087ec:	18e1      	adds	r1, r4, r3
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	2030      	movs	r0, #48	@ 0x30
 80087f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087f6:	4422      	add	r2, r4
 80087f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008800:	3302      	adds	r3, #2
 8008802:	e7c7      	b.n	8008794 <_printf_common+0x58>
 8008804:	2301      	movs	r3, #1
 8008806:	4622      	mov	r2, r4
 8008808:	4641      	mov	r1, r8
 800880a:	4638      	mov	r0, r7
 800880c:	47c8      	blx	r9
 800880e:	3001      	adds	r0, #1
 8008810:	d0e6      	beq.n	80087e0 <_printf_common+0xa4>
 8008812:	3601      	adds	r6, #1
 8008814:	e7d9      	b.n	80087ca <_printf_common+0x8e>
	...

08008818 <_printf_i>:
 8008818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	7e0f      	ldrb	r7, [r1, #24]
 800881e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008820:	2f78      	cmp	r7, #120	@ 0x78
 8008822:	4691      	mov	r9, r2
 8008824:	4680      	mov	r8, r0
 8008826:	460c      	mov	r4, r1
 8008828:	469a      	mov	sl, r3
 800882a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800882e:	d807      	bhi.n	8008840 <_printf_i+0x28>
 8008830:	2f62      	cmp	r7, #98	@ 0x62
 8008832:	d80a      	bhi.n	800884a <_printf_i+0x32>
 8008834:	2f00      	cmp	r7, #0
 8008836:	f000 80d2 	beq.w	80089de <_printf_i+0x1c6>
 800883a:	2f58      	cmp	r7, #88	@ 0x58
 800883c:	f000 80b9 	beq.w	80089b2 <_printf_i+0x19a>
 8008840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008848:	e03a      	b.n	80088c0 <_printf_i+0xa8>
 800884a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800884e:	2b15      	cmp	r3, #21
 8008850:	d8f6      	bhi.n	8008840 <_printf_i+0x28>
 8008852:	a101      	add	r1, pc, #4	@ (adr r1, 8008858 <_printf_i+0x40>)
 8008854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008858:	080088b1 	.word	0x080088b1
 800885c:	080088c5 	.word	0x080088c5
 8008860:	08008841 	.word	0x08008841
 8008864:	08008841 	.word	0x08008841
 8008868:	08008841 	.word	0x08008841
 800886c:	08008841 	.word	0x08008841
 8008870:	080088c5 	.word	0x080088c5
 8008874:	08008841 	.word	0x08008841
 8008878:	08008841 	.word	0x08008841
 800887c:	08008841 	.word	0x08008841
 8008880:	08008841 	.word	0x08008841
 8008884:	080089c5 	.word	0x080089c5
 8008888:	080088ef 	.word	0x080088ef
 800888c:	0800897f 	.word	0x0800897f
 8008890:	08008841 	.word	0x08008841
 8008894:	08008841 	.word	0x08008841
 8008898:	080089e7 	.word	0x080089e7
 800889c:	08008841 	.word	0x08008841
 80088a0:	080088ef 	.word	0x080088ef
 80088a4:	08008841 	.word	0x08008841
 80088a8:	08008841 	.word	0x08008841
 80088ac:	08008987 	.word	0x08008987
 80088b0:	6833      	ldr	r3, [r6, #0]
 80088b2:	1d1a      	adds	r2, r3, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6032      	str	r2, [r6, #0]
 80088b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088c0:	2301      	movs	r3, #1
 80088c2:	e09d      	b.n	8008a00 <_printf_i+0x1e8>
 80088c4:	6833      	ldr	r3, [r6, #0]
 80088c6:	6820      	ldr	r0, [r4, #0]
 80088c8:	1d19      	adds	r1, r3, #4
 80088ca:	6031      	str	r1, [r6, #0]
 80088cc:	0606      	lsls	r6, r0, #24
 80088ce:	d501      	bpl.n	80088d4 <_printf_i+0xbc>
 80088d0:	681d      	ldr	r5, [r3, #0]
 80088d2:	e003      	b.n	80088dc <_printf_i+0xc4>
 80088d4:	0645      	lsls	r5, r0, #25
 80088d6:	d5fb      	bpl.n	80088d0 <_printf_i+0xb8>
 80088d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088dc:	2d00      	cmp	r5, #0
 80088de:	da03      	bge.n	80088e8 <_printf_i+0xd0>
 80088e0:	232d      	movs	r3, #45	@ 0x2d
 80088e2:	426d      	negs	r5, r5
 80088e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088e8:	4859      	ldr	r0, [pc, #356]	@ (8008a50 <_printf_i+0x238>)
 80088ea:	230a      	movs	r3, #10
 80088ec:	e011      	b.n	8008912 <_printf_i+0xfa>
 80088ee:	6821      	ldr	r1, [r4, #0]
 80088f0:	6833      	ldr	r3, [r6, #0]
 80088f2:	0608      	lsls	r0, r1, #24
 80088f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80088f8:	d402      	bmi.n	8008900 <_printf_i+0xe8>
 80088fa:	0649      	lsls	r1, r1, #25
 80088fc:	bf48      	it	mi
 80088fe:	b2ad      	uxthmi	r5, r5
 8008900:	2f6f      	cmp	r7, #111	@ 0x6f
 8008902:	4853      	ldr	r0, [pc, #332]	@ (8008a50 <_printf_i+0x238>)
 8008904:	6033      	str	r3, [r6, #0]
 8008906:	bf14      	ite	ne
 8008908:	230a      	movne	r3, #10
 800890a:	2308      	moveq	r3, #8
 800890c:	2100      	movs	r1, #0
 800890e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008912:	6866      	ldr	r6, [r4, #4]
 8008914:	60a6      	str	r6, [r4, #8]
 8008916:	2e00      	cmp	r6, #0
 8008918:	bfa2      	ittt	ge
 800891a:	6821      	ldrge	r1, [r4, #0]
 800891c:	f021 0104 	bicge.w	r1, r1, #4
 8008920:	6021      	strge	r1, [r4, #0]
 8008922:	b90d      	cbnz	r5, 8008928 <_printf_i+0x110>
 8008924:	2e00      	cmp	r6, #0
 8008926:	d04b      	beq.n	80089c0 <_printf_i+0x1a8>
 8008928:	4616      	mov	r6, r2
 800892a:	fbb5 f1f3 	udiv	r1, r5, r3
 800892e:	fb03 5711 	mls	r7, r3, r1, r5
 8008932:	5dc7      	ldrb	r7, [r0, r7]
 8008934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008938:	462f      	mov	r7, r5
 800893a:	42bb      	cmp	r3, r7
 800893c:	460d      	mov	r5, r1
 800893e:	d9f4      	bls.n	800892a <_printf_i+0x112>
 8008940:	2b08      	cmp	r3, #8
 8008942:	d10b      	bne.n	800895c <_printf_i+0x144>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	07df      	lsls	r7, r3, #31
 8008948:	d508      	bpl.n	800895c <_printf_i+0x144>
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	6861      	ldr	r1, [r4, #4]
 800894e:	4299      	cmp	r1, r3
 8008950:	bfde      	ittt	le
 8008952:	2330      	movle	r3, #48	@ 0x30
 8008954:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800895c:	1b92      	subs	r2, r2, r6
 800895e:	6122      	str	r2, [r4, #16]
 8008960:	f8cd a000 	str.w	sl, [sp]
 8008964:	464b      	mov	r3, r9
 8008966:	aa03      	add	r2, sp, #12
 8008968:	4621      	mov	r1, r4
 800896a:	4640      	mov	r0, r8
 800896c:	f7ff fee6 	bl	800873c <_printf_common>
 8008970:	3001      	adds	r0, #1
 8008972:	d14a      	bne.n	8008a0a <_printf_i+0x1f2>
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	b004      	add	sp, #16
 800897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	f043 0320 	orr.w	r3, r3, #32
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	4833      	ldr	r0, [pc, #204]	@ (8008a54 <_printf_i+0x23c>)
 8008988:	2778      	movs	r7, #120	@ 0x78
 800898a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	6831      	ldr	r1, [r6, #0]
 8008992:	061f      	lsls	r7, r3, #24
 8008994:	f851 5b04 	ldr.w	r5, [r1], #4
 8008998:	d402      	bmi.n	80089a0 <_printf_i+0x188>
 800899a:	065f      	lsls	r7, r3, #25
 800899c:	bf48      	it	mi
 800899e:	b2ad      	uxthmi	r5, r5
 80089a0:	6031      	str	r1, [r6, #0]
 80089a2:	07d9      	lsls	r1, r3, #31
 80089a4:	bf44      	itt	mi
 80089a6:	f043 0320 	orrmi.w	r3, r3, #32
 80089aa:	6023      	strmi	r3, [r4, #0]
 80089ac:	b11d      	cbz	r5, 80089b6 <_printf_i+0x19e>
 80089ae:	2310      	movs	r3, #16
 80089b0:	e7ac      	b.n	800890c <_printf_i+0xf4>
 80089b2:	4827      	ldr	r0, [pc, #156]	@ (8008a50 <_printf_i+0x238>)
 80089b4:	e7e9      	b.n	800898a <_printf_i+0x172>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	f023 0320 	bic.w	r3, r3, #32
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	e7f6      	b.n	80089ae <_printf_i+0x196>
 80089c0:	4616      	mov	r6, r2
 80089c2:	e7bd      	b.n	8008940 <_printf_i+0x128>
 80089c4:	6833      	ldr	r3, [r6, #0]
 80089c6:	6825      	ldr	r5, [r4, #0]
 80089c8:	6961      	ldr	r1, [r4, #20]
 80089ca:	1d18      	adds	r0, r3, #4
 80089cc:	6030      	str	r0, [r6, #0]
 80089ce:	062e      	lsls	r6, r5, #24
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	d501      	bpl.n	80089d8 <_printf_i+0x1c0>
 80089d4:	6019      	str	r1, [r3, #0]
 80089d6:	e002      	b.n	80089de <_printf_i+0x1c6>
 80089d8:	0668      	lsls	r0, r5, #25
 80089da:	d5fb      	bpl.n	80089d4 <_printf_i+0x1bc>
 80089dc:	8019      	strh	r1, [r3, #0]
 80089de:	2300      	movs	r3, #0
 80089e0:	6123      	str	r3, [r4, #16]
 80089e2:	4616      	mov	r6, r2
 80089e4:	e7bc      	b.n	8008960 <_printf_i+0x148>
 80089e6:	6833      	ldr	r3, [r6, #0]
 80089e8:	1d1a      	adds	r2, r3, #4
 80089ea:	6032      	str	r2, [r6, #0]
 80089ec:	681e      	ldr	r6, [r3, #0]
 80089ee:	6862      	ldr	r2, [r4, #4]
 80089f0:	2100      	movs	r1, #0
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7f7 fc04 	bl	8000200 <memchr>
 80089f8:	b108      	cbz	r0, 80089fe <_printf_i+0x1e6>
 80089fa:	1b80      	subs	r0, r0, r6
 80089fc:	6060      	str	r0, [r4, #4]
 80089fe:	6863      	ldr	r3, [r4, #4]
 8008a00:	6123      	str	r3, [r4, #16]
 8008a02:	2300      	movs	r3, #0
 8008a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a08:	e7aa      	b.n	8008960 <_printf_i+0x148>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4640      	mov	r0, r8
 8008a12:	47d0      	blx	sl
 8008a14:	3001      	adds	r0, #1
 8008a16:	d0ad      	beq.n	8008974 <_printf_i+0x15c>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	079b      	lsls	r3, r3, #30
 8008a1c:	d413      	bmi.n	8008a46 <_printf_i+0x22e>
 8008a1e:	68e0      	ldr	r0, [r4, #12]
 8008a20:	9b03      	ldr	r3, [sp, #12]
 8008a22:	4298      	cmp	r0, r3
 8008a24:	bfb8      	it	lt
 8008a26:	4618      	movlt	r0, r3
 8008a28:	e7a6      	b.n	8008978 <_printf_i+0x160>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4640      	mov	r0, r8
 8008a32:	47d0      	blx	sl
 8008a34:	3001      	adds	r0, #1
 8008a36:	d09d      	beq.n	8008974 <_printf_i+0x15c>
 8008a38:	3501      	adds	r5, #1
 8008a3a:	68e3      	ldr	r3, [r4, #12]
 8008a3c:	9903      	ldr	r1, [sp, #12]
 8008a3e:	1a5b      	subs	r3, r3, r1
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	dcf2      	bgt.n	8008a2a <_printf_i+0x212>
 8008a44:	e7eb      	b.n	8008a1e <_printf_i+0x206>
 8008a46:	2500      	movs	r5, #0
 8008a48:	f104 0619 	add.w	r6, r4, #25
 8008a4c:	e7f5      	b.n	8008a3a <_printf_i+0x222>
 8008a4e:	bf00      	nop
 8008a50:	080092d1 	.word	0x080092d1
 8008a54:	080092e2 	.word	0x080092e2

08008a58 <__sflush_r>:
 8008a58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a60:	0716      	lsls	r6, r2, #28
 8008a62:	4605      	mov	r5, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	d454      	bmi.n	8008b12 <__sflush_r+0xba>
 8008a68:	684b      	ldr	r3, [r1, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dc02      	bgt.n	8008a74 <__sflush_r+0x1c>
 8008a6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dd48      	ble.n	8008b06 <__sflush_r+0xae>
 8008a74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	d045      	beq.n	8008b06 <__sflush_r+0xae>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a80:	682f      	ldr	r7, [r5, #0]
 8008a82:	6a21      	ldr	r1, [r4, #32]
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	d030      	beq.n	8008aea <__sflush_r+0x92>
 8008a88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	0759      	lsls	r1, r3, #29
 8008a8e:	d505      	bpl.n	8008a9c <__sflush_r+0x44>
 8008a90:	6863      	ldr	r3, [r4, #4]
 8008a92:	1ad2      	subs	r2, r2, r3
 8008a94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a96:	b10b      	cbz	r3, 8008a9c <__sflush_r+0x44>
 8008a98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a9a:	1ad2      	subs	r2, r2, r3
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aa0:	6a21      	ldr	r1, [r4, #32]
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b0      	blx	r6
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	d106      	bne.n	8008aba <__sflush_r+0x62>
 8008aac:	6829      	ldr	r1, [r5, #0]
 8008aae:	291d      	cmp	r1, #29
 8008ab0:	d82b      	bhi.n	8008b0a <__sflush_r+0xb2>
 8008ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b5c <__sflush_r+0x104>)
 8008ab4:	410a      	asrs	r2, r1
 8008ab6:	07d6      	lsls	r6, r2, #31
 8008ab8:	d427      	bmi.n	8008b0a <__sflush_r+0xb2>
 8008aba:	2200      	movs	r2, #0
 8008abc:	6062      	str	r2, [r4, #4]
 8008abe:	04d9      	lsls	r1, r3, #19
 8008ac0:	6922      	ldr	r2, [r4, #16]
 8008ac2:	6022      	str	r2, [r4, #0]
 8008ac4:	d504      	bpl.n	8008ad0 <__sflush_r+0x78>
 8008ac6:	1c42      	adds	r2, r0, #1
 8008ac8:	d101      	bne.n	8008ace <__sflush_r+0x76>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	b903      	cbnz	r3, 8008ad0 <__sflush_r+0x78>
 8008ace:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ad2:	602f      	str	r7, [r5, #0]
 8008ad4:	b1b9      	cbz	r1, 8008b06 <__sflush_r+0xae>
 8008ad6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ada:	4299      	cmp	r1, r3
 8008adc:	d002      	beq.n	8008ae4 <__sflush_r+0x8c>
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f7ff fa9a 	bl	8008018 <_free_r>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ae8:	e00d      	b.n	8008b06 <__sflush_r+0xae>
 8008aea:	2301      	movs	r3, #1
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b0      	blx	r6
 8008af0:	4602      	mov	r2, r0
 8008af2:	1c50      	adds	r0, r2, #1
 8008af4:	d1c9      	bne.n	8008a8a <__sflush_r+0x32>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0c6      	beq.n	8008a8a <__sflush_r+0x32>
 8008afc:	2b1d      	cmp	r3, #29
 8008afe:	d001      	beq.n	8008b04 <__sflush_r+0xac>
 8008b00:	2b16      	cmp	r3, #22
 8008b02:	d11e      	bne.n	8008b42 <__sflush_r+0xea>
 8008b04:	602f      	str	r7, [r5, #0]
 8008b06:	2000      	movs	r0, #0
 8008b08:	e022      	b.n	8008b50 <__sflush_r+0xf8>
 8008b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b0e:	b21b      	sxth	r3, r3
 8008b10:	e01b      	b.n	8008b4a <__sflush_r+0xf2>
 8008b12:	690f      	ldr	r7, [r1, #16]
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	d0f6      	beq.n	8008b06 <__sflush_r+0xae>
 8008b18:	0793      	lsls	r3, r2, #30
 8008b1a:	680e      	ldr	r6, [r1, #0]
 8008b1c:	bf08      	it	eq
 8008b1e:	694b      	ldreq	r3, [r1, #20]
 8008b20:	600f      	str	r7, [r1, #0]
 8008b22:	bf18      	it	ne
 8008b24:	2300      	movne	r3, #0
 8008b26:	eba6 0807 	sub.w	r8, r6, r7
 8008b2a:	608b      	str	r3, [r1, #8]
 8008b2c:	f1b8 0f00 	cmp.w	r8, #0
 8008b30:	dde9      	ble.n	8008b06 <__sflush_r+0xae>
 8008b32:	6a21      	ldr	r1, [r4, #32]
 8008b34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b36:	4643      	mov	r3, r8
 8008b38:	463a      	mov	r2, r7
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b0      	blx	r6
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	dc08      	bgt.n	8008b54 <__sflush_r+0xfc>
 8008b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b54:	4407      	add	r7, r0
 8008b56:	eba8 0800 	sub.w	r8, r8, r0
 8008b5a:	e7e7      	b.n	8008b2c <__sflush_r+0xd4>
 8008b5c:	dfbffffe 	.word	0xdfbffffe

08008b60 <_fflush_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	690b      	ldr	r3, [r1, #16]
 8008b64:	4605      	mov	r5, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	b913      	cbnz	r3, 8008b70 <_fflush_r+0x10>
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	b118      	cbz	r0, 8008b7a <_fflush_r+0x1a>
 8008b72:	6a03      	ldr	r3, [r0, #32]
 8008b74:	b90b      	cbnz	r3, 8008b7a <_fflush_r+0x1a>
 8008b76:	f7ff f919 	bl	8007dac <__sinit>
 8008b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0f3      	beq.n	8008b6a <_fflush_r+0xa>
 8008b82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b84:	07d0      	lsls	r0, r2, #31
 8008b86:	d404      	bmi.n	8008b92 <_fflush_r+0x32>
 8008b88:	0599      	lsls	r1, r3, #22
 8008b8a:	d402      	bmi.n	8008b92 <_fflush_r+0x32>
 8008b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b8e:	f7ff fa32 	bl	8007ff6 <__retarget_lock_acquire_recursive>
 8008b92:	4628      	mov	r0, r5
 8008b94:	4621      	mov	r1, r4
 8008b96:	f7ff ff5f 	bl	8008a58 <__sflush_r>
 8008b9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b9c:	07da      	lsls	r2, r3, #31
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	d4e4      	bmi.n	8008b6c <_fflush_r+0xc>
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	059b      	lsls	r3, r3, #22
 8008ba6:	d4e1      	bmi.n	8008b6c <_fflush_r+0xc>
 8008ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008baa:	f7ff fa25 	bl	8007ff8 <__retarget_lock_release_recursive>
 8008bae:	e7dd      	b.n	8008b6c <_fflush_r+0xc>

08008bb0 <__swbuf_r>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	460e      	mov	r6, r1
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	b118      	cbz	r0, 8008bc2 <__swbuf_r+0x12>
 8008bba:	6a03      	ldr	r3, [r0, #32]
 8008bbc:	b90b      	cbnz	r3, 8008bc2 <__swbuf_r+0x12>
 8008bbe:	f7ff f8f5 	bl	8007dac <__sinit>
 8008bc2:	69a3      	ldr	r3, [r4, #24]
 8008bc4:	60a3      	str	r3, [r4, #8]
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	071a      	lsls	r2, r3, #28
 8008bca:	d501      	bpl.n	8008bd0 <__swbuf_r+0x20>
 8008bcc:	6923      	ldr	r3, [r4, #16]
 8008bce:	b943      	cbnz	r3, 8008be2 <__swbuf_r+0x32>
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f000 f82a 	bl	8008c2c <__swsetup_r>
 8008bd8:	b118      	cbz	r0, 8008be2 <__swbuf_r+0x32>
 8008bda:	f04f 37ff 	mov.w	r7, #4294967295
 8008bde:	4638      	mov	r0, r7
 8008be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	6922      	ldr	r2, [r4, #16]
 8008be6:	1a98      	subs	r0, r3, r2
 8008be8:	6963      	ldr	r3, [r4, #20]
 8008bea:	b2f6      	uxtb	r6, r6
 8008bec:	4283      	cmp	r3, r0
 8008bee:	4637      	mov	r7, r6
 8008bf0:	dc05      	bgt.n	8008bfe <__swbuf_r+0x4e>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f7ff ffb3 	bl	8008b60 <_fflush_r>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d1ed      	bne.n	8008bda <__swbuf_r+0x2a>
 8008bfe:	68a3      	ldr	r3, [r4, #8]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	60a3      	str	r3, [r4, #8]
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	6022      	str	r2, [r4, #0]
 8008c0a:	701e      	strb	r6, [r3, #0]
 8008c0c:	6962      	ldr	r2, [r4, #20]
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d004      	beq.n	8008c1e <__swbuf_r+0x6e>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	07db      	lsls	r3, r3, #31
 8008c18:	d5e1      	bpl.n	8008bde <__swbuf_r+0x2e>
 8008c1a:	2e0a      	cmp	r6, #10
 8008c1c:	d1df      	bne.n	8008bde <__swbuf_r+0x2e>
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4628      	mov	r0, r5
 8008c22:	f7ff ff9d 	bl	8008b60 <_fflush_r>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d0d9      	beq.n	8008bde <__swbuf_r+0x2e>
 8008c2a:	e7d6      	b.n	8008bda <__swbuf_r+0x2a>

08008c2c <__swsetup_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4b29      	ldr	r3, [pc, #164]	@ (8008cd4 <__swsetup_r+0xa8>)
 8008c30:	4605      	mov	r5, r0
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	460c      	mov	r4, r1
 8008c36:	b118      	cbz	r0, 8008c40 <__swsetup_r+0x14>
 8008c38:	6a03      	ldr	r3, [r0, #32]
 8008c3a:	b90b      	cbnz	r3, 8008c40 <__swsetup_r+0x14>
 8008c3c:	f7ff f8b6 	bl	8007dac <__sinit>
 8008c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c44:	0719      	lsls	r1, r3, #28
 8008c46:	d422      	bmi.n	8008c8e <__swsetup_r+0x62>
 8008c48:	06da      	lsls	r2, r3, #27
 8008c4a:	d407      	bmi.n	8008c5c <__swsetup_r+0x30>
 8008c4c:	2209      	movs	r2, #9
 8008c4e:	602a      	str	r2, [r5, #0]
 8008c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5a:	e033      	b.n	8008cc4 <__swsetup_r+0x98>
 8008c5c:	0758      	lsls	r0, r3, #29
 8008c5e:	d512      	bpl.n	8008c86 <__swsetup_r+0x5a>
 8008c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c62:	b141      	cbz	r1, 8008c76 <__swsetup_r+0x4a>
 8008c64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c68:	4299      	cmp	r1, r3
 8008c6a:	d002      	beq.n	8008c72 <__swsetup_r+0x46>
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f7ff f9d3 	bl	8008018 <_free_r>
 8008c72:	2300      	movs	r3, #0
 8008c74:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c7c:	81a3      	strh	r3, [r4, #12]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	6063      	str	r3, [r4, #4]
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	f043 0308 	orr.w	r3, r3, #8
 8008c8c:	81a3      	strh	r3, [r4, #12]
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	b94b      	cbnz	r3, 8008ca6 <__swsetup_r+0x7a>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c9c:	d003      	beq.n	8008ca6 <__swsetup_r+0x7a>
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f000 f897 	bl	8008dd4 <__smakebuf_r>
 8008ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008caa:	f013 0201 	ands.w	r2, r3, #1
 8008cae:	d00a      	beq.n	8008cc6 <__swsetup_r+0x9a>
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	60a2      	str	r2, [r4, #8]
 8008cb4:	6962      	ldr	r2, [r4, #20]
 8008cb6:	4252      	negs	r2, r2
 8008cb8:	61a2      	str	r2, [r4, #24]
 8008cba:	6922      	ldr	r2, [r4, #16]
 8008cbc:	b942      	cbnz	r2, 8008cd0 <__swsetup_r+0xa4>
 8008cbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cc2:	d1c5      	bne.n	8008c50 <__swsetup_r+0x24>
 8008cc4:	bd38      	pop	{r3, r4, r5, pc}
 8008cc6:	0799      	lsls	r1, r3, #30
 8008cc8:	bf58      	it	pl
 8008cca:	6962      	ldrpl	r2, [r4, #20]
 8008ccc:	60a2      	str	r2, [r4, #8]
 8008cce:	e7f4      	b.n	8008cba <__swsetup_r+0x8e>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e7f7      	b.n	8008cc4 <__swsetup_r+0x98>
 8008cd4:	20000028 	.word	0x20000028

08008cd8 <memmove>:
 8008cd8:	4288      	cmp	r0, r1
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	eb01 0402 	add.w	r4, r1, r2
 8008ce0:	d902      	bls.n	8008ce8 <memmove+0x10>
 8008ce2:	4284      	cmp	r4, r0
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	d807      	bhi.n	8008cf8 <memmove+0x20>
 8008ce8:	1e43      	subs	r3, r0, #1
 8008cea:	42a1      	cmp	r1, r4
 8008cec:	d008      	beq.n	8008d00 <memmove+0x28>
 8008cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cf6:	e7f8      	b.n	8008cea <memmove+0x12>
 8008cf8:	4402      	add	r2, r0
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	428a      	cmp	r2, r1
 8008cfe:	d100      	bne.n	8008d02 <memmove+0x2a>
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d0a:	e7f7      	b.n	8008cfc <memmove+0x24>

08008d0c <_sbrk_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d06      	ldr	r5, [pc, #24]	@ (8008d28 <_sbrk_r+0x1c>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	f7f8 fc04 	bl	8001524 <_sbrk>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_sbrk_r+0x1a>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_sbrk_r+0x1a>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	200130bc 	.word	0x200130bc

08008d2c <_realloc_r>:
 8008d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d30:	4680      	mov	r8, r0
 8008d32:	4615      	mov	r5, r2
 8008d34:	460c      	mov	r4, r1
 8008d36:	b921      	cbnz	r1, 8008d42 <_realloc_r+0x16>
 8008d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	f7ff b9d7 	b.w	80080f0 <_malloc_r>
 8008d42:	b92a      	cbnz	r2, 8008d50 <_realloc_r+0x24>
 8008d44:	f7ff f968 	bl	8008018 <_free_r>
 8008d48:	2400      	movs	r4, #0
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d50:	f000 f89e 	bl	8008e90 <_malloc_usable_size_r>
 8008d54:	4285      	cmp	r5, r0
 8008d56:	4606      	mov	r6, r0
 8008d58:	d802      	bhi.n	8008d60 <_realloc_r+0x34>
 8008d5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d5e:	d8f4      	bhi.n	8008d4a <_realloc_r+0x1e>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4640      	mov	r0, r8
 8008d64:	f7ff f9c4 	bl	80080f0 <_malloc_r>
 8008d68:	4607      	mov	r7, r0
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d0ec      	beq.n	8008d48 <_realloc_r+0x1c>
 8008d6e:	42b5      	cmp	r5, r6
 8008d70:	462a      	mov	r2, r5
 8008d72:	4621      	mov	r1, r4
 8008d74:	bf28      	it	cs
 8008d76:	4632      	movcs	r2, r6
 8008d78:	f7ff f93f 	bl	8007ffa <memcpy>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4640      	mov	r0, r8
 8008d80:	f7ff f94a 	bl	8008018 <_free_r>
 8008d84:	463c      	mov	r4, r7
 8008d86:	e7e0      	b.n	8008d4a <_realloc_r+0x1e>

08008d88 <__swhatbuf_r>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d90:	2900      	cmp	r1, #0
 8008d92:	b096      	sub	sp, #88	@ 0x58
 8008d94:	4615      	mov	r5, r2
 8008d96:	461e      	mov	r6, r3
 8008d98:	da0d      	bge.n	8008db6 <__swhatbuf_r+0x2e>
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008da0:	f04f 0100 	mov.w	r1, #0
 8008da4:	bf14      	ite	ne
 8008da6:	2340      	movne	r3, #64	@ 0x40
 8008da8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008dac:	2000      	movs	r0, #0
 8008dae:	6031      	str	r1, [r6, #0]
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	b016      	add	sp, #88	@ 0x58
 8008db4:	bd70      	pop	{r4, r5, r6, pc}
 8008db6:	466a      	mov	r2, sp
 8008db8:	f000 f848 	bl	8008e4c <_fstat_r>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	dbec      	blt.n	8008d9a <__swhatbuf_r+0x12>
 8008dc0:	9901      	ldr	r1, [sp, #4]
 8008dc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dca:	4259      	negs	r1, r3
 8008dcc:	4159      	adcs	r1, r3
 8008dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dd2:	e7eb      	b.n	8008dac <__swhatbuf_r+0x24>

08008dd4 <__smakebuf_r>:
 8008dd4:	898b      	ldrh	r3, [r1, #12]
 8008dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dd8:	079d      	lsls	r5, r3, #30
 8008dda:	4606      	mov	r6, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	d507      	bpl.n	8008df0 <__smakebuf_r+0x1c>
 8008de0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	6123      	str	r3, [r4, #16]
 8008de8:	2301      	movs	r3, #1
 8008dea:	6163      	str	r3, [r4, #20]
 8008dec:	b003      	add	sp, #12
 8008dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df0:	ab01      	add	r3, sp, #4
 8008df2:	466a      	mov	r2, sp
 8008df4:	f7ff ffc8 	bl	8008d88 <__swhatbuf_r>
 8008df8:	9f00      	ldr	r7, [sp, #0]
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7ff f976 	bl	80080f0 <_malloc_r>
 8008e04:	b948      	cbnz	r0, 8008e1a <__smakebuf_r+0x46>
 8008e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0a:	059a      	lsls	r2, r3, #22
 8008e0c:	d4ee      	bmi.n	8008dec <__smakebuf_r+0x18>
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	f043 0302 	orr.w	r3, r3, #2
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	e7e2      	b.n	8008de0 <__smakebuf_r+0xc>
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	6020      	str	r0, [r4, #0]
 8008e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	9b01      	ldr	r3, [sp, #4]
 8008e26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e2a:	b15b      	cbz	r3, 8008e44 <__smakebuf_r+0x70>
 8008e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 f81d 	bl	8008e70 <_isatty_r>
 8008e36:	b128      	cbz	r0, 8008e44 <__smakebuf_r+0x70>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	431d      	orrs	r5, r3
 8008e48:	81a5      	strh	r5, [r4, #12]
 8008e4a:	e7cf      	b.n	8008dec <__smakebuf_r+0x18>

08008e4c <_fstat_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4d07      	ldr	r5, [pc, #28]	@ (8008e6c <_fstat_r+0x20>)
 8008e50:	2300      	movs	r3, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	f7f8 fb3a 	bl	80014d2 <_fstat>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d102      	bne.n	8008e68 <_fstat_r+0x1c>
 8008e62:	682b      	ldr	r3, [r5, #0]
 8008e64:	b103      	cbz	r3, 8008e68 <_fstat_r+0x1c>
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
 8008e6a:	bf00      	nop
 8008e6c:	200130bc 	.word	0x200130bc

08008e70 <_isatty_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d06      	ldr	r5, [pc, #24]	@ (8008e8c <_isatty_r+0x1c>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	602b      	str	r3, [r5, #0]
 8008e7c:	f7f8 fb39 	bl	80014f2 <_isatty>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_isatty_r+0x1a>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_isatty_r+0x1a>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	200130bc 	.word	0x200130bc

08008e90 <_malloc_usable_size_r>:
 8008e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e94:	1f18      	subs	r0, r3, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfbc      	itt	lt
 8008e9a:	580b      	ldrlt	r3, [r1, r0]
 8008e9c:	18c0      	addlt	r0, r0, r3
 8008e9e:	4770      	bx	lr

08008ea0 <_init>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	bf00      	nop
 8008ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea6:	bc08      	pop	{r3}
 8008ea8:	469e      	mov	lr, r3
 8008eaa:	4770      	bx	lr

08008eac <_fini>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr
