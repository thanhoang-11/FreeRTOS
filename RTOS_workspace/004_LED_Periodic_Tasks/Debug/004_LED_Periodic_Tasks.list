
004_LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007580  08007580  00008580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007710  08007710  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007710  08007710  00008710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007718  08007718  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007718  08007718  00008718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800771c  0800771c  0000871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007720  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          00014490  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013bdf  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000316a  00000000  00000000  0001cc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0001fd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edf  00000000  00000000  000210f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023163  00000000  00000000  00021fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166ff  00000000  00000000  0004513a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7c53  00000000  00000000  0005b839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013348c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e4  00000000  00000000  001334d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000eb  00000000  00000000  001385b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007568 	.word	0x08007568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007568 	.word	0x08007568

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed8 	.word	0x20012ed8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbb3 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f871 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8d9 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(250000);
 8000566:	482f      	ldr	r0, [pc, #188]	@ (8000624 <main+0xd0>)
 8000568:	f004 fd58 	bl	800501c <SEGGER_UART_init>

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800056c:	4b2e      	ldr	r3, [pc, #184]	@ (8000628 <main+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a2d      	ldr	r2, [pc, #180]	@ (8000628 <main+0xd4>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000578:	f004 fb7a 	bl	8004c70 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2302      	movs	r3, #2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	22c8      	movs	r2, #200	@ 0xc8
 800058a:	4928      	ldr	r1, [pc, #160]	@ (800062c <main+0xd8>)
 800058c:	4828      	ldr	r0, [pc, #160]	@ (8000630 <main+0xdc>)
 800058e:	f002 fc05 	bl	8002d9c <xTaskCreate>
 8000592:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d00b      	beq.n	80005b2 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059e:	f383 8811 	msr	BASEPRI, r3
 80005a2:	f3bf 8f6f 	isb	sy
 80005a6:	f3bf 8f4f 	dsb	sy
 80005aa:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	e7fd      	b.n	80005ae <main+0x5a>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task2_handle);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	22c8      	movs	r2, #200	@ 0xc8
 80005c0:	491c      	ldr	r1, [pc, #112]	@ (8000634 <main+0xe0>)
 80005c2:	481d      	ldr	r0, [pc, #116]	@ (8000638 <main+0xe4>)
 80005c4:	f002 fbea 	bl	8002d9c <xTaskCreate>
 80005c8:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d00b      	beq.n	80005e8 <main+0x94>
        __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	617b      	str	r3, [r7, #20]
    }
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0x90>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task3_handle);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2302      	movs	r3, #2
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	22c8      	movs	r2, #200	@ 0xc8
 80005f4:	4911      	ldr	r1, [pc, #68]	@ (800063c <main+0xe8>)
 80005f6:	4812      	ldr	r0, [pc, #72]	@ (8000640 <main+0xec>)
 80005f8:	f002 fbd0 	bl	8002d9c <xTaskCreate>
 80005fc:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00b      	beq.n	800061c <main+0xc8>
        __asm volatile
 8000604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000608:	f383 8811 	msr	BASEPRI, r3
 800060c:	f3bf 8f6f 	isb	sy
 8000610:	f3bf 8f4f 	dsb	sy
 8000614:	613b      	str	r3, [r7, #16]
    }
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0xc4>

  //Start the FreeRTOS scheduler
   vTaskStartScheduler();
 800061c:	f002 fda6 	bl	800316c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0xcc>
 8000624:	0003d090 	.word	0x0003d090
 8000628:	e0001000 	.word	0xe0001000
 800062c:	08007580 	.word	0x08007580
 8000630:	080009d5 	.word	0x080009d5
 8000634:	08007590 	.word	0x08007590
 8000638:	08000a11 	.word	0x08000a11
 800063c:	080075a0 	.word	0x080075a0
 8000640:	08000a4d 	.word	0x08000a4d

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 ff4e 	bl	80074f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	@ 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fdef 	bl	80012ac <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9ea 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f850 	bl	800179c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f9d3 	bl	8000aac <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	@ 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f000 fd32 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fd2d 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f000 fd27 	bl	8001244 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fb7d 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fb6f 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fb5f 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fb52 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 fb42 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	@ 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fb32 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fb26 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 fb15 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 fb06 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 faf5 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fae8 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fad7 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 facb 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 faba 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 faad 	bl	8000f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	@ 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80009dc:	f002 fcd8 	bl	8003390 <xTaskGetTickCount>
 80009e0:	4603      	mov	r3, r0
 80009e2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e4:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <led_green_handler+0x34>)
 80009e6:	f006 fcd7 	bl	8007398 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <led_green_handler+0x38>)
 80009f0:	f000 fc41 	bl	8001276 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fb31 	bl	8003064 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a02:	bf00      	nop
 8000a04:	e7ee      	b.n	80009e4 <led_green_handler+0x10>
 8000a06:	bf00      	nop
 8000a08:	080075b0 	.word	0x080075b0
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000a18:	f002 fcba 	bl	8003390 <xTaskGetTickCount>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a20:	4808      	ldr	r0, [pc, #32]	@ (8000a44 <led_orange_handler+0x34>)
 8000a22:	f006 fcb9 	bl	8007398 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2a:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <led_orange_handler+0x38>)
 8000a2c:	f000 fc23 	bl	8001276 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fb13 	bl	8003064 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a3e:	bf00      	nop
 8000a40:	e7ee      	b.n	8000a20 <led_orange_handler+0x10>
 8000a42:	bf00      	nop
 8000a44:	080075c4 	.word	0x080075c4
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000a54:	f002 fc9c 	bl	8003390 <xTaskGetTickCount>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a5c:	4808      	ldr	r0, [pc, #32]	@ (8000a80 <led_red_handler+0x34>)
 8000a5e:	f006 fc9b 	bl	8007398 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a66:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <led_red_handler+0x38>)
 8000a68:	f000 fc05 	bl	8001276 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 faf5 	bl	8003064 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a7a:	bf00      	nop
 8000a7c:	e7ee      	b.n	8000a5c <led_red_handler+0x10>
 8000a7e:	bf00      	nop
 8000a80:	080075d8 	.word	0x080075d8
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 f935 	bl	8000d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40001000 	.word	0x40001000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000af6:	f003 fcf9 	bl	80044ec <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	@ 0x38
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <HAL_InitTick+0xe4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	4a32      	ldr	r2, [pc, #200]	@ (8000bec <HAL_InitTick+0xe4>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	4b30      	ldr	r3, [pc, #192]	@ (8000bec <HAL_InitTick+0xe4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b34:	f107 0210 	add.w	r2, r7, #16
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f838 	bl	8001bb4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d103      	bne.n	8000b56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4e:	f001 f81d 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8000b52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b54:	e004      	b.n	8000b60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b56:	f001 f819 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <HAL_InitTick+0xe8>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	0c9b      	lsrs	r3, r3, #18
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b70:	4a21      	ldr	r2, [pc, #132]	@ (8000bf8 <HAL_InitTick+0xf0>)
 8000b72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b94:	4817      	ldr	r0, [pc, #92]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b96:	f001 f83f 	bl	8001c18 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d11b      	bne.n	8000be0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba8:	4812      	ldr	r0, [pc, #72]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000baa:	f001 f88f 	bl	8001ccc <HAL_TIM_Base_Start_IT>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d111      	bne.n	8000be0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bbc:	2036      	movs	r0, #54	@ 0x36
 8000bbe:	f000 f997 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d808      	bhi.n	8000bda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	2036      	movs	r0, #54	@ 0x36
 8000bce:	f000 f973 	bl	8000eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <HAL_InitTick+0xf4>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e002      	b.n	8000be0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3738      	adds	r7, #56	@ 0x38
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <TIM6_DAC_IRQHandler+0x10>)
 8000c3e:	f001 f8b5 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000038 	.word	0x20000038

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f006 fc31 	bl	8007504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc57 	bl	8000554 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cb4:	08007720 	.word	0x08007720
  ldr r2, =_sbss
 8000cb8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cbc:	200144ac 	.word	0x200144ac

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	@ (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f8d8 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f7ff ff08 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fede 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000080 	.word	0x20000080

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000080 	.word	0x20000080

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	@ (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	@ (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e16b      	b.n	8001200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 815a 	bne.w	80011fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d005      	beq.n	8000f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d017      	beq.n	8000ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80b4 	beq.w	80011fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b60      	ldr	r3, [pc, #384]	@ (8001218 <HAL_GPIO_Init+0x30c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109a:	4a5f      	ldr	r2, [pc, #380]	@ (8001218 <HAL_GPIO_Init+0x30c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <HAL_GPIO_Init+0x30c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ae:	4a5b      	ldr	r2, [pc, #364]	@ (800121c <HAL_GPIO_Init+0x310>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a52      	ldr	r2, [pc, #328]	@ (8001220 <HAL_GPIO_Init+0x314>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <HAL_GPIO_Init+0x226>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a51      	ldr	r2, [pc, #324]	@ (8001224 <HAL_GPIO_Init+0x318>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x222>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a50      	ldr	r2, [pc, #320]	@ (8001228 <HAL_GPIO_Init+0x31c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x21e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4f      	ldr	r2, [pc, #316]	@ (800122c <HAL_GPIO_Init+0x320>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x21a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001230 <HAL_GPIO_Init+0x324>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x216>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001234 <HAL_GPIO_Init+0x328>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x212>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4c      	ldr	r2, [pc, #304]	@ (8001238 <HAL_GPIO_Init+0x32c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x20e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	@ (800123c <HAL_GPIO_Init+0x330>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x20a>
 8001112:	2307      	movs	r3, #7
 8001114:	e00e      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001116:	2308      	movs	r3, #8
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800111a:	2306      	movs	r3, #6
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	@ (800121c <HAL_GPIO_Init+0x310>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <HAL_GPIO_Init+0x334>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a32      	ldr	r2, [pc, #200]	@ (8001240 <HAL_GPIO_Init+0x334>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <HAL_GPIO_Init+0x334>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f ae90 	bls.w	8000f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	041a      	lsls	r2, r3, #16
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43d9      	mvns	r1, r3
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	400b      	ands	r3, r1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e267      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d075      	beq.n	80013b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ca:	4b88      	ldr	r3, [pc, #544]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d00c      	beq.n	80012f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b85      	ldr	r3, [pc, #532]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d112      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b82      	ldr	r3, [pc, #520]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ee:	d10b      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b7e      	ldr	r3, [pc, #504]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d05b      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d157      	bne.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e242      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x74>
 8001312:	4b76      	ldr	r3, [pc, #472]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a75      	ldr	r2, [pc, #468]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e01d      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x98>
 800132a:	4b70      	ldr	r3, [pc, #448]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6f      	ldr	r2, [pc, #444]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b6d      	ldr	r3, [pc, #436]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6c      	ldr	r2, [pc, #432]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001344:	4b69      	ldr	r3, [pc, #420]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a68      	ldr	r2, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800134a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b66      	ldr	r3, [pc, #408]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a65      	ldr	r2, [pc, #404]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fce4 	bl	8000d30 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fce0 	bl	8000d30 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	@ 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e207      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b5b      	ldr	r3, [pc, #364]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0xc0>
 800138a:	e014      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcd0 	bl	8000d30 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fccc 	bl	8000d30 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1f3      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d063      	beq.n	800148a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013c2:	4b4a      	ldr	r3, [pc, #296]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d11c      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e1c7      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4937      	ldr	r1, [pc, #220]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	e03a      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <HAL_RCC_OscConfig+0x244>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff fc85 	bl	8000d30 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fc81 	bl	8000d30 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e1a8      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4925      	ldr	r1, [pc, #148]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <HAL_RCC_OscConfig+0x244>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fc64 	bl	8000d30 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fc60 	bl	8000d30 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e187      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d036      	beq.n	8001504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d016      	beq.n	80014cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fc44 	bl	8000d30 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc40 	bl	8000d30 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e167      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80014c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x200>
 80014ca:	e01b      	b.n	8001504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fc2d 	bl	8000d30 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	e00e      	b.n	80014f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff fc29 	bl	8000d30 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d907      	bls.n	80014f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e150      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 80014ec:	40023800 	.word	0x40023800
 80014f0:	42470000 	.word	0x42470000
 80014f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b88      	ldr	r3, [pc, #544]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ea      	bne.n	80014da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 8097 	beq.w	8001640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b81      	ldr	r3, [pc, #516]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b7d      	ldr	r3, [pc, #500]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a7c      	ldr	r2, [pc, #496]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b7a      	ldr	r3, [pc, #488]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b77      	ldr	r3, [pc, #476]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b74      	ldr	r3, [pc, #464]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a73      	ldr	r2, [pc, #460]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fbe9 	bl	8000d30 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fbe5 	bl	8000d30 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e10c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x2ea>
 8001588:	4b64      	ldr	r3, [pc, #400]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158c:	4a63      	ldr	r2, [pc, #396]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	@ 0x70
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x30c>
 800159e:	4b5f      	ldr	r3, [pc, #380]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	4a5e      	ldr	r2, [pc, #376]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015aa:	4b5c      	ldr	r3, [pc, #368]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	4a5b      	ldr	r2, [pc, #364]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 80015b8:	4b58      	ldr	r3, [pc, #352]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015bc:	4a57      	ldr	r2, [pc, #348]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c4:	4b55      	ldr	r3, [pc, #340]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c8:	4a54      	ldr	r2, [pc, #336]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d015      	beq.n	8001604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fbaa 	bl	8000d30 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fba6 	bl	8000d30 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0cb      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	4b49      	ldr	r3, [pc, #292]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0ee      	beq.n	80015e0 <HAL_RCC_OscConfig+0x334>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fb94 	bl	8000d30 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fb90 	bl	8000d30 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0b5      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	4b3e      	ldr	r3, [pc, #248]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ee      	bne.n	800160c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b39      	ldr	r3, [pc, #228]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	4a38      	ldr	r2, [pc, #224]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800163a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a1 	beq.w	800178c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800164a:	4b34      	ldr	r3, [pc, #208]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d05c      	beq.n	8001710 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d141      	bne.n	80016e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb64 	bl	8000d30 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fb60 	bl	8000d30 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e087      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b27      	ldr	r3, [pc, #156]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	491b      	ldr	r1, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb39 	bl	8000d30 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff fb35 	bl	8000d30 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e05c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x416>
 80016e0:	e054      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb22 	bl	8000d30 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb1e 	bl	8000d30 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e045      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x444>
 800170e:	e03d      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e038      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000
 8001724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <HAL_RCC_OscConfig+0x4ec>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d028      	beq.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d121      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d11a      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800175e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	4293      	cmp	r3, r2
 8001762:	d111      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	3b01      	subs	r3, #1
 8001772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0cc      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b68      	ldr	r3, [pc, #416]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d90c      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b65      	ldr	r3, [pc, #404]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b8      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f0:	4b59      	ldr	r3, [pc, #356]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a58      	ldr	r2, [pc, #352]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001808:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a52      	ldr	r2, [pc, #328]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b50      	ldr	r3, [pc, #320]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	494d      	ldr	r1, [pc, #308]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d044      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d119      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b3f      	ldr	r3, [pc, #252]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e067      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4934      	ldr	r1, [pc, #208]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa50 	bl	8000d30 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fa4c 	bl	8000d30 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20c      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e032      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4916      	ldr	r1, [pc, #88]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490e      	ldr	r1, [pc, #56]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f821 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	490a      	ldr	r1, [pc, #40]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f8e0 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00
 8001958:	40023800 	.word	0x40023800
 800195c:	080076d0 	.word	0x080076d0
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800196c:	b094      	sub	sp, #80	@ 0x50
 800196e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001980:	4b79      	ldr	r3, [pc, #484]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d00d      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x40>
 800198c:	2b08      	cmp	r3, #8
 800198e:	f200 80e1 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x34>
 8001996:	2b04      	cmp	r3, #4
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800199a:	e0db      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b73      	ldr	r3, [pc, #460]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a0:	e0db      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b73      	ldr	r3, [pc, #460]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80019a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a6:	e0d8      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b6a      	ldr	r3, [pc, #424]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019da:	4622      	mov	r2, r4
 80019dc:	462b      	mov	r3, r5
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	0159      	lsls	r1, r3, #5
 80019e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ec:	0150      	lsls	r0, r2, #5
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4621      	mov	r1, r4
 80019f4:	1a51      	subs	r1, r2, r1
 80019f6:	6139      	str	r1, [r7, #16]
 80019f8:	4629      	mov	r1, r5
 80019fa:	eb63 0301 	sbc.w	r3, r3, r1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	018b      	lsls	r3, r1, #6
 8001a10:	4651      	mov	r1, sl
 8001a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a16:	4651      	mov	r1, sl
 8001a18:	018a      	lsls	r2, r1, #6
 8001a1a:	4651      	mov	r1, sl
 8001a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a20:	4659      	mov	r1, fp
 8001a22:	eb63 0901 	sbc.w	r9, r3, r1
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	eb18 0303 	adds.w	r3, r8, r3
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	462b      	mov	r3, r5
 8001a48:	eb49 0303 	adc.w	r3, r9, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	024b      	lsls	r3, r1, #9
 8001a5e:	4621      	mov	r1, r4
 8001a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a64:	4621      	mov	r1, r4
 8001a66:	024a      	lsls	r2, r1, #9
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a78:	f7fe fbf4 	bl	8000264 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a84:	e058      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4611      	mov	r1, r2
 8001a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0159      	lsls	r1, r3, #5
 8001aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab2:	0150      	lsls	r0, r2, #5
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4641      	mov	r1, r8
 8001aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001abe:	4649      	mov	r1, r9
 8001ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8001adc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	00eb      	lsls	r3, r5, #3
 8001aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aee:	00e2      	lsls	r2, r4, #3
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	4643      	mov	r3, r8
 8001af6:	18e3      	adds	r3, r4, r3
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	464b      	mov	r3, r9
 8001afc:	eb45 0303 	adc.w	r3, r5, r3
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	028b      	lsls	r3, r1, #10
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b18:	4621      	mov	r1, r4
 8001b1a:	028a      	lsls	r2, r1, #10
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b22:	2200      	movs	r2, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	61fa      	str	r2, [r7, #28]
 8001b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2c:	f7fe fb9a 	bl	8000264 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3750      	adds	r7, #80	@ 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b03      	ldr	r3, [pc, #12]	@ (8001b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0a9b      	lsrs	r3, r3, #10
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	@ (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	080076e0 	.word	0x080076e0

08001bb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <HAL_RCC_GetClockConfig+0x60>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0207 	and.w	r2, r3, #7
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e041      	b.n	8001cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f839 	bl	8001cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f000 f9c0 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e04e      	b.n	8001d82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d022      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0e:	d01d      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d018      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00e      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1b      	ldr	r2, [pc, #108]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d004      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d010      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6e:	e007      	b.n	8001d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	40000c00 	.word	0x40000c00
 8001da0:	40010400 	.word	0x40010400
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40001800 	.word	0x40001800

08001dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d020      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01b      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0202 	mvn.w	r2, #2
 8001de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8d2 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8c4 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8d5 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d020      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0204 	mvn.w	r2, #4
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8ac 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f89e 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8af 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d020      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01b      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f886 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f878 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f889 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d020      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0210 	mvn.w	r2, #16
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f860 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f852 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f863 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0201 	mvn.w	r2, #1
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fdb8 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f906 	bl	8002148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f834 	bl	8001fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0220 	mvn.w	r2, #32
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8d8 	bl	8002134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a46      	ldr	r2, [pc, #280]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ffa:	d00f      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a43      	ldr	r2, [pc, #268]	@ (800210c <TIM_Base_SetConfig+0x130>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a42      	ldr	r2, [pc, #264]	@ (8002110 <TIM_Base_SetConfig+0x134>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <TIM_Base_SetConfig+0x138>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a35      	ldr	r2, [pc, #212]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800203c:	d027      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a32      	ldr	r2, [pc, #200]	@ (800210c <TIM_Base_SetConfig+0x130>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d023      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a31      	ldr	r2, [pc, #196]	@ (8002110 <TIM_Base_SetConfig+0x134>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a30      	ldr	r2, [pc, #192]	@ (8002114 <TIM_Base_SetConfig+0x138>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d017      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2e      	ldr	r2, [pc, #184]	@ (800211c <TIM_Base_SetConfig+0x140>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2d      	ldr	r2, [pc, #180]	@ (8002120 <TIM_Base_SetConfig+0x144>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <TIM_Base_SetConfig+0x148>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2b      	ldr	r2, [pc, #172]	@ (8002128 <TIM_Base_SetConfig+0x14c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <TIM_Base_SetConfig+0x150>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <TIM_Base_SetConfig+0x154>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d108      	bne.n	80020a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a10      	ldr	r2, [pc, #64]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0xf8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f023 0201 	bic.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]
  }
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40010000 	.word	0x40010000
 800210c:	40000400 	.word	0x40000400
 8002110:	40000800 	.word	0x40000800
 8002114:	40000c00 	.word	0x40000c00
 8002118:	40010400 	.word	0x40010400
 800211c:	40014000 	.word	0x40014000
 8002120:	40014400 	.word	0x40014400
 8002124:	40014800 	.word	0x40014800
 8002128:	40001800 	.word	0x40001800
 800212c:	40001c00 	.word	0x40001c00
 8002130:	40002000 	.word	0x40002000

08002134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0208 	add.w	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 0208 	add.w	r2, r3, #8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f103 0208 	add.w	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d103      	bne.n	800221e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e00c      	b.n	8002238 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3308      	adds	r3, #8
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e002      	b.n	800222c <vListInsert+0x2e>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	429a      	cmp	r2, r3
 8002236:	d2f6      	bcs.n	8002226 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6892      	ldr	r2, [r2, #8]
 8002286:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6852      	ldr	r2, [r2, #4]
 8002290:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d103      	bne.n	80022a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <xQueueGenericReset+0x2c>
        __asm volatile
 80022d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	f3bf 8f6f 	isb	sy
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	60bb      	str	r3, [r7, #8]
    }
 80022ea:	bf00      	nop
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022f0:	f002 f97c 	bl	80045ec <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	441a      	add	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002320:	3b01      	subs	r3, #1
 8002322:	68f9      	ldr	r1, [r7, #12]
 8002324:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	441a      	add	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	22ff      	movs	r2, #255	@ 0xff
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	22ff      	movs	r2, #255	@ 0xff
 800233c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d114      	bne.n	8002370 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01a      	beq.n	8002384 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3310      	adds	r3, #16
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f9bc 	bl	80036d0 <xTaskRemoveFromEventList>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800235e:	4b0d      	ldr	r3, [pc, #52]	@ (8002394 <xQueueGenericReset+0xd0>)
 8002360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	e009      	b.n	8002384 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3310      	adds	r3, #16
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fef1 	bl	800215c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3324      	adds	r3, #36	@ 0x24
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff feec 	bl	800215c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002384:	f002 f964 	bl	8004650 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000ed04 	.word	0xe000ed04

08002398 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	@ 0x30
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <xQueueGenericCreate+0x2c>
        __asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	61bb      	str	r3, [r7, #24]
    }
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <xQueueGenericCreate+0x4a>
 80023d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d101      	bne.n	80023e6 <xQueueGenericCreate+0x4e>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <xQueueGenericCreate+0x50>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <xQueueGenericCreate+0x6c>
        __asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	617b      	str	r3, [r7, #20]
    }
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800240a:	d90b      	bls.n	8002424 <xQueueGenericCreate+0x8c>
        __asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	613b      	str	r3, [r7, #16]
    }
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	3350      	adds	r3, #80	@ 0x50
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fa11 	bl	8004850 <pvPortMalloc>
 800242e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3350      	adds	r3, #80	@ 0x50
 800243e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002440:	79fa      	ldrb	r2, [r7, #7]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f805 	bl	800245c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002452:	6a3b      	ldr	r3, [r7, #32]
    }
 8002454:	4618      	mov	r0, r3
 8002456:	3728      	adds	r7, #40	@ 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d103      	bne.n	8002478 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e002      	b.n	800247e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800248a:	2101      	movs	r1, #1
 800248c:	69b8      	ldr	r0, [r7, #24]
 800248e:	f7ff ff19 	bl	80022c4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	68f9      	ldr	r1, [r7, #12]
 80024a0:	2073      	movs	r0, #115	@ 0x73
 80024a2:	f004 f8ff 	bl	80066a4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b090      	sub	sp, #64	@ 0x40
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80024c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <xQueueGenericSend+0x34>
        __asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <xQueueGenericSend+0x42>
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <xQueueGenericSend+0x46>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <xQueueGenericSend+0x48>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <xQueueGenericSend+0x64>
        __asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800250e:	bf00      	nop
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d103      	bne.n	8002522 <xQueueGenericSend+0x72>
 800251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <xQueueGenericSend+0x76>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <xQueueGenericSend+0x78>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10b      	bne.n	8002544 <xQueueGenericSend+0x94>
        __asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	623b      	str	r3, [r7, #32]
    }
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002544:	f001 fa68 	bl	8003a18 <xTaskGetSchedulerState>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <xQueueGenericSend+0xa4>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <xQueueGenericSend+0xa8>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <xQueueGenericSend+0xaa>
 8002558:	2300      	movs	r3, #0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <xQueueGenericSend+0xc6>
        __asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	61fb      	str	r3, [r7, #28]
    }
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	e7fd      	b.n	8002572 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002576:	f002 f839 	bl	80045ec <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800257a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002582:	429a      	cmp	r2, r3
 8002584:	d302      	bcc.n	800258c <xQueueGenericSend+0xdc>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d136      	bne.n	80025fa <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 800258c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258e:	4618      	mov	r0, r3
 8002590:	f004 fe16 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	4601      	mov	r1, r0
 80025a0:	205a      	movs	r0, #90	@ 0x5a
 80025a2:	f004 f8f5 	bl	8006790 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025ac:	f000 fa80 	bl	8002ab0 <prvCopyDataToQueue>
 80025b0:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d010      	beq.n	80025dc <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	3324      	adds	r3, #36	@ 0x24
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 f886 	bl	80036d0 <xTaskRemoveFromEventList>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d013      	beq.n	80025f2 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80025ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <xQueueGenericSend+0x250>)
 80025cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	e00a      	b.n	80025f2 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80025dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80025e2:	4b47      	ldr	r3, [pc, #284]	@ (8002700 <xQueueGenericSend+0x250>)
 80025e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025f2:	f002 f82d 	bl	8004650 <vPortExitCritical>
                return pdPASS;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07d      	b.n	80026f6 <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d110      	bne.n	8002622 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002600:	f002 f826 	bl	8004650 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	4618      	mov	r0, r3
 8002608:	f004 fdda 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	460b      	mov	r3, r1
 8002616:	4601      	mov	r1, r0
 8002618:	205a      	movs	r0, #90	@ 0x5a
 800261a:	f004 f8b9 	bl	8006790 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800261e:	2300      	movs	r3, #0
 8002620:	e069      	b.n	80026f6 <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4618      	mov	r0, r3
 800262e:	f001 f8b7 	bl	80037a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002632:	2301      	movs	r3, #1
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002636:	f002 f80b 	bl	8004650 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800263a:	f000 fdf9 	bl	8003230 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800263e:	f001 ffd5 	bl	80045ec <vPortEnterCritical>
 8002642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002648:	b25b      	sxtb	r3, r3
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d103      	bne.n	8002658 <xQueueGenericSend+0x1a8>
 8002650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800265e:	b25b      	sxtb	r3, r3
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d103      	bne.n	800266e <xQueueGenericSend+0x1be>
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800266e:	f001 ffef 	bl	8004650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002672:	1d3a      	adds	r2, r7, #4
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f001 f8a6 	bl	80037cc <xTaskCheckForTimeOut>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d124      	bne.n	80026d0 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002686:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002688:	f000 fb0a 	bl	8002ca0 <prvIsQueueFull>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d018      	beq.n	80026c4 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	3310      	adds	r3, #16
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f000 ffc2 	bl	8003624 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026a2:	f000 fa95 	bl	8002bd0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026a6:	f000 fdd1 	bl	800324c <xTaskResumeAll>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f af62 	bne.w	8002576 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80026b2:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <xQueueGenericSend+0x250>)
 80026b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	e758      	b.n	8002576 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026c6:	f000 fa83 	bl	8002bd0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026ca:	f000 fdbf 	bl	800324c <xTaskResumeAll>
 80026ce:	e752      	b.n	8002576 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026d2:	f000 fa7d 	bl	8002bd0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026d6:	f000 fdb9 	bl	800324c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fd6f 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	460b      	mov	r3, r1
 80026ec:	4601      	mov	r1, r0
 80026ee:	205a      	movs	r0, #90	@ 0x5a
 80026f0:	f004 f84e 	bl	8006790 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026f4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3738      	adds	r7, #56	@ 0x38
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b090      	sub	sp, #64	@ 0x40
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8002716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <xQueueGenericSendFromISR+0x3e>
 800273a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <xQueueGenericSendFromISR+0x42>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <xQueueGenericSendFromISR+0x44>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d103      	bne.n	8002772 <xQueueGenericSendFromISR+0x6e>
 800276a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800276c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <xQueueGenericSendFromISR+0x72>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <xQueueGenericSendFromISR+0x74>
 8002776:	2300      	movs	r3, #0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	623b      	str	r3, [r7, #32]
    }
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002794:	f002 f81a 	bl	80047cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002798:	f3ef 8211 	mrs	r2, BASEPRI
 800279c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	61fa      	str	r2, [r7, #28]
 80027ae:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027b0:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027b2:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <xQueueGenericSendFromISR+0xc2>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d149      	bne.n	800285a <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fcf1 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 80027de:	4601      	mov	r1, r0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	2060      	movs	r0, #96	@ 0x60
 80027e6:	f003 ff03 	bl	80065f0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80027f0:	f000 f95e 	bl	8002ab0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d112      	bne.n	8002824 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d026      	beq.n	8002854 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002808:	3324      	adds	r3, #36	@ 0x24
 800280a:	4618      	mov	r0, r3
 800280c:	f000 ff60 	bl	80036d0 <xTaskRemoveFromEventList>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d01e      	beq.n	8002854 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e017      	b.n	8002854 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002824:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002828:	2b7f      	cmp	r3, #127	@ 0x7f
 800282a:	d10b      	bne.n	8002844 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	617b      	str	r3, [r7, #20]
    }
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002848:	3301      	adds	r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	b25a      	sxtb	r2, r3
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002854:	2301      	movs	r3, #1
 8002856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8002858:	e00b      	b.n	8002872 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	4618      	mov	r0, r3
 800285e:	f004 fcaf 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 8002862:	4601      	mov	r1, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	2060      	movs	r0, #96	@ 0x60
 800286a:	f003 fec1 	bl	80065f0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800286e:	2300      	movs	r3, #0
 8002870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002874:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800287c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800287e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002880:	4618      	mov	r0, r3
 8002882:	3740      	adds	r7, #64	@ 0x40
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08f      	sub	sp, #60	@ 0x3c
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10b      	bne.n	80028ba <xQueueReceive+0x32>
        __asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	623b      	str	r3, [r7, #32]
    }
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	e7fd      	b.n	80028b6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <xQueueReceive+0x40>
 80028c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <xQueueReceive+0x44>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <xQueueReceive+0x46>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <xQueueReceive+0x62>
        __asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	61fb      	str	r3, [r7, #28]
    }
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	e7fd      	b.n	80028e6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ea:	f001 f895 	bl	8003a18 <xTaskGetSchedulerState>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <xQueueReceive+0x72>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <xQueueReceive+0x76>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <xQueueReceive+0x78>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <xQueueReceive+0x94>
        __asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	61bb      	str	r3, [r7, #24]
    }
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800291c:	f001 fe66 	bl	80045ec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02f      	beq.n	800298c <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002930:	f000 f928 	bl	8002b84 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fc42 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 800293c:	4604      	mov	r4, r0
 800293e:	2000      	movs	r0, #0
 8002940:	f004 fc3e 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 8002944:	4602      	mov	r2, r0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2101      	movs	r1, #1
 800294a:	9100      	str	r1, [sp, #0]
 800294c:	4621      	mov	r1, r4
 800294e:	205c      	movs	r0, #92	@ 0x5c
 8002950:	f003 ff1e 	bl	8006790 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00f      	beq.n	8002984 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	3310      	adds	r3, #16
 8002968:	4618      	mov	r0, r3
 800296a:	f000 feb1 	bl	80036d0 <xTaskRemoveFromEventList>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002974:	4b4d      	ldr	r3, [pc, #308]	@ (8002aac <xQueueReceive+0x224>)
 8002976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002984:	f001 fe64 	bl	8004650 <vPortExitCritical>
                return pdPASS;
 8002988:	2301      	movs	r3, #1
 800298a:	e08a      	b.n	8002aa2 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d113      	bne.n	80029ba <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002992:	f001 fe5d 	bl	8004650 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fc11 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 800299e:	4604      	mov	r4, r0
 80029a0:	2000      	movs	r0, #0
 80029a2:	f004 fc0d 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 80029a6:	4602      	mov	r2, r0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2101      	movs	r1, #1
 80029ac:	9100      	str	r1, [sp, #0]
 80029ae:	4621      	mov	r1, r4
 80029b0:	205c      	movs	r0, #92	@ 0x5c
 80029b2:	f003 feed 	bl	8006790 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e073      	b.n	8002aa2 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 feeb 	bl	80037a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029ce:	f001 fe3f 	bl	8004650 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029d2:	f000 fc2d 	bl	8003230 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029d6:	f001 fe09 	bl	80045ec <vPortEnterCritical>
 80029da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d103      	bne.n	80029f0 <xQueueReceive+0x168>
 80029e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029f6:	b25b      	sxtb	r3, r3
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d103      	bne.n	8002a06 <xQueueReceive+0x17e>
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a06:	f001 fe23 	bl	8004650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a0a:	1d3a      	adds	r2, r7, #4
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 feda 	bl	80037cc <xTaskCheckForTimeOut>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d124      	bne.n	8002a68 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a20:	f000 f928 	bl	8002c74 <prvIsQueueEmpty>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2c:	3324      	adds	r3, #36	@ 0x24
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fdf6 	bl	8003624 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a3a:	f000 f8c9 	bl	8002bd0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a3e:	f000 fc05 	bl	800324c <xTaskResumeAll>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f47f af69 	bne.w	800291c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002a4a:	4b18      	ldr	r3, [pc, #96]	@ (8002aac <xQueueReceive+0x224>)
 8002a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	e75f      	b.n	800291c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a5e:	f000 f8b7 	bl	8002bd0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a62:	f000 fbf3 	bl	800324c <xTaskResumeAll>
 8002a66:	e759      	b.n	800291c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a6a:	f000 f8b1 	bl	8002bd0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a6e:	f000 fbed 	bl	800324c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a74:	f000 f8fe 	bl	8002c74 <prvIsQueueEmpty>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f43f af4e 	beq.w	800291c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 fb9c 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 8002a88:	4604      	mov	r4, r0
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f004 fb98 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2101      	movs	r1, #1
 8002a96:	9100      	str	r1, [sp, #0]
 8002a98:	4621      	mov	r1, r4
 8002a9a:	205c      	movs	r0, #92	@ 0x5c
 8002a9c:	f003 fe78 	bl	8006790 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002aa0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3734      	adds	r7, #52	@ 0x34
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d14d      	bne.n	8002b72 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 ffba 	bl	8003a54 <xTaskPriorityDisinherit>
 8002ae0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	e043      	b.n	8002b72 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d119      	bne.n	8002b24 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6858      	ldr	r0, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	461a      	mov	r2, r3
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	f004 fd26 	bl	800754c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	441a      	add	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d32b      	bcc.n	8002b72 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	e026      	b.n	8002b72 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68d8      	ldr	r0, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	f004 fd0c 	bl	800754c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	425b      	negs	r3, r3
 8002b3e:	441a      	add	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d207      	bcs.n	8002b60 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	425b      	negs	r3, r3
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d105      	bne.n	8002b72 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002b7a:	697b      	ldr	r3, [r7, #20]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	441a      	add	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d303      	bcc.n	8002bb8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	6838      	ldr	r0, [r7, #0]
 8002bc4:	f004 fcc2 	bl	800754c <memcpy>
    }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002bd8:	f001 fd08 	bl	80045ec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002be2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002be4:	e011      	b.n	8002c0a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d012      	beq.n	8002c14 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3324      	adds	r3, #36	@ 0x24
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fd6c 	bl	80036d0 <xTaskRemoveFromEventList>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002bfe:	f000 fe4d 	bl	800389c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	dce9      	bgt.n	8002be6 <prvUnlockQueue+0x16>
 8002c12:	e000      	b.n	8002c16 <prvUnlockQueue+0x46>
                        break;
 8002c14:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	22ff      	movs	r2, #255	@ 0xff
 8002c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002c1e:	f001 fd17 	bl	8004650 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c22:	f001 fce3 	bl	80045ec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c2c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c2e:	e011      	b.n	8002c54 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3310      	adds	r3, #16
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fd47 	bl	80036d0 <xTaskRemoveFromEventList>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c48:	f000 fe28 	bl	800389c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c4c:	7bbb      	ldrb	r3, [r7, #14]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dce9      	bgt.n	8002c30 <prvUnlockQueue+0x60>
 8002c5c:	e000      	b.n	8002c60 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c5e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	22ff      	movs	r2, #255	@ 0xff
 8002c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002c68:	f001 fcf2 	bl	8004650 <vPortExitCritical>
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c7c:	f001 fcb6 	bl	80045ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e001      	b.n	8002c92 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c92:	f001 fcdd 	bl	8004650 <vPortExitCritical>

    return xReturn;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ca8:	f001 fca0 	bl	80045ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d102      	bne.n	8002cbe <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e001      	b.n	8002cc2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cc2:	f001 fcc5 	bl	8004650 <vPortExitCritical>

    return xReturn;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	e01e      	b.n	8002d1e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ce0:	4a13      	ldr	r2, [pc, #76]	@ (8002d30 <vQueueAddToRegistry+0x60>)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d115      	bne.n	8002d18 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cec:	4910      	ldr	r1, [pc, #64]	@ (8002d30 <vQueueAddToRegistry+0x60>)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8002d30 <vQueueAddToRegistry+0x60>)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fa5b 	bl	80071c0 <SEGGER_SYSVIEW_ShrinkId>
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2071      	movs	r0, #113	@ 0x71
 8002d12:	f003 fc6d 	bl	80065f0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002d16:	e006      	b.n	8002d26 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b07      	cmp	r3, #7
 8002d22:	d9dd      	bls.n	8002ce0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000084 	.word	0x20000084

08002d34 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d44:	f001 fc52 	bl	80045ec <vPortEnterCritical>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d4e:	b25b      	sxtb	r3, r3
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d103      	bne.n	8002d5e <vQueueWaitForMessageRestricted+0x2a>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d103      	bne.n	8002d74 <vQueueWaitForMessageRestricted+0x40>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d74:	f001 fc6c 	bl	8004650 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3324      	adds	r3, #36	@ 0x24
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fc71 	bl	8003670 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff1e 	bl	8002bd0 <prvUnlockQueue>
    }
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08c      	sub	sp, #48	@ 0x30
 8002da0:	af04      	add	r7, sp, #16
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 fd4d 	bl	8004850 <pvPortMalloc>
 8002db6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dbe:	2058      	movs	r0, #88	@ 0x58
 8002dc0:	f001 fd46 	bl	8004850 <pvPortMalloc>
 8002dc4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dd2:	e005      	b.n	8002de0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002dd4:	6978      	ldr	r0, [r7, #20]
 8002dd6:	f001 fe1d 	bl	8004a14 <vPortFree>
 8002dda:	e001      	b.n	8002de0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d013      	beq.n	8002e0e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	2300      	movs	r3, #0
 8002dea:	9303      	str	r3, [sp, #12]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	9302      	str	r3, [sp, #8]
 8002df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f80e 	bl	8002e1e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e02:	69f8      	ldr	r0, [r7, #28]
 8002e04:	f000 f8a2 	bl	8002f4c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e002      	b.n	8002e14 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e12:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e14:	69bb      	ldr	r3, [r7, #24]
    }
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b088      	sub	sp, #32
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	461a      	mov	r2, r3
 8002e36:	21a5      	movs	r1, #165	@ 0xa5
 8002e38:	f004 fb5c 	bl	80074f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e46:	3b01      	subs	r3, #1
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f023 0307 	bic.w	r3, r3, #7
 8002e54:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	617b      	str	r3, [r7, #20]
    }
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01f      	beq.n	8002ebe <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e012      	b.n	8002eaa <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	7819      	ldrb	r1, [r3, #0]
 8002e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	3334      	adds	r3, #52	@ 0x34
 8002e94:	460a      	mov	r2, r1
 8002e96:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	d9e9      	bls.n	8002e84 <prvInitialiseNewTask+0x66>
 8002eb0:	e000      	b.n	8002eb4 <prvInitialiseNewTask+0x96>
            {
                break;
 8002eb2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002ebc:	e003      	b.n	8002ec6 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d901      	bls.n	8002ed0 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ecc:	2304      	movs	r3, #4
 8002ece:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eda:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	2200      	movs	r2, #0
 8002ee0:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f958 	bl	800219c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eee:	3318      	adds	r3, #24
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f953 	bl	800219c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002efa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	f1c3 0205 	rsb	r2, r3, #5
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	3350      	adds	r3, #80	@ 0x50
 8002f10:	2204      	movs	r2, #4
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 faed 	bl	80074f4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	3354      	adds	r3, #84	@ 0x54
 8002f1e:	2201      	movs	r2, #1
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 fae6 	bl	80074f4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	69b8      	ldr	r0, [r7, #24]
 8002f2e:	f001 f9a9 	bl	8004284 <pxPortInitialiseStack>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f36:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f42:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f44:	bf00      	nop
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f54:	f001 fb4a 	bl	80045ec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f58:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <prvAddNewTaskToReadyList+0xfc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8003048 <prvAddNewTaskToReadyList+0xfc>)
 8002f60:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f62:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <prvAddNewTaskToReadyList+0x100>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f6a:	4a38      	ldr	r2, [pc, #224]	@ (800304c <prvAddNewTaskToReadyList+0x100>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f70:	4b35      	ldr	r3, [pc, #212]	@ (8003048 <prvAddNewTaskToReadyList+0xfc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d110      	bne.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f78:	f000 fcb4 	bl	80038e4 <prvInitialiseTaskLists>
 8002f7c:	e00d      	b.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f7e:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <prvAddNewTaskToReadyList+0x104>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f86:	4b31      	ldr	r3, [pc, #196]	@ (800304c <prvAddNewTaskToReadyList+0x100>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d802      	bhi.n	8002f9a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f94:	4a2d      	ldr	r2, [pc, #180]	@ (800304c <prvAddNewTaskToReadyList+0x100>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003054 <prvAddNewTaskToReadyList+0x108>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8003054 <prvAddNewTaskToReadyList+0x108>)
 8002fa2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8003054 <prvAddNewTaskToReadyList+0x108>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <prvAddNewTaskToReadyList+0x94>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 ffdd 	bl	8006f74 <SEGGER_SYSVIEW_OnTaskCreate>
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	461d      	mov	r5, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	1ae3      	subs	r3, r4, r3
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	462b      	mov	r3, r5
 8002fdc:	f001 feea 	bl	8004db4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f004 f84a 	bl	800707c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	2201      	movs	r2, #1
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <prvAddNewTaskToReadyList+0x10c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	4a18      	ldr	r2, [pc, #96]	@ (8003058 <prvAddNewTaskToReadyList+0x10c>)
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4a15      	ldr	r2, [pc, #84]	@ (800305c <prvAddNewTaskToReadyList+0x110>)
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	4619      	mov	r1, r3
 8003010:	4610      	mov	r0, r2
 8003012:	f7ff f8d0 	bl	80021b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003016:	f001 fb1b 	bl	8004650 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <prvAddNewTaskToReadyList+0x104>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00e      	beq.n	8003040 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003022:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <prvAddNewTaskToReadyList+0x100>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	429a      	cmp	r2, r3
 800302e:	d207      	bcs.n	8003040 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <prvAddNewTaskToReadyList+0x114>)
 8003032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bdb0      	pop	{r4, r5, r7, pc}
 8003048:	2000019c 	.word	0x2000019c
 800304c:	200000c4 	.word	0x200000c4
 8003050:	200001a8 	.word	0x200001a8
 8003054:	200001b8 	.word	0x200001b8
 8003058:	200001a4 	.word	0x200001a4
 800305c:	200000c8 	.word	0x200000c8
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	@ 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xTaskDelayUntil+0x2c>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	617b      	str	r3, [r7, #20]
    }
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <xTaskDelayUntil+0x4a>
        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	613b      	str	r3, [r7, #16]
    }
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	e7fd      	b.n	80030aa <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 80030ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003160 <xTaskDelayUntil+0xfc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <xTaskDelayUntil+0x6a>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	60fb      	str	r3, [r7, #12]
    }
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	e7fd      	b.n	80030ca <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 80030ce:	f000 f8af 	bl	8003230 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80030d2:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <xTaskDelayUntil+0x100>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d20b      	bcs.n	8003104 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d211      	bcs.n	800311a <xTaskDelayUntil+0xb6>
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d90d      	bls.n	800311a <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 80030fe:	2301      	movs	r3, #1
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
 8003102:	e00a      	b.n	800311a <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	429a      	cmp	r2, r3
 800310c:	d303      	bcc.n	8003116 <xTaskDelayUntil+0xb2>
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	429a      	cmp	r2, r3
 8003114:	d901      	bls.n	800311a <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8003116:	2301      	movs	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <xTaskDelayUntil+0xd6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003126:	2024      	movs	r0, #36	@ 0x24
 8003128:	f003 fa08 	bl	800653c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fd0f 	bl	8003b58 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800313a:	f000 f887 	bl	800324c <xTaskResumeAll>
 800313e:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <xTaskDelayUntil+0xf2>
        {
            portYIELD_WITHIN_API();
 8003146:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <xTaskDelayUntil+0x104>)
 8003148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003158:	4618      	mov	r0, r3
 800315a:	3728      	adds	r7, #40	@ 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	200001c4 	.word	0x200001c4
 8003164:	200001a0 	.word	0x200001a0
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003172:	4b27      	ldr	r3, [pc, #156]	@ (8003210 <vTaskStartScheduler+0xa4>)
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2300      	movs	r3, #0
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2300      	movs	r3, #0
 800317c:	2282      	movs	r2, #130	@ 0x82
 800317e:	4925      	ldr	r1, [pc, #148]	@ (8003214 <vTaskStartScheduler+0xa8>)
 8003180:	4825      	ldr	r0, [pc, #148]	@ (8003218 <vTaskStartScheduler+0xac>)
 8003182:	f7ff fe0b 	bl	8002d9c <xTaskCreate>
 8003186:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d102      	bne.n	8003194 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800318e:	f000 fd5b 	bl	8003c48 <xTimerCreateTimerTask>
 8003192:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d124      	bne.n	80031e4 <vTaskStartScheduler+0x78>
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	60bb      	str	r3, [r7, #8]
    }
 80031ac:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80031ae:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <vTaskStartScheduler+0xb0>)
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <vTaskStartScheduler+0xb4>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031bc:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <vTaskStartScheduler+0xb8>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031c2:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <vTaskStartScheduler+0xbc>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <vTaskStartScheduler+0xa4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d102      	bne.n	80031d4 <vTaskStartScheduler+0x68>
 80031ce:	f003 feb5 	bl	8006f3c <SEGGER_SYSVIEW_OnIdle>
 80031d2:	e004      	b.n	80031de <vTaskStartScheduler+0x72>
 80031d4:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <vTaskStartScheduler+0xbc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 ff0d 	bl	8006ff8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80031de:	f001 f8e1 	bl	80043a4 <xPortStartScheduler>
 80031e2:	e00f      	b.n	8003204 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d10b      	bne.n	8003204 <vTaskStartScheduler+0x98>
        __asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	607b      	str	r3, [r7, #4]
    }
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003204:	4b09      	ldr	r3, [pc, #36]	@ (800322c <vTaskStartScheduler+0xc0>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200001c0 	.word	0x200001c0
 8003214:	080075ec 	.word	0x080075ec
 8003218:	080038b5 	.word	0x080038b5
 800321c:	200001bc 	.word	0x200001bc
 8003220:	200001a8 	.word	0x200001a8
 8003224:	200001a0 	.word	0x200001a0
 8003228:	200000c4 	.word	0x200000c4
 800322c:	2000000c 	.word	0x2000000c

08003230 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003234:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <vTaskSuspendAll+0x18>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	4a03      	ldr	r2, [pc, #12]	@ (8003248 <vTaskSuspendAll+0x18>)
 800323c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	200001c4 	.word	0x200001c4

0800324c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800325a:	4b44      	ldr	r3, [pc, #272]	@ (800336c <xTaskResumeAll+0x120>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <xTaskResumeAll+0x2e>
        __asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	603b      	str	r3, [r7, #0]
    }
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	e7fd      	b.n	8003276 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800327a:	f001 f9b7 	bl	80045ec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800327e:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <xTaskResumeAll+0x120>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3b01      	subs	r3, #1
 8003284:	4a39      	ldr	r2, [pc, #228]	@ (800336c <xTaskResumeAll+0x120>)
 8003286:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003288:	4b38      	ldr	r3, [pc, #224]	@ (800336c <xTaskResumeAll+0x120>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d165      	bne.n	800335c <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003290:	4b37      	ldr	r3, [pc, #220]	@ (8003370 <xTaskResumeAll+0x124>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d061      	beq.n	800335c <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003298:	e032      	b.n	8003300 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800329a:	4b36      	ldr	r3, [pc, #216]	@ (8003374 <xTaskResumeAll+0x128>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3318      	adds	r3, #24
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe ffe2 	bl	8002270 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe ffdd 	bl	8002270 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 fedf 	bl	800707c <SEGGER_SYSVIEW_OnTaskStartReady>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	2201      	movs	r2, #1
 80032c4:	409a      	lsls	r2, r3
 80032c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003378 <xTaskResumeAll+0x12c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003378 <xTaskResumeAll+0x12c>)
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4a27      	ldr	r2, [pc, #156]	@ (800337c <xTaskResumeAll+0x130>)
 80032de:	441a      	add	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f7fe ff65 	bl	80021b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f0:	4b23      	ldr	r3, [pc, #140]	@ (8003380 <xTaskResumeAll+0x134>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 80032fa:	4b22      	ldr	r3, [pc, #136]	@ (8003384 <xTaskResumeAll+0x138>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003300:	4b1c      	ldr	r3, [pc, #112]	@ (8003374 <xTaskResumeAll+0x128>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1c8      	bne.n	800329a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800330e:	f000 fb67 	bl	80039e0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003312:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <xTaskResumeAll+0x13c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d010      	beq.n	8003340 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800331e:	f000 f859 	bl	80033d4 <xTaskIncrementTick>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003328:	4b16      	ldr	r3, [pc, #88]	@ (8003384 <xTaskResumeAll+0x138>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3b01      	subs	r3, #1
 8003332:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f1      	bne.n	800331e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800333a:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <xTaskResumeAll+0x13c>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003340:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <xTaskResumeAll+0x138>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003348:	2301      	movs	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <xTaskResumeAll+0x140>)
 800334e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800335c:	f001 f978 	bl	8004650 <vPortExitCritical>

    return xAlreadyYielded;
 8003360:	68bb      	ldr	r3, [r7, #8]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200001c4 	.word	0x200001c4
 8003370:	2000019c 	.word	0x2000019c
 8003374:	2000015c 	.word	0x2000015c
 8003378:	200001a4 	.word	0x200001a4
 800337c:	200000c8 	.word	0x200000c8
 8003380:	200000c4 	.word	0x200000c4
 8003384:	200001b0 	.word	0x200001b0
 8003388:	200001ac 	.word	0x200001ac
 800338c:	e000ed04 	.word	0xe000ed04

08003390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003396:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <xTaskGetTickCount+0x1c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800339c:	687b      	ldr	r3, [r7, #4]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	200001a0 	.word	0x200001a0

080033b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033b6:	f001 fa09 	bl	80047cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033be:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <xTaskGetTickCountFromISR+0x20>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033c4:	683b      	ldr	r3, [r7, #0]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200001a0 	.word	0x200001a0

080033d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033de:	4b51      	ldr	r3, [pc, #324]	@ (8003524 <xTaskIncrementTick+0x150>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 8093 	bne.w	800350e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003528 <xTaskIncrementTick+0x154>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80033f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003528 <xTaskIncrementTick+0x154>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d121      	bne.n	8003440 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80033fc:	4b4b      	ldr	r3, [pc, #300]	@ (800352c <xTaskIncrementTick+0x158>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <xTaskIncrementTick+0x4a>
        __asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	603b      	str	r3, [r7, #0]
    }
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	e7fd      	b.n	800341a <xTaskIncrementTick+0x46>
 800341e:	4b43      	ldr	r3, [pc, #268]	@ (800352c <xTaskIncrementTick+0x158>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	4b42      	ldr	r3, [pc, #264]	@ (8003530 <xTaskIncrementTick+0x15c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a40      	ldr	r2, [pc, #256]	@ (800352c <xTaskIncrementTick+0x158>)
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4a40      	ldr	r2, [pc, #256]	@ (8003530 <xTaskIncrementTick+0x15c>)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <xTaskIncrementTick+0x160>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3301      	adds	r3, #1
 8003438:	4a3e      	ldr	r2, [pc, #248]	@ (8003534 <xTaskIncrementTick+0x160>)
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	f000 fad0 	bl	80039e0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003440:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <xTaskIncrementTick+0x164>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	429a      	cmp	r2, r3
 8003448:	d34c      	bcc.n	80034e4 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800344a:	4b38      	ldr	r3, [pc, #224]	@ (800352c <xTaskIncrementTick+0x158>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003454:	4b38      	ldr	r3, [pc, #224]	@ (8003538 <xTaskIncrementTick+0x164>)
 8003456:	f04f 32ff 	mov.w	r2, #4294967295
 800345a:	601a      	str	r2, [r3, #0]
                    break;
 800345c:	e042      	b.n	80034e4 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345e:	4b33      	ldr	r3, [pc, #204]	@ (800352c <xTaskIncrementTick+0x158>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d203      	bcs.n	800347e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003476:	4a30      	ldr	r2, [pc, #192]	@ (8003538 <xTaskIncrementTick+0x164>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800347c:	e032      	b.n	80034e4 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3304      	adds	r3, #4
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fef4 	bl	8002270 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	3318      	adds	r3, #24
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe feeb 	bl	8002270 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f003 fded 	bl	800707c <SEGGER_SYSVIEW_OnTaskStartReady>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a6:	2201      	movs	r2, #1
 80034a8:	409a      	lsls	r2, r3
 80034aa:	4b24      	ldr	r3, [pc, #144]	@ (800353c <xTaskIncrementTick+0x168>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	4a22      	ldr	r2, [pc, #136]	@ (800353c <xTaskIncrementTick+0x168>)
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <xTaskIncrementTick+0x16c>)
 80034c2:	441a      	add	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f7fe fe73 	bl	80021b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <xTaskIncrementTick+0x170>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3b5      	bcc.n	800344a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e2:	e7b2      	b.n	800344a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034e4:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <xTaskIncrementTick+0x170>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ea:	4915      	ldr	r1, [pc, #84]	@ (8003540 <xTaskIncrementTick+0x16c>)
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d901      	bls.n	8003500 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <xTaskIncrementTick+0x174>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e004      	b.n	8003518 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800350e:	4b0f      	ldr	r3, [pc, #60]	@ (800354c <xTaskIncrementTick+0x178>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a0d      	ldr	r2, [pc, #52]	@ (800354c <xTaskIncrementTick+0x178>)
 8003516:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003518:	697b      	ldr	r3, [r7, #20]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200001c4 	.word	0x200001c4
 8003528:	200001a0 	.word	0x200001a0
 800352c:	20000154 	.word	0x20000154
 8003530:	20000158 	.word	0x20000158
 8003534:	200001b4 	.word	0x200001b4
 8003538:	200001bc 	.word	0x200001bc
 800353c:	200001a4 	.word	0x200001a4
 8003540:	200000c8 	.word	0x200000c8
 8003544:	200000c4 	.word	0x200000c4
 8003548:	200001b0 	.word	0x200001b0
 800354c:	200001ac 	.word	0x200001ac

08003550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003556:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <vTaskSwitchContext+0xbc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800355e:	4b2c      	ldr	r3, [pc, #176]	@ (8003610 <vTaskSwitchContext+0xc0>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003564:	e04e      	b.n	8003604 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003566:	4b2a      	ldr	r3, [pc, #168]	@ (8003610 <vTaskSwitchContext+0xc0>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356c:	4b29      	ldr	r3, [pc, #164]	@ (8003614 <vTaskSwitchContext+0xc4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	f1c3 031f 	rsb	r3, r3, #31
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	4925      	ldr	r1, [pc, #148]	@ (8003618 <vTaskSwitchContext+0xc8>)
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <vTaskSwitchContext+0x5e>
        __asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	607b      	str	r3, [r7, #4]
    }
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <vTaskSwitchContext+0x5a>
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <vTaskSwitchContext+0xc8>)
 80035ba:	4413      	add	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3308      	adds	r3, #8
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d104      	bne.n	80035de <vTaskSwitchContext+0x8e>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <vTaskSwitchContext+0xcc>)
 80035e6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <vTaskSwitchContext+0xcc>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <vTaskSwitchContext+0xd0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d102      	bne.n	80035fa <vTaskSwitchContext+0xaa>
 80035f4:	f003 fca2 	bl	8006f3c <SEGGER_SYSVIEW_OnIdle>
}
 80035f8:	e004      	b.n	8003604 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80035fa:	4b08      	ldr	r3, [pc, #32]	@ (800361c <vTaskSwitchContext+0xcc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f003 fcfa 	bl	8006ff8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003604:	bf00      	nop
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200001c4 	.word	0x200001c4
 8003610:	200001b0 	.word	0x200001b0
 8003614:	200001a4 	.word	0x200001a4
 8003618:	200000c8 	.word	0x200000c8
 800361c:	200000c4 	.word	0x200000c4
 8003620:	200001c0 	.word	0x200001c0

08003624 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	60fb      	str	r3, [r7, #12]
    }
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800364c:	4b07      	ldr	r3, [pc, #28]	@ (800366c <vTaskPlaceOnEventList+0x48>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3318      	adds	r3, #24
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fe fdd2 	bl	80021fe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800365a:	2101      	movs	r1, #1
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	f000 fa7b 	bl	8003b58 <prvAddCurrentTaskToDelayedList>
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200000c4 	.word	0x200000c4

08003670 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	617b      	str	r3, [r7, #20]
    }
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	e7fd      	b.n	8003696 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800369a:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <vTaskPlaceOnEventListRestricted+0x5c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3318      	adds	r3, #24
 80036a0:	4619      	mov	r1, r3
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7fe fd87 	bl	80021b6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295
 80036b2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80036b4:	2024      	movs	r0, #36	@ 0x24
 80036b6:	f002 ff41 	bl	800653c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68b8      	ldr	r0, [r7, #8]
 80036be:	f000 fa4b 	bl	8003b58 <prvAddCurrentTaskToDelayedList>
    }
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200000c4 	.word	0x200000c4

080036d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	60fb      	str	r3, [r7, #12]
    }
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	e7fd      	b.n	80036fa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	3318      	adds	r3, #24
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fdb4 	bl	8002270 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003708:	4b1f      	ldr	r3, [pc, #124]	@ (8003788 <xTaskRemoveFromEventList+0xb8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d120      	bne.n	8003752 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3304      	adds	r3, #4
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe fdab 	bl	8002270 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4618      	mov	r0, r3
 800371e:	f003 fcad 	bl	800707c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	2201      	movs	r2, #1
 8003728:	409a      	lsls	r2, r3
 800372a:	4b18      	ldr	r3, [pc, #96]	@ (800378c <xTaskRemoveFromEventList+0xbc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	4a16      	ldr	r2, [pc, #88]	@ (800378c <xTaskRemoveFromEventList+0xbc>)
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4a13      	ldr	r2, [pc, #76]	@ (8003790 <xTaskRemoveFromEventList+0xc0>)
 8003742:	441a      	add	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	3304      	adds	r3, #4
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f7fe fd33 	bl	80021b6 <vListInsertEnd>
 8003750:	e005      	b.n	800375e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3318      	adds	r3, #24
 8003756:	4619      	mov	r1, r3
 8003758:	480e      	ldr	r0, [pc, #56]	@ (8003794 <xTaskRemoveFromEventList+0xc4>)
 800375a:	f7fe fd2c 	bl	80021b6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <xTaskRemoveFromEventList+0xc8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	429a      	cmp	r2, r3
 800376a:	d905      	bls.n	8003778 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800376c:	2301      	movs	r3, #1
 800376e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003770:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <xTaskRemoveFromEventList+0xcc>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e001      	b.n	800377c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800377c:	697b      	ldr	r3, [r7, #20]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200001c4 	.word	0x200001c4
 800378c:	200001a4 	.word	0x200001a4
 8003790:	200000c8 	.word	0x200000c8
 8003794:	2000015c 	.word	0x2000015c
 8003798:	200000c4 	.word	0x200000c4
 800379c:	200001b0 	.word	0x200001b0

080037a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <vTaskInternalSetTimeOutState+0x24>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037b0:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <vTaskInternalSetTimeOutState+0x28>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	200001b4 	.word	0x200001b4
 80037c8:	200001a0 	.word	0x200001a0

080037cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	613b      	str	r3, [r7, #16]
    }
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60fb      	str	r3, [r7, #12]
    }
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	e7fd      	b.n	800380e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003812:	f000 feeb 	bl	80045ec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003816:	4b1f      	ldr	r3, [pc, #124]	@ (8003894 <xTaskCheckForTimeOut+0xc8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d102      	bne.n	8003836 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003830:	2300      	movs	r3, #0
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	e026      	b.n	8003884 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <xTaskCheckForTimeOut+0xcc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d00a      	beq.n	8003858 <xTaskCheckForTimeOut+0x8c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	429a      	cmp	r2, r3
 800384a:	d305      	bcc.n	8003858 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e015      	b.n	8003884 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	429a      	cmp	r2, r3
 8003860:	d20b      	bcs.n	800387a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	1ad2      	subs	r2, r2, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ff96 	bl	80037a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e004      	b.n	8003884 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003884:	f000 fee4 	bl	8004650 <vPortExitCritical>

    return xReturn;
 8003888:	69fb      	ldr	r3, [r7, #28]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200001a0 	.word	0x200001a0
 8003898:	200001b4 	.word	0x200001b4

0800389c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <vTaskMissedYield+0x14>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	200001b0 	.word	0x200001b0

080038b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038bc:	f000 f852 	bl	8003964 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <prvIdleTask+0x28>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d9f9      	bls.n	80038bc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <prvIdleTask+0x2c>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038d8:	e7f0      	b.n	80038bc <prvIdleTask+0x8>
 80038da:	bf00      	nop
 80038dc:	200000c8 	.word	0x200000c8
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	e00c      	b.n	800390a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4a12      	ldr	r2, [pc, #72]	@ (8003944 <prvInitialiseTaskLists+0x60>)
 80038fc:	4413      	add	r3, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fc2c 	bl	800215c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3301      	adds	r3, #1
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d9ef      	bls.n	80038f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003910:	480d      	ldr	r0, [pc, #52]	@ (8003948 <prvInitialiseTaskLists+0x64>)
 8003912:	f7fe fc23 	bl	800215c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003916:	480d      	ldr	r0, [pc, #52]	@ (800394c <prvInitialiseTaskLists+0x68>)
 8003918:	f7fe fc20 	bl	800215c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800391c:	480c      	ldr	r0, [pc, #48]	@ (8003950 <prvInitialiseTaskLists+0x6c>)
 800391e:	f7fe fc1d 	bl	800215c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003922:	480c      	ldr	r0, [pc, #48]	@ (8003954 <prvInitialiseTaskLists+0x70>)
 8003924:	f7fe fc1a 	bl	800215c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003928:	480b      	ldr	r0, [pc, #44]	@ (8003958 <prvInitialiseTaskLists+0x74>)
 800392a:	f7fe fc17 	bl	800215c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800392e:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <prvInitialiseTaskLists+0x78>)
 8003930:	4a05      	ldr	r2, [pc, #20]	@ (8003948 <prvInitialiseTaskLists+0x64>)
 8003932:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003934:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <prvInitialiseTaskLists+0x7c>)
 8003936:	4a05      	ldr	r2, [pc, #20]	@ (800394c <prvInitialiseTaskLists+0x68>)
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200000c8 	.word	0x200000c8
 8003948:	2000012c 	.word	0x2000012c
 800394c:	20000140 	.word	0x20000140
 8003950:	2000015c 	.word	0x2000015c
 8003954:	20000170 	.word	0x20000170
 8003958:	20000188 	.word	0x20000188
 800395c:	20000154 	.word	0x20000154
 8003960:	20000158 	.word	0x20000158

08003964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800396a:	e019      	b.n	80039a0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800396c:	f000 fe3e 	bl	80045ec <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003970:	4b10      	ldr	r3, [pc, #64]	@ (80039b4 <prvCheckTasksWaitingTermination+0x50>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fc77 	bl	8002270 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003982:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <prvCheckTasksWaitingTermination+0x54>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3b01      	subs	r3, #1
 8003988:	4a0b      	ldr	r2, [pc, #44]	@ (80039b8 <prvCheckTasksWaitingTermination+0x54>)
 800398a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <prvCheckTasksWaitingTermination+0x58>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3b01      	subs	r3, #1
 8003992:	4a0a      	ldr	r2, [pc, #40]	@ (80039bc <prvCheckTasksWaitingTermination+0x58>)
 8003994:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003996:	f000 fe5b 	bl	8004650 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f810 	bl	80039c0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <prvCheckTasksWaitingTermination+0x58>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e1      	bne.n	800396c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000170 	.word	0x20000170
 80039b8:	2000019c 	.word	0x2000019c
 80039bc:	20000184 	.word	0x20000184

080039c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 f821 	bl	8004a14 <vPortFree>
                vPortFree( pxTCB );
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f001 f81e 	bl	8004a14 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <prvResetNextTaskUnblockTime+0x30>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039ee:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <prvResetNextTaskUnblockTime+0x34>)
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039f6:	e005      	b.n	8003a04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <prvResetNextTaskUnblockTime+0x30>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <prvResetNextTaskUnblockTime+0x34>)
 8003a02:	6013      	str	r3, [r2, #0]
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000154 	.word	0x20000154
 8003a14:	200001bc 	.word	0x200001bc

08003a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <xTaskGetSchedulerState+0x34>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a26:	2301      	movs	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	e008      	b.n	8003a3e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2c:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <xTaskGetSchedulerState+0x38>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a34:	2302      	movs	r3, #2
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	e001      	b.n	8003a3e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a3e:	687b      	ldr	r3, [r7, #4]
    }
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	200001a8 	.word	0x200001a8
 8003a50:	200001c4 	.word	0x200001c4

08003a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d06a      	beq.n	8003b40 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a6a:	4b38      	ldr	r3, [pc, #224]	@ (8003b4c <xTaskPriorityDisinherit+0xf8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d00b      	beq.n	8003a8c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	60fb      	str	r3, [r7, #12]
    }
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	60bb      	str	r3, [r7, #8]
    }
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab0:	1e5a      	subs	r2, r3, #1
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d03e      	beq.n	8003b40 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d13a      	bne.n	8003b40 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fbce 	bl	8002270 <uxListRemove>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <xTaskPriorityDisinherit+0xfc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4013      	ands	r3, r2
 8003aec:	4a18      	ldr	r2, [pc, #96]	@ (8003b50 <xTaskPriorityDisinherit+0xfc>)
 8003aee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4619      	mov	r1, r3
 8003af4:	204a      	movs	r0, #74	@ 0x4a
 8003af6:	f002 fd3f 	bl	8006578 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	f1c3 0205 	rsb	r2, r3, #5
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b12:	2201      	movs	r2, #1
 8003b14:	409a      	lsls	r2, r3
 8003b16:	4b0e      	ldr	r3, [pc, #56]	@ (8003b50 <xTaskPriorityDisinherit+0xfc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b50 <xTaskPriorityDisinherit+0xfc>)
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a09      	ldr	r2, [pc, #36]	@ (8003b54 <xTaskPriorityDisinherit+0x100>)
 8003b2e:	441a      	add	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f7fe fb3d 	bl	80021b6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b40:	697b      	ldr	r3, [r7, #20]
    }
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200000c4 	.word	0x200000c4
 8003b50:	200001a4 	.word	0x200001a4
 8003b54:	200000c8 	.word	0x200000c8

08003b58 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b62:	4b32      	ldr	r3, [pc, #200]	@ (8003c2c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b68:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fb7e 	bl	8002270 <uxListRemove>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	2201      	movs	r2, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	4a29      	ldr	r2, [pc, #164]	@ (8003c34 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b90:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d110      	bne.n	8003bbc <prvAddCurrentTaskToDelayedList+0x64>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003ba0:	4b23      	ldr	r3, [pc, #140]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	211b      	movs	r1, #27
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 faaa 	bl	8007100 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bac:	4b20      	ldr	r3, [pc, #128]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4820      	ldr	r0, [pc, #128]	@ (8003c38 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003bb6:	f7fe fafe 	bl	80021b6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003bba:	e032      	b.n	8003c22 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d20f      	bcs.n	8003bf4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003bd4:	4b16      	ldr	r3, [pc, #88]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2104      	movs	r1, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f003 fa90 	bl	8007100 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be0:	4b16      	ldr	r3, [pc, #88]	@ (8003c3c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7fe fb06 	bl	80021fe <vListInsert>
}
 8003bf2:	e016      	b.n	8003c22 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f003 fa80 	bl	8007100 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c00:	4b0f      	ldr	r3, [pc, #60]	@ (8003c40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f7fe faf6 	bl	80021fe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c12:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d202      	bcs.n	8003c22 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c1c:	4a09      	ldr	r2, [pc, #36]	@ (8003c44 <prvAddCurrentTaskToDelayedList+0xec>)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6013      	str	r3, [r2, #0]
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200001a0 	.word	0x200001a0
 8003c30:	200000c4 	.word	0x200000c4
 8003c34:	200001a4 	.word	0x200001a4
 8003c38:	20000188 	.word	0x20000188
 8003c3c:	20000158 	.word	0x20000158
 8003c40:	20000154 	.word	0x20000154
 8003c44:	200001bc 	.word	0x200001bc

08003c48 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c52:	f000 fae1 	bl	8004218 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c56:	4b12      	ldr	r3, [pc, #72]	@ (8003ca0 <xTimerCreateTimerTask+0x58>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <xTimerCreateTimerTask+0x5c>)
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	2302      	movs	r3, #2
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c6c:	490e      	ldr	r1, [pc, #56]	@ (8003ca8 <xTimerCreateTimerTask+0x60>)
 8003c6e:	480f      	ldr	r0, [pc, #60]	@ (8003cac <xTimerCreateTimerTask+0x64>)
 8003c70:	f7ff f894 	bl	8002d9c <xTaskCreate>
 8003c74:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	603b      	str	r3, [r7, #0]
    }
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c94:	687b      	ldr	r3, [r7, #4]
    }
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200001f8 	.word	0x200001f8
 8003ca4:	200001fc 	.word	0x200001fc
 8003ca8:	080075f4 	.word	0x080075f4
 8003cac:	08003de9 	.word	0x08003de9

08003cb0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10b      	bne.n	8003ce0 <xTimerGenericCommand+0x30>
        __asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	623b      	str	r3, [r7, #32]
    }
 8003cda:	bf00      	nop
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003ce0:	4b19      	ldr	r3, [pc, #100]	@ (8003d48 <xTimerGenericCommand+0x98>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02a      	beq.n	8003d3e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	dc18      	bgt.n	8003d2c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cfa:	f7ff fe8d 	bl	8003a18 <xTaskGetSchedulerState>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d109      	bne.n	8003d18 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d04:	4b10      	ldr	r3, [pc, #64]	@ (8003d48 <xTimerGenericCommand+0x98>)
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	f107 0114 	add.w	r1, r7, #20
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d10:	f7fe fbce 	bl	80024b0 <xQueueGenericSend>
 8003d14:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d16:	e012      	b.n	8003d3e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d18:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <xTimerGenericCommand+0x98>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	f107 0114 	add.w	r1, r7, #20
 8003d20:	2300      	movs	r3, #0
 8003d22:	2200      	movs	r2, #0
 8003d24:	f7fe fbc4 	bl	80024b0 <xQueueGenericSend>
 8003d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d2a:	e008      	b.n	8003d3e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d2c:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <xTimerGenericCommand+0x98>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	f107 0114 	add.w	r1, r7, #20
 8003d34:	2300      	movs	r3, #0
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	f7fe fce4 	bl	8002704 <xQueueGenericSendFromISR>
 8003d3c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	@ 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	200001f8 	.word	0x200001f8

08003d4c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d56:	4b23      	ldr	r3, [pc, #140]	@ (8003de4 <prvProcessExpiredTimer+0x98>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fa83 	bl	8002270 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d023      	beq.n	8003dc0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	18d1      	adds	r1, r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	6978      	ldr	r0, [r7, #20]
 8003d86:	f000 f8d5 	bl	8003f34 <prvInsertTimerInActiveList>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d90:	2300      	movs	r3, #0
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2300      	movs	r3, #0
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff ff88 	bl	8003cb0 <xTimerGenericCommand>
 8003da0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d114      	bne.n	8003dd2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
    }
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	e7fd      	b.n	8003dbc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	4798      	blx	r3
    }
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200001f0 	.word	0x200001f0

08003de8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003df0:	f107 0308 	add.w	r3, r7, #8
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f859 	bl	8003eac <prvGetNextExpireTime>
 8003dfa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f805 	bl	8003e10 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e06:	f000 f8d7 	bl	8003fb8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e0a:	bf00      	nop
 8003e0c:	e7f0      	b.n	8003df0 <prvTimerTask+0x8>
	...

08003e10 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e1a:	f7ff fa09 	bl	8003230 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f866 	bl	8003ef4 <prvSampleTimeNow>
 8003e28:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d130      	bne.n	8003e92 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <prvProcessTimerOrBlockTask+0x3c>
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d806      	bhi.n	8003e4c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e3e:	f7ff fa05 	bl	800324c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff81 	bl	8003d4c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e4a:	e024      	b.n	8003e96 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e52:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <prvProcessTimerOrBlockTask+0x90>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <prvProcessTimerOrBlockTask+0x50>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <prvProcessTimerOrBlockTask+0x52>
 8003e60:	2300      	movs	r3, #0
 8003e62:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <prvProcessTimerOrBlockTask+0x94>)
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	4619      	mov	r1, r3
 8003e72:	f7fe ff5f 	bl	8002d34 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e76:	f7ff f9e9 	bl	800324c <xTaskResumeAll>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e80:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <prvProcessTimerOrBlockTask+0x98>)
 8003e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
    }
 8003e90:	e001      	b.n	8003e96 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e92:	f7ff f9db 	bl	800324c <xTaskResumeAll>
    }
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200001f4 	.word	0x200001f4
 8003ea4:	200001f8 	.word	0x200001f8
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <prvGetNextExpireTime+0x44>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <prvGetNextExpireTime+0x16>
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	e000      	b.n	8003ec4 <prvGetNextExpireTime+0x18>
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d105      	bne.n	8003edc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <prvGetNextExpireTime+0x44>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e001      	b.n	8003ee0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	200001f0 	.word	0x200001f0

08003ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003efc:	f7ff fa48 	bl	8003390 <xTaskGetTickCount>
 8003f00:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f02:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <prvSampleTimeNow+0x3c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d205      	bcs.n	8003f18 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f0c:	f000 f91e 	bl	800414c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e002      	b.n	8003f1e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f1e:	4a04      	ldr	r2, [pc, #16]	@ (8003f30 <prvSampleTimeNow+0x3c>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f24:	68fb      	ldr	r3, [r7, #12]
    }
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000200 	.word	0x20000200

08003f34 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d812      	bhi.n	8003f80 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	1ad2      	subs	r2, r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e01b      	b.n	8003fa6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f6e:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <prvInsertTimerInActiveList+0x7c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f7fe f940 	bl	80021fe <vListInsert>
 8003f7e:	e012      	b.n	8003fa6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d206      	bcs.n	8003f96 <prvInsertTimerInActiveList+0x62>
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e007      	b.n	8003fa6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f96:	4b07      	ldr	r3, [pc, #28]	@ (8003fb4 <prvInsertTimerInActiveList+0x80>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7fe f92c 	bl	80021fe <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003fa6:	697b      	ldr	r3, [r7, #20]
    }
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200001f4 	.word	0x200001f4
 8003fb4:	200001f0 	.word	0x200001f0

08003fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08c      	sub	sp, #48	@ 0x30
 8003fbc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fbe:	e0b2      	b.n	8004126 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f2c0 80af 	blt.w	8004126 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe f949 	bl	8002270 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff87 	bl	8003ef4 <prvSampleTimeNow>
 8003fe6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b09      	cmp	r3, #9
 8003fec:	f200 8098 	bhi.w	8004120 <prvProcessReceivedCommands+0x168>
 8003ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <prvProcessReceivedCommands+0x40>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004021 	.word	0x08004021
 8004000:	08004021 	.word	0x08004021
 8004004:	08004097 	.word	0x08004097
 8004008:	080040ab 	.word	0x080040ab
 800400c:	080040f7 	.word	0x080040f7
 8004010:	08004021 	.word	0x08004021
 8004014:	08004021 	.word	0x08004021
 8004018:	08004097 	.word	0x08004097
 800401c:	080040ab 	.word	0x080040ab
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	18d1      	adds	r1, r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004040:	f7ff ff78 	bl	8003f34 <prvInsertTimerInActiveList>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d06c      	beq.n	8004124 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004050:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d061      	beq.n	8004124 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	441a      	add	r2, r3
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	2100      	movs	r1, #0
 8004070:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004072:	f7ff fe1d 	bl	8003cb0 <xTimerGenericCommand>
 8004076:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d152      	bne.n	8004124 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	61bb      	str	r3, [r7, #24]
    }
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	e7fd      	b.n	8004092 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80040a8:	e03d      	b.n	8004126 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	617b      	str	r3, [r7, #20]
    }
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	e7fd      	b.n	80040de <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	18d1      	adds	r1, r2, r3
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040f0:	f7ff ff20 	bl	8003f34 <prvInsertTimerInActiveList>
                        break;
 80040f4:	e017      	b.n	8004126 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8004104:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004106:	f000 fc85 	bl	8004a14 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800410a:	e00c      	b.n	8004126 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	b2da      	uxtb	r2, r3
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800411e:	e002      	b.n	8004126 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <prvProcessReceivedCommands+0x16e>
                        break;
 8004124:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004126:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <prvProcessReceivedCommands+0x190>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f107 0108 	add.w	r1, r7, #8
 800412e:	2200      	movs	r2, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fba9 	bl	8002888 <xQueueReceive>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	f47f af41 	bne.w	8003fc0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	3728      	adds	r7, #40	@ 0x28
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200001f8 	.word	0x200001f8

0800414c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004152:	e049      	b.n	80041e8 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004154:	4b2e      	ldr	r3, [pc, #184]	@ (8004210 <prvSwitchTimerLists+0xc4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415e:	4b2c      	ldr	r3, [pc, #176]	@ (8004210 <prvSwitchTimerLists+0xc4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3304      	adds	r3, #4
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe f87f 	bl	8002270 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02f      	beq.n	80041e8 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4413      	add	r3, r2
 8004190:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	429a      	cmp	r2, r3
 8004198:	d90e      	bls.n	80041b8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <prvSwitchTimerLists+0xc4>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f7fe f824 	bl	80021fe <vListInsert>
 80041b6:	e017      	b.n	80041e8 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041b8:	2300      	movs	r3, #0
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2300      	movs	r3, #0
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	2100      	movs	r1, #0
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fd74 	bl	8003cb0 <xTimerGenericCommand>
 80041c8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	603b      	str	r3, [r7, #0]
    }
 80041e2:	bf00      	nop
 80041e4:	bf00      	nop
 80041e6:	e7fd      	b.n	80041e4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <prvSwitchTimerLists+0xc4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1b0      	bne.n	8004154 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80041f2:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <prvSwitchTimerLists+0xc4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80041f8:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <prvSwitchTimerLists+0xc8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a04      	ldr	r2, [pc, #16]	@ (8004210 <prvSwitchTimerLists+0xc4>)
 80041fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004200:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <prvSwitchTimerLists+0xc8>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6013      	str	r3, [r2, #0]
    }
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200001f0 	.word	0x200001f0
 8004214:	200001f4 	.word	0x200001f4

08004218 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800421c:	f000 f9e6 	bl	80045ec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004220:	4b12      	ldr	r3, [pc, #72]	@ (800426c <prvCheckForValidListAndQueue+0x54>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11d      	bne.n	8004264 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004228:	4811      	ldr	r0, [pc, #68]	@ (8004270 <prvCheckForValidListAndQueue+0x58>)
 800422a:	f7fd ff97 	bl	800215c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800422e:	4811      	ldr	r0, [pc, #68]	@ (8004274 <prvCheckForValidListAndQueue+0x5c>)
 8004230:	f7fd ff94 	bl	800215c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004234:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <prvCheckForValidListAndQueue+0x60>)
 8004236:	4a0e      	ldr	r2, [pc, #56]	@ (8004270 <prvCheckForValidListAndQueue+0x58>)
 8004238:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <prvCheckForValidListAndQueue+0x64>)
 800423c:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <prvCheckForValidListAndQueue+0x5c>)
 800423e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004240:	2200      	movs	r2, #0
 8004242:	210c      	movs	r1, #12
 8004244:	200a      	movs	r0, #10
 8004246:	f7fe f8a7 	bl	8002398 <xQueueGenericCreate>
 800424a:	4603      	mov	r3, r0
 800424c:	4a07      	ldr	r2, [pc, #28]	@ (800426c <prvCheckForValidListAndQueue+0x54>)
 800424e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <prvCheckForValidListAndQueue+0x54>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004258:	4b04      	ldr	r3, [pc, #16]	@ (800426c <prvCheckForValidListAndQueue+0x54>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4908      	ldr	r1, [pc, #32]	@ (8004280 <prvCheckForValidListAndQueue+0x68>)
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fd36 	bl	8002cd0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004264:	f000 f9f4 	bl	8004650 <vPortExitCritical>
    }
 8004268:	bf00      	nop
 800426a:	bd80      	pop	{r7, pc}
 800426c:	200001f8 	.word	0x200001f8
 8004270:	200001c8 	.word	0x200001c8
 8004274:	200001dc 	.word	0x200001dc
 8004278:	200001f0 	.word	0x200001f0
 800427c:	200001f4 	.word	0x200001f4
 8004280:	080075fc 	.word	0x080075fc

08004284 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3b04      	subs	r3, #4
 8004294:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800429c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b04      	subs	r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f023 0201 	bic.w	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3b04      	subs	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042b4:	4a0c      	ldr	r2, [pc, #48]	@ (80042e8 <pxPortInitialiseStack+0x64>)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3b14      	subs	r3, #20
 80042be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3b04      	subs	r3, #4
 80042ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f06f 0202 	mvn.w	r2, #2
 80042d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b20      	subs	r3, #32
 80042d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042da:	68fb      	ldr	r3, [r7, #12]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	080042ed 	.word	0x080042ed

080042ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042f6:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <prvTaskExitError+0x58>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d00b      	beq.n	8004318 <prvTaskExitError+0x2c>
        __asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
    }
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <prvTaskExitError+0x28>
        __asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	60bb      	str	r3, [r7, #8]
    }
 800432a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800432c:	bf00      	nop
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0fc      	beq.n	800432e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000010 	.word	0x20000010
	...

08004350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004350:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <pxCurrentTCBConst2>)
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	6808      	ldr	r0, [r1, #0]
 8004356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435a:	f380 8809 	msr	PSP, r0
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f380 8811 	msr	BASEPRI, r0
 800436a:	4770      	bx	lr
 800436c:	f3af 8000 	nop.w

08004370 <pxCurrentTCBConst2>:
 8004370:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004378:	4808      	ldr	r0, [pc, #32]	@ (800439c <prvPortStartFirstTask+0x24>)
 800437a:	6800      	ldr	r0, [r0, #0]
 800437c:	6800      	ldr	r0, [r0, #0]
 800437e:	f380 8808 	msr	MSP, r0
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8814 	msr	CONTROL, r0
 800438a:	b662      	cpsie	i
 800438c:	b661      	cpsie	f
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	df00      	svc	0
 8004398:	bf00      	nop
 800439a:	0000      	.short	0x0000
 800439c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop

080043a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043aa:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <xPortStartScheduler+0x124>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a47      	ldr	r2, [pc, #284]	@ (80044cc <xPortStartScheduler+0x128>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10b      	bne.n	80043cc <xPortStartScheduler+0x28>
        __asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
    }
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	e7fd      	b.n	80043c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043cc:	4b3e      	ldr	r3, [pc, #248]	@ (80044c8 <xPortStartScheduler+0x124>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a3f      	ldr	r2, [pc, #252]	@ (80044d0 <xPortStartScheduler+0x12c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10b      	bne.n	80043ee <xPortStartScheduler+0x4a>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60fb      	str	r3, [r7, #12]
    }
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	e7fd      	b.n	80043ea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ee:	4b39      	ldr	r3, [pc, #228]	@ (80044d4 <xPortStartScheduler+0x130>)
 80043f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	22ff      	movs	r2, #255	@ 0xff
 80043fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <xPortStartScheduler+0x134>)
 8004414:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004416:	4b31      	ldr	r3, [pc, #196]	@ (80044dc <xPortStartScheduler+0x138>)
 8004418:	2207      	movs	r2, #7
 800441a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800441c:	e009      	b.n	8004432 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800441e:	4b2f      	ldr	r3, [pc, #188]	@ (80044dc <xPortStartScheduler+0x138>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3b01      	subs	r3, #1
 8004424:	4a2d      	ldr	r2, [pc, #180]	@ (80044dc <xPortStartScheduler+0x138>)
 8004426:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443a:	2b80      	cmp	r3, #128	@ 0x80
 800443c:	d0ef      	beq.n	800441e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800443e:	4b27      	ldr	r3, [pc, #156]	@ (80044dc <xPortStartScheduler+0x138>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1c3 0307 	rsb	r3, r3, #7
 8004446:	2b04      	cmp	r3, #4
 8004448:	d00b      	beq.n	8004462 <xPortStartScheduler+0xbe>
        __asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
    }
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	e7fd      	b.n	800445e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <xPortStartScheduler+0x138>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <xPortStartScheduler+0x138>)
 800446a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800446c:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <xPortStartScheduler+0x138>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004474:	4a19      	ldr	r2, [pc, #100]	@ (80044dc <xPortStartScheduler+0x138>)
 8004476:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004480:	4b17      	ldr	r3, [pc, #92]	@ (80044e0 <xPortStartScheduler+0x13c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a16      	ldr	r2, [pc, #88]	@ (80044e0 <xPortStartScheduler+0x13c>)
 8004486:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800448a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800448c:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <xPortStartScheduler+0x13c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a13      	ldr	r2, [pc, #76]	@ (80044e0 <xPortStartScheduler+0x13c>)
 8004492:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004496:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004498:	f000 f968 	bl	800476c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800449c:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <xPortStartScheduler+0x140>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044a2:	f000 f987 	bl	80047b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <xPortStartScheduler+0x144>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a0f      	ldr	r2, [pc, #60]	@ (80044e8 <xPortStartScheduler+0x144>)
 80044ac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80044b0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044b2:	f7ff ff61 	bl	8004378 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044b6:	f7ff f84b 	bl	8003550 <vTaskSwitchContext>
    prvTaskExitError();
 80044ba:	f7ff ff17 	bl	80042ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	e000ed00 	.word	0xe000ed00
 80044cc:	410fc271 	.word	0x410fc271
 80044d0:	410fc270 	.word	0x410fc270
 80044d4:	e000e400 	.word	0xe000e400
 80044d8:	20000204 	.word	0x20000204
 80044dc:	20000208 	.word	0x20000208
 80044e0:	e000ed20 	.word	0xe000ed20
 80044e4:	20000010 	.word	0x20000010
 80044e8:	e000ef34 	.word	0xe000ef34

080044ec <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044f2:	4b38      	ldr	r3, [pc, #224]	@ (80045d4 <vInitPrioGroupValue+0xe8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a38      	ldr	r2, [pc, #224]	@ (80045d8 <vInitPrioGroupValue+0xec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d10b      	bne.n	8004514 <vInitPrioGroupValue+0x28>
        __asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	613b      	str	r3, [r7, #16]
    }
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004514:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <vInitPrioGroupValue+0xe8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a30      	ldr	r2, [pc, #192]	@ (80045dc <vInitPrioGroupValue+0xf0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10b      	bne.n	8004536 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	60fb      	str	r3, [r7, #12]
    }
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	e7fd      	b.n	8004532 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004536:	4b2a      	ldr	r3, [pc, #168]	@ (80045e0 <vInitPrioGroupValue+0xf4>)
 8004538:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	22ff      	movs	r2, #255	@ 0xff
 8004546:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b22      	ldr	r3, [pc, #136]	@ (80045e4 <vInitPrioGroupValue+0xf8>)
 800455c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800455e:	4b22      	ldr	r3, [pc, #136]	@ (80045e8 <vInitPrioGroupValue+0xfc>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004564:	e009      	b.n	800457a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004566:	4b20      	ldr	r3, [pc, #128]	@ (80045e8 <vInitPrioGroupValue+0xfc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3b01      	subs	r3, #1
 800456c:	4a1e      	ldr	r2, [pc, #120]	@ (80045e8 <vInitPrioGroupValue+0xfc>)
 800456e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	2b80      	cmp	r3, #128	@ 0x80
 8004584:	d0ef      	beq.n	8004566 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004586:	4b18      	ldr	r3, [pc, #96]	@ (80045e8 <vInitPrioGroupValue+0xfc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f1c3 0307 	rsb	r3, r3, #7
 800458e:	2b04      	cmp	r3, #4
 8004590:	d00b      	beq.n	80045aa <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60bb      	str	r3, [r7, #8]
    }
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045aa:	4b0f      	ldr	r3, [pc, #60]	@ (80045e8 <vInitPrioGroupValue+0xfc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	4a0d      	ldr	r2, [pc, #52]	@ (80045e8 <vInitPrioGroupValue+0xfc>)
 80045b2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <vInitPrioGroupValue+0xfc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045bc:	4a0a      	ldr	r2, [pc, #40]	@ (80045e8 <vInitPrioGroupValue+0xfc>)
 80045be:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000ed00 	.word	0xe000ed00
 80045d8:	410fc271 	.word	0x410fc271
 80045dc:	410fc270 	.word	0x410fc270
 80045e0:	e000e400 	.word	0xe000e400
 80045e4:	20000204 	.word	0x20000204
 80045e8:	20000208 	.word	0x20000208

080045ec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
        __asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
    }
 8004604:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004606:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <vPortEnterCritical+0x5c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	4a0e      	ldr	r2, [pc, #56]	@ (8004648 <vPortEnterCritical+0x5c>)
 800460e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004610:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <vPortEnterCritical+0x5c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d110      	bne.n	800463a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004618:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <vPortEnterCritical+0x60>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <vPortEnterCritical+0x4e>
        __asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	603b      	str	r3, [r7, #0]
    }
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	e7fd      	b.n	8004636 <vPortEnterCritical+0x4a>
    }
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000010 	.word	0x20000010
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004656:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <vPortExitCritical+0x50>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <vPortExitCritical+0x26>
        __asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	607b      	str	r3, [r7, #4]
    }
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	e7fd      	b.n	8004672 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004676:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <vPortExitCritical+0x50>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	4a08      	ldr	r2, [pc, #32]	@ (80046a0 <vPortExitCritical+0x50>)
 800467e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004680:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <vPortExitCritical+0x50>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <vPortExitCritical+0x44>
 8004688:	2300      	movs	r3, #0
 800468a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f383 8811 	msr	BASEPRI, r3
    }
 8004692:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	20000010 	.word	0x20000010
	...

080046b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046b0:	f3ef 8009 	mrs	r0, PSP
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <pxCurrentTCBConst>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	f01e 0f10 	tst.w	lr, #16
 80046c0:	bf08      	it	eq
 80046c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	6010      	str	r0, [r2, #0]
 80046cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80046d4:	f380 8811 	msr	BASEPRI, r0
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f7fe ff36 	bl	8003550 <vTaskSwitchContext>
 80046e4:	f04f 0000 	mov.w	r0, #0
 80046e8:	f380 8811 	msr	BASEPRI, r0
 80046ec:	bc09      	pop	{r0, r3}
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	6808      	ldr	r0, [r1, #0]
 80046f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f6:	f01e 0f10 	tst.w	lr, #16
 80046fa:	bf08      	it	eq
 80046fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004700:	f380 8809 	msr	PSP, r0
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	f3af 8000 	nop.w

08004710 <pxCurrentTCBConst>:
 8004710:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
        __asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	607b      	str	r3, [r7, #4]
    }
 8004730:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004732:	f002 fb89 	bl	8006e48 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004736:	f7fe fe4d 	bl	80033d4 <xTaskIncrementTick>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d006      	beq.n	800474e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004740:	f002 fbe0 	bl	8006f04 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004744:	4b08      	ldr	r3, [pc, #32]	@ (8004768 <SysTick_Handler+0x50>)
 8004746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e001      	b.n	8004752 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800474e:	f002 fbbd 	bl	8006ecc <SEGGER_SYSVIEW_RecordExitISR>
 8004752:	2300      	movs	r3, #0
 8004754:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f383 8811 	msr	BASEPRI, r3
    }
 800475c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004770:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <vPortSetupTimerInterrupt+0x34>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <vPortSetupTimerInterrupt+0x38>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800477c:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <vPortSetupTimerInterrupt+0x3c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <vPortSetupTimerInterrupt+0x40>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	099b      	lsrs	r3, r3, #6
 8004788:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <vPortSetupTimerInterrupt+0x44>)
 800478a:	3b01      	subs	r3, #1
 800478c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800478e:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <vPortSetupTimerInterrupt+0x34>)
 8004790:	2207      	movs	r2, #7
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	e000e010 	.word	0xe000e010
 80047a4:	e000e018 	.word	0xe000e018
 80047a8:	20000000 	.word	0x20000000
 80047ac:	10624dd3 	.word	0x10624dd3
 80047b0:	e000e014 	.word	0xe000e014

080047b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80047c4 <vPortEnableVFP+0x10>
 80047b8:	6801      	ldr	r1, [r0, #0]
 80047ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80047be:	6001      	str	r1, [r0, #0]
 80047c0:	4770      	bx	lr
 80047c2:	0000      	.short	0x0000
 80047c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop

080047cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047d2:	f3ef 8305 	mrs	r3, IPSR
 80047d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	d915      	bls.n	800480a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047de:	4a18      	ldr	r2, [pc, #96]	@ (8004840 <vPortValidateInterruptPriority+0x74>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047e8:	4b16      	ldr	r3, [pc, #88]	@ (8004844 <vPortValidateInterruptPriority+0x78>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	7afa      	ldrb	r2, [r7, #11]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d20b      	bcs.n	800480a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
    }
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	e7fd      	b.n	8004806 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800480a:	4b0f      	ldr	r3, [pc, #60]	@ (8004848 <vPortValidateInterruptPriority+0x7c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004812:	4b0e      	ldr	r3, [pc, #56]	@ (800484c <vPortValidateInterruptPriority+0x80>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d90b      	bls.n	8004832 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	603b      	str	r3, [r7, #0]
    }
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	e7fd      	b.n	800482e <vPortValidateInterruptPriority+0x62>
    }
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	e000e3f0 	.word	0xe000e3f0
 8004844:	20000204 	.word	0x20000204
 8004848:	e000ed0c 	.word	0xe000ed0c
 800484c:	20000208 	.word	0x20000208

08004850 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	@ 0x28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800485c:	f7fe fce8 	bl	8003230 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004860:	4b66      	ldr	r3, [pc, #408]	@ (80049fc <pvPortMalloc+0x1ac>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004868:	f000 f938 	bl	8004adc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800486c:	4b64      	ldr	r3, [pc, #400]	@ (8004a00 <pvPortMalloc+0x1b0>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4013      	ands	r3, r2
 8004874:	2b00      	cmp	r3, #0
 8004876:	f040 80a9 	bne.w	80049cc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02e      	beq.n	80048de <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004880:	2208      	movs	r2, #8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d228      	bcs.n	80048de <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800488c:	2208      	movs	r2, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	2b00      	cmp	r3, #0
 800489c:	d022      	beq.n	80048e4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f023 0307 	bic.w	r3, r3, #7
 80048a4:	3308      	adds	r3, #8
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d215      	bcs.n	80048d8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f023 0307 	bic.w	r3, r3, #7
 80048b2:	3308      	adds	r3, #8
 80048b4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d011      	beq.n	80048e4 <pvPortMalloc+0x94>
        __asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	617b      	str	r3, [r7, #20]
    }
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048dc:	e002      	b.n	80048e4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	e000      	b.n	80048e6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048e4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d06f      	beq.n	80049cc <pvPortMalloc+0x17c>
 80048ec:	4b45      	ldr	r3, [pc, #276]	@ (8004a04 <pvPortMalloc+0x1b4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d86a      	bhi.n	80049cc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80048f6:	4b44      	ldr	r3, [pc, #272]	@ (8004a08 <pvPortMalloc+0x1b8>)
 80048f8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80048fa:	4b43      	ldr	r3, [pc, #268]	@ (8004a08 <pvPortMalloc+0x1b8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004900:	e004      	b.n	800490c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d903      	bls.n	800491e <pvPortMalloc+0xce>
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f1      	bne.n	8004902 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800491e:	4b37      	ldr	r3, [pc, #220]	@ (80049fc <pvPortMalloc+0x1ac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004924:	429a      	cmp	r2, r3
 8004926:	d051      	beq.n	80049cc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2208      	movs	r2, #8
 800492e:	4413      	add	r3, r2
 8004930:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	2308      	movs	r3, #8
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	429a      	cmp	r2, r3
 8004948:	d920      	bls.n	800498c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800494a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <pvPortMalloc+0x124>
        __asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	613b      	str	r3, [r7, #16]
    }
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	1ad2      	subs	r2, r2, r3
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004986:	69b8      	ldr	r0, [r7, #24]
 8004988:	f000 f90a 	bl	8004ba0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800498c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a04 <pvPortMalloc+0x1b4>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <pvPortMalloc+0x1b4>)
 8004998:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800499a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <pvPortMalloc+0x1b4>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a0c <pvPortMalloc+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d203      	bcs.n	80049ae <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049a6:	4b17      	ldr	r3, [pc, #92]	@ (8004a04 <pvPortMalloc+0x1b4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <pvPortMalloc+0x1bc>)
 80049ac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	4b13      	ldr	r3, [pc, #76]	@ (8004a00 <pvPortMalloc+0x1b0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80049c2:	4b13      	ldr	r3, [pc, #76]	@ (8004a10 <pvPortMalloc+0x1c0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a11      	ldr	r2, [pc, #68]	@ (8004a10 <pvPortMalloc+0x1c0>)
 80049ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80049cc:	f7fe fc3e 	bl	800324c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <pvPortMalloc+0x1a2>
        __asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	60fb      	str	r3, [r7, #12]
    }
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <pvPortMalloc+0x19e>
    return pvReturn;
 80049f2:	69fb      	ldr	r3, [r7, #28]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3728      	adds	r7, #40	@ 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20012e14 	.word	0x20012e14
 8004a00:	20012e28 	.word	0x20012e28
 8004a04:	20012e18 	.word	0x20012e18
 8004a08:	20012e0c 	.word	0x20012e0c
 8004a0c:	20012e1c 	.word	0x20012e1c
 8004a10:	20012e20 	.word	0x20012e20

08004a14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d04f      	beq.n	8004ac6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a26:	2308      	movs	r3, #8
 8004a28:	425b      	negs	r3, r3
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	4b25      	ldr	r3, [pc, #148]	@ (8004ad0 <vPortFree+0xbc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <vPortFree+0x46>
        __asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	60fb      	str	r3, [r7, #12]
    }
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <vPortFree+0x66>
        __asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60bb      	str	r3, [r7, #8]
    }
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	e7fd      	b.n	8004a76 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <vPortFree+0xbc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01e      	beq.n	8004ac6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11a      	bne.n	8004ac6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad0 <vPortFree+0xbc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004aa0:	f7fe fbc6 	bl	8003230 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad4 <vPortFree+0xc0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4413      	add	r3, r2
 8004aae:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <vPortFree+0xc0>)
 8004ab0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ab2:	6938      	ldr	r0, [r7, #16]
 8004ab4:	f000 f874 	bl	8004ba0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004ab8:	4b07      	ldr	r3, [pc, #28]	@ (8004ad8 <vPortFree+0xc4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	4a06      	ldr	r2, [pc, #24]	@ (8004ad8 <vPortFree+0xc4>)
 8004ac0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ac2:	f7fe fbc3 	bl	800324c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004ac6:	bf00      	nop
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20012e28 	.word	0x20012e28
 8004ad4:	20012e18 	.word	0x20012e18
 8004ad8:	20012e24 	.word	0x20012e24

08004adc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ae2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004ae6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004ae8:	4b27      	ldr	r3, [pc, #156]	@ (8004b88 <prvHeapInit+0xac>)
 8004aea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00c      	beq.n	8004b10 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3307      	adds	r3, #7
 8004afa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0307 	bic.w	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b88 <prvHeapInit+0xac>)
 8004b0c:	4413      	add	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b14:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <prvHeapInit+0xb0>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004b8c <prvHeapInit+0xb0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	4413      	add	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b28:	2208      	movs	r2, #8
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0307 	bic.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	@ (8004b90 <prvHeapInit+0xb4>)
 8004b3c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b3e:	4b14      	ldr	r3, [pc, #80]	@ (8004b90 <prvHeapInit+0xb4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b46:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <prvHeapInit+0xb4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <prvHeapInit+0xb4>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <prvHeapInit+0xb8>)
 8004b6a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a09      	ldr	r2, [pc, #36]	@ (8004b98 <prvHeapInit+0xbc>)
 8004b72:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b74:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <prvHeapInit+0xc0>)
 8004b76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004b7a:	601a      	str	r2, [r3, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	2000020c 	.word	0x2000020c
 8004b8c:	20012e0c 	.word	0x20012e0c
 8004b90:	20012e14 	.word	0x20012e14
 8004b94:	20012e1c 	.word	0x20012e1c
 8004b98:	20012e18 	.word	0x20012e18
 8004b9c:	20012e28 	.word	0x20012e28

08004ba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ba8:	4b28      	ldr	r3, [pc, #160]	@ (8004c4c <prvInsertBlockIntoFreeList+0xac>)
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e002      	b.n	8004bb4 <prvInsertBlockIntoFreeList+0x14>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d8f7      	bhi.n	8004bae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d108      	bne.n	8004be2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	441a      	add	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	441a      	add	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d118      	bne.n	8004c28 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <prvInsertBlockIntoFreeList+0xb0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d00d      	beq.n	8004c1e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e008      	b.n	8004c30 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <prvInsertBlockIntoFreeList+0xb0>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e003      	b.n	8004c30 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d002      	beq.n	8004c3e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20012e0c 	.word	0x20012e0c
 8004c50:	20012e14 	.word	0x20012e14

08004c54 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c58:	4803      	ldr	r0, [pc, #12]	@ (8004c68 <_cbSendSystemDesc+0x14>)
 8004c5a:	f002 f89f 	bl	8006d9c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c5e:	4803      	ldr	r0, [pc, #12]	@ (8004c6c <_cbSendSystemDesc+0x18>)
 8004c60:	f002 f89c 	bl	8006d9c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c64:	bf00      	nop
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	08007604 	.word	0x08007604
 8004c6c:	08007648 	.word	0x08007648

08004c70 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004c74:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <SEGGER_SYSVIEW_Conf+0x24>)
 8004c7e:	4a06      	ldr	r2, [pc, #24]	@ (8004c98 <SEGGER_SYSVIEW_Conf+0x28>)
 8004c80:	f001 fc08 	bl	8006494 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c84:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004c88:	f001 fc48 	bl	800651c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c8c:	bf00      	nop
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000000 	.word	0x20000000
 8004c94:	08004c55 	.word	0x08004c55
 8004c98:	080076e8 	.word	0x080076e8

08004c9c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	e033      	b.n	8004d10 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ca8:	491e      	ldr	r1, [pc, #120]	@ (8004d24 <_cbSendTaskList+0x88>)
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	491a      	ldr	r1, [pc, #104]	@ (8004d24 <_cbSendTaskList+0x88>)
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	4c16      	ldr	r4, [pc, #88]	@ (8004d24 <_cbSendTaskList+0x88>)
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4423      	add	r3, r4
 8004cd8:	3308      	adds	r3, #8
 8004cda:	681c      	ldr	r4, [r3, #0]
 8004cdc:	4d11      	ldr	r5, [pc, #68]	@ (8004d24 <_cbSendTaskList+0x88>)
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	442b      	add	r3, r5
 8004cea:	330c      	adds	r3, #12
 8004cec:	681d      	ldr	r5, [r3, #0]
 8004cee:	4e0d      	ldr	r6, [pc, #52]	@ (8004d24 <_cbSendTaskList+0x88>)
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4433      	add	r3, r6
 8004cfc:	3310      	adds	r3, #16
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	462b      	mov	r3, r5
 8004d04:	4622      	mov	r2, r4
 8004d06:	f000 f8bd 	bl	8004e84 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <_cbSendTaskList+0x8c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d3c6      	bcc.n	8004ca8 <_cbSendTaskList+0xc>
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d24:	20012e2c 	.word	0x20012e2c
 8004d28:	20012ecc 	.word	0x20012ecc

08004d2c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d34:	f7fe fb3c 	bl	80033b0 <xTaskGetTickCountFromISR>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	469a      	mov	sl, r3
 8004d3e:	4693      	mov	fp, r2
 8004d40:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	f04f 0a00 	mov.w	sl, #0
 8004d50:	f04f 0b00 	mov.w	fp, #0
 8004d54:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004d58:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004d5c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004d60:	4652      	mov	r2, sl
 8004d62:	465b      	mov	r3, fp
 8004d64:	1a14      	subs	r4, r2, r0
 8004d66:	eb63 0501 	sbc.w	r5, r3, r1
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	00ab      	lsls	r3, r5, #2
 8004d74:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004d78:	00a2      	lsls	r2, r4, #2
 8004d7a:	4614      	mov	r4, r2
 8004d7c:	461d      	mov	r5, r3
 8004d7e:	eb14 0800 	adds.w	r8, r4, r0
 8004d82:	eb45 0901 	adc.w	r9, r5, r1
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9a:	4690      	mov	r8, r2
 8004d9c:	4699      	mov	r9, r3
 8004d9e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004da2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004db4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004dc2:	2205      	movs	r2, #5
 8004dc4:	492b      	ldr	r1, [pc, #172]	@ (8004e74 <SYSVIEW_AddTask+0xc0>)
 8004dc6:	68b8      	ldr	r0, [r7, #8]
 8004dc8:	f002 fb84 	bl	80074d4 <memcmp>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d04b      	beq.n	8004e6a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004dd2:	4b29      	ldr	r3, [pc, #164]	@ (8004e78 <SYSVIEW_AddTask+0xc4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b07      	cmp	r3, #7
 8004dd8:	d903      	bls.n	8004de2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004dda:	4828      	ldr	r0, [pc, #160]	@ (8004e7c <SYSVIEW_AddTask+0xc8>)
 8004ddc:	f002 faf0 	bl	80073c0 <SEGGER_SYSVIEW_Warn>
    return;
 8004de0:	e044      	b.n	8004e6c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004de2:	4b25      	ldr	r3, [pc, #148]	@ (8004e78 <SYSVIEW_AddTask+0xc4>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4926      	ldr	r1, [pc, #152]	@ (8004e80 <SYSVIEW_AddTask+0xcc>)
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004df6:	4b20      	ldr	r3, [pc, #128]	@ (8004e78 <SYSVIEW_AddTask+0xc4>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4921      	ldr	r1, [pc, #132]	@ (8004e80 <SYSVIEW_AddTask+0xcc>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	3304      	adds	r3, #4
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e78 <SYSVIEW_AddTask+0xc4>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	491b      	ldr	r1, [pc, #108]	@ (8004e80 <SYSVIEW_AddTask+0xcc>)
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e22:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <SYSVIEW_AddTask+0xc4>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4916      	ldr	r1, [pc, #88]	@ (8004e80 <SYSVIEW_AddTask+0xcc>)
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	330c      	adds	r3, #12
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e38:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <SYSVIEW_AddTask+0xc4>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4910      	ldr	r1, [pc, #64]	@ (8004e80 <SYSVIEW_AddTask+0xcc>)
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3310      	adds	r3, #16
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e78 <SYSVIEW_AddTask+0xc4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4a08      	ldr	r2, [pc, #32]	@ (8004e78 <SYSVIEW_AddTask+0xc4>)
 8004e56:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f80e 	bl	8004e84 <SYSVIEW_SendTaskInfo>
 8004e68:	e000      	b.n	8004e6c <SYSVIEW_AddTask+0xb8>
    return;
 8004e6a:	bf00      	nop

}
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	08007658 	.word	0x08007658
 8004e78:	20012ecc 	.word	0x20012ecc
 8004e7c:	08007660 	.word	0x08007660
 8004e80:	20012e2c 	.word	0x20012e2c

08004e84 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	@ 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	2214      	movs	r2, #20
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 fb2a 	bl	80074f4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f001 fe77 	bl	8006bac <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ebe:	bf00      	nop
 8004ec0:	3728      	adds	r7, #40	@ 0x28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <__NVIC_EnableIRQ>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	db0b      	blt.n	8004ef2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	f003 021f 	and.w	r2, r3, #31
 8004ee0:	4907      	ldr	r1, [pc, #28]	@ (8004f00 <__NVIC_EnableIRQ+0x38>)
 8004ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	2001      	movs	r0, #1
 8004eea:	fa00 f202 	lsl.w	r2, r0, r2
 8004eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	e000e100 	.word	0xe000e100

08004f04 <__NVIC_SetPriority>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	db0a      	blt.n	8004f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	490c      	ldr	r1, [pc, #48]	@ (8004f50 <__NVIC_SetPriority+0x4c>)
 8004f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f22:	0112      	lsls	r2, r2, #4
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	440b      	add	r3, r1
 8004f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f2c:	e00a      	b.n	8004f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	4908      	ldr	r1, [pc, #32]	@ (8004f54 <__NVIC_SetPriority+0x50>)
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	3b04      	subs	r3, #4
 8004f3c:	0112      	lsls	r2, r2, #4
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	440b      	add	r3, r1
 8004f42:	761a      	strb	r2, [r3, #24]
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	e000e100 	.word	0xe000e100
 8004f54:	e000ed00 	.word	0xe000ed00

08004f58 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004f5e:	f002 fa8b 	bl	8007478 <SEGGER_SYSVIEW_IsStarted>
 8004f62:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004f6a:	f001 fca3 	bl	80068b4 <SEGGER_SYSVIEW_Start>
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004f82:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <_cbOnUARTRx+0x3c>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d806      	bhi.n	8004f98 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <_cbOnUARTRx+0x3c>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4b08      	ldr	r3, [pc, #32]	@ (8004fb4 <_cbOnUARTRx+0x3c>)
 8004f94:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004f96:	e009      	b.n	8004fac <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004f98:	f7ff ffde 	bl	8004f58 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <_cbOnUARTRx+0x3c>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	1dfb      	adds	r3, r7, #7
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f000 fb9a 	bl	80056e0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004fac:	bf00      	nop
}
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000014 	.word	0x20000014

08004fb8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004fc0:	4b14      	ldr	r3, [pc, #80]	@ (8005014 <_cbOnUARTTx+0x5c>)
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d80f      	bhi.n	8004fe8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004fc8:	4b12      	ldr	r3, [pc, #72]	@ (8005014 <_cbOnUARTTx+0x5c>)
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b12      	ldr	r3, [pc, #72]	@ (8005018 <_cbOnUARTTx+0x60>)
 8004fd0:	5c9a      	ldrb	r2, [r3, r2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <_cbOnUARTTx+0x5c>)
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	4b0d      	ldr	r3, [pc, #52]	@ (8005014 <_cbOnUARTTx+0x5c>)
 8004fe0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004fe6:	e00f      	b.n	8005008 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8005014 <_cbOnUARTTx+0x5c>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fa19 	bl	8005428 <SEGGER_RTT_ReadUpBufferNoLock>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da02      	bge.n	8005006 <_cbOnUARTTx+0x4e>
    r = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e000      	b.n	8005008 <_cbOnUARTTx+0x50>
  }
Done:
 8005006:	bf00      	nop
  return r;
 8005008:	68fb      	ldr	r3, [r7, #12]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000014 	.word	0x20000014
 8005018:	080076f0 	.word	0x080076f0

0800501c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005024:	4a04      	ldr	r2, [pc, #16]	@ (8005038 <SEGGER_UART_init+0x1c>)
 8005026:	4905      	ldr	r1, [pc, #20]	@ (800503c <SEGGER_UART_init+0x20>)
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f863 	bl	80050f4 <HIF_UART_Init>
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	08004f79 	.word	0x08004f79
 800503c:	08004fb9 	.word	0x08004fb9

08005040 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005046:	4b1e      	ldr	r3, [pc, #120]	@ (80050c0 <USART2_IRQHandler+0x80>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d011      	beq.n	800507a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005056:	4b1b      	ldr	r3, [pc, #108]	@ (80050c4 <USART2_IRQHandler+0x84>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 030b 	and.w	r3, r3, #11
 8005064:	2b00      	cmp	r3, #0
 8005066:	d108      	bne.n	800507a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005068:	4b17      	ldr	r3, [pc, #92]	@ (80050c8 <USART2_IRQHandler+0x88>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005070:	4b15      	ldr	r3, [pc, #84]	@ (80050c8 <USART2_IRQHandler+0x88>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	79fa      	ldrb	r2, [r7, #7]
 8005076:	4610      	mov	r0, r2
 8005078:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01a      	beq.n	80050ba <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005084:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <USART2_IRQHandler+0x8c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d015      	beq.n	80050b8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800508c:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <USART2_IRQHandler+0x8c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1dfa      	adds	r2, r7, #7
 8005092:	4610      	mov	r0, r2
 8005094:	4798      	blx	r3
 8005096:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800509e:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <USART2_IRQHandler+0x90>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a0b      	ldr	r2, [pc, #44]	@ (80050d0 <USART2_IRQHandler+0x90>)
 80050a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e006      	b.n	80050ba <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80050ac:	4b04      	ldr	r3, [pc, #16]	@ (80050c0 <USART2_IRQHandler+0x80>)
 80050ae:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80050b0:	79fa      	ldrb	r2, [r7, #7]
 80050b2:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <USART2_IRQHandler+0x84>)
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e000      	b.n	80050ba <USART2_IRQHandler+0x7a>
      return;
 80050b8:	bf00      	nop
    }
  }
}
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40004400 	.word	0x40004400
 80050c4:	40004404 	.word	0x40004404
 80050c8:	20012ed0 	.word	0x20012ed0
 80050cc:	20012ed4 	.word	0x20012ed4
 80050d0:	4000440c 	.word	0x4000440c

080050d4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a04      	ldr	r2, [pc, #16]	@ (80050f0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050e2:	6013      	str	r3, [r2, #0]
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	4000440c 	.word	0x4000440c

080050f4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005100:	4b2e      	ldr	r3, [pc, #184]	@ (80051bc <HIF_UART_Init+0xc8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2d      	ldr	r2, [pc, #180]	@ (80051bc <HIF_UART_Init+0xc8>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800510a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800510c:	4b2c      	ldr	r3, [pc, #176]	@ (80051c0 <HIF_UART_Init+0xcc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2b      	ldr	r2, [pc, #172]	@ (80051c0 <HIF_UART_Init+0xcc>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005118:	4b2a      	ldr	r3, [pc, #168]	@ (80051c4 <HIF_UART_Init+0xd0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005124:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800512c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800512e:	4a25      	ldr	r2, [pc, #148]	@ (80051c4 <HIF_UART_Init+0xd0>)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005134:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <HIF_UART_Init+0xd4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005140:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005148:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800514a:	4a1f      	ldr	r2, [pc, #124]	@ (80051c8 <HIF_UART_Init+0xd4>)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005150:	4b1e      	ldr	r3, [pc, #120]	@ (80051cc <HIF_UART_Init+0xd8>)
 8005152:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005156:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005158:	4b1d      	ldr	r3, [pc, #116]	@ (80051d0 <HIF_UART_Init+0xdc>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800515e:	4b1d      	ldr	r3, [pc, #116]	@ (80051d4 <HIF_UART_Init+0xe0>)
 8005160:	2280      	movs	r2, #128	@ 0x80
 8005162:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800516a:	4a1b      	ldr	r2, [pc, #108]	@ (80051d8 <HIF_UART_Init+0xe4>)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	3301      	adds	r3, #1
 8005174:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005182:	d302      	bcc.n	800518a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005184:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005188:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	4a11      	ldr	r2, [pc, #68]	@ (80051dc <HIF_UART_Init+0xe8>)
 8005196:	b29b      	uxth	r3, r3
 8005198:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800519a:	4a11      	ldr	r2, [pc, #68]	@ (80051e0 <HIF_UART_Init+0xec>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80051a0:	4a10      	ldr	r2, [pc, #64]	@ (80051e4 <HIF_UART_Init+0xf0>)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80051a6:	2106      	movs	r1, #6
 80051a8:	2026      	movs	r0, #38	@ 0x26
 80051aa:	f7ff feab 	bl	8004f04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80051ae:	2026      	movs	r0, #38	@ 0x26
 80051b0:	f7ff fe8a 	bl	8004ec8 <__NVIC_EnableIRQ>
}
 80051b4:	bf00      	nop
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40023840 	.word	0x40023840
 80051c0:	40023830 	.word	0x40023830
 80051c4:	40020020 	.word	0x40020020
 80051c8:	40020000 	.word	0x40020000
 80051cc:	4000440c 	.word	0x4000440c
 80051d0:	40004410 	.word	0x40004410
 80051d4:	40004414 	.word	0x40004414
 80051d8:	0501bd00 	.word	0x0501bd00
 80051dc:	40004408 	.word	0x40004408
 80051e0:	20012ed0 	.word	0x20012ed0
 80051e4:	20012ed4 	.word	0x20012ed4

080051e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <_DoInit+0x98>)
 80051f0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2203      	movs	r2, #3
 80051fc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a20      	ldr	r2, [pc, #128]	@ (8005284 <_DoInit+0x9c>)
 8005202:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a20      	ldr	r2, [pc, #128]	@ (8005288 <_DoInit+0xa0>)
 8005208:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005210:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a17      	ldr	r2, [pc, #92]	@ (8005284 <_DoInit+0x9c>)
 8005228:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a17      	ldr	r2, [pc, #92]	@ (800528c <_DoInit+0xa4>)
 800522e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2210      	movs	r2, #16
 8005234:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3307      	adds	r3, #7
 800524c:	4a10      	ldr	r2, [pc, #64]	@ (8005290 <_DoInit+0xa8>)
 800524e:	6810      	ldr	r0, [r2, #0]
 8005250:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005252:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a0e      	ldr	r2, [pc, #56]	@ (8005294 <_DoInit+0xac>)
 800525a:	6810      	ldr	r0, [r2, #0]
 800525c:	6018      	str	r0, [r3, #0]
 800525e:	8891      	ldrh	r1, [r2, #4]
 8005260:	7992      	ldrb	r2, [r2, #6]
 8005262:	8099      	strh	r1, [r3, #4]
 8005264:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005266:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005270:	f3bf 8f5f 	dmb	sy
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20012ed8 	.word	0x20012ed8
 8005284:	080076b0 	.word	0x080076b0
 8005288:	20012f80 	.word	0x20012f80
 800528c:	20013380 	.word	0x20013380
 8005290:	080076bc 	.word	0x080076bc
 8005294:	080076c0 	.word	0x080076c0

08005298 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	@ 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80052a4:	2300      	movs	r3, #0
 80052a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d905      	bls.n	80052c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c6:	e007      	b.n	80052d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	69b9      	ldr	r1, [r7, #24]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	1acb      	subs	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	3b01      	subs	r3, #1
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e2:	4293      	cmp	r3, r2
 80052e4:	bf28      	it	cs
 80052e6:	4613      	movcs	r3, r2
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80052ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4293      	cmp	r3, r2
 80052f0:	bf28      	it	cs
 80052f2:	4613      	movcs	r3, r2
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	6978      	ldr	r0, [r7, #20]
 8005306:	f002 f921 	bl	800754c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800530a:	6a3a      	ldr	r2, [r7, #32]
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	4413      	add	r3, r2
 8005310:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	4413      	add	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	4413      	add	r3, r2
 8005328:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	429a      	cmp	r2, r3
 8005332:	d101      	bne.n	8005338 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005338:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1b2      	bne.n	80052ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005348:	6a3b      	ldr	r3, [r7, #32]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3728      	adds	r7, #40	@ 0x28
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005352:	b580      	push	{r7, lr}
 8005354:	b088      	sub	sp, #32
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	d911      	bls.n	800539a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	6938      	ldr	r0, [r7, #16]
 8005386:	f002 f8e1 	bl	800754c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800538a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	441a      	add	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005398:	e01f      	b.n	80053da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	6938      	ldr	r0, [r7, #16]
 80053ae:	f002 f8cd 	bl	800754c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	4413      	add	r3, r2
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4619      	mov	r1, r3
 80053ca:	6938      	ldr	r0, [r7, #16]
 80053cc:	f002 f8be 	bl	800754c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	60da      	str	r2, [r3, #12]
}
 80053da:	bf00      	nop
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80053e2:	b480      	push	{r7}
 80053e4:	b087      	sub	sp, #28
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d808      	bhi.n	8005410 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad2      	subs	r2, r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	3b01      	subs	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	e004      	b.n	800541a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
  }
  return r;
 800541a:	697b      	ldr	r3, [r7, #20]
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b08c      	sub	sp, #48	@ 0x30
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005434:	4b3e      	ldr	r3, [pc, #248]	@ (8005530 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005436:	623b      	str	r3, [r7, #32]
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005442:	f7ff fed1 	bl	80051e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	4613      	mov	r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4a37      	ldr	r2, [pc, #220]	@ (8005530 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005454:	4413      	add	r3, r2
 8005456:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005468:	2300      	movs	r3, #0
 800546a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800546c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	429a      	cmp	r2, r3
 8005472:	d92b      	bls.n	80054cc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4293      	cmp	r3, r2
 8005484:	bf28      	it	cs
 8005486:	4613      	movcs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005490:	4413      	add	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	6939      	ldr	r1, [r7, #16]
 8005498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800549a:	f002 f857 	bl	800754c <memcpy>
    NumBytesRead += NumBytesRem;
 800549e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	4413      	add	r3, r2
 80054a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80054a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4413      	add	r3, r2
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4413      	add	r3, r2
 80054bc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d101      	bne.n	80054cc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80054c8:	2300      	movs	r3, #0
 80054ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4293      	cmp	r3, r2
 80054da:	bf28      	it	cs
 80054dc:	4613      	movcs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d019      	beq.n	800551a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	4413      	add	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	6939      	ldr	r1, [r7, #16]
 80054f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054f6:	f002 f829 	bl	800754c <memcpy>
    NumBytesRead += NumBytesRem;
 80054fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4413      	add	r3, r2
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005524:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005528:	4618      	mov	r0, r3
 800552a:	3730      	adds	r7, #48	@ 0x30
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20012ed8 	.word	0x20012ed8

08005534 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b08c      	sub	sp, #48	@ 0x30
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005540:	4b3e      	ldr	r3, [pc, #248]	@ (800563c <SEGGER_RTT_ReadNoLock+0x108>)
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <SEGGER_RTT_ReadNoLock+0x1e>
 800554e:	f7ff fe4b 	bl	80051e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	3360      	adds	r3, #96	@ 0x60
 800555e:	4a37      	ldr	r2, [pc, #220]	@ (800563c <SEGGER_RTT_ReadNoLock+0x108>)
 8005560:	4413      	add	r3, r2
 8005562:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005574:	2300      	movs	r3, #0
 8005576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005578:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	429a      	cmp	r2, r3
 800557e:	d92b      	bls.n	80055d8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4293      	cmp	r3, r2
 8005590:	bf28      	it	cs
 8005592:	4613      	movcs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559c:	4413      	add	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	6939      	ldr	r1, [r7, #16]
 80055a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055a6:	f001 ffd1 	bl	800754c <memcpy>
    NumBytesRead += NumBytesRem;
 80055aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	4413      	add	r3, r2
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80055b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4413      	add	r3, r2
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d101      	bne.n	80055d8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80055d4:	2300      	movs	r3, #0
 80055d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4293      	cmp	r3, r2
 80055e6:	bf28      	it	cs
 80055e8:	4613      	movcs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d019      	beq.n	8005626 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	4413      	add	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	6939      	ldr	r1, [r7, #16]
 8005600:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005602:	f001 ffa3 	bl	800754c <memcpy>
    NumBytesRead += NumBytesRem;
 8005606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	4413      	add	r3, r2
 800560c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800560e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800561e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	4413      	add	r3, r2
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005630:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005634:	4618      	mov	r0, r3
 8005636:	3730      	adds	r7, #48	@ 0x30
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20012ed8 	.word	0x20012ed8

08005640 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	3360      	adds	r3, #96	@ 0x60
 800565c:	4a1f      	ldr	r2, [pc, #124]	@ (80056dc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800565e:	4413      	add	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d029      	beq.n	80056be <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800566a:	2b02      	cmp	r3, #2
 800566c:	d82e      	bhi.n	80056cc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005672:	2b01      	cmp	r3, #1
 8005674:	d013      	beq.n	800569e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005676:	e029      	b.n	80056cc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005678:	6978      	ldr	r0, [r7, #20]
 800567a:	f7ff feb2 	bl	80053e2 <_GetAvailWriteSpace>
 800567e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	d202      	bcs.n	800568e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005688:	2300      	movs	r3, #0
 800568a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800568c:	e021      	b.n	80056d2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f7ff fe5b 	bl	8005352 <_WriteNoCheck>
    break;
 800569c:	e019      	b.n	80056d2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800569e:	6978      	ldr	r0, [r7, #20]
 80056a0:	f7ff fe9f 	bl	80053e2 <_GetAvailWriteSpace>
 80056a4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4293      	cmp	r3, r2
 80056ac:	bf28      	it	cs
 80056ae:	4613      	movcs	r3, r2
 80056b0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	69b9      	ldr	r1, [r7, #24]
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	f7ff fe4b 	bl	8005352 <_WriteNoCheck>
    break;
 80056bc:	e009      	b.n	80056d2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	6978      	ldr	r0, [r7, #20]
 80056c4:	f7ff fde8 	bl	8005298 <_WriteBlocking>
 80056c8:	61f8      	str	r0, [r7, #28]
    break;
 80056ca:	e002      	b.n	80056d2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]
    break;
 80056d0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80056d2:	69fb      	ldr	r3, [r7, #28]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20012ed8 	.word	0x20012ed8

080056e0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80056ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <SEGGER_RTT_WriteDownBuffer+0x1e>
 80056fa:	f7ff fd75 	bl	80051e8 <_DoInit>
  SEGGER_RTT_LOCK();
 80056fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005702:	f04f 0120 	mov.w	r1, #32
 8005706:	f381 8811 	msr	BASEPRI, r1
 800570a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff ff95 	bl	8005640 <SEGGER_RTT_WriteDownBufferNoLock>
 8005716:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800571e:	697b      	ldr	r3, [r7, #20]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20012ed8 	.word	0x20012ed8

0800572c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800573a:	4b3d      	ldr	r3, [pc, #244]	@ (8005830 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005748:	f7ff fd4e 	bl	80051e8 <_DoInit>
  SEGGER_RTT_LOCK();
 800574c:	f3ef 8311 	mrs	r3, BASEPRI
 8005750:	f04f 0120 	mov.w	r1, #32
 8005754:	f381 8811 	msr	BASEPRI, r1
 8005758:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800575a:	4b35      	ldr	r3, [pc, #212]	@ (8005830 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800575c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005762:	6939      	ldr	r1, [r7, #16]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	3304      	adds	r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3301      	adds	r3, #1
 800577e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	429a      	cmp	r2, r3
 8005788:	dbeb      	blt.n	8005762 <SEGGER_RTT_AllocUpBuffer+0x36>
 800578a:	e000      	b.n	800578e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800578c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	429a      	cmp	r2, r3
 8005796:	da3f      	bge.n	8005818 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005798:	6939      	ldr	r1, [r7, #16]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	440b      	add	r3, r1
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80057ac:	6939      	ldr	r1, [r7, #16]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	4613      	mov	r3, r2
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4413      	add	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	440b      	add	r3, r1
 80057bc:	3304      	adds	r3, #4
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80057c2:	6939      	ldr	r1, [r7, #16]
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	440b      	add	r3, r1
 80057d0:	3320      	adds	r3, #32
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80057d6:	6939      	ldr	r1, [r7, #16]
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	4613      	mov	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	4413      	add	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	440b      	add	r3, r1
 80057e4:	3328      	adds	r3, #40	@ 0x28
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80057ea:	6939      	ldr	r1, [r7, #16]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	440b      	add	r3, r1
 80057f8:	3324      	adds	r3, #36	@ 0x24
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80057fe:	6939      	ldr	r1, [r7, #16]
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	332c      	adds	r3, #44	@ 0x2c
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005812:	f3bf 8f5f 	dmb	sy
 8005816:	e002      	b.n	800581e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005818:	f04f 33ff 	mov.w	r3, #4294967295
 800581c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005824:	69fb      	ldr	r3, [r7, #28]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20012ed8 	.word	0x20012ed8

08005834 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005842:	4b33      	ldr	r3, [pc, #204]	@ (8005910 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005850:	f7ff fcca 	bl	80051e8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005854:	4b2e      	ldr	r3, [pc, #184]	@ (8005910 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005856:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	461a      	mov	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4293      	cmp	r3, r2
 8005862:	d24d      	bcs.n	8005900 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005864:	f3ef 8311 	mrs	r3, BASEPRI
 8005868:	f04f 0120 	mov.w	r1, #32
 800586c:	f381 8811 	msr	BASEPRI, r1
 8005870:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d031      	beq.n	80058dc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	440b      	add	r3, r1
 8005886:	3360      	adds	r3, #96	@ 0x60
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800588c:	6979      	ldr	r1, [r7, #20]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	440b      	add	r3, r1
 800589a:	3364      	adds	r3, #100	@ 0x64
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80058a0:	6979      	ldr	r1, [r7, #20]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	440b      	add	r3, r1
 80058ae:	3368      	adds	r3, #104	@ 0x68
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	4413      	add	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	440b      	add	r3, r1
 80058c2:	3370      	adds	r3, #112	@ 0x70
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80058c8:	6979      	ldr	r1, [r7, #20]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4613      	mov	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4413      	add	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	440b      	add	r3, r1
 80058d6:	336c      	adds	r3, #108	@ 0x6c
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80058dc:	6979      	ldr	r1, [r7, #20]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4613      	mov	r3, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	4413      	add	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	440b      	add	r3, r1
 80058ea:	3374      	adds	r3, #116	@ 0x74
 80058ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ee:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058f0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	e002      	b.n	8005906 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005906:	69fb      	ldr	r3, [r7, #28]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3720      	adds	r7, #32
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20012ed8 	.word	0x20012ed8

08005914 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005924:	e002      	b.n	800592c <_EncodeStr+0x18>
    Len++;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	3301      	adds	r3, #1
 800592a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f6      	bne.n	8005926 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d901      	bls.n	8005944 <_EncodeStr+0x30>
    Len = Limit;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2bfe      	cmp	r3, #254	@ 0xfe
 8005948:	d806      	bhi.n	8005958 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	60fa      	str	r2, [r7, #12]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	e011      	b.n	800597c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	60fa      	str	r2, [r7, #12]
 800595e:	22ff      	movs	r2, #255	@ 0xff
 8005960:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	60fa      	str	r2, [r7, #12]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	0a19      	lsrs	r1, r3, #8
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	60fa      	str	r2, [r7, #12]
 8005978:	b2ca      	uxtb	r2, r1
 800597a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005980:	e00a      	b.n	8005998 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	1c53      	adds	r3, r2, #1
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1c59      	adds	r1, r3, #1
 800598c:	60f9      	str	r1, [r7, #12]
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	701a      	strb	r2, [r3, #0]
    n++;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	3301      	adds	r3, #1
 8005996:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	429a      	cmp	r2, r3
 800599e:	d3f0      	bcc.n	8005982 <_EncodeStr+0x6e>
  }
  return pPayload;
 80059a0:	68fb      	ldr	r3, [r7, #12]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	3304      	adds	r3, #4
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059ce:	4b35      	ldr	r3, [pc, #212]	@ (8005aa4 <_HandleIncomingPacket+0xdc>)
 80059d0:	7e1b      	ldrb	r3, [r3, #24]
 80059d2:	4618      	mov	r0, r3
 80059d4:	1cfb      	adds	r3, r7, #3
 80059d6:	2201      	movs	r2, #1
 80059d8:	4619      	mov	r1, r3
 80059da:	f7ff fdab 	bl	8005534 <SEGGER_RTT_ReadNoLock>
 80059de:	4603      	mov	r3, r0
 80059e0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd59      	ble.n	8005a9c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	2b80      	cmp	r3, #128	@ 0x80
 80059ec:	d032      	beq.n	8005a54 <_HandleIncomingPacket+0x8c>
 80059ee:	2b80      	cmp	r3, #128	@ 0x80
 80059f0:	dc42      	bgt.n	8005a78 <_HandleIncomingPacket+0xb0>
 80059f2:	2b07      	cmp	r3, #7
 80059f4:	dc16      	bgt.n	8005a24 <_HandleIncomingPacket+0x5c>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	dd3e      	ble.n	8005a78 <_HandleIncomingPacket+0xb0>
 80059fa:	3b01      	subs	r3, #1
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d83b      	bhi.n	8005a78 <_HandleIncomingPacket+0xb0>
 8005a00:	a201      	add	r2, pc, #4	@ (adr r2, 8005a08 <_HandleIncomingPacket+0x40>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a2b 	.word	0x08005a2b
 8005a0c:	08005a31 	.word	0x08005a31
 8005a10:	08005a37 	.word	0x08005a37
 8005a14:	08005a3d 	.word	0x08005a3d
 8005a18:	08005a43 	.word	0x08005a43
 8005a1c:	08005a49 	.word	0x08005a49
 8005a20:	08005a4f 	.word	0x08005a4f
 8005a24:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a26:	d034      	beq.n	8005a92 <_HandleIncomingPacket+0xca>
 8005a28:	e026      	b.n	8005a78 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005a2a:	f000 ff43 	bl	80068b4 <SEGGER_SYSVIEW_Start>
      break;
 8005a2e:	e035      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005a30:	f000 fffc 	bl	8006a2c <SEGGER_SYSVIEW_Stop>
      break;
 8005a34:	e032      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005a36:	f001 f9d5 	bl	8006de4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005a3a:	e02f      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005a3c:	f001 f99a 	bl	8006d74 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005a40:	e02c      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005a42:	f001 f819 	bl	8006a78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005a46:	e029      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005a48:	f001 fc68 	bl	800731c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005a4c:	e026      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005a4e:	f001 fc47 	bl	80072e0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005a52:	e023      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a54:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <_HandleIncomingPacket+0xdc>)
 8005a56:	7e1b      	ldrb	r3, [r3, #24]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	1cfb      	adds	r3, r7, #3
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f7ff fd68 	bl	8005534 <SEGGER_RTT_ReadNoLock>
 8005a64:	4603      	mov	r3, r0
 8005a66:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dd13      	ble.n	8005a96 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 fbb5 	bl	80071e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005a76:	e00e      	b.n	8005a96 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	b25b      	sxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da0c      	bge.n	8005a9a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a80:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <_HandleIncomingPacket+0xdc>)
 8005a82:	7e1b      	ldrb	r3, [r3, #24]
 8005a84:	4618      	mov	r0, r3
 8005a86:	1cfb      	adds	r3, r7, #3
 8005a88:	2201      	movs	r2, #1
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f7ff fd52 	bl	8005534 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005a90:	e003      	b.n	8005a9a <_HandleIncomingPacket+0xd2>
      break;
 8005a92:	bf00      	nop
 8005a94:	e002      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
      break;
 8005a96:	bf00      	nop
 8005a98:	e000      	b.n	8005a9c <_HandleIncomingPacket+0xd4>
      break;
 8005a9a:	bf00      	nop
    }
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20014398 	.word	0x20014398

08005aa8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08c      	sub	sp, #48	@ 0x30
 8005aac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005aae:	2301      	movs	r3, #1
 8005ab0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005abc:	4b32      	ldr	r3, [pc, #200]	@ (8005b88 <_TrySendOverflowPacket+0xe0>)
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ac2:	e00b      	b.n	8005adc <_TrySendOverflowPacket+0x34>
 8005ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aca:	1c59      	adds	r1, r3, #1
 8005acc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005ace:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	09db      	lsrs	r3, r3, #7
 8005ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ae0:	d8f0      	bhi.n	8005ac4 <_TrySendOverflowPacket+0x1c>
 8005ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005af2:	4b26      	ldr	r3, [pc, #152]	@ (8005b8c <_TrySendOverflowPacket+0xe4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005af8:	4b23      	ldr	r3, [pc, #140]	@ (8005b88 <_TrySendOverflowPacket+0xe0>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	623b      	str	r3, [r7, #32]
 8005b0a:	e00b      	b.n	8005b24 <_TrySendOverflowPacket+0x7c>
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	09db      	lsrs	r3, r3, #7
 8005b22:	623b      	str	r3, [r7, #32]
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b28:	d8f0      	bhi.n	8005b0c <_TrySendOverflowPacket+0x64>
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b30:	6a3a      	ldr	r2, [r7, #32]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005b3a:	4b13      	ldr	r3, [pc, #76]	@ (8005b88 <_TrySendOverflowPacket+0xe0>)
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f7fa fb40 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b50:	4603      	mov	r3, r0
 8005b52:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005b54:	f7ff fabe 	bl	80050d4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b88 <_TrySendOverflowPacket+0xe0>)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005b64:	4b08      	ldr	r3, [pc, #32]	@ (8005b88 <_TrySendOverflowPacket+0xe0>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <_TrySendOverflowPacket+0xe0>)
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	e004      	b.n	8005b7c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005b72:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <_TrySendOverflowPacket+0xe0>)
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	3301      	adds	r3, #1
 8005b78:	4a03      	ldr	r2, [pc, #12]	@ (8005b88 <_TrySendOverflowPacket+0xe0>)
 8005b7a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005b7c:	693b      	ldr	r3, [r7, #16]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3730      	adds	r7, #48	@ 0x30
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20014398 	.word	0x20014398
 8005b8c:	e0001004 	.word	0xe0001004

08005b90 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	@ 0x28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005b9c:	4b6d      	ldr	r3, [pc, #436]	@ (8005d54 <_SendPacket+0x1c4>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d010      	beq.n	8005bc6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005ba4:	4b6b      	ldr	r3, [pc, #428]	@ (8005d54 <_SendPacket+0x1c4>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80a5 	beq.w	8005cf8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005bae:	4b69      	ldr	r3, [pc, #420]	@ (8005d54 <_SendPacket+0x1c4>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d109      	bne.n	8005bca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005bb6:	f7ff ff77 	bl	8005aa8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005bba:	4b66      	ldr	r3, [pc, #408]	@ (8005d54 <_SendPacket+0x1c4>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	f040 809c 	bne.w	8005cfc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005bc4:	e001      	b.n	8005bca <_SendPacket+0x3a>
    goto Send;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <_SendPacket+0x3c>
Send:
 8005bca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b1f      	cmp	r3, #31
 8005bd0:	d809      	bhi.n	8005be6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005bd2:	4b60      	ldr	r3, [pc, #384]	@ (8005d54 <_SendPacket+0x1c4>)
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 808d 	bne.w	8005d00 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b17      	cmp	r3, #23
 8005bea:	d807      	bhi.n	8005bfc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	e03d      	b.n	8005c78 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c08:	d912      	bls.n	8005c30 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	09da      	lsrs	r2, r3, #7
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	3a01      	subs	r2, #1
 8005c22:	60fa      	str	r2, [r7, #12]
 8005c24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e006      	b.n	8005c3e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c42:	d912      	bls.n	8005c6a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	09da      	lsrs	r2, r3, #7
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	3a01      	subs	r2, #1
 8005c5c:	60fa      	str	r2, [r7, #12]
 8005c5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	e006      	b.n	8005c78 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c78:	4b37      	ldr	r3, [pc, #220]	@ (8005d58 <_SendPacket+0x1c8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c7e:	4b35      	ldr	r3, [pc, #212]	@ (8005d54 <_SendPacket+0x1c4>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	e00b      	b.n	8005caa <_SendPacket+0x11a>
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	1c59      	adds	r1, r3, #1
 8005c9a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	09db      	lsrs	r3, r3, #7
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cae:	d8f0      	bhi.n	8005c92 <_SendPacket+0x102>
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005cc0:	4b24      	ldr	r3, [pc, #144]	@ (8005d54 <_SendPacket+0x1c4>)
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	f7fa fa7e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005cd8:	f7ff f9fc 	bl	80050d4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d54 <_SendPacket+0x1c4>)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	60d3      	str	r3, [r2, #12]
 8005ce8:	e00b      	b.n	8005d02 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005cea:	4b1a      	ldr	r3, [pc, #104]	@ (8005d54 <_SendPacket+0x1c4>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	4b18      	ldr	r3, [pc, #96]	@ (8005d54 <_SendPacket+0x1c4>)
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e004      	b.n	8005d02 <_SendPacket+0x172>
    goto SendDone;
 8005cf8:	bf00      	nop
 8005cfa:	e002      	b.n	8005d02 <_SendPacket+0x172>
      goto SendDone;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <_SendPacket+0x172>
      goto SendDone;
 8005d00:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005d02:	4b14      	ldr	r3, [pc, #80]	@ (8005d54 <_SendPacket+0x1c4>)
 8005d04:	7e1b      	ldrb	r3, [r3, #24]
 8005d06:	4619      	mov	r1, r3
 8005d08:	4a14      	ldr	r2, [pc, #80]	@ (8005d5c <_SendPacket+0x1cc>)
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	440b      	add	r3, r1
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	336c      	adds	r3, #108	@ 0x6c
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <_SendPacket+0x1c4>)
 8005d1a:	7e1b      	ldrb	r3, [r3, #24]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	490f      	ldr	r1, [pc, #60]	@ (8005d5c <_SendPacket+0x1cc>)
 8005d20:	4603      	mov	r3, r0
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	4403      	add	r3, r0
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	440b      	add	r3, r1
 8005d2a:	3370      	adds	r3, #112	@ 0x70
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d00b      	beq.n	8005d4a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005d32:	4b08      	ldr	r3, [pc, #32]	@ (8005d54 <_SendPacket+0x1c4>)
 8005d34:	789b      	ldrb	r3, [r3, #2]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d107      	bne.n	8005d4a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005d3a:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <_SendPacket+0x1c4>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005d40:	f7ff fe42 	bl	80059c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005d44:	4b03      	ldr	r3, [pc, #12]	@ (8005d54 <_SendPacket+0x1c4>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005d4a:	bf00      	nop
 8005d4c:	3728      	adds	r7, #40	@ 0x28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20014398 	.word	0x20014398
 8005d58:	e0001004 	.word	0xe0001004
 8005d5c:	20012ed8 	.word	0x20012ed8

08005d60 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	@ 0x28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	3301      	adds	r3, #1
 8005d76:	2b80      	cmp	r3, #128	@ 0x80
 8005d78:	d80a      	bhi.n	8005d90 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6051      	str	r1, [r2, #4]
 8005d84:	78fa      	ldrb	r2, [r7, #3]
 8005d86:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b80      	cmp	r3, #128	@ 0x80
 8005d96:	d15a      	bne.n	8005e4e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	623b      	str	r3, [r7, #32]
 8005db8:	e00b      	b.n	8005dd2 <_StoreChar+0x72>
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	1c59      	adds	r1, r3, #1
 8005dc2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005dc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	09db      	lsrs	r3, r3, #7
 8005dd0:	623b      	str	r3, [r7, #32]
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dd6:	d8f0      	bhi.n	8005dba <_StoreChar+0x5a>
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dde:	6a3a      	ldr	r2, [r7, #32]
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e00b      	b.n	8005e0a <_StoreChar+0xaa>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	1c59      	adds	r1, r3, #1
 8005dfa:	61f9      	str	r1, [r7, #28]
 8005dfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	09db      	lsrs	r3, r3, #7
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e0e:	d8f0      	bhi.n	8005df2 <_StoreChar+0x92>
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	221a      	movs	r2, #26
 8005e26:	6939      	ldr	r1, [r7, #16]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff feb1 	bl	8005b90 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fdbb 	bl	80059ae <_PreparePacket>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	611a      	str	r2, [r3, #16]
  }
}
 8005e4e:	bf00      	nop
 8005e50:	3728      	adds	r7, #40	@ 0x28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	@ 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005e72:	e007      	b.n	8005e84 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005e74:	6a3a      	ldr	r2, [r7, #32]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	623b      	str	r3, [r7, #32]
    Width++;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3301      	adds	r3, #1
 8005e82:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d2f3      	bcs.n	8005e74 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d901      	bls.n	8005e98 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d000      	beq.n	8005ea4 <_PrintUnsigned+0x4c>
 8005ea2:	e01f      	b.n	8005ee4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01c      	beq.n	8005ee4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <_PrintUnsigned+0x68>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <_PrintUnsigned+0x68>
        c = '0';
 8005eba:	2330      	movs	r3, #48	@ 0x30
 8005ebc:	76fb      	strb	r3, [r7, #27]
 8005ebe:	e001      	b.n	8005ec4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005ec0:	2320      	movs	r3, #32
 8005ec2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ec4:	e007      	b.n	8005ed6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005ecc:	7efb      	ldrb	r3, [r7, #27]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ff45 	bl	8005d60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <_PrintUnsigned+0x8c>
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d3f0      	bcc.n	8005ec6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d903      	bls.n	8005ef2 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	e009      	b.n	8005f06 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d200      	bcs.n	8005f06 <_PrintUnsigned+0xae>
        break;
 8005f04:	e005      	b.n	8005f12 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	fb02 f303 	mul.w	r3, r2, r3
 8005f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005f10:	e7e8      	b.n	8005ee4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f20:	fb02 f303 	mul.w	r3, r2, r3
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005f2a:	4a15      	ldr	r2, [pc, #84]	@ (8005f80 <_PrintUnsigned+0x128>)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff ff13 	bl	8005d60 <_StoreChar>
    Digit /= Base;
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e3      	bne.n	8005f12 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d011      	beq.n	8005f78 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f5a:	e006      	b.n	8005f6a <_PrintUnsigned+0x112>
        FieldWidth--;
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005f62:	2120      	movs	r1, #32
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff fefb 	bl	8005d60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <_PrintUnsigned+0x120>
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3f1      	bcc.n	8005f5c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005f78:	bf00      	nop
 8005f7a:	3728      	adds	r7, #40	@ 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	08007700 	.word	0x08007700

08005f84 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bfb8      	it	lt
 8005f98:	425b      	neglt	r3, r3
 8005f9a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005fa0:	e007      	b.n	8005fb2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005faa:	613b      	str	r3, [r7, #16]
    Width++;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	daf3      	bge.n	8005fa2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d901      	bls.n	8005fc6 <_PrintInt+0x42>
    Width = NumDigits;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <_PrintInt+0x5e>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	db04      	blt.n	8005fdc <_PrintInt+0x58>
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <_PrintInt+0x5e>
    FieldWidth--;
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <_PrintInt+0x6e>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <_PrintInt+0x9c>
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d111      	bne.n	8006020 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006002:	e006      	b.n	8006012 <_PrintInt+0x8e>
        FieldWidth--;
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	3b01      	subs	r3, #1
 8006008:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800600a:	2120      	movs	r1, #32
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff fea7 	bl	8005d60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <_PrintInt+0x9c>
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	429a      	cmp	r2, r3
 800601e:	d3f1      	bcc.n	8006004 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	da07      	bge.n	8006036 <_PrintInt+0xb2>
    v = -v;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	425b      	negs	r3, r3
 800602a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800602c:	212d      	movs	r1, #45	@ 0x2d
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff fe96 	bl	8005d60 <_StoreChar>
 8006034:	e008      	b.n	8006048 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006040:	212b      	movs	r1, #43	@ 0x2b
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff fe8c 	bl	8005d60 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d019      	beq.n	8006086 <_PrintInt+0x102>
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d114      	bne.n	8006086 <_PrintInt+0x102>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d111      	bne.n	8006086 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006068:	e006      	b.n	8006078 <_PrintInt+0xf4>
        FieldWidth--;
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	3b01      	subs	r3, #1
 800606e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006070:	2130      	movs	r1, #48	@ 0x30
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fe74 	bl	8005d60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <_PrintInt+0x102>
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	429a      	cmp	r2, r3
 8006084:	d3f1      	bcc.n	800606a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff fedf 	bl	8005e58 <_PrintUnsigned>
}
 800609a:	bf00      	nop
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b098      	sub	sp, #96	@ 0x60
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060b0:	f3ef 8311 	mrs	r3, BASEPRI
 80060b4:	f04f 0120 	mov.w	r1, #32
 80060b8:	f381 8811 	msr	BASEPRI, r1
 80060bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80060be:	48b7      	ldr	r0, [pc, #732]	@ (800639c <_VPrintTarget+0x2f8>)
 80060c0:	f7ff fc75 	bl	80059ae <_PreparePacket>
 80060c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80060c6:	4bb5      	ldr	r3, [pc, #724]	@ (800639c <_VPrintTarget+0x2f8>)
 80060c8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80060ca:	2300      	movs	r3, #0
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80060ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	3301      	adds	r3, #1
 80060d6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80060ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 8183 	beq.w	80063fa <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80060f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060f8:	2b25      	cmp	r3, #37	@ 0x25
 80060fa:	f040 8170 	bne.w	80063de <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80060fe:	2300      	movs	r3, #0
 8006100:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006102:	2301      	movs	r3, #1
 8006104:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800610e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006112:	3b23      	subs	r3, #35	@ 0x23
 8006114:	2b0d      	cmp	r3, #13
 8006116:	d83f      	bhi.n	8006198 <_VPrintTarget+0xf4>
 8006118:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <_VPrintTarget+0x7c>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006189 	.word	0x08006189
 8006124:	08006199 	.word	0x08006199
 8006128:	08006199 	.word	0x08006199
 800612c:	08006199 	.word	0x08006199
 8006130:	08006199 	.word	0x08006199
 8006134:	08006199 	.word	0x08006199
 8006138:	08006199 	.word	0x08006199
 800613c:	08006199 	.word	0x08006199
 8006140:	08006179 	.word	0x08006179
 8006144:	08006199 	.word	0x08006199
 8006148:	08006159 	.word	0x08006159
 800614c:	08006199 	.word	0x08006199
 8006150:	08006199 	.word	0x08006199
 8006154:	08006169 	.word	0x08006169
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e01a      	b.n	800619e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800616a:	f043 0302 	orr.w	r3, r3, #2
 800616e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e012      	b.n	800619e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800617a:	f043 0304 	orr.w	r3, r3, #4
 800617e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e00a      	b.n	800619e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618a:	f043 0308 	orr.w	r3, r3, #8
 800618e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	e002      	b.n	800619e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006198:	2300      	movs	r3, #0
 800619a:	653b      	str	r3, [r7, #80]	@ 0x50
 800619c:	bf00      	nop
        }
      } while (v);
 800619e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1b0      	bne.n	8006106 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80061a4:	2300      	movs	r3, #0
 80061a6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80061b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80061b6:	d912      	bls.n	80061de <_VPrintTarget+0x13a>
 80061b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061bc:	2b39      	cmp	r3, #57	@ 0x39
 80061be:	d80e      	bhi.n	80061de <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80061c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	461a      	mov	r2, r3
 80061d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061d6:	4413      	add	r3, r2
 80061d8:	3b30      	subs	r3, #48	@ 0x30
 80061da:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80061dc:	e7e4      	b.n	80061a8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80061de:	2300      	movs	r3, #0
 80061e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80061ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80061f0:	d11d      	bne.n	800622e <_VPrintTarget+0x18a>
        sFormat++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3301      	adds	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006200:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006204:	2b2f      	cmp	r3, #47	@ 0x2f
 8006206:	d912      	bls.n	800622e <_VPrintTarget+0x18a>
 8006208:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800620c:	2b39      	cmp	r3, #57	@ 0x39
 800620e:	d80e      	bhi.n	800622e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	461a      	mov	r2, r3
 8006222:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006226:	4413      	add	r3, r2
 8006228:	3b30      	subs	r3, #48	@ 0x30
 800622a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800622c:	e7e4      	b.n	80061f8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006236:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800623a:	2b6c      	cmp	r3, #108	@ 0x6c
 800623c:	d003      	beq.n	8006246 <_VPrintTarget+0x1a2>
 800623e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006242:	2b68      	cmp	r3, #104	@ 0x68
 8006244:	d107      	bne.n	8006256 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006254:	e7ef      	b.n	8006236 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006256:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800625a:	2b25      	cmp	r3, #37	@ 0x25
 800625c:	f000 80b3 	beq.w	80063c6 <_VPrintTarget+0x322>
 8006260:	2b25      	cmp	r3, #37	@ 0x25
 8006262:	f2c0 80b7 	blt.w	80063d4 <_VPrintTarget+0x330>
 8006266:	2b78      	cmp	r3, #120	@ 0x78
 8006268:	f300 80b4 	bgt.w	80063d4 <_VPrintTarget+0x330>
 800626c:	2b58      	cmp	r3, #88	@ 0x58
 800626e:	f2c0 80b1 	blt.w	80063d4 <_VPrintTarget+0x330>
 8006272:	3b58      	subs	r3, #88	@ 0x58
 8006274:	2b20      	cmp	r3, #32
 8006276:	f200 80ad 	bhi.w	80063d4 <_VPrintTarget+0x330>
 800627a:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <_VPrintTarget+0x1dc>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006377 	.word	0x08006377
 8006284:	080063d5 	.word	0x080063d5
 8006288:	080063d5 	.word	0x080063d5
 800628c:	080063d5 	.word	0x080063d5
 8006290:	080063d5 	.word	0x080063d5
 8006294:	080063d5 	.word	0x080063d5
 8006298:	080063d5 	.word	0x080063d5
 800629c:	080063d5 	.word	0x080063d5
 80062a0:	080063d5 	.word	0x080063d5
 80062a4:	080063d5 	.word	0x080063d5
 80062a8:	080063d5 	.word	0x080063d5
 80062ac:	08006305 	.word	0x08006305
 80062b0:	0800632b 	.word	0x0800632b
 80062b4:	080063d5 	.word	0x080063d5
 80062b8:	080063d5 	.word	0x080063d5
 80062bc:	080063d5 	.word	0x080063d5
 80062c0:	080063d5 	.word	0x080063d5
 80062c4:	080063d5 	.word	0x080063d5
 80062c8:	080063d5 	.word	0x080063d5
 80062cc:	080063d5 	.word	0x080063d5
 80062d0:	080063d5 	.word	0x080063d5
 80062d4:	080063d5 	.word	0x080063d5
 80062d8:	080063d5 	.word	0x080063d5
 80062dc:	080063d5 	.word	0x080063d5
 80062e0:	080063a1 	.word	0x080063a1
 80062e4:	080063d5 	.word	0x080063d5
 80062e8:	080063d5 	.word	0x080063d5
 80062ec:	080063d5 	.word	0x080063d5
 80062f0:	080063d5 	.word	0x080063d5
 80062f4:	08006351 	.word	0x08006351
 80062f8:	080063d5 	.word	0x080063d5
 80062fc:	080063d5 	.word	0x080063d5
 8006300:	08006377 	.word	0x08006377
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	1d19      	adds	r1, r3, #4
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6011      	str	r1, [r2, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006318:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	4611      	mov	r1, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fd1c 	bl	8005d60 <_StoreChar>
        break;
 8006328:	e055      	b.n	80063d6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	1d19      	adds	r1, r3, #4
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6011      	str	r1, [r2, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006338:	f107 0014 	add.w	r0, r7, #20
 800633c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006346:	220a      	movs	r2, #10
 8006348:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800634a:	f7ff fe1b 	bl	8005f84 <_PrintInt>
        break;
 800634e:	e042      	b.n	80063d6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	1d19      	adds	r1, r3, #4
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6011      	str	r1, [r2, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800635e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006360:	f107 0014 	add.w	r0, r7, #20
 8006364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800636e:	220a      	movs	r2, #10
 8006370:	f7ff fd72 	bl	8005e58 <_PrintUnsigned>
        break;
 8006374:	e02f      	b.n	80063d6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1d19      	adds	r1, r3, #4
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6011      	str	r1, [r2, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006384:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006386:	f107 0014 	add.w	r0, r7, #20
 800638a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006394:	2210      	movs	r2, #16
 8006396:	f7ff fd5f 	bl	8005e58 <_PrintUnsigned>
        break;
 800639a:	e01c      	b.n	80063d6 <_VPrintTarget+0x332>
 800639c:	200143c8 	.word	0x200143c8
      case 'p':
        v = va_arg(*pParamList, int);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6011      	str	r1, [r2, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80063ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063b0:	f107 0014 	add.w	r0, r7, #20
 80063b4:	2300      	movs	r3, #0
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	2308      	movs	r3, #8
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2308      	movs	r3, #8
 80063be:	2210      	movs	r2, #16
 80063c0:	f7ff fd4a 	bl	8005e58 <_PrintUnsigned>
        break;
 80063c4:	e007      	b.n	80063d6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80063c6:	f107 0314 	add.w	r3, r7, #20
 80063ca:	2125      	movs	r1, #37	@ 0x25
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fcc7 	bl	8005d60 <_StoreChar>
        break;
 80063d2:	e000      	b.n	80063d6 <_VPrintTarget+0x332>
      default:
        break;
 80063d4:	bf00      	nop
      }
      sFormat++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	e007      	b.n	80063ee <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80063de:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80063e2:	f107 0314 	add.w	r3, r7, #20
 80063e6:	4611      	mov	r1, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fcb9 	bl	8005d60 <_StoreChar>
    }
  } while (*sFormat);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f47f ae72 	bne.w	80060dc <_VPrintTarget+0x38>
 80063f8:	e000      	b.n	80063fc <_VPrintTarget+0x358>
      break;
 80063fa:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d041      	beq.n	8006486 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	643b      	str	r3, [r7, #64]	@ 0x40
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006412:	e00b      	b.n	800642c <_VPrintTarget+0x388>
 8006414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006416:	b2da      	uxtb	r2, r3
 8006418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	6439      	str	r1, [r7, #64]	@ 0x40
 800641e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800642c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800642e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006430:	d8f0      	bhi.n	8006414 <_VPrintTarget+0x370>
 8006432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	643a      	str	r2, [r7, #64]	@ 0x40
 8006438:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006440:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	@ 0x34
 800644a:	e00b      	b.n	8006464 <_VPrintTarget+0x3c0>
 800644c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644e:	b2da      	uxtb	r2, r3
 8006450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006452:	1c59      	adds	r1, r3, #1
 8006454:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006456:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006460:	09db      	lsrs	r3, r3, #7
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
 8006464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006466:	2b7f      	cmp	r3, #127	@ 0x7f
 8006468:	d8f0      	bhi.n	800644c <_VPrintTarget+0x3a8>
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006470:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006478:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	221a      	movs	r2, #26
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fb85 	bl	8005b90 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800648c:	bf00      	nop
 800648e:	3758      	adds	r7, #88	@ 0x58
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064a2:	2300      	movs	r3, #0
 80064a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80064a8:	4917      	ldr	r1, [pc, #92]	@ (8006508 <SEGGER_SYSVIEW_Init+0x74>)
 80064aa:	4818      	ldr	r0, [pc, #96]	@ (800650c <SEGGER_SYSVIEW_Init+0x78>)
 80064ac:	f7ff f93e 	bl	800572c <SEGGER_RTT_AllocUpBuffer>
 80064b0:	4603      	mov	r3, r0
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	4b16      	ldr	r3, [pc, #88]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064b6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80064b8:	4b15      	ldr	r3, [pc, #84]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064ba:	785a      	ldrb	r2, [r3, #1]
 80064bc:	4b14      	ldr	r3, [pc, #80]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064be:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064c0:	4b13      	ldr	r3, [pc, #76]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064c2:	7e1b      	ldrb	r3, [r3, #24]
 80064c4:	4618      	mov	r0, r3
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	2308      	movs	r3, #8
 80064cc:	4a11      	ldr	r2, [pc, #68]	@ (8006514 <SEGGER_SYSVIEW_Init+0x80>)
 80064ce:	490f      	ldr	r1, [pc, #60]	@ (800650c <SEGGER_SYSVIEW_Init+0x78>)
 80064d0:	f7ff f9b0 	bl	8005834 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80064d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064da:	4b0f      	ldr	r3, [pc, #60]	@ (8006518 <SEGGER_SYSVIEW_Init+0x84>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a0c      	ldr	r2, [pc, #48]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064e0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80064e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80064e8:	4a09      	ldr	r2, [pc, #36]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80064ee:	4a08      	ldr	r2, [pc, #32]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80064f4:	4a06      	ldr	r2, [pc, #24]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80064fa:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <SEGGER_SYSVIEW_Init+0x7c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	20013390 	.word	0x20013390
 800650c:	080076c8 	.word	0x080076c8
 8006510:	20014398 	.word	0x20014398
 8006514:	20014390 	.word	0x20014390
 8006518:	e0001004 	.word	0xe0001004

0800651c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006524:	4a04      	ldr	r2, [pc, #16]	@ (8006538 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6113      	str	r3, [r2, #16]
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20014398 	.word	0x20014398

0800653c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006544:	f3ef 8311 	mrs	r3, BASEPRI
 8006548:	f04f 0120 	mov.w	r1, #32
 800654c:	f381 8811 	msr	BASEPRI, r1
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	4808      	ldr	r0, [pc, #32]	@ (8006574 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006554:	f7ff fa2b 	bl	80059ae <_PreparePacket>
 8006558:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68b8      	ldr	r0, [r7, #8]
 8006560:	f7ff fb16 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f383 8811 	msr	BASEPRI, r3
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200143c8 	.word	0x200143c8

08006578 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006582:	f3ef 8311 	mrs	r3, BASEPRI
 8006586:	f04f 0120 	mov.w	r1, #32
 800658a:	f381 8811 	msr	BASEPRI, r1
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	4816      	ldr	r0, [pc, #88]	@ (80065ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006592:	f7ff fa0c 	bl	80059ae <_PreparePacket>
 8006596:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	e00b      	b.n	80065be <SEGGER_SYSVIEW_RecordU32+0x46>
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	61f9      	str	r1, [r7, #28]
 80065b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	09db      	lsrs	r3, r3, #7
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065c2:	d8f0      	bhi.n	80065a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	61fa      	str	r2, [r7, #28]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6938      	ldr	r0, [r7, #16]
 80065da:	f7ff fad9 	bl	8005b90 <_SendPacket>
  RECORD_END();
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f383 8811 	msr	BASEPRI, r3
}
 80065e4:	bf00      	nop
 80065e6:	3720      	adds	r7, #32
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	200143c8 	.word	0x200143c8

080065f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08c      	sub	sp, #48	@ 0x30
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80065fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006600:	f04f 0120 	mov.w	r1, #32
 8006604:	f381 8811 	msr	BASEPRI, r1
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	4825      	ldr	r0, [pc, #148]	@ (80066a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800660c:	f7ff f9cf 	bl	80059ae <_PreparePacket>
 8006610:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800661e:	e00b      	b.n	8006638 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	b2da      	uxtb	r2, r3
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800662a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006634:	09db      	lsrs	r3, r3, #7
 8006636:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	2b7f      	cmp	r3, #127	@ 0x7f
 800663c:	d8f0      	bhi.n	8006620 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800663e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	623b      	str	r3, [r7, #32]
 8006656:	e00b      	b.n	8006670 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	b2da      	uxtb	r2, r3
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	6279      	str	r1, [r7, #36]	@ 0x24
 8006662:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	09db      	lsrs	r3, r3, #7
 800666e:	623b      	str	r3, [r7, #32]
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	2b7f      	cmp	r3, #127	@ 0x7f
 8006674:	d8f0      	bhi.n	8006658 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	627a      	str	r2, [r7, #36]	@ 0x24
 800667c:	6a3a      	ldr	r2, [r7, #32]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	6979      	ldr	r1, [r7, #20]
 800668a:	69b8      	ldr	r0, [r7, #24]
 800668c:	f7ff fa80 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f383 8811 	msr	BASEPRI, r3
}
 8006696:	bf00      	nop
 8006698:	3730      	adds	r7, #48	@ 0x30
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200143c8 	.word	0x200143c8

080066a4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08e      	sub	sp, #56	@ 0x38
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80066b2:	f3ef 8311 	mrs	r3, BASEPRI
 80066b6:	f04f 0120 	mov.w	r1, #32
 80066ba:	f381 8811 	msr	BASEPRI, r1
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	4832      	ldr	r0, [pc, #200]	@ (800678c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80066c2:	f7ff f974 	bl	80059ae <_PreparePacket>
 80066c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066d4:	e00b      	b.n	80066ee <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066dc:	1c59      	adds	r1, r3, #1
 80066de:	6379      	str	r1, [r7, #52]	@ 0x34
 80066e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	09db      	lsrs	r3, r3, #7
 80066ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80066f2:	d8f0      	bhi.n	80066d6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80066f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80066fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006702:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800670c:	e00b      	b.n	8006726 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	b2da      	uxtb	r2, r3
 8006712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006714:	1c59      	adds	r1, r3, #1
 8006716:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006718:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	09db      	lsrs	r3, r3, #7
 8006724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006728:	2b7f      	cmp	r3, #127	@ 0x7f
 800672a:	d8f0      	bhi.n	800670e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800672c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006732:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	623b      	str	r3, [r7, #32]
 8006744:	e00b      	b.n	800675e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	1c59      	adds	r1, r3, #1
 800674e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006750:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	09db      	lsrs	r3, r3, #7
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	2b7f      	cmp	r3, #127	@ 0x7f
 8006762:	d8f0      	bhi.n	8006746 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	627a      	str	r2, [r7, #36]	@ 0x24
 800676a:	6a3a      	ldr	r2, [r7, #32]
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	6979      	ldr	r1, [r7, #20]
 8006778:	69b8      	ldr	r0, [r7, #24]
 800677a:	f7ff fa09 	bl	8005b90 <_SendPacket>
  RECORD_END();
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f383 8811 	msr	BASEPRI, r3
}
 8006784:	bf00      	nop
 8006786:	3738      	adds	r7, #56	@ 0x38
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	200143c8 	.word	0x200143c8

08006790 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b090      	sub	sp, #64	@ 0x40
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800679e:	f3ef 8311 	mrs	r3, BASEPRI
 80067a2:	f04f 0120 	mov.w	r1, #32
 80067a6:	f381 8811 	msr	BASEPRI, r1
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	4840      	ldr	r0, [pc, #256]	@ (80068b0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80067ae:	f7ff f8fe 	bl	80059ae <_PreparePacket>
 80067b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067c0:	e00b      	b.n	80067da <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80067c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c8:	1c59      	adds	r1, r3, #1
 80067ca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80067cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d6:	09db      	lsrs	r3, r3, #7
 80067d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80067de:	d8f0      	bhi.n	80067c2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80067e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067f8:	e00b      	b.n	8006812 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006800:	1c59      	adds	r1, r3, #1
 8006802:	6379      	str	r1, [r7, #52]	@ 0x34
 8006804:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	09db      	lsrs	r3, r3, #7
 8006810:	633b      	str	r3, [r7, #48]	@ 0x30
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	2b7f      	cmp	r3, #127	@ 0x7f
 8006816:	d8f0      	bhi.n	80067fa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	637a      	str	r2, [r7, #52]	@ 0x34
 800681e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006826:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006830:	e00b      	b.n	800684a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	b2da      	uxtb	r2, r3
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	1c59      	adds	r1, r3, #1
 800683a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800683c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	09db      	lsrs	r3, r3, #7
 8006848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800684a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684c:	2b7f      	cmp	r3, #127	@ 0x7f
 800684e:	d8f0      	bhi.n	8006832 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
 8006864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006866:	623b      	str	r3, [r7, #32]
 8006868:	e00b      	b.n	8006882 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	1c59      	adds	r1, r3, #1
 8006872:	6279      	str	r1, [r7, #36]	@ 0x24
 8006874:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	09db      	lsrs	r3, r3, #7
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	2b7f      	cmp	r3, #127	@ 0x7f
 8006886:	d8f0      	bhi.n	800686a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	627a      	str	r2, [r7, #36]	@ 0x24
 800688e:	6a3a      	ldr	r2, [r7, #32]
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	6979      	ldr	r1, [r7, #20]
 800689c:	69b8      	ldr	r0, [r7, #24]
 800689e:	f7ff f977 	bl	8005b90 <_SendPacket>
  RECORD_END();
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f383 8811 	msr	BASEPRI, r3
}
 80068a8:	bf00      	nop
 80068aa:	3740      	adds	r7, #64	@ 0x40
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	200143c8 	.word	0x200143c8

080068b4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	@ 0x30
 80068b8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80068ba:	4b59      	ldr	r3, [pc, #356]	@ (8006a20 <SEGGER_SYSVIEW_Start+0x16c>)
 80068bc:	2201      	movs	r2, #1
 80068be:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80068c0:	f3ef 8311 	mrs	r3, BASEPRI
 80068c4:	f04f 0120 	mov.w	r1, #32
 80068c8:	f381 8811 	msr	BASEPRI, r1
 80068cc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80068ce:	4b54      	ldr	r3, [pc, #336]	@ (8006a20 <SEGGER_SYSVIEW_Start+0x16c>)
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	220a      	movs	r2, #10
 80068d4:	4953      	ldr	r1, [pc, #332]	@ (8006a24 <SEGGER_SYSVIEW_Start+0x170>)
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7f9 fc7a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80068e2:	f7fe fbf7 	bl	80050d4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80068e6:	200a      	movs	r0, #10
 80068e8:	f7ff fe28 	bl	800653c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ec:	f3ef 8311 	mrs	r3, BASEPRI
 80068f0:	f04f 0120 	mov.w	r1, #32
 80068f4:	f381 8811 	msr	BASEPRI, r1
 80068f8:	60bb      	str	r3, [r7, #8]
 80068fa:	484b      	ldr	r0, [pc, #300]	@ (8006a28 <SEGGER_SYSVIEW_Start+0x174>)
 80068fc:	f7ff f857 	bl	80059ae <_PreparePacket>
 8006900:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800690a:	4b45      	ldr	r3, [pc, #276]	@ (8006a20 <SEGGER_SYSVIEW_Start+0x16c>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006910:	e00b      	b.n	800692a <SEGGER_SYSVIEW_Start+0x76>
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	b2da      	uxtb	r2, r3
 8006916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006918:	1c59      	adds	r1, r3, #1
 800691a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800691c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006926:	09db      	lsrs	r3, r3, #7
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	2b7f      	cmp	r3, #127	@ 0x7f
 800692e:	d8f0      	bhi.n	8006912 <SEGGER_SYSVIEW_Start+0x5e>
 8006930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
 8006944:	4b36      	ldr	r3, [pc, #216]	@ (8006a20 <SEGGER_SYSVIEW_Start+0x16c>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	623b      	str	r3, [r7, #32]
 800694a:	e00b      	b.n	8006964 <SEGGER_SYSVIEW_Start+0xb0>
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	1c59      	adds	r1, r3, #1
 8006954:	6279      	str	r1, [r7, #36]	@ 0x24
 8006956:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	09db      	lsrs	r3, r3, #7
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	2b7f      	cmp	r3, #127	@ 0x7f
 8006968:	d8f0      	bhi.n	800694c <SEGGER_SYSVIEW_Start+0x98>
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	4b28      	ldr	r3, [pc, #160]	@ (8006a20 <SEGGER_SYSVIEW_Start+0x16c>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e00b      	b.n	800699e <SEGGER_SYSVIEW_Start+0xea>
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	1c59      	adds	r1, r3, #1
 800698e:	61f9      	str	r1, [r7, #28]
 8006990:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	09db      	lsrs	r3, r3, #7
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a2:	d8f0      	bhi.n	8006986 <SEGGER_SYSVIEW_Start+0xd2>
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	61fa      	str	r2, [r7, #28]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	e00b      	b.n	80069d6 <SEGGER_SYSVIEW_Start+0x122>
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	1c59      	adds	r1, r3, #1
 80069c6:	6179      	str	r1, [r7, #20]
 80069c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	09db      	lsrs	r3, r3, #7
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80069da:	d8f0      	bhi.n	80069be <SEGGER_SYSVIEW_Start+0x10a>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	617a      	str	r2, [r7, #20]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80069ec:	2218      	movs	r2, #24
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f8cd 	bl	8005b90 <_SendPacket>
      RECORD_END();
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069fc:	4b08      	ldr	r3, [pc, #32]	@ (8006a20 <SEGGER_SYSVIEW_Start+0x16c>)
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a04:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a0a:	f000 f9eb 	bl	8006de4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a0e:	f000 f9b1 	bl	8006d74 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006a12:	f000 fc83 	bl	800731c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006a16:	bf00      	nop
 8006a18:	3730      	adds	r7, #48	@ 0x30
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20014398 	.word	0x20014398
 8006a24:	080076f4 	.word	0x080076f4
 8006a28:	200143c8 	.word	0x200143c8

08006a2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a32:	f3ef 8311 	mrs	r3, BASEPRI
 8006a36:	f04f 0120 	mov.w	r1, #32
 8006a3a:	f381 8811 	msr	BASEPRI, r1
 8006a3e:	607b      	str	r3, [r7, #4]
 8006a40:	480b      	ldr	r0, [pc, #44]	@ (8006a70 <SEGGER_SYSVIEW_Stop+0x44>)
 8006a42:	f7fe ffb4 	bl	80059ae <_PreparePacket>
 8006a46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006a48:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006a50:	220b      	movs	r2, #11
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6838      	ldr	r0, [r7, #0]
 8006a56:	f7ff f89b 	bl	8005b90 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006a5a:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f383 8811 	msr	BASEPRI, r3
}
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	200143c8 	.word	0x200143c8
 8006a74:	20014398 	.word	0x20014398

08006a78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08c      	sub	sp, #48	@ 0x30
 8006a7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a82:	f04f 0120 	mov.w	r1, #32
 8006a86:	f381 8811 	msr	BASEPRI, r1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	4845      	ldr	r0, [pc, #276]	@ (8006ba4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006a8e:	f7fe ff8e 	bl	80059ae <_PreparePacket>
 8006a92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a9c:	4b42      	ldr	r3, [pc, #264]	@ (8006ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aa2:	e00b      	b.n	8006abc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006aae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	09db      	lsrs	r3, r3, #7
 8006aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ac0:	d8f0      	bhi.n	8006aa4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad6:	4b34      	ldr	r3, [pc, #208]	@ (8006ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	623b      	str	r3, [r7, #32]
 8006adc:	e00b      	b.n	8006af6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ae8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	09db      	lsrs	r3, r3, #7
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006afa:	d8f0      	bhi.n	8006ade <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b02:	6a3a      	ldr	r2, [r7, #32]
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	4b25      	ldr	r3, [pc, #148]	@ (8006ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e00b      	b.n	8006b30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	1c59      	adds	r1, r3, #1
 8006b20:	61f9      	str	r1, [r7, #28]
 8006b22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	09db      	lsrs	r3, r3, #7
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b34:	d8f0      	bhi.n	8006b18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	61fa      	str	r2, [r7, #28]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	e00b      	b.n	8006b68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	1c59      	adds	r1, r3, #1
 8006b58:	6179      	str	r1, [r7, #20]
 8006b5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	09db      	lsrs	r3, r3, #7
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b6c:	d8f0      	bhi.n	8006b50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	617a      	str	r2, [r7, #20]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b7e:	2218      	movs	r2, #24
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	68b8      	ldr	r0, [r7, #8]
 8006b84:	f7ff f804 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006b96:	4b04      	ldr	r3, [pc, #16]	@ (8006ba8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	4798      	blx	r3
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3730      	adds	r7, #48	@ 0x30
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	200143c8 	.word	0x200143c8
 8006ba8:	20014398 	.word	0x20014398

08006bac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b092      	sub	sp, #72	@ 0x48
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb8:	f04f 0120 	mov.w	r1, #32
 8006bbc:	f381 8811 	msr	BASEPRI, r1
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	486a      	ldr	r0, [pc, #424]	@ (8006d6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006bc4:	f7fe fef3 	bl	80059ae <_PreparePacket>
 8006bc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b66      	ldr	r3, [pc, #408]	@ (8006d70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bde:	e00b      	b.n	8006bf8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006be6:	1c59      	adds	r1, r3, #1
 8006be8:	6479      	str	r1, [r7, #68]	@ 0x44
 8006bea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf4:	09db      	lsrs	r3, r3, #7
 8006bf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bfc:	d8f0      	bhi.n	8006be0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c18:	e00b      	b.n	8006c32 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c20:	1c59      	adds	r1, r3, #1
 8006c22:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006c24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	09db      	lsrs	r3, r3, #7
 8006c30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c36:	d8f0      	bhi.n	8006c1a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c46:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	4619      	mov	r1, r3
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7fe fe5f 	bl	8005914 <_EncodeStr>
 8006c56:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006c58:	2209      	movs	r2, #9
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	6938      	ldr	r0, [r7, #16]
 8006c5e:	f7fe ff97 	bl	8005b90 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4b40      	ldr	r3, [pc, #256]	@ (8006d70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c76:	e00b      	b.n	8006c90 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	6379      	str	r1, [r7, #52]	@ 0x34
 8006c82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	09db      	lsrs	r3, r3, #7
 8006c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c92:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c94:	d8f0      	bhi.n	8006c78 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb0:	e00b      	b.n	8006cca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb8:	1c59      	adds	r1, r3, #1
 8006cba:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006cbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc6:	09db      	lsrs	r3, r3, #7
 8006cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cce:	d8f0      	bhi.n	8006cb2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	623b      	str	r3, [r7, #32]
 8006cea:	e00b      	b.n	8006d04 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	1c59      	adds	r1, r3, #1
 8006cf4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cf6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	09db      	lsrs	r3, r3, #7
 8006d02:	623b      	str	r3, [r7, #32]
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d08:	d8f0      	bhi.n	8006cec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d10:	6a3a      	ldr	r2, [r7, #32]
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e00b      	b.n	8006d3c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	1c59      	adds	r1, r3, #1
 8006d2c:	61f9      	str	r1, [r7, #28]
 8006d2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	09db      	lsrs	r3, r3, #7
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d40:	d8f0      	bhi.n	8006d24 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	61fa      	str	r2, [r7, #28]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006d52:	2215      	movs	r2, #21
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	6938      	ldr	r0, [r7, #16]
 8006d58:	f7fe ff1a 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f383 8811 	msr	BASEPRI, r3
}
 8006d62:	bf00      	nop
 8006d64:	3748      	adds	r7, #72	@ 0x48
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	200143c8 	.word	0x200143c8
 8006d70:	20014398 	.word	0x20014398

08006d74 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006d78:	4b07      	ldr	r3, [pc, #28]	@ (8006d98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006d80:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006d8a:	4b03      	ldr	r3, [pc, #12]	@ (8006d98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4798      	blx	r3
  }
}
 8006d92:	bf00      	nop
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20014398 	.word	0x20014398

08006d9c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006da4:	f3ef 8311 	mrs	r3, BASEPRI
 8006da8:	f04f 0120 	mov.w	r1, #32
 8006dac:	f381 8811 	msr	BASEPRI, r1
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	480b      	ldr	r0, [pc, #44]	@ (8006de0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006db4:	f7fe fdfb 	bl	80059ae <_PreparePacket>
 8006db8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dba:	2280      	movs	r2, #128	@ 0x80
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	6938      	ldr	r0, [r7, #16]
 8006dc0:	f7fe fda8 	bl	8005914 <_EncodeStr>
 8006dc4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006dc6:	220e      	movs	r2, #14
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f7fe fee0 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f383 8811 	msr	BASEPRI, r3
}
 8006dd6:	bf00      	nop
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200143c8 	.word	0x200143c8

08006de4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006dea:	4b15      	ldr	r3, [pc, #84]	@ (8006e40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01a      	beq.n	8006e28 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006df2:	4b13      	ldr	r3, [pc, #76]	@ (8006e40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d015      	beq.n	8006e28 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006dfc:	4b10      	ldr	r3, [pc, #64]	@ (8006e40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4798      	blx	r3
 8006e04:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e08:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	f04f 0300 	mov.w	r3, #0
 8006e16:	000a      	movs	r2, r1
 8006e18:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4621      	mov	r1, r4
 8006e20:	200d      	movs	r0, #13
 8006e22:	f7ff fbe5 	bl	80065f0 <SEGGER_SYSVIEW_RecordU32x2>
 8006e26:	e006      	b.n	8006e36 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e28:	4b06      	ldr	r3, [pc, #24]	@ (8006e44 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	200c      	movs	r0, #12
 8006e30:	f7ff fba2 	bl	8006578 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd90      	pop	{r4, r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20014398 	.word	0x20014398
 8006e44:	e0001004 	.word	0xe0001004

08006e48 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e52:	f04f 0120 	mov.w	r1, #32
 8006e56:	f381 8811 	msr	BASEPRI, r1
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	4819      	ldr	r0, [pc, #100]	@ (8006ec4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006e5e:	f7fe fda6 	bl	80059ae <_PreparePacket>
 8006e62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006e68:	4b17      	ldr	r3, [pc, #92]	@ (8006ec8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e70:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	e00b      	b.n	8006e94 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1c59      	adds	r1, r3, #1
 8006e84:	6179      	str	r1, [r7, #20]
 8006e86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	09db      	lsrs	r3, r3, #7
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e98:	d8f0      	bhi.n	8006e7c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	617a      	str	r2, [r7, #20]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006eaa:	2202      	movs	r2, #2
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	68b8      	ldr	r0, [r7, #8]
 8006eb0:	f7fe fe6e 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f383 8811 	msr	BASEPRI, r3
}
 8006eba:	bf00      	nop
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200143c8 	.word	0x200143c8
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed6:	f04f 0120 	mov.w	r1, #32
 8006eda:	f381 8811 	msr	BASEPRI, r1
 8006ede:	607b      	str	r3, [r7, #4]
 8006ee0:	4807      	ldr	r0, [pc, #28]	@ (8006f00 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ee2:	f7fe fd64 	bl	80059ae <_PreparePacket>
 8006ee6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006ee8:	2203      	movs	r2, #3
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6838      	ldr	r0, [r7, #0]
 8006eee:	f7fe fe4f 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f383 8811 	msr	BASEPRI, r3
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	200143c8 	.word	0x200143c8

08006f04 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0e:	f04f 0120 	mov.w	r1, #32
 8006f12:	f381 8811 	msr	BASEPRI, r1
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	4807      	ldr	r0, [pc, #28]	@ (8006f38 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006f1a:	f7fe fd48 	bl	80059ae <_PreparePacket>
 8006f1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006f20:	2212      	movs	r2, #18
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6838      	ldr	r0, [r7, #0]
 8006f26:	f7fe fe33 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f383 8811 	msr	BASEPRI, r3
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	200143c8 	.word	0x200143c8

08006f3c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f42:	f3ef 8311 	mrs	r3, BASEPRI
 8006f46:	f04f 0120 	mov.w	r1, #32
 8006f4a:	f381 8811 	msr	BASEPRI, r1
 8006f4e:	607b      	str	r3, [r7, #4]
 8006f50:	4807      	ldr	r0, [pc, #28]	@ (8006f70 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006f52:	f7fe fd2c 	bl	80059ae <_PreparePacket>
 8006f56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006f58:	2211      	movs	r2, #17
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6838      	ldr	r0, [r7, #0]
 8006f5e:	f7fe fe17 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f383 8811 	msr	BASEPRI, r3
}
 8006f68:	bf00      	nop
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	200143c8 	.word	0x200143c8

08006f74 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f80:	f04f 0120 	mov.w	r1, #32
 8006f84:	f381 8811 	msr	BASEPRI, r1
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	4819      	ldr	r0, [pc, #100]	@ (8006ff0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006f8c:	f7fe fd0f 	bl	80059ae <_PreparePacket>
 8006f90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f96:	4b17      	ldr	r3, [pc, #92]	@ (8006ff4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	e00b      	b.n	8006fc2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	1c59      	adds	r1, r3, #1
 8006fb2:	61f9      	str	r1, [r7, #28]
 8006fb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	09db      	lsrs	r3, r3, #7
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fc6:	d8f0      	bhi.n	8006faa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	61fa      	str	r2, [r7, #28]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006fd8:	2208      	movs	r2, #8
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	6938      	ldr	r0, [r7, #16]
 8006fde:	f7fe fdd7 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f383 8811 	msr	BASEPRI, r3
}
 8006fe8:	bf00      	nop
 8006fea:	3720      	adds	r7, #32
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	200143c8 	.word	0x200143c8
 8006ff4:	20014398 	.word	0x20014398

08006ff8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007000:	f3ef 8311 	mrs	r3, BASEPRI
 8007004:	f04f 0120 	mov.w	r1, #32
 8007008:	f381 8811 	msr	BASEPRI, r1
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	4819      	ldr	r0, [pc, #100]	@ (8007074 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007010:	f7fe fccd 	bl	80059ae <_PreparePacket>
 8007014:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800701a:	4b17      	ldr	r3, [pc, #92]	@ (8007078 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	e00b      	b.n	8007046 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	1c59      	adds	r1, r3, #1
 8007036:	61f9      	str	r1, [r7, #28]
 8007038:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	09db      	lsrs	r3, r3, #7
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b7f      	cmp	r3, #127	@ 0x7f
 800704a:	d8f0      	bhi.n	800702e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	61fa      	str	r2, [r7, #28]
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800705c:	2204      	movs	r2, #4
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	6938      	ldr	r0, [r7, #16]
 8007062:	f7fe fd95 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f383 8811 	msr	BASEPRI, r3
}
 800706c:	bf00      	nop
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200143c8 	.word	0x200143c8
 8007078:	20014398 	.word	0x20014398

0800707c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007084:	f3ef 8311 	mrs	r3, BASEPRI
 8007088:	f04f 0120 	mov.w	r1, #32
 800708c:	f381 8811 	msr	BASEPRI, r1
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	4819      	ldr	r0, [pc, #100]	@ (80070f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007094:	f7fe fc8b 	bl	80059ae <_PreparePacket>
 8007098:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800709e:	4b17      	ldr	r3, [pc, #92]	@ (80070fc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	e00b      	b.n	80070ca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	1c59      	adds	r1, r3, #1
 80070ba:	61f9      	str	r1, [r7, #28]
 80070bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	09db      	lsrs	r3, r3, #7
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ce:	d8f0      	bhi.n	80070b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	61fa      	str	r2, [r7, #28]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80070e0:	2206      	movs	r2, #6
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	6938      	ldr	r0, [r7, #16]
 80070e6:	f7fe fd53 	bl	8005b90 <_SendPacket>
  RECORD_END();
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f383 8811 	msr	BASEPRI, r3
}
 80070f0:	bf00      	nop
 80070f2:	3720      	adds	r7, #32
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	200143c8 	.word	0x200143c8
 80070fc:	20014398 	.word	0x20014398

08007100 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b08a      	sub	sp, #40	@ 0x28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800710a:	f3ef 8311 	mrs	r3, BASEPRI
 800710e:	f04f 0120 	mov.w	r1, #32
 8007112:	f381 8811 	msr	BASEPRI, r1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	4827      	ldr	r0, [pc, #156]	@ (80071b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800711a:	f7fe fc48 	bl	80059ae <_PreparePacket>
 800711e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007124:	4b25      	ldr	r3, [pc, #148]	@ (80071bc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	623b      	str	r3, [r7, #32]
 8007136:	e00b      	b.n	8007150 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	1c59      	adds	r1, r3, #1
 8007140:	6279      	str	r1, [r7, #36]	@ 0x24
 8007142:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	09db      	lsrs	r3, r3, #7
 800714e:	623b      	str	r3, [r7, #32]
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	2b7f      	cmp	r3, #127	@ 0x7f
 8007154:	d8f0      	bhi.n	8007138 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	627a      	str	r2, [r7, #36]	@ 0x24
 800715c:	6a3a      	ldr	r2, [r7, #32]
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	61fb      	str	r3, [r7, #28]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	e00b      	b.n	8007188 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	b2da      	uxtb	r2, r3
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	1c59      	adds	r1, r3, #1
 8007178:	61f9      	str	r1, [r7, #28]
 800717a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	09db      	lsrs	r3, r3, #7
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b7f      	cmp	r3, #127	@ 0x7f
 800718c:	d8f0      	bhi.n	8007170 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	61fa      	str	r2, [r7, #28]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800719e:	2207      	movs	r2, #7
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	6938      	ldr	r0, [r7, #16]
 80071a4:	f7fe fcf4 	bl	8005b90 <_SendPacket>
  RECORD_END();
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f383 8811 	msr	BASEPRI, r3
}
 80071ae:	bf00      	nop
 80071b0:	3728      	adds	r7, #40	@ 0x28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200143c8 	.word	0x200143c8
 80071bc:	20014398 	.word	0x20014398

080071c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80071c8:	4b04      	ldr	r3, [pc, #16]	@ (80071dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	1ad3      	subs	r3, r2, r3
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20014398 	.word	0x20014398

080071e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	@ 0x30
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80071ea:	4b3b      	ldr	r3, [pc, #236]	@ (80072d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d06d      	beq.n	80072ce <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80071f2:	4b39      	ldr	r3, [pc, #228]	@ (80072d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80071f8:	2300      	movs	r3, #0
 80071fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071fc:	e008      	b.n	8007210 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80071fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d007      	beq.n	800721a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	3301      	adds	r3, #1
 800720e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007214:	429a      	cmp	r2, r3
 8007216:	d3f2      	bcc.n	80071fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8007218:	e000      	b.n	800721c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800721a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d055      	beq.n	80072ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007222:	f3ef 8311 	mrs	r3, BASEPRI
 8007226:	f04f 0120 	mov.w	r1, #32
 800722a:	f381 8811 	msr	BASEPRI, r1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	482a      	ldr	r0, [pc, #168]	@ (80072dc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007232:	f7fe fbbc 	bl	80059ae <_PreparePacket>
 8007236:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	623b      	str	r3, [r7, #32]
 8007244:	e00b      	b.n	800725e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	1c59      	adds	r1, r3, #1
 800724e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007250:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	09db      	lsrs	r3, r3, #7
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	2b7f      	cmp	r3, #127	@ 0x7f
 8007262:	d8f0      	bhi.n	8007246 <SEGGER_SYSVIEW_SendModule+0x66>
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	627a      	str	r2, [r7, #36]	@ 0x24
 800726a:	6a3a      	ldr	r2, [r7, #32]
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e00b      	b.n	8007298 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	61f9      	str	r1, [r7, #28]
 800728a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	09db      	lsrs	r3, r3, #7
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b7f      	cmp	r3, #127	@ 0x7f
 800729c:	d8f0      	bhi.n	8007280 <SEGGER_SYSVIEW_SendModule+0xa0>
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	61fa      	str	r2, [r7, #28]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2280      	movs	r2, #128	@ 0x80
 80072b4:	4619      	mov	r1, r3
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7fe fb2c 	bl	8005914 <_EncodeStr>
 80072bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80072be:	2216      	movs	r2, #22
 80072c0:	68f9      	ldr	r1, [r7, #12]
 80072c2:	6938      	ldr	r0, [r7, #16]
 80072c4:	f7fe fc64 	bl	8005b90 <_SendPacket>
      RECORD_END();
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80072ce:	bf00      	nop
 80072d0:	3730      	adds	r7, #48	@ 0x30
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200143c0 	.word	0x200143c0
 80072dc:	200143c8 	.word	0x200143c8

080072e0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80072e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00f      	beq.n	800730e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80072ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007318 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f2      	bne.n	80072f4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	200143c0 	.word	0x200143c0

0800731c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007322:	f3ef 8311 	mrs	r3, BASEPRI
 8007326:	f04f 0120 	mov.w	r1, #32
 800732a:	f381 8811 	msr	BASEPRI, r1
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	4817      	ldr	r0, [pc, #92]	@ (8007390 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007332:	f7fe fb3c 	bl	80059ae <_PreparePacket>
 8007336:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	4b14      	ldr	r3, [pc, #80]	@ (8007394 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	e00b      	b.n	8007360 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	b2da      	uxtb	r2, r3
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1c59      	adds	r1, r3, #1
 8007350:	6179      	str	r1, [r7, #20]
 8007352:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	09db      	lsrs	r3, r3, #7
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b7f      	cmp	r3, #127	@ 0x7f
 8007364:	d8f0      	bhi.n	8007348 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	617a      	str	r2, [r7, #20]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007376:	221b      	movs	r2, #27
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	68b8      	ldr	r0, [r7, #8]
 800737c:	f7fe fc08 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f383 8811 	msr	BASEPRI, r3
}
 8007386:	bf00      	nop
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	200143c8 	.word	0x200143c8
 8007394:	200143c4 	.word	0x200143c4

08007398 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007398:	b40f      	push	{r0, r1, r2, r3}
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80073a0:	f107 0314 	add.w	r3, r7, #20
 80073a4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80073a6:	1d3b      	adds	r3, r7, #4
 80073a8:	461a      	mov	r2, r3
 80073aa:	2100      	movs	r1, #0
 80073ac:	6938      	ldr	r0, [r7, #16]
 80073ae:	f7fe fe79 	bl	80060a4 <_VPrintTarget>
  va_end(ParamList);
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073bc:	b004      	add	sp, #16
 80073be:	4770      	bx	lr

080073c0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08a      	sub	sp, #40	@ 0x28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073c8:	f3ef 8311 	mrs	r3, BASEPRI
 80073cc:	f04f 0120 	mov.w	r1, #32
 80073d0:	f381 8811 	msr	BASEPRI, r1
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	4827      	ldr	r0, [pc, #156]	@ (8007474 <SEGGER_SYSVIEW_Warn+0xb4>)
 80073d8:	f7fe fae9 	bl	80059ae <_PreparePacket>
 80073dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073de:	2280      	movs	r2, #128	@ 0x80
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	6938      	ldr	r0, [r7, #16]
 80073e4:	f7fe fa96 	bl	8005914 <_EncodeStr>
 80073e8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ee:	2301      	movs	r3, #1
 80073f0:	623b      	str	r3, [r7, #32]
 80073f2:	e00b      	b.n	800740c <SEGGER_SYSVIEW_Warn+0x4c>
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fa:	1c59      	adds	r1, r3, #1
 80073fc:	6279      	str	r1, [r7, #36]	@ 0x24
 80073fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	09db      	lsrs	r3, r3, #7
 800740a:	623b      	str	r3, [r7, #32]
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007410:	d8f0      	bhi.n	80073f4 <SEGGER_SYSVIEW_Warn+0x34>
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	627a      	str	r2, [r7, #36]	@ 0x24
 8007418:	6a3a      	ldr	r2, [r7, #32]
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	61fb      	str	r3, [r7, #28]
 8007426:	2300      	movs	r3, #0
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	e00b      	b.n	8007444 <SEGGER_SYSVIEW_Warn+0x84>
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	1c59      	adds	r1, r3, #1
 8007434:	61f9      	str	r1, [r7, #28]
 8007436:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	09db      	lsrs	r3, r3, #7
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b7f      	cmp	r3, #127	@ 0x7f
 8007448:	d8f0      	bhi.n	800742c <SEGGER_SYSVIEW_Warn+0x6c>
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	61fa      	str	r2, [r7, #28]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800745a:	221a      	movs	r2, #26
 800745c:	68f9      	ldr	r1, [r7, #12]
 800745e:	6938      	ldr	r0, [r7, #16]
 8007460:	f7fe fb96 	bl	8005b90 <_SendPacket>
  RECORD_END();
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f383 8811 	msr	BASEPRI, r3
}
 800746a:	bf00      	nop
 800746c:	3728      	adds	r7, #40	@ 0x28
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	200143c8 	.word	0x200143c8

08007478 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800747c:	4b13      	ldr	r3, [pc, #76]	@ (80074cc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800747e:	7e1b      	ldrb	r3, [r3, #24]
 8007480:	4619      	mov	r1, r3
 8007482:	4a13      	ldr	r2, [pc, #76]	@ (80074d0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007484:	460b      	mov	r3, r1
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	440b      	add	r3, r1
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4413      	add	r3, r2
 800748e:	336c      	adds	r3, #108	@ 0x6c
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b0e      	ldr	r3, [pc, #56]	@ (80074cc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007494:	7e1b      	ldrb	r3, [r3, #24]
 8007496:	4618      	mov	r0, r3
 8007498:	490d      	ldr	r1, [pc, #52]	@ (80074d0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800749a:	4603      	mov	r3, r0
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4403      	add	r3, r0
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	440b      	add	r3, r1
 80074a4:	3370      	adds	r3, #112	@ 0x70
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d00b      	beq.n	80074c4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80074ac:	4b07      	ldr	r3, [pc, #28]	@ (80074cc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074ae:	789b      	ldrb	r3, [r3, #2]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d107      	bne.n	80074c4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80074ba:	f7fe fa85 	bl	80059c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80074be:	4b03      	ldr	r3, [pc, #12]	@ (80074cc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80074c4:	4b01      	ldr	r3, [pc, #4]	@ (80074cc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20014398 	.word	0x20014398
 80074d0:	20012ed8 	.word	0x20012ed8

080074d4 <memcmp>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	3901      	subs	r1, #1
 80074d8:	4402      	add	r2, r0
 80074da:	4290      	cmp	r0, r2
 80074dc:	d101      	bne.n	80074e2 <memcmp+0xe>
 80074de:	2000      	movs	r0, #0
 80074e0:	e005      	b.n	80074ee <memcmp+0x1a>
 80074e2:	7803      	ldrb	r3, [r0, #0]
 80074e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074e8:	42a3      	cmp	r3, r4
 80074ea:	d001      	beq.n	80074f0 <memcmp+0x1c>
 80074ec:	1b18      	subs	r0, r3, r4
 80074ee:	bd10      	pop	{r4, pc}
 80074f0:	3001      	adds	r0, #1
 80074f2:	e7f2      	b.n	80074da <memcmp+0x6>

080074f4 <memset>:
 80074f4:	4402      	add	r2, r0
 80074f6:	4603      	mov	r3, r0
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d100      	bne.n	80074fe <memset+0xa>
 80074fc:	4770      	bx	lr
 80074fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007502:	e7f9      	b.n	80074f8 <memset+0x4>

08007504 <__libc_init_array>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	4d0d      	ldr	r5, [pc, #52]	@ (800753c <__libc_init_array+0x38>)
 8007508:	4c0d      	ldr	r4, [pc, #52]	@ (8007540 <__libc_init_array+0x3c>)
 800750a:	1b64      	subs	r4, r4, r5
 800750c:	10a4      	asrs	r4, r4, #2
 800750e:	2600      	movs	r6, #0
 8007510:	42a6      	cmp	r6, r4
 8007512:	d109      	bne.n	8007528 <__libc_init_array+0x24>
 8007514:	4d0b      	ldr	r5, [pc, #44]	@ (8007544 <__libc_init_array+0x40>)
 8007516:	4c0c      	ldr	r4, [pc, #48]	@ (8007548 <__libc_init_array+0x44>)
 8007518:	f000 f826 	bl	8007568 <_init>
 800751c:	1b64      	subs	r4, r4, r5
 800751e:	10a4      	asrs	r4, r4, #2
 8007520:	2600      	movs	r6, #0
 8007522:	42a6      	cmp	r6, r4
 8007524:	d105      	bne.n	8007532 <__libc_init_array+0x2e>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	f855 3b04 	ldr.w	r3, [r5], #4
 800752c:	4798      	blx	r3
 800752e:	3601      	adds	r6, #1
 8007530:	e7ee      	b.n	8007510 <__libc_init_array+0xc>
 8007532:	f855 3b04 	ldr.w	r3, [r5], #4
 8007536:	4798      	blx	r3
 8007538:	3601      	adds	r6, #1
 800753a:	e7f2      	b.n	8007522 <__libc_init_array+0x1e>
 800753c:	08007718 	.word	0x08007718
 8007540:	08007718 	.word	0x08007718
 8007544:	08007718 	.word	0x08007718
 8007548:	0800771c 	.word	0x0800771c

0800754c <memcpy>:
 800754c:	440a      	add	r2, r1
 800754e:	4291      	cmp	r1, r2
 8007550:	f100 33ff 	add.w	r3, r0, #4294967295
 8007554:	d100      	bne.n	8007558 <memcpy+0xc>
 8007556:	4770      	bx	lr
 8007558:	b510      	push	{r4, lr}
 800755a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800755e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007562:	4291      	cmp	r1, r2
 8007564:	d1f9      	bne.n	800755a <memcpy+0xe>
 8007566:	bd10      	pop	{r4, pc}

08007568 <_init>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	bf00      	nop
 800756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756e:	bc08      	pop	{r3}
 8007570:	469e      	mov	lr, r3
 8007572:	4770      	bx	lr

08007574 <_fini>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr
