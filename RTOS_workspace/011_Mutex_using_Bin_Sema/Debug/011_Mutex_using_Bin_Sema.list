
011_Mutex_using_Bin_Sema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000681c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080069ac  080069ac  000079ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa4  08006aa4  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aac  08006aac  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aac  08006aac  00007aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ab0  08006ab0  00007ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006ab4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008064  2**0
                  CONTENTS
 10 .bss          000130ac  20000064  20000064  00008064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013110  20013110  00008064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bec  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dc9  00000000  00000000  0001ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0001da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dae  00000000  00000000  0001ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e63  00000000  00000000  0001f98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001523c  00000000  00000000  000427f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4d3f  00000000  00000000  00057a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c76c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e74  00000000  00000000  0012c7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00131624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006994 	.word	0x08006994

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08006994 	.word	0x08006994

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fc9d 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f893 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f925 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8f9 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sprintf(usr_msg, "Demo of mutual exclusion using binary semaphore\r\n");
 8000586:	493c      	ldr	r1, [pc, #240]	@ (8000678 <main+0x108>)
 8000588:	483c      	ldr	r0, [pc, #240]	@ (800067c <main+0x10c>)
 800058a:	f005 fd63 	bl	8006054 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 800058e:	483b      	ldr	r0, [pc, #236]	@ (800067c <main+0x10c>)
 8000590:	f7ff fe1e 	bl	80001d0 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	b29a      	uxth	r2, r3
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	4937      	ldr	r1, [pc, #220]	@ (800067c <main+0x10c>)
 800059e:	4838      	ldr	r0, [pc, #224]	@ (8000680 <main+0x110>)
 80005a0:	f001 ffb0 	bl	8002504 <HAL_UART_Transmit>

  vSemaphoreCreateBinary(handle_sema);
 80005a4:	2203      	movs	r2, #3
 80005a6:	2100      	movs	r1, #0
 80005a8:	2001      	movs	r0, #1
 80005aa:	f003 f87b 	bl	80036a4 <xQueueGenericCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a34      	ldr	r2, [pc, #208]	@ (8000684 <main+0x114>)
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b33      	ldr	r3, [pc, #204]	@ (8000684 <main+0x114>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d006      	beq.n	80005ca <main+0x5a>
 80005bc:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <main+0x114>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	f003 f8f3 	bl	80037b0 <xQueueGenericSend>

  if(handle_sema != NULL)
 80005ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000684 <main+0x114>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d03f      	beq.n	8000652 <main+0xe2>
  {

	  status = xTaskCreate(vTask1, "Task1", 500, NULL, 1, &handle_task1);
 80005d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000688 <main+0x118>)
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2301      	movs	r3, #1
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005e0:	492a      	ldr	r1, [pc, #168]	@ (800068c <main+0x11c>)
 80005e2:	482b      	ldr	r0, [pc, #172]	@ (8000690 <main+0x120>)
 80005e4:	f003 fe0c 	bl	8004200 <xTaskCreate>
 80005e8:	60f8      	str	r0, [r7, #12]
	  configASSERT(status == pdPASS);
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d00b      	beq.n	8000608 <main+0x98>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005f4:	f383 8811 	msr	BASEPRI, r3
 80005f8:	f3bf 8f6f 	isb	sy
 80005fc:	f3bf 8f4f 	dsb	sy
 8000600:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <main+0x94>

	  status = xTaskCreate(vTask2, "Task2", 500, NULL, 1, &handle_task2);
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <main+0x124>)
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2301      	movs	r3, #1
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000616:	4920      	ldr	r1, [pc, #128]	@ (8000698 <main+0x128>)
 8000618:	4820      	ldr	r0, [pc, #128]	@ (800069c <main+0x12c>)
 800061a:	f003 fdf1 	bl	8004200 <xTaskCreate>
 800061e:	60f8      	str	r0, [r7, #12]
	  configASSERT(status == pdPASS);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00b      	beq.n	800063e <main+0xce>
        __asm volatile
 8000626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	607b      	str	r3, [r7, #4]
    }
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	e7fd      	b.n	800063a <main+0xca>

	  xSemaphoreGive(handle_sema);
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <main+0x114>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	f003 f8b2 	bl	80037b0 <xQueueGenericSend>

	  vTaskStartScheduler();
 800064c:	f003 ff54 	bl	80044f8 <vTaskStartScheduler>
 8000650:	e00f      	b.n	8000672 <main+0x102>
  }else
  {
	  sprintf(usr_msg, "binary semaphore creation failed\r\n");
 8000652:	4913      	ldr	r1, [pc, #76]	@ (80006a0 <main+0x130>)
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <main+0x10c>)
 8000656:	f005 fcfd 	bl	8006054 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 800065a:	4808      	ldr	r0, [pc, #32]	@ (800067c <main+0x10c>)
 800065c:	f7ff fdb8 	bl	80001d0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	4904      	ldr	r1, [pc, #16]	@ (800067c <main+0x10c>)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <main+0x110>)
 800066c:	f001 ff4a 	bl	8002504 <HAL_UART_Transmit>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	e7fd      	b.n	8000672 <main+0x102>
 8000676:	bf00      	nop
 8000678:	080069ac 	.word	0x080069ac
 800067c:	200000d4 	.word	0x200000d4
 8000680:	20000080 	.word	0x20000080
 8000684:	200000c8 	.word	0x200000c8
 8000688:	200000cc 	.word	0x200000cc
 800068c:	080069e0 	.word	0x080069e0
 8000690:	08000a89 	.word	0x08000a89
 8000694:	200000d0 	.word	0x200000d0
 8000698:	080069e8 	.word	0x080069e8
 800069c:	08000af1 	.word	0x08000af1
 80006a0:	080069f0 	.word	0x080069f0

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	@ 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fcee 	bl	8006094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	@ (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	@ 0xa8
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 ff2f 	bl	800158c <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 fa22 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2105      	movs	r1, #5
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f990 	bl	8001a7c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 fa0b 	bl	8000b7c <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 fe58 	bl	8002464 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f9df 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000080 	.word	0x20000080
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	4ba2      	ldr	r3, [pc, #648]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4aa1      	ldr	r2, [pc, #644]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0310 	orr.w	r3, r3, #16
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b9f      	ldr	r3, [pc, #636]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	4b9b      	ldr	r3, [pc, #620]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a9a      	ldr	r2, [pc, #616]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b98      	ldr	r3, [pc, #608]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b94      	ldr	r3, [pc, #592]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a93      	ldr	r2, [pc, #588]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b91      	ldr	r3, [pc, #580]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b8d      	ldr	r3, [pc, #564]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a8c      	ldr	r2, [pc, #560]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b8a      	ldr	r3, [pc, #552]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b86      	ldr	r3, [pc, #536]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a85      	ldr	r2, [pc, #532]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b83      	ldr	r3, [pc, #524]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b7f      	ldr	r3, [pc, #508]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a7e      	ldr	r2, [pc, #504]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a70 <MX_GPIO_Init+0x2a4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2108      	movs	r1, #8
 800088e:	4879      	ldr	r0, [pc, #484]	@ (8000a74 <MX_GPIO_Init+0x2a8>)
 8000890:	f000 fe62 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2101      	movs	r1, #1
 8000898:	4877      	ldr	r0, [pc, #476]	@ (8000a78 <MX_GPIO_Init+0x2ac>)
 800089a:	f000 fe5d 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	2200      	movs	r2, #0
 80008a0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008a4:	4875      	ldr	r0, [pc, #468]	@ (8000a7c <MX_GPIO_Init+0x2b0>)
 80008a6:	f000 fe57 	bl	8001558 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	486c      	ldr	r0, [pc, #432]	@ (8000a74 <MX_GPIO_Init+0x2a8>)
 80008c2:	f000 fcad 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4866      	ldr	r0, [pc, #408]	@ (8000a78 <MX_GPIO_Init+0x2ac>)
 80008de:	f000 fc9f 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	485e      	ldr	r0, [pc, #376]	@ (8000a78 <MX_GPIO_Init+0x2ac>)
 80008fe:	f000 fc8f 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000906:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	485a      	ldr	r0, [pc, #360]	@ (8000a80 <MX_GPIO_Init+0x2b4>)
 8000918:	f000 fc82 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800091c:	2310      	movs	r3, #16
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092c:	2306      	movs	r3, #6
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4852      	ldr	r0, [pc, #328]	@ (8000a80 <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fc72 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800093c:	23e0      	movs	r3, #224	@ 0xe0
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094c:	2305      	movs	r3, #5
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	484a      	ldr	r0, [pc, #296]	@ (8000a80 <MX_GPIO_Init+0x2b4>)
 8000958:	f000 fc62 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095c:	2304      	movs	r3, #4
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4845      	ldr	r0, [pc, #276]	@ (8000a84 <MX_GPIO_Init+0x2b8>)
 8000970:	f000 fc56 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000986:	2305      	movs	r3, #5
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	483c      	ldr	r0, [pc, #240]	@ (8000a84 <MX_GPIO_Init+0x2b8>)
 8000992:	f000 fc45 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000996:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800099a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4833      	ldr	r0, [pc, #204]	@ (8000a7c <MX_GPIO_Init+0x2b0>)
 80009b0:	f000 fc36 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009b4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c6:	2306      	movs	r3, #6
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4829      	ldr	r0, [pc, #164]	@ (8000a78 <MX_GPIO_Init+0x2ac>)
 80009d2:	f000 fc25 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4825      	ldr	r0, [pc, #148]	@ (8000a80 <MX_GPIO_Init+0x2b4>)
 80009ec:	f000 fc18 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009f0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a02:	230a      	movs	r3, #10
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481c      	ldr	r0, [pc, #112]	@ (8000a80 <MX_GPIO_Init+0x2b4>)
 8000a0e:	f000 fc07 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a12:	2320      	movs	r3, #32
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4815      	ldr	r0, [pc, #84]	@ (8000a7c <MX_GPIO_Init+0x2b0>)
 8000a26:	f000 fbfb 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a2a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	2312      	movs	r3, #18
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <MX_GPIO_Init+0x2b8>)
 8000a48:	f000 fbea 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_GPIO_Init+0x2a8>)
 8000a62:	f000 fbdd 	bl	8001220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a66:	bf00      	nop
 8000a68:	3730      	adds	r7, #48	@ 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020400 	.word	0x40020400

08000a88 <vTask1>:

/* USER CODE BEGIN 4 */
void vTask1(void *pvParameters)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task 1 is running\r\n";
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <vTask1+0x54>)
 8000a92:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		xSemaphoreTake(handle_sema, portMAX_DELAY);
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <vTask1+0x58>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 f919 	bl	8003cd4 <xQueueSemaphoreTake>

		sprintf(usr_msg, "%s", pcTaskName);
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	490f      	ldr	r1, [pc, #60]	@ (8000ae4 <vTask1+0x5c>)
 8000aa6:	4810      	ldr	r0, [pc, #64]	@ (8000ae8 <vTask1+0x60>)
 8000aa8:	f005 fad4 	bl	8006054 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000aac:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <vTask1+0x60>)
 8000aae:	f7ff fb8f 	bl	80001d0 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	490b      	ldr	r1, [pc, #44]	@ (8000ae8 <vTask1+0x60>)
 8000abc:	480b      	ldr	r0, [pc, #44]	@ (8000aec <vTask1+0x64>)
 8000abe:	f001 fd21 	bl	8002504 <HAL_UART_Transmit>

		xSemaphoreGive(handle_sema);
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <vTask1+0x58>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	f002 fe70 	bl	80037b0 <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(500));
 8000ad0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ad4:	f003 fcda 	bl	800448c <vTaskDelay>
		xSemaphoreTake(handle_sema, portMAX_DELAY);
 8000ad8:	bf00      	nop
 8000ada:	e7db      	b.n	8000a94 <vTask1+0xc>
 8000adc:	08006a14 	.word	0x08006a14
 8000ae0:	200000c8 	.word	0x200000c8
 8000ae4:	08006a28 	.word	0x08006a28
 8000ae8:	200000d4 	.word	0x200000d4
 8000aec:	20000080 	.word	0x20000080

08000af0 <vTask2>:
	}
}

void vTask2(void *pvParameters)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task 2 is running\r\n";
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <vTask2+0x54>)
 8000afa:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		xSemaphoreTake(handle_sema, portMAX_DELAY);
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <vTask2+0x58>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f8e5 	bl	8003cd4 <xQueueSemaphoreTake>

		sprintf(usr_msg, "%s", pcTaskName);
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	490f      	ldr	r1, [pc, #60]	@ (8000b4c <vTask2+0x5c>)
 8000b0e:	4810      	ldr	r0, [pc, #64]	@ (8000b50 <vTask2+0x60>)
 8000b10:	f005 faa0 	bl	8006054 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000b14:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <vTask2+0x60>)
 8000b16:	f7ff fb5b 	bl	80001d0 <strlen>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	490b      	ldr	r1, [pc, #44]	@ (8000b50 <vTask2+0x60>)
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <vTask2+0x64>)
 8000b26:	f001 fced 	bl	8002504 <HAL_UART_Transmit>

		xSemaphoreGive(handle_sema);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <vTask2+0x58>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	f002 fe3c 	bl	80037b0 <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(500));
 8000b38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b3c:	f003 fca6 	bl	800448c <vTaskDelay>
		xSemaphoreTake(handle_sema, portMAX_DELAY);
 8000b40:	bf00      	nop
 8000b42:	e7db      	b.n	8000afc <vTask2+0xc>
 8000b44:	08006a2c 	.word	0x08006a2c
 8000b48:	200000c8 	.word	0x200000c8
 8000b4c:	08006a28 	.word	0x08006a28
 8000b50:	200000d4 	.word	0x200000d4
 8000b54:	20000080 	.word	0x20000080

08000b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6a:	f000 f9c5 	bl	8000ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40001000 	.word	0x40001000

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <HAL_UART_MspInit+0x94>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d133      	bne.n	8000c62 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_UART_MspInit+0x98>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4809      	ldr	r0, [pc, #36]	@ (8000c74 <HAL_UART_MspInit+0x9c>)
 8000c4e:	f000 fae7 	bl	8001220 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	2026      	movs	r0, #38	@ 0x26
 8000c58:	f000 fa26 	bl	80010a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c5c:	2026      	movs	r0, #38	@ 0x26
 8000c5e:	f000 fa3f 	bl	80010e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	@ 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <HAL_InitTick+0xe4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	4a32      	ldr	r2, [pc, #200]	@ (8000d5c <HAL_InitTick+0xe4>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c98:	4b30      	ldr	r3, [pc, #192]	@ (8000d5c <HAL_InitTick+0xe4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 f904 	bl	8001ebc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d103      	bne.n	8000cc6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cbe:	f001 f8d5 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8000cc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cc4:	e004      	b.n	8000cd0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cc6:	f001 f8d1 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd2:	4a23      	ldr	r2, [pc, #140]	@ (8000d60 <HAL_InitTick+0xe8>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	0c9b      	lsrs	r3, r3, #18
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cde:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <HAL_InitTick+0xec>)
 8000ce0:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <HAL_InitTick+0xf0>)
 8000ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <HAL_InitTick+0xec>)
 8000ce6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cec:	4a1d      	ldr	r2, [pc, #116]	@ (8000d64 <HAL_InitTick+0xec>)
 8000cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <HAL_InitTick+0xec>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_InitTick+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <HAL_InitTick+0xec>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d04:	4817      	ldr	r0, [pc, #92]	@ (8000d64 <HAL_InitTick+0xec>)
 8000d06:	f001 f90b 	bl	8001f20 <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d11b      	bne.n	8000d50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d18:	4812      	ldr	r0, [pc, #72]	@ (8000d64 <HAL_InitTick+0xec>)
 8000d1a:	f001 f95b 	bl	8001fd4 <HAL_TIM_Base_Start_IT>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d111      	bne.n	8000d50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d2c:	2036      	movs	r0, #54	@ 0x36
 8000d2e:	f000 f9d7 	bl	80010e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d808      	bhi.n	8000d4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	2036      	movs	r0, #54	@ 0x36
 8000d3e:	f000 f9b3 	bl	80010a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <HAL_InitTick+0xf4>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e002      	b.n	8000d50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3738      	adds	r7, #56	@ 0x38
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	431bde83 	.word	0x431bde83
 8000d64:	200001d0 	.word	0x200001d0
 8000d68:	40001000 	.word	0x40001000
 8000d6c:	20000004 	.word	0x20000004

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <NMI_Handler+0x4>

08000d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <MemManage_Handler+0x4>

08000d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <USART2_IRQHandler+0x10>)
 8000dae:	f001 fc35 	bl	800261c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000080 	.word	0x20000080

08000dbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <TIM6_DAC_IRQHandler+0x10>)
 8000dc2:	f001 f977 	bl	80020b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200001d0 	.word	0x200001d0

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	@ (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f005 f950 	bl	80060a4 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000218 	.word	0x20000218
 8000e38:	20013110 	.word	0x20013110

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e64:	f7ff ffea 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f005 f90f 	bl	80060b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fb6d 	bl	8000570 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ea4:	08006ab4 	.word	0x08006ab4
  ldr r2, =_sbss
 8000ea8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000eac:	20013110 	.word	0x20013110

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f8d8 	bl	8001092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	200f      	movs	r0, #15
 8000ee4:	f7ff fec8 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fe4e 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	2000021c 	.word	0x2000021c

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2000021c 	.word	0x2000021c

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	@ (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	@ (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	@ 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	@ 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff4c 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ba:	f7ff ff61 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff ffb1 	bl	800102c <NVIC_EncodePriority>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff80 	bl	8000fd8 <__NVIC_SetPriority>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff54 	bl	8000f9c <__NVIC_EnableIRQ>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001108:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800110a:	f7ff ff09 	bl	8000f20 <HAL_GetTick>
 800110e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d008      	beq.n	800112e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2280      	movs	r2, #128	@ 0x80
 8001120:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e052      	b.n	80011d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0216 	bic.w	r2, r2, #22
 800113c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800114c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d103      	bne.n	800115e <HAL_DMA_Abort+0x62>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0208 	bic.w	r2, r2, #8
 800116c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800117e:	e013      	b.n	80011a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001180:	f7ff fece 	bl	8000f20 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b05      	cmp	r3, #5
 800118c:	d90c      	bls.n	80011a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2220      	movs	r2, #32
 8001192:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e015      	b.n	80011d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1e4      	bne.n	8001180 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ba:	223f      	movs	r2, #63	@ 0x3f
 80011bc:	409a      	lsls	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d004      	beq.n	80011fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2280      	movs	r2, #128	@ 0x80
 80011f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00c      	b.n	8001214 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2205      	movs	r2, #5
 80011fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	@ 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e16b      	b.n	8001514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	429a      	cmp	r2, r3
 8001256:	f040 815a 	bne.w	800150e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d005      	beq.n	8001272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126e:	2b02      	cmp	r3, #2
 8001270:	d130      	bne.n	80012d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	f003 0201 	and.w	r2, r3, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d017      	beq.n	8001310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d123      	bne.n	8001364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	08da      	lsrs	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3208      	adds	r2, #8
 800135e:	69b9      	ldr	r1, [r7, #24]
 8001360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0203 	and.w	r2, r3, #3
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80b4 	beq.w	800150e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b60      	ldr	r3, [pc, #384]	@ (800152c <HAL_GPIO_Init+0x30c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	4a5f      	ldr	r2, [pc, #380]	@ (800152c <HAL_GPIO_Init+0x30c>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b6:	4b5d      	ldr	r3, [pc, #372]	@ (800152c <HAL_GPIO_Init+0x30c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001530 <HAL_GPIO_Init+0x310>)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a52      	ldr	r2, [pc, #328]	@ (8001534 <HAL_GPIO_Init+0x314>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d02b      	beq.n	8001446 <HAL_GPIO_Init+0x226>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a51      	ldr	r2, [pc, #324]	@ (8001538 <HAL_GPIO_Init+0x318>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d025      	beq.n	8001442 <HAL_GPIO_Init+0x222>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a50      	ldr	r2, [pc, #320]	@ (800153c <HAL_GPIO_Init+0x31c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01f      	beq.n	800143e <HAL_GPIO_Init+0x21e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4f      	ldr	r2, [pc, #316]	@ (8001540 <HAL_GPIO_Init+0x320>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x21a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4e      	ldr	r2, [pc, #312]	@ (8001544 <HAL_GPIO_Init+0x324>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x216>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4d      	ldr	r2, [pc, #308]	@ (8001548 <HAL_GPIO_Init+0x328>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x212>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4c      	ldr	r2, [pc, #304]	@ (800154c <HAL_GPIO_Init+0x32c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x20e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4b      	ldr	r2, [pc, #300]	@ (8001550 <HAL_GPIO_Init+0x330>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x20a>
 8001426:	2307      	movs	r3, #7
 8001428:	e00e      	b.n	8001448 <HAL_GPIO_Init+0x228>
 800142a:	2308      	movs	r3, #8
 800142c:	e00c      	b.n	8001448 <HAL_GPIO_Init+0x228>
 800142e:	2306      	movs	r3, #6
 8001430:	e00a      	b.n	8001448 <HAL_GPIO_Init+0x228>
 8001432:	2305      	movs	r3, #5
 8001434:	e008      	b.n	8001448 <HAL_GPIO_Init+0x228>
 8001436:	2304      	movs	r3, #4
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x228>
 800143a:	2303      	movs	r3, #3
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x228>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x228>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x228>
 8001446:	2300      	movs	r3, #0
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001458:	4935      	ldr	r1, [pc, #212]	@ (8001530 <HAL_GPIO_Init+0x310>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001466:	4b3b      	ldr	r3, [pc, #236]	@ (8001554 <HAL_GPIO_Init+0x334>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148a:	4a32      	ldr	r2, [pc, #200]	@ (8001554 <HAL_GPIO_Init+0x334>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001490:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <HAL_GPIO_Init+0x334>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b4:	4a27      	ldr	r2, [pc, #156]	@ (8001554 <HAL_GPIO_Init+0x334>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <HAL_GPIO_Init+0x334>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014de:	4a1d      	ldr	r2, [pc, #116]	@ (8001554 <HAL_GPIO_Init+0x334>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_GPIO_Init+0x334>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001508:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <HAL_GPIO_Init+0x334>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	f67f ae90 	bls.w	800123c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40013800 	.word	0x40013800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020400 	.word	0x40020400
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	40021000 	.word	0x40021000
 8001548:	40021400 	.word	0x40021400
 800154c:	40021800 	.word	0x40021800
 8001550:	40021c00 	.word	0x40021c00
 8001554:	40013c00 	.word	0x40013c00

08001558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
 8001564:	4613      	mov	r3, r2
 8001566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001574:	e003      	b.n	800157e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	041a      	lsls	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	619a      	str	r2, [r3, #24]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e267      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d075      	beq.n	8001696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015aa:	4b88      	ldr	r3, [pc, #544]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d00c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b6:	4b85      	ldr	r3, [pc, #532]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d112      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c2:	4b82      	ldr	r3, [pc, #520]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015ce:	d10b      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b7e      	ldr	r3, [pc, #504]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d05b      	beq.n	8001694 <HAL_RCC_OscConfig+0x108>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d157      	bne.n	8001694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e242      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x74>
 80015f2:	4b76      	ldr	r3, [pc, #472]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a75      	ldr	r2, [pc, #468]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e01d      	b.n	800163c <HAL_RCC_OscConfig+0xb0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x98>
 800160a:	4b70      	ldr	r3, [pc, #448]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6f      	ldr	r2, [pc, #444]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b6d      	ldr	r3, [pc, #436]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6c      	ldr	r2, [pc, #432]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0xb0>
 8001624:	4b69      	ldr	r3, [pc, #420]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a68      	ldr	r2, [pc, #416]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b66      	ldr	r3, [pc, #408]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a65      	ldr	r2, [pc, #404]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800163a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fc6c 	bl	8000f20 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fc68 	bl	8000f20 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	@ 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e207      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b5b      	ldr	r3, [pc, #364]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0xc0>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fc58 	bl	8000f20 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fc54 	bl	8000f20 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	@ 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1f3      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	4b51      	ldr	r3, [pc, #324]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0xe8>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d063      	beq.n	800176a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016a2:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b47      	ldr	r3, [pc, #284]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d11c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ba:	4b44      	ldr	r3, [pc, #272]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	4b41      	ldr	r3, [pc, #260]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x152>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e1c7      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b3b      	ldr	r3, [pc, #236]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4937      	ldr	r1, [pc, #220]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e03a      	b.n	800176a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <HAL_RCC_OscConfig+0x244>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fc0d 	bl	8000f20 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fc09 	bl	8000f20 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1a8      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4925      	ldr	r1, [pc, #148]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <HAL_RCC_OscConfig+0x244>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fbec 	bl	8000f20 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fbe8 	bl	8000f20 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e187      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d036      	beq.n	80017e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d016      	beq.n	80017ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_RCC_OscConfig+0x248>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fbcc 	bl	8000f20 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fbc8 	bl	8000f20 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e167      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_RCC_OscConfig+0x240>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x200>
 80017aa:	e01b      	b.n	80017e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_RCC_OscConfig+0x248>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fbb5 	bl	8000f20 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	e00e      	b.n	80017d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff fbb1 	bl	8000f20 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d907      	bls.n	80017d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e150      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
 80017cc:	40023800 	.word	0x40023800
 80017d0:	42470000 	.word	0x42470000
 80017d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b88      	ldr	r3, [pc, #544]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ea      	bne.n	80017ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8097 	beq.w	8001920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b81      	ldr	r3, [pc, #516]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b7d      	ldr	r3, [pc, #500]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	4a7c      	ldr	r2, [pc, #496]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	@ 0x40
 8001812:	4b7a      	ldr	r3, [pc, #488]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b77      	ldr	r3, [pc, #476]	@ (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d118      	bne.n	8001860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b74      	ldr	r3, [pc, #464]	@ (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a73      	ldr	r2, [pc, #460]	@ (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183a:	f7ff fb71 	bl	8000f20 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001842:	f7ff fb6d 	bl	8000f20 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e10c      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <HAL_RCC_OscConfig+0x474>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x2ea>
 8001868:	4b64      	ldr	r3, [pc, #400]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186c:	4a63      	ldr	r2, [pc, #396]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6713      	str	r3, [r2, #112]	@ 0x70
 8001874:	e01c      	b.n	80018b0 <HAL_RCC_OscConfig+0x324>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x30c>
 800187e:	4b5f      	ldr	r3, [pc, #380]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001882:	4a5e      	ldr	r2, [pc, #376]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6713      	str	r3, [r2, #112]	@ 0x70
 800188a:	4b5c      	ldr	r3, [pc, #368]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188e:	4a5b      	ldr	r2, [pc, #364]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	@ 0x70
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0x324>
 8001898:	4b58      	ldr	r3, [pc, #352]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189c:	4a57      	ldr	r2, [pc, #348]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018a4:	4b55      	ldr	r3, [pc, #340]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a8:	4a54      	ldr	r2, [pc, #336]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 80018aa:	f023 0304 	bic.w	r3, r3, #4
 80018ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d015      	beq.n	80018e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fb32 	bl	8000f20 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff fb2e 	bl	8000f20 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e0cb      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0ee      	beq.n	80018c0 <HAL_RCC_OscConfig+0x334>
 80018e2:	e014      	b.n	800190e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb1c 	bl	8000f20 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fb18 	bl	8000f20 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0b5      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001902:	4b3e      	ldr	r3, [pc, #248]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ee      	bne.n	80018ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	4a38      	ldr	r2, [pc, #224]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 800191a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a1 	beq.w	8001a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192a:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b08      	cmp	r3, #8
 8001934:	d05c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d141      	bne.n	80019c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b31      	ldr	r3, [pc, #196]	@ (8001a04 <HAL_RCC_OscConfig+0x478>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff faec 	bl	8000f20 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fae8 	bl	8000f20 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e087      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	491b      	ldr	r1, [pc, #108]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_RCC_OscConfig+0x478>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fac1 	bl	8000f20 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff fabd 	bl	8000f20 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e05c      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x416>
 80019c0:	e054      	b.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <HAL_RCC_OscConfig+0x478>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff faaa 	bl	8000f20 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff faa6 	bl	8000f20 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e045      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_RCC_OscConfig+0x470>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x444>
 80019ee:	e03d      	b.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e038      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <HAL_RCC_OscConfig+0x4ec>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d028      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d121      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d11a      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a38:	4013      	ands	r3, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d111      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	3b01      	subs	r3, #1
 8001a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0cc      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b68      	ldr	r3, [pc, #416]	@ (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d90c      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b65      	ldr	r3, [pc, #404]	@ (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b63      	ldr	r3, [pc, #396]	@ (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0b8      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad0:	4b59      	ldr	r3, [pc, #356]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a58      	ldr	r2, [pc, #352]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae8:	4b53      	ldr	r3, [pc, #332]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a52      	ldr	r2, [pc, #328]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b50      	ldr	r3, [pc, #320]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	494d      	ldr	r1, [pc, #308]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d044      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b47      	ldr	r3, [pc, #284]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d119      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e07f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e067      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4934      	ldr	r1, [pc, #208]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f9d8 	bl	8000f20 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff f9d4 	bl	8000f20 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e04f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d20c      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e032      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4916      	ldr	r1, [pc, #88]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	490e      	ldr	r1, [pc, #56]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c02:	f000 f821 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	490a      	ldr	r1, [pc, #40]	@ (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	5ccb      	ldrb	r3, [r1, r3]
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f828 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08006a58 	.word	0x08006a58
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c4c:	b094      	sub	sp, #80	@ 0x50
 8001c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c60:	4b79      	ldr	r3, [pc, #484]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d00d      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x40>
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	f200 80e1 	bhi.w	8001e34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x34>
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d003      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7a:	e0db      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b73      	ldr	r3, [pc, #460]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c80:	e0db      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c82:	4b73      	ldr	r3, [pc, #460]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c86:	e0d8      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c88:	4b6f      	ldr	r3, [pc, #444]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c92:	4b6d      	ldr	r3, [pc, #436]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	099b      	lsrs	r3, r3, #6
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ca8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cba:	4622      	mov	r2, r4
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	0159      	lsls	r1, r3, #5
 8001cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ccc:	0150      	lsls	r0, r2, #5
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	1a51      	subs	r1, r2, r1
 8001cd6:	6139      	str	r1, [r7, #16]
 8001cd8:	4629      	mov	r1, r5
 8001cda:	eb63 0301 	sbc.w	r3, r3, r1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cec:	4659      	mov	r1, fp
 8001cee:	018b      	lsls	r3, r1, #6
 8001cf0:	4651      	mov	r1, sl
 8001cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cf6:	4651      	mov	r1, sl
 8001cf8:	018a      	lsls	r2, r1, #6
 8001cfa:	4651      	mov	r1, sl
 8001cfc:	ebb2 0801 	subs.w	r8, r2, r1
 8001d00:	4659      	mov	r1, fp
 8001d02:	eb63 0901 	sbc.w	r9, r3, r1
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	eb18 0303 	adds.w	r3, r8, r3
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	462b      	mov	r3, r5
 8001d28:	eb49 0303 	adc.w	r3, r9, r3
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	024b      	lsls	r3, r1, #9
 8001d3e:	4621      	mov	r1, r4
 8001d40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d44:	4621      	mov	r1, r4
 8001d46:	024a      	lsls	r2, r1, #9
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d58:	f7fe fa92 	bl	8000280 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4613      	mov	r3, r2
 8001d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d64:	e058      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4611      	mov	r1, r2
 8001d72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d76:	623b      	str	r3, [r7, #32]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d80:	4642      	mov	r2, r8
 8001d82:	464b      	mov	r3, r9
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	f04f 0100 	mov.w	r1, #0
 8001d8c:	0159      	lsls	r1, r3, #5
 8001d8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d92:	0150      	lsls	r0, r2, #5
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4641      	mov	r1, r8
 8001d9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d9e:	4649      	mov	r1, r9
 8001da0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001db0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001db4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001db8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dbc:	eb63 050b 	sbc.w	r5, r3, fp
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	00eb      	lsls	r3, r5, #3
 8001dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dce:	00e2      	lsls	r2, r4, #3
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	18e3      	adds	r3, r4, r3
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	464b      	mov	r3, r9
 8001ddc:	eb45 0303 	adc.w	r3, r5, r3
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dee:	4629      	mov	r1, r5
 8001df0:	028b      	lsls	r3, r1, #10
 8001df2:	4621      	mov	r1, r4
 8001df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df8:	4621      	mov	r1, r4
 8001dfa:	028a      	lsls	r2, r1, #10
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e02:	2200      	movs	r2, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	61fa      	str	r2, [r7, #28]
 8001e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e0c:	f7fe fa38 	bl	8000280 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4613      	mov	r3, r2
 8001e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3750      	adds	r7, #80	@ 0x50
 8001e40:	46bd      	mov	sp, r7
 8001e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	007a1200 	.word	0x007a1200

08001e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	@ (8001e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08006a68 	.word	0x08006a68

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e98:	f7ff ffdc 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0b5b      	lsrs	r3, r3, #13
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	@ (8001eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08006a68 	.word	0x08006a68

08001ebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	220f      	movs	r2, #15
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	08db      	lsrs	r3, r3, #3
 8001ef6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <HAL_RCC_GetClockConfig+0x60>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0207 	and.w	r2, r3, #7
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	601a      	str	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e041      	b.n	8001fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f839 	bl	8001fbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f000 f9c0 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d001      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e04e      	b.n	800208a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a23      	ldr	r2, [pc, #140]	@ (8002098 <HAL_TIM_Base_Start_IT+0xc4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002016:	d01d      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <HAL_TIM_Base_Start_IT+0xc8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d018      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1e      	ldr	r2, [pc, #120]	@ (80020a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00e      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_TIM_Base_Start_IT+0xd8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d111      	bne.n	8002078 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d010      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002076:	e007      	b.n	8002088 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40010000 	.word	0x40010000
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40000c00 	.word	0x40000c00
 80020a8:	40010400 	.word	0x40010400
 80020ac:	40014000 	.word	0x40014000
 80020b0:	40001800 	.word	0x40001800

080020b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d020      	beq.n	8002118 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01b      	beq.n	8002118 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0202 	mvn.w	r2, #2
 80020e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8d2 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 8002104:	e005      	b.n	8002112 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8c4 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8d5 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d020      	beq.n	8002164 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0204 	mvn.w	r2, #4
 8002134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8ac 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f89e 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f8af 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d020      	beq.n	80021b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0208 	mvn.w	r2, #8
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f886 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f878 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f889 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d020      	beq.n	80021fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01b      	beq.n	80021fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0210 	mvn.w	r2, #16
 80021cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2208      	movs	r2, #8
 80021d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f860 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f852 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f863 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00c      	beq.n	8002220 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0201 	mvn.w	r2, #1
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe fc9c 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f906 	bl	8002450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f834 	bl	80022d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0220 	mvn.w	r2, #32
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8d8 	bl	800243c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a46      	ldr	r2, [pc, #280]	@ (8002410 <TIM_Base_SetConfig+0x12c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002302:	d00f      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a43      	ldr	r2, [pc, #268]	@ (8002414 <TIM_Base_SetConfig+0x130>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d00b      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a42      	ldr	r2, [pc, #264]	@ (8002418 <TIM_Base_SetConfig+0x134>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d007      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a41      	ldr	r2, [pc, #260]	@ (800241c <TIM_Base_SetConfig+0x138>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a40      	ldr	r2, [pc, #256]	@ (8002420 <TIM_Base_SetConfig+0x13c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d108      	bne.n	8002336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a35      	ldr	r2, [pc, #212]	@ (8002410 <TIM_Base_SetConfig+0x12c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d02b      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002344:	d027      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a32      	ldr	r2, [pc, #200]	@ (8002414 <TIM_Base_SetConfig+0x130>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d023      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a31      	ldr	r2, [pc, #196]	@ (8002418 <TIM_Base_SetConfig+0x134>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a30      	ldr	r2, [pc, #192]	@ (800241c <TIM_Base_SetConfig+0x138>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01b      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2f      	ldr	r2, [pc, #188]	@ (8002420 <TIM_Base_SetConfig+0x13c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d017      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2e      	ldr	r2, [pc, #184]	@ (8002424 <TIM_Base_SetConfig+0x140>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2d      	ldr	r2, [pc, #180]	@ (8002428 <TIM_Base_SetConfig+0x144>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00f      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a2c      	ldr	r2, [pc, #176]	@ (800242c <TIM_Base_SetConfig+0x148>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00b      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2b      	ldr	r2, [pc, #172]	@ (8002430 <TIM_Base_SetConfig+0x14c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2a      	ldr	r2, [pc, #168]	@ (8002434 <TIM_Base_SetConfig+0x150>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d003      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a29      	ldr	r2, [pc, #164]	@ (8002438 <TIM_Base_SetConfig+0x154>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d108      	bne.n	80023a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800239c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a10      	ldr	r2, [pc, #64]	@ (8002410 <TIM_Base_SetConfig+0x12c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_Base_SetConfig+0xf8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <TIM_Base_SetConfig+0x13c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d103      	bne.n	80023e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d105      	bne.n	8002402 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f023 0201 	bic.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]
  }
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800
 800241c:	40000c00 	.word	0x40000c00
 8002420:	40010400 	.word	0x40010400
 8002424:	40014000 	.word	0x40014000
 8002428:	40014400 	.word	0x40014400
 800242c:	40014800 	.word	0x40014800
 8002430:	40001800 	.word	0x40001800
 8002434:	40001c00 	.word	0x40001c00
 8002438:	40002000 	.word	0x40002000

0800243c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e042      	b.n	80024fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fba4 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fd69 	bl	8002f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	d175      	bne.n	8002610 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_UART_Transmit+0x2c>
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e06e      	b.n	8002612 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2221      	movs	r2, #33	@ 0x21
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002542:	f7fe fced 	bl	8000f20 <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	88fa      	ldrh	r2, [r7, #6]
 800254c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	88fa      	ldrh	r2, [r7, #6]
 8002552:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800255c:	d108      	bne.n	8002570 <HAL_UART_Transmit+0x6c>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d104      	bne.n	8002570 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e003      	b.n	8002578 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002578:	e02e      	b.n	80025d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	@ 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fb05 	bl	8002b94 <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e03a      	b.n	8002612 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10b      	bne.n	80025ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3302      	adds	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e007      	b.n	80025ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1cb      	bne.n	800257a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2140      	movs	r1, #64	@ 0x40
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fad1 	bl	8002b94 <UART_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e006      	b.n	8002612 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0ba      	sub	sp, #232	@ 0xe8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800264e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800265a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10f      	bne.n	8002682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_UART_IRQHandler+0x66>
 800266e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fbc2 	bl	8002e04 <UART_Receive_IT>
      return;
 8002680:	e25b      	b.n	8002b3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80de 	beq.w	8002848 <HAL_UART_IRQHandler+0x22c>
 800268c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800269c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80d1 	beq.w	8002848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_UART_IRQHandler+0xae>
 80026b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_UART_IRQHandler+0xd2>
 80026d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f043 0202 	orr.w	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_UART_IRQHandler+0xf6>
 80026fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	f043 0204 	orr.w	r2, r3, #4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d011      	beq.n	8002742 <HAL_UART_IRQHandler+0x126>
 800271e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800272a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f043 0208 	orr.w	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 81f2 	beq.w	8002b30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800274c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_UART_IRQHandler+0x14e>
 8002758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fb4d 	bl	8002e04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <HAL_UART_IRQHandler+0x17a>
 800278e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d04f      	beq.n	8002836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa55 	bl	8002c46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	d141      	bne.n	800282e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3314      	adds	r3, #20
 80027b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027b8:	e853 3f00 	ldrex	r3, [r3]
 80027bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3314      	adds	r3, #20
 80027d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80027d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80027da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80027e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027e6:	e841 2300 	strex	r3, r2, [r1]
 80027ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80027ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1d9      	bne.n	80027aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d013      	beq.n	8002826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002802:	4a7e      	ldr	r2, [pc, #504]	@ (80029fc <HAL_UART_IRQHandler+0x3e0>)
 8002804:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fce6 	bl	80011dc <HAL_DMA_Abort_IT>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002820:	4610      	mov	r0, r2
 8002822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	e00e      	b.n	8002844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f99e 	bl	8002b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282c:	e00a      	b.n	8002844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f99a 	bl	8002b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002834:	e006      	b.n	8002844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f996 	bl	8002b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002842:	e175      	b.n	8002b30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002844:	bf00      	nop
    return;
 8002846:	e173      	b.n	8002b30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	2b01      	cmp	r3, #1
 800284e:	f040 814f 	bne.w	8002af0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8148 	beq.w	8002af0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8141 	beq.w	8002af0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	f040 80b6 	bne.w	8002a00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8145 	beq.w	8002b34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028b2:	429a      	cmp	r2, r3
 80028b4:	f080 813e 	bcs.w	8002b34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028ca:	f000 8088 	beq.w	80029de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80028e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80028fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800290a:	e841 2300 	strex	r3, r2, [r1]
 800290e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1d9      	bne.n	80028ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3314      	adds	r3, #20
 8002920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800292a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800293e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e1      	bne.n	800291a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800296c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800297a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800297c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002980:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e3      	bne.n	8002956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ae:	f023 0310 	bic.w	r3, r3, #16
 80029b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e3      	bne.n	800299c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fb8f 	bl	80010fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f8c1 	bl	8002b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029fa:	e09b      	b.n	8002b34 <HAL_UART_IRQHandler+0x518>
 80029fc:	08002d0d 	.word	0x08002d0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 808e 	beq.w	8002b38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8089 	beq.w	8002b38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e3      	bne.n	8002a26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3314      	adds	r3, #20
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3314      	adds	r3, #20
 8002a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a8a:	e841 2300 	strex	r3, r2, [r1]
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1e3      	bne.n	8002a5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	e853 3f00 	ldrex	r3, [r3]
 8002ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0310 	bic.w	r3, r3, #16
 8002aba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ac8:	61fa      	str	r2, [r7, #28]
 8002aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002acc:	69b9      	ldr	r1, [r7, #24]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	e841 2300 	strex	r3, r2, [r1]
 8002ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e3      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f847 	bl	8002b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aee:	e023      	b.n	8002b38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d009      	beq.n	8002b10 <HAL_UART_IRQHandler+0x4f4>
 8002afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f913 	bl	8002d34 <UART_Transmit_IT>
    return;
 8002b0e:	e014      	b.n	8002b3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00e      	beq.n	8002b3a <HAL_UART_IRQHandler+0x51e>
 8002b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f953 	bl	8002dd4 <UART_EndTransmit_IT>
    return;
 8002b2e:	e004      	b.n	8002b3a <HAL_UART_IRQHandler+0x51e>
    return;
 8002b30:	bf00      	nop
 8002b32:	e002      	b.n	8002b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8002b34:	bf00      	nop
 8002b36:	e000      	b.n	8002b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8002b38:	bf00      	nop
  }
}
 8002b3a:	37e8      	adds	r7, #232	@ 0xe8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba4:	e03b      	b.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d037      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bae:	f7fe f9b7 	bl	8000f20 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	6a3a      	ldr	r2, [r7, #32]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e03a      	b.n	8002c3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d023      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b80      	cmp	r3, #128	@ 0x80
 8002bda:	d020      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b40      	cmp	r3, #64	@ 0x40
 8002be0:	d01d      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d116      	bne.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f81d 	bl	8002c46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d0b4      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b095      	sub	sp, #84	@ 0x54
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e5      	bne.n	8002c4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e5      	bne.n	8002c82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d119      	bne.n	8002cf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	330c      	adds	r3, #12
 8002cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f023 0310 	bic.w	r3, r3, #16
 8002cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	330c      	adds	r3, #12
 8002cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cde:	61ba      	str	r2, [r7, #24]
 8002ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6979      	ldr	r1, [r7, #20]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	613b      	str	r3, [r7, #16]
   return(result);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e5      	bne.n	8002cbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d00:	bf00      	nop
 8002d02:	3754      	adds	r7, #84	@ 0x54
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff ff1e 	bl	8002b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b21      	cmp	r3, #33	@ 0x21
 8002d46:	d13e      	bne.n	8002dc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d50:	d114      	bne.n	8002d7c <UART_Transmit_IT+0x48>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d110      	bne.n	8002d7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]
 8002d7a:	e008      	b.n	8002d8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	1c59      	adds	r1, r3, #1
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6211      	str	r1, [r2, #32]
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002db0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fea3 	bl	8002b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	@ 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b22      	cmp	r3, #34	@ 0x22
 8002e16:	f040 80ae 	bne.w	8002f76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e22:	d117      	bne.n	8002e54 <UART_Receive_IT+0x50>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d113      	bne.n	8002e54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	1c9a      	adds	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e52:	e026      	b.n	8002ea2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e66:	d007      	beq.n	8002e78 <UART_Receive_IT+0x74>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <UART_Receive_IT+0x82>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e008      	b.n	8002e98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d15d      	bne.n	8002f72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0220 	bic.w	r2, r2, #32
 8002ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ed4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d135      	bne.n	8002f68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
 8002f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	613b      	str	r3, [r7, #16]
   return(result);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f023 0310 	bic.w	r3, r3, #16
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f22:	623a      	str	r2, [r7, #32]
 8002f24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	69f9      	ldr	r1, [r7, #28]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e5      	bne.n	8002f02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d10a      	bne.n	8002f5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff fe0b 	bl	8002b7c <HAL_UARTEx_RxEventCallback>
 8002f66:	e002      	b.n	8002f6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff fdf3 	bl	8002b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e002      	b.n	8002f78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
  }
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3730      	adds	r7, #48	@ 0x30
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b0c0      	sub	sp, #256	@ 0x100
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	68d9      	ldr	r1, [r3, #12]
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	ea40 0301 	orr.w	r3, r0, r1
 8002fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fd8:	f021 010c 	bic.w	r1, r1, #12
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffa:	6999      	ldr	r1, [r3, #24]
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	ea40 0301 	orr.w	r3, r0, r1
 8003006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b8f      	ldr	r3, [pc, #572]	@ (800324c <UART_SetConfig+0x2cc>)
 8003010:	429a      	cmp	r2, r3
 8003012:	d005      	beq.n	8003020 <UART_SetConfig+0xa0>
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b8d      	ldr	r3, [pc, #564]	@ (8003250 <UART_SetConfig+0x2d0>)
 800301c:	429a      	cmp	r2, r3
 800301e:	d104      	bne.n	800302a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003020:	f7fe ff38 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8003024:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003028:	e003      	b.n	8003032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800302a:	f7fe ff1f 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 800302e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800303c:	f040 810c 	bne.w	8003258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003044:	2200      	movs	r2, #0
 8003046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800304a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800304e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003052:	4622      	mov	r2, r4
 8003054:	462b      	mov	r3, r5
 8003056:	1891      	adds	r1, r2, r2
 8003058:	65b9      	str	r1, [r7, #88]	@ 0x58
 800305a:	415b      	adcs	r3, r3
 800305c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800305e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003062:	4621      	mov	r1, r4
 8003064:	eb12 0801 	adds.w	r8, r2, r1
 8003068:	4629      	mov	r1, r5
 800306a:	eb43 0901 	adc.w	r9, r3, r1
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800307a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003082:	4690      	mov	r8, r2
 8003084:	4699      	mov	r9, r3
 8003086:	4623      	mov	r3, r4
 8003088:	eb18 0303 	adds.w	r3, r8, r3
 800308c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003090:	462b      	mov	r3, r5
 8003092:	eb49 0303 	adc.w	r3, r9, r3
 8003096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030ae:	460b      	mov	r3, r1
 80030b0:	18db      	adds	r3, r3, r3
 80030b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80030b4:	4613      	mov	r3, r2
 80030b6:	eb42 0303 	adc.w	r3, r2, r3
 80030ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80030bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030c4:	f7fd f8dc 	bl	8000280 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4b61      	ldr	r3, [pc, #388]	@ (8003254 <UART_SetConfig+0x2d4>)
 80030ce:	fba3 2302 	umull	r2, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	011c      	lsls	r4, r3, #4
 80030d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	1891      	adds	r1, r2, r2
 80030ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030f0:	415b      	adcs	r3, r3
 80030f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030f8:	4641      	mov	r1, r8
 80030fa:	eb12 0a01 	adds.w	sl, r2, r1
 80030fe:	4649      	mov	r1, r9
 8003100:	eb43 0b01 	adc.w	fp, r3, r1
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003118:	4692      	mov	sl, r2
 800311a:	469b      	mov	fp, r3
 800311c:	4643      	mov	r3, r8
 800311e:	eb1a 0303 	adds.w	r3, sl, r3
 8003122:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003126:	464b      	mov	r3, r9
 8003128:	eb4b 0303 	adc.w	r3, fp, r3
 800312c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800313c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003144:	460b      	mov	r3, r1
 8003146:	18db      	adds	r3, r3, r3
 8003148:	643b      	str	r3, [r7, #64]	@ 0x40
 800314a:	4613      	mov	r3, r2
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	647b      	str	r3, [r7, #68]	@ 0x44
 8003152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800315a:	f7fd f891 	bl	8000280 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4611      	mov	r1, r2
 8003164:	4b3b      	ldr	r3, [pc, #236]	@ (8003254 <UART_SetConfig+0x2d4>)
 8003166:	fba3 2301 	umull	r2, r3, r3, r1
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2264      	movs	r2, #100	@ 0x64
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	1acb      	subs	r3, r1, r3
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <UART_SetConfig+0x2d4>)
 800317c:	fba3 2302 	umull	r2, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003188:	441c      	add	r4, r3
 800318a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800318e:	2200      	movs	r2, #0
 8003190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003194:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800319c:	4642      	mov	r2, r8
 800319e:	464b      	mov	r3, r9
 80031a0:	1891      	adds	r1, r2, r2
 80031a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031a4:	415b      	adcs	r3, r3
 80031a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031ac:	4641      	mov	r1, r8
 80031ae:	1851      	adds	r1, r2, r1
 80031b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80031b2:	4649      	mov	r1, r9
 80031b4:	414b      	adcs	r3, r1
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031c4:	4659      	mov	r1, fp
 80031c6:	00cb      	lsls	r3, r1, #3
 80031c8:	4651      	mov	r1, sl
 80031ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ce:	4651      	mov	r1, sl
 80031d0:	00ca      	lsls	r2, r1, #3
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	4642      	mov	r2, r8
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031e0:	464b      	mov	r3, r9
 80031e2:	460a      	mov	r2, r1
 80031e4:	eb42 0303 	adc.w	r3, r2, r3
 80031e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003200:	460b      	mov	r3, r1
 8003202:	18db      	adds	r3, r3, r3
 8003204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003206:	4613      	mov	r3, r2
 8003208:	eb42 0303 	adc.w	r3, r2, r3
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800320e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003216:	f7fd f833 	bl	8000280 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <UART_SetConfig+0x2d4>)
 8003220:	fba3 1302 	umull	r1, r3, r3, r2
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	2164      	movs	r1, #100	@ 0x64
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	3332      	adds	r3, #50	@ 0x32
 8003232:	4a08      	ldr	r2, [pc, #32]	@ (8003254 <UART_SetConfig+0x2d4>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	f003 0207 	and.w	r2, r3, #7
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4422      	add	r2, r4
 8003246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003248:	e106      	b.n	8003458 <UART_SetConfig+0x4d8>
 800324a:	bf00      	nop
 800324c:	40011000 	.word	0x40011000
 8003250:	40011400 	.word	0x40011400
 8003254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003262:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800326a:	4642      	mov	r2, r8
 800326c:	464b      	mov	r3, r9
 800326e:	1891      	adds	r1, r2, r2
 8003270:	6239      	str	r1, [r7, #32]
 8003272:	415b      	adcs	r3, r3
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
 8003276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800327a:	4641      	mov	r1, r8
 800327c:	1854      	adds	r4, r2, r1
 800327e:	4649      	mov	r1, r9
 8003280:	eb43 0501 	adc.w	r5, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	00eb      	lsls	r3, r5, #3
 800328e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003292:	00e2      	lsls	r2, r4, #3
 8003294:	4614      	mov	r4, r2
 8003296:	461d      	mov	r5, r3
 8003298:	4643      	mov	r3, r8
 800329a:	18e3      	adds	r3, r4, r3
 800329c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032a0:	464b      	mov	r3, r9
 80032a2:	eb45 0303 	adc.w	r3, r5, r3
 80032a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032c6:	4629      	mov	r1, r5
 80032c8:	008b      	lsls	r3, r1, #2
 80032ca:	4621      	mov	r1, r4
 80032cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d0:	4621      	mov	r1, r4
 80032d2:	008a      	lsls	r2, r1, #2
 80032d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032d8:	f7fc ffd2 	bl	8000280 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4b60      	ldr	r3, [pc, #384]	@ (8003464 <UART_SetConfig+0x4e4>)
 80032e2:	fba3 2302 	umull	r2, r3, r3, r2
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	011c      	lsls	r4, r3, #4
 80032ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032fc:	4642      	mov	r2, r8
 80032fe:	464b      	mov	r3, r9
 8003300:	1891      	adds	r1, r2, r2
 8003302:	61b9      	str	r1, [r7, #24]
 8003304:	415b      	adcs	r3, r3
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800330c:	4641      	mov	r1, r8
 800330e:	1851      	adds	r1, r2, r1
 8003310:	6139      	str	r1, [r7, #16]
 8003312:	4649      	mov	r1, r9
 8003314:	414b      	adcs	r3, r1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003324:	4659      	mov	r1, fp
 8003326:	00cb      	lsls	r3, r1, #3
 8003328:	4651      	mov	r1, sl
 800332a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332e:	4651      	mov	r1, sl
 8003330:	00ca      	lsls	r2, r1, #3
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	4603      	mov	r3, r0
 8003338:	4642      	mov	r2, r8
 800333a:	189b      	adds	r3, r3, r2
 800333c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003340:	464b      	mov	r3, r9
 8003342:	460a      	mov	r2, r1
 8003344:	eb42 0303 	adc.w	r3, r2, r3
 8003348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003356:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003364:	4649      	mov	r1, r9
 8003366:	008b      	lsls	r3, r1, #2
 8003368:	4641      	mov	r1, r8
 800336a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800336e:	4641      	mov	r1, r8
 8003370:	008a      	lsls	r2, r1, #2
 8003372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003376:	f7fc ff83 	bl	8000280 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4611      	mov	r1, r2
 8003380:	4b38      	ldr	r3, [pc, #224]	@ (8003464 <UART_SetConfig+0x4e4>)
 8003382:	fba3 2301 	umull	r2, r3, r3, r1
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2264      	movs	r2, #100	@ 0x64
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	1acb      	subs	r3, r1, r3
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	3332      	adds	r3, #50	@ 0x32
 8003394:	4a33      	ldr	r2, [pc, #204]	@ (8003464 <UART_SetConfig+0x4e4>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a0:	441c      	add	r4, r3
 80033a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a6:	2200      	movs	r2, #0
 80033a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80033aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80033ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033b0:	4642      	mov	r2, r8
 80033b2:	464b      	mov	r3, r9
 80033b4:	1891      	adds	r1, r2, r2
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	415b      	adcs	r3, r3
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033c0:	4641      	mov	r1, r8
 80033c2:	1851      	adds	r1, r2, r1
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	4649      	mov	r1, r9
 80033c8:	414b      	adcs	r3, r1
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d8:	4659      	mov	r1, fp
 80033da:	00cb      	lsls	r3, r1, #3
 80033dc:	4651      	mov	r1, sl
 80033de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e2:	4651      	mov	r1, sl
 80033e4:	00ca      	lsls	r2, r1, #3
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	4642      	mov	r2, r8
 80033ee:	189b      	adds	r3, r3, r2
 80033f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033f2:	464b      	mov	r3, r9
 80033f4:	460a      	mov	r2, r1
 80033f6:	eb42 0303 	adc.w	r3, r2, r3
 80033fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	663b      	str	r3, [r7, #96]	@ 0x60
 8003406:	667a      	str	r2, [r7, #100]	@ 0x64
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003414:	4649      	mov	r1, r9
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	4641      	mov	r1, r8
 800341a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341e:	4641      	mov	r1, r8
 8003420:	008a      	lsls	r2, r1, #2
 8003422:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003426:	f7fc ff2b 	bl	8000280 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <UART_SetConfig+0x4e4>)
 8003430:	fba3 1302 	umull	r1, r3, r3, r2
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	2164      	movs	r1, #100	@ 0x64
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	3332      	adds	r3, #50	@ 0x32
 8003442:	4a08      	ldr	r2, [pc, #32]	@ (8003464 <UART_SetConfig+0x4e4>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	f003 020f 	and.w	r2, r3, #15
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4422      	add	r2, r4
 8003456:	609a      	str	r2, [r3, #8]
}
 8003458:	bf00      	nop
 800345a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800345e:	46bd      	mov	sp, r7
 8003460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003464:	51eb851f 	.word	0x51eb851f

08003468 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f103 0208 	add.w	r2, r3, #8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f103 0208 	add.w	r2, r3, #8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f103 0208 	add.w	r2, r3, #8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d103      	bne.n	800352a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e00c      	b.n	8003544 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3308      	adds	r3, #8
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e002      	b.n	8003538 <vListInsert+0x2e>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	d2f6      	bcs.n	8003532 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6852      	ldr	r2, [r2, #4]
 800359c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d103      	bne.n	80035b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <xQueueGenericReset+0x2c>
        __asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	60bb      	str	r3, [r7, #8]
    }
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80035fc:	f002 f9fe 	bl	80059fc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	3b01      	subs	r3, #1
 800362e:	68f9      	ldr	r1, [r7, #12]
 8003630:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	441a      	add	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	22ff      	movs	r2, #255	@ 0xff
 8003640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	22ff      	movs	r2, #255	@ 0xff
 8003648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d114      	bne.n	800367c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01a      	beq.n	8003690 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3310      	adds	r3, #16
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f9c0 	bl	80049e4 <xTaskRemoveFromEventList>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d012      	beq.n	8003690 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800366a:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <xQueueGenericReset+0xd0>)
 800366c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	e009      	b.n	8003690 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3310      	adds	r3, #16
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fef1 	bl	8003468 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3324      	adds	r3, #36	@ 0x24
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff feec 	bl	8003468 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003690:	f002 f9e6 	bl	8005a60 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003694:	2301      	movs	r3, #1
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	@ 0x30
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <xQueueGenericCreate+0x2c>
        __asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	61bb      	str	r3, [r7, #24]
    }
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d006      	beq.n	80036ee <xQueueGenericCreate+0x4a>
 80036e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d101      	bne.n	80036f2 <xQueueGenericCreate+0x4e>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <xQueueGenericCreate+0x50>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xQueueGenericCreate+0x6c>
        __asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	617b      	str	r3, [r7, #20]
    }
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003716:	d90b      	bls.n	8003730 <xQueueGenericCreate+0x8c>
        __asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	613b      	str	r3, [r7, #16]
    }
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	3350      	adds	r3, #80	@ 0x50
 8003734:	4618      	mov	r0, r3
 8003736:	f002 fa8b 	bl	8005c50 <pvPortMalloc>
 800373a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00d      	beq.n	800375e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3350      	adds	r3, #80	@ 0x50
 800374a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800374c:	79fa      	ldrb	r2, [r7, #7]
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f805 	bl	8003768 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800375e:	6a3b      	ldr	r3, [r7, #32]
    }
 8003760:	4618      	mov	r0, r3
 8003762:	3728      	adds	r7, #40	@ 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e002      	b.n	800378a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003796:	2101      	movs	r1, #1
 8003798:	69b8      	ldr	r0, [r7, #24]
 800379a:	f7ff ff19 	bl	80035d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08e      	sub	sp, #56	@ 0x38
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037be:	2300      	movs	r3, #0
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <xQueueGenericSend+0x34>
        __asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <xQueueGenericSend+0x42>
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <xQueueGenericSend+0x46>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <xQueueGenericSend+0x48>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <xQueueGenericSend+0x64>
        __asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800380e:	bf00      	nop
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d103      	bne.n	8003822 <xQueueGenericSend+0x72>
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <xQueueGenericSend+0x76>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <xQueueGenericSend+0x78>
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <xQueueGenericSend+0x94>
        __asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	623b      	str	r3, [r7, #32]
    }
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003844:	f001 fa6e 	bl	8004d24 <xTaskGetSchedulerState>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <xQueueGenericSend+0xa4>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <xQueueGenericSend+0xa8>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <xQueueGenericSend+0xaa>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <xQueueGenericSend+0xc6>
        __asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	61fb      	str	r3, [r7, #28]
    }
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	e7fd      	b.n	8003872 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003876:	f002 f8c1 	bl	80059fc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <xQueueGenericSend+0xdc>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d129      	bne.n	80038e0 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003892:	f000 fb47 	bl	8003f24 <prvCopyDataToQueue>
 8003896:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	3324      	adds	r3, #36	@ 0x24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 f89d 	bl	80049e4 <xTaskRemoveFromEventList>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80038b0:	4b3f      	ldr	r3, [pc, #252]	@ (80039b0 <xQueueGenericSend+0x200>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	e00a      	b.n	80038d8 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80038c8:	4b39      	ldr	r3, [pc, #228]	@ (80039b0 <xQueueGenericSend+0x200>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80038d8:	f002 f8c2 	bl	8005a60 <vPortExitCritical>
                return pdPASS;
 80038dc:	2301      	movs	r3, #1
 80038de:	e063      	b.n	80039a8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80038e6:	f002 f8bb 	bl	8005a60 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e05c      	b.n	80039a8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80038ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f8d7 	bl	8004aac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003902:	f002 f8ad 	bl	8005a60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003906:	f000 fe49 	bl	800459c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800390a:	f002 f877 	bl	80059fc <vPortEnterCritical>
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003914:	b25b      	sxtb	r3, r3
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d103      	bne.n	8003924 <xQueueGenericSend+0x174>
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800392a:	b25b      	sxtb	r3, r3
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d103      	bne.n	800393a <xQueueGenericSend+0x18a>
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800393a:	f002 f891 	bl	8005a60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800393e:	1d3a      	adds	r2, r7, #4
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f001 f8c6 	bl	8004ad8 <xTaskCheckForTimeOut>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d124      	bne.n	800399c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003952:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003954:	f000 fbde 	bl	8004114 <prvIsQueueFull>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	3310      	adds	r3, #16
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 ffea 	bl	8004940 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800396c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800396e:	f000 fb69 	bl	8004044 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003972:	f000 fe21 	bl	80045b8 <xTaskResumeAll>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f af7c 	bne.w	8003876 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800397e:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <xQueueGenericSend+0x200>)
 8003980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	e772      	b.n	8003876 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003992:	f000 fb57 	bl	8004044 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003996:	f000 fe0f 	bl	80045b8 <xTaskResumeAll>
 800399a:	e76c      	b.n	8003876 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800399c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800399e:	f000 fb51 	bl	8004044 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80039a2:	f000 fe09 	bl	80045b8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80039a6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3738      	adds	r7, #56	@ 0x38
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b090      	sub	sp, #64	@ 0x40
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
 80039e2:	e7fd      	b.n	80039e0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <xQueueGenericSendFromISR+0x3e>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueGenericSendFromISR+0x42>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueGenericSendFromISR+0x44>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSendFromISR+0x6e>
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <xQueueGenericSendFromISR+0x72>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueGenericSendFromISR+0x74>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	623b      	str	r3, [r7, #32]
    }
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a44:	f002 f8c2 	bl	8005bcc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003a48:	f3ef 8211 	mrs	r2, BASEPRI
 8003a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	61fa      	str	r2, [r7, #28]
 8003a5e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003a60:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a62:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d302      	bcc.n	8003a76 <xQueueGenericSendFromISR+0xc2>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d13f      	bne.n	8003af6 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a8c:	f000 fa4a 	bl	8003f24 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003a90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d112      	bne.n	8003ac0 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d026      	beq.n	8003af0 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa4:	3324      	adds	r3, #36	@ 0x24
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 ff9c 	bl	80049e4 <xTaskRemoveFromEventList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01e      	beq.n	8003af0 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01b      	beq.n	8003af0 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e017      	b.n	8003af0 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003ac0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003ac4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ac6:	d10b      	bne.n	8003ae0 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	617b      	str	r3, [r7, #20]
    }
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	b25a      	sxtb	r2, r3
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003af0:	2301      	movs	r3, #1
 8003af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8003af4:	e001      	b.n	8003afa <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b04:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3740      	adds	r7, #64	@ 0x40
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	@ 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <xQueueReceive+0x32>
        __asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	623b      	str	r3, [r7, #32]
    }
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	e7fd      	b.n	8003b3e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <xQueueReceive+0x40>
 8003b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <xQueueReceive+0x44>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <xQueueReceive+0x46>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <xQueueReceive+0x62>
        __asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	61fb      	str	r3, [r7, #28]
    }
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	e7fd      	b.n	8003b6e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b72:	f001 f8d7 	bl	8004d24 <xTaskGetSchedulerState>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <xQueueReceive+0x72>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <xQueueReceive+0x76>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <xQueueReceive+0x78>
 8003b86:	2300      	movs	r3, #0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <xQueueReceive+0x94>
        __asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	61bb      	str	r3, [r7, #24]
    }
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003ba4:	f001 ff2a 	bl	80059fc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01f      	beq.n	8003bf4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bb8:	f000 fa1e 	bl	8003ff8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	1e5a      	subs	r2, r3, #1
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00f      	beq.n	8003bec <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bce:	3310      	adds	r3, #16
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 ff07 	bl	80049e4 <xTaskRemoveFromEventList>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd0 <xQueueReceive+0x1c0>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003bec:	f001 ff38 	bl	8005a60 <vPortExitCritical>
                return pdPASS;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e069      	b.n	8003cc8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003bfa:	f001 ff31 	bl	8005a60 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e062      	b.n	8003cc8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c08:	f107 0310 	add.w	r3, r7, #16
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ff4d 	bl	8004aac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c12:	2301      	movs	r3, #1
 8003c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c16:	f001 ff23 	bl	8005a60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c1a:	f000 fcbf 	bl	800459c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c1e:	f001 feed 	bl	80059fc <vPortEnterCritical>
 8003c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d103      	bne.n	8003c38 <xQueueReceive+0x128>
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c3e:	b25b      	sxtb	r3, r3
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d103      	bne.n	8003c4e <xQueueReceive+0x13e>
 8003c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c4e:	f001 ff07 	bl	8005a60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c52:	1d3a      	adds	r2, r7, #4
 8003c54:	f107 0310 	add.w	r3, r7, #16
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 ff3c 	bl	8004ad8 <xTaskCheckForTimeOut>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d123      	bne.n	8003cae <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c68:	f000 fa3e 	bl	80040e8 <prvIsQueueEmpty>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d017      	beq.n	8003ca2 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c74:	3324      	adds	r3, #36	@ 0x24
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4611      	mov	r1, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fe60 	bl	8004940 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003c80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c82:	f000 f9df 	bl	8004044 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003c86:	f000 fc97 	bl	80045b8 <xTaskResumeAll>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d189      	bne.n	8003ba4 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003c90:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd0 <xQueueReceive+0x1c0>)
 8003c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	e780      	b.n	8003ba4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ca4:	f000 f9ce 	bl	8004044 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ca8:	f000 fc86 	bl	80045b8 <xTaskResumeAll>
 8003cac:	e77a      	b.n	8003ba4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cb0:	f000 f9c8 	bl	8004044 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003cb4:	f000 fc80 	bl	80045b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cba:	f000 fa15 	bl	80040e8 <prvIsQueueEmpty>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f43f af6f 	beq.w	8003ba4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003cc6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3730      	adds	r7, #48	@ 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08e      	sub	sp, #56	@ 0x38
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	623b      	str	r3, [r7, #32]
    }
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	e7fd      	b.n	8003d04 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	61fb      	str	r3, [r7, #28]
    }
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d28:	f000 fffc 	bl	8004d24 <xTaskGetSchedulerState>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <xQueueSemaphoreTake+0x64>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <xQueueSemaphoreTake+0x68>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <xQueueSemaphoreTake+0x6a>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <xQueueSemaphoreTake+0x86>
        __asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	61bb      	str	r3, [r7, #24]
    }
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	e7fd      	b.n	8003d56 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d5a:	f001 fe4f 	bl	80059fc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d024      	beq.n	8003db4 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	1e5a      	subs	r2, r3, #1
 8003d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d70:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d7a:	f001 f973 	bl	8005064 <pvTaskIncrementMutexHeldCount>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d82:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00f      	beq.n	8003dac <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	3310      	adds	r3, #16
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fe27 	bl	80049e4 <xTaskRemoveFromEventList>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003d9c:	4b54      	ldr	r3, [pc, #336]	@ (8003ef0 <xQueueSemaphoreTake+0x21c>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003dac:	f001 fe58 	bl	8005a60 <vPortExitCritical>
                return pdPASS;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e098      	b.n	8003ee6 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d112      	bne.n	8003de0 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <xQueueSemaphoreTake+0x104>
        __asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	617b      	str	r3, [r7, #20]
    }
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003dd8:	f001 fe42 	bl	8005a60 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e082      	b.n	8003ee6 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fe5e 	bl	8004aac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003df4:	f001 fe34 	bl	8005a60 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003df8:	f000 fbd0 	bl	800459c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003dfc:	f001 fdfe 	bl	80059fc <vPortEnterCritical>
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d103      	bne.n	8003e16 <xQueueSemaphoreTake+0x142>
 8003e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d103      	bne.n	8003e2c <xQueueSemaphoreTake+0x158>
 8003e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e2c:	f001 fe18 	bl	8005a60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e30:	463a      	mov	r2, r7
 8003e32:	f107 030c 	add.w	r3, r7, #12
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fe4d 	bl	8004ad8 <xTaskCheckForTimeOut>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d132      	bne.n	8003eaa <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e46:	f000 f94f 	bl	80040e8 <prvIsQueueEmpty>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d026      	beq.n	8003e9e <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 8003e58:	f001 fdd0 	bl	80059fc <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 ff7d 	bl	8004d60 <xTaskPriorityInherit>
 8003e66:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8003e68:	f001 fdfa 	bl	8005a60 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6e:	3324      	adds	r3, #36	@ 0x24
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fd63 	bl	8004940 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003e7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e7c:	f000 f8e2 	bl	8004044 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003e80:	f000 fb9a 	bl	80045b8 <xTaskResumeAll>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f47f af67 	bne.w	8003d5a <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8003e8c:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <xQueueSemaphoreTake+0x21c>)
 8003e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	e75d      	b.n	8003d5a <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003e9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ea0:	f000 f8d0 	bl	8004044 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ea4:	f000 fb88 	bl	80045b8 <xTaskResumeAll>
 8003ea8:	e757      	b.n	8003d5a <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003eaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eac:	f000 f8ca 	bl	8004044 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003eb0:	f000 fb82 	bl	80045b8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003eb6:	f000 f917 	bl	80040e8 <prvIsQueueEmpty>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f43f af4c 	beq.w	8003d5a <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 8003ec8:	f001 fd98 	bl	80059fc <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ecc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ece:	f000 f811 	bl	8003ef4 <prvGetDisinheritPriorityAfterTimeout>
 8003ed2:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f832 	bl	8004f44 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003ee0:	f001 fdbe 	bl	8005a60 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003ee4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3738      	adds	r7, #56	@ 0x38
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d006      	beq.n	8003f12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1c3 0305 	rsb	r3, r3, #5
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e001      	b.n	8003f16 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003f16:	68fb      	ldr	r3, [r7, #12]
    }
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d14d      	bne.n	8003fe6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 ff7c 	bl	8004e4c <xTaskPriorityDisinherit>
 8003f54:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	e043      	b.n	8003fe6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d119      	bne.n	8003f98 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6858      	ldr	r0, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	f002 f8c4 	bl	80060fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	441a      	add	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d32b      	bcc.n	8003fe6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	e026      	b.n	8003fe6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68d8      	ldr	r0, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	f002 f8aa 	bl	80060fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d207      	bcs.n	8003fd4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	425b      	negs	r3, r3
 8003fce:	441a      	add	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d105      	bne.n	8003fe6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003fee:	697b      	ldr	r3, [r7, #20]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	d303      	bcc.n	800402c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68d9      	ldr	r1, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	461a      	mov	r2, r3
 8004036:	6838      	ldr	r0, [r7, #0]
 8004038:	f002 f860 	bl	80060fc <memcpy>
    }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800404c:	f001 fcd6 	bl	80059fc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004056:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004058:	e011      	b.n	800407e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d012      	beq.n	8004088 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3324      	adds	r3, #36	@ 0x24
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fcbc 	bl	80049e4 <xTaskRemoveFromEventList>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004072:	f000 fd99 	bl	8004ba8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	3b01      	subs	r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800407e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004082:	2b00      	cmp	r3, #0
 8004084:	dce9      	bgt.n	800405a <prvUnlockQueue+0x16>
 8004086:	e000      	b.n	800408a <prvUnlockQueue+0x46>
                        break;
 8004088:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	22ff      	movs	r2, #255	@ 0xff
 800408e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004092:	f001 fce5 	bl	8005a60 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004096:	f001 fcb1 	bl	80059fc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040a0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80040a2:	e011      	b.n	80040c8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d012      	beq.n	80040d2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3310      	adds	r3, #16
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fc97 	bl	80049e4 <xTaskRemoveFromEventList>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80040bc:	f000 fd74 	bl	8004ba8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80040c0:	7bbb      	ldrb	r3, [r7, #14]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80040c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	dce9      	bgt.n	80040a4 <prvUnlockQueue+0x60>
 80040d0:	e000      	b.n	80040d4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80040d2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	22ff      	movs	r2, #255	@ 0xff
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80040dc:	f001 fcc0 	bl	8005a60 <vPortExitCritical>
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80040f0:	f001 fc84 	bl	80059fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e001      	b.n	8004106 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004106:	f001 fcab 	bl	8005a60 <vPortExitCritical>

    return xReturn;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800411c:	f001 fc6e 	bl	80059fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	429a      	cmp	r2, r3
 800412a:	d102      	bne.n	8004132 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800412c:	2301      	movs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e001      	b.n	8004136 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004136:	f001 fc93 	bl	8005a60 <vPortExitCritical>

    return xReturn;
 800413a:	68fb      	ldr	r3, [r7, #12]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e014      	b.n	800417e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004154:	4a0f      	ldr	r2, [pc, #60]	@ (8004194 <vQueueAddToRegistry+0x50>)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004160:	490c      	ldr	r1, [pc, #48]	@ (8004194 <vQueueAddToRegistry+0x50>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800416a:	4a0a      	ldr	r2, [pc, #40]	@ (8004194 <vQueueAddToRegistry+0x50>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004176:	e006      	b.n	8004186 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b07      	cmp	r3, #7
 8004182:	d9e7      	bls.n	8004154 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000220 	.word	0x20000220

08004198 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80041a8:	f001 fc28 	bl	80059fc <vPortEnterCritical>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d103      	bne.n	80041c2 <vQueueWaitForMessageRestricted+0x2a>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d103      	bne.n	80041d8 <vQueueWaitForMessageRestricted+0x40>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d8:	f001 fc42 	bl	8005a60 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3324      	adds	r3, #36	@ 0x24
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fbcd 	bl	800498c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80041f2:	6978      	ldr	r0, [r7, #20]
 80041f4:	f7ff ff26 	bl	8004044 <prvUnlockQueue>
    }
 80041f8:	bf00      	nop
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004200:	b580      	push	{r7, lr}
 8004202:	b08c      	sub	sp, #48	@ 0x30
 8004204:	af04      	add	r7, sp, #16
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fd1b 	bl	8005c50 <pvPortMalloc>
 800421a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00e      	beq.n	8004240 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004222:	2058      	movs	r0, #88	@ 0x58
 8004224:	f001 fd14 	bl	8005c50 <pvPortMalloc>
 8004228:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30
 8004236:	e005      	b.n	8004244 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f001 fdeb 	bl	8005e14 <vPortFree>
 800423e:	e001      	b.n	8004244 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d013      	beq.n	8004272 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	2300      	movs	r3, #0
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	9302      	str	r3, [sp, #8]
 8004254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f80e 	bl	8004282 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004266:	69f8      	ldr	r0, [r7, #28]
 8004268:	f000 f8a2 	bl	80043b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800426c:	2301      	movs	r3, #1
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	e002      	b.n	8004278 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004278:	69bb      	ldr	r3, [r7, #24]
    }
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b088      	sub	sp, #32
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	461a      	mov	r2, r3
 800429a:	21a5      	movs	r1, #165	@ 0xa5
 800429c:	f001 fefa 	bl	8006094 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042aa:	3b01      	subs	r3, #1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f023 0307 	bic.w	r3, r3, #7
 80042b8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <prvInitialiseNewTask+0x5a>
        __asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	617b      	str	r3, [r7, #20]
    }
 80042d6:	bf00      	nop
 80042d8:	bf00      	nop
 80042da:	e7fd      	b.n	80042d8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01f      	beq.n	8004322 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e012      	b.n	800430e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	7819      	ldrb	r1, [r3, #0]
 80042f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	3334      	adds	r3, #52	@ 0x34
 80042f8:	460a      	mov	r2, r1
 80042fa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3301      	adds	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	2b09      	cmp	r3, #9
 8004312:	d9e9      	bls.n	80042e8 <prvInitialiseNewTask+0x66>
 8004314:	e000      	b.n	8004318 <prvInitialiseNewTask+0x96>
            {
                break;
 8004316:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004320:	e003      	b.n	800432a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	2b04      	cmp	r3, #4
 800432e:	d901      	bls.n	8004334 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004330:	2304      	movs	r3, #4
 8004332:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004338:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800433e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	2200      	movs	r2, #0
 8004344:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	3304      	adds	r3, #4
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f8ac 	bl	80034a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	3318      	adds	r3, #24
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff f8a7 	bl	80034a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	f1c3 0205 	rsb	r2, r3, #5
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800436e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	3350      	adds	r3, #80	@ 0x50
 8004374:	2204      	movs	r2, #4
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fe8b 	bl	8006094 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800437e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004380:	3354      	adds	r3, #84	@ 0x54
 8004382:	2201      	movs	r2, #1
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f001 fe84 	bl	8006094 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	69b8      	ldr	r0, [r7, #24]
 8004392:	f001 f9ff 	bl	8005794 <pxPortInitialiseStack>
 8004396:	4602      	mov	r2, r0
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043a8:	bf00      	nop
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80043b8:	f001 fb20 	bl	80059fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80043bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004470 <prvAddNewTaskToReadyList+0xc0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3301      	adds	r3, #1
 80043c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004470 <prvAddNewTaskToReadyList+0xc0>)
 80043c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80043c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004474 <prvAddNewTaskToReadyList+0xc4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80043ce:	4a29      	ldr	r2, [pc, #164]	@ (8004474 <prvAddNewTaskToReadyList+0xc4>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043d4:	4b26      	ldr	r3, [pc, #152]	@ (8004470 <prvAddNewTaskToReadyList+0xc0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d110      	bne.n	80043fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80043dc:	f000 fc08 	bl	8004bf0 <prvInitialiseTaskLists>
 80043e0:	e00d      	b.n	80043fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80043e2:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <prvAddNewTaskToReadyList+0xc8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ea:	4b22      	ldr	r3, [pc, #136]	@ (8004474 <prvAddNewTaskToReadyList+0xc4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d802      	bhi.n	80043fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80043f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004474 <prvAddNewTaskToReadyList+0xc4>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80043fe:	4b1f      	ldr	r3, [pc, #124]	@ (800447c <prvAddNewTaskToReadyList+0xcc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	4a1d      	ldr	r2, [pc, #116]	@ (800447c <prvAddNewTaskToReadyList+0xcc>)
 8004406:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004408:	4b1c      	ldr	r3, [pc, #112]	@ (800447c <prvAddNewTaskToReadyList+0xcc>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <prvAddNewTaskToReadyList+0xd0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4313      	orrs	r3, r2
 800441e:	4a18      	ldr	r2, [pc, #96]	@ (8004480 <prvAddNewTaskToReadyList+0xd0>)
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <prvAddNewTaskToReadyList+0xd4>)
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7ff f842 	bl	80034c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800443e:	f001 fb0f 	bl	8005a60 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <prvAddNewTaskToReadyList+0xc8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800444a:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <prvAddNewTaskToReadyList+0xc4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	429a      	cmp	r2, r3
 8004456:	d207      	bcs.n	8004468 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004458:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <prvAddNewTaskToReadyList+0xd8>)
 800445a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000338 	.word	0x20000338
 8004474:	20000260 	.word	0x20000260
 8004478:	20000344 	.word	0x20000344
 800447c:	20000354 	.word	0x20000354
 8004480:	20000340 	.word	0x20000340
 8004484:	20000264 	.word	0x20000264
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d018      	beq.n	80044d0 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800449e:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <vTaskDelay+0x64>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <vTaskDelay+0x32>
        __asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	60bb      	str	r3, [r7, #8]
    }
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	e7fd      	b.n	80044ba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80044be:	f000 f86d 	bl	800459c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044c2:	2100      	movs	r1, #0
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fde1 	bl	800508c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80044ca:	f000 f875 	bl	80045b8 <xTaskResumeAll>
 80044ce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80044d6:	4b07      	ldr	r3, [pc, #28]	@ (80044f4 <vTaskDelay+0x68>)
 80044d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000360 	.word	0x20000360
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80044fe:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <vTaskStartScheduler+0x88>)
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2300      	movs	r3, #0
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	2282      	movs	r2, #130	@ 0x82
 800450a:	491e      	ldr	r1, [pc, #120]	@ (8004584 <vTaskStartScheduler+0x8c>)
 800450c:	481e      	ldr	r0, [pc, #120]	@ (8004588 <vTaskStartScheduler+0x90>)
 800450e:	f7ff fe77 	bl	8004200 <xTaskCreate>
 8004512:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d102      	bne.n	8004520 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800451a:	f000 fe1d 	bl	8005158 <xTimerCreateTimerTask>
 800451e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d116      	bne.n	8004554 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
    }
 8004538:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800453a:	4b14      	ldr	r3, [pc, #80]	@ (800458c <vTaskStartScheduler+0x94>)
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004542:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <vTaskStartScheduler+0x98>)
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004548:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <vTaskStartScheduler+0x9c>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800454e:	f001 f9b1 	bl	80058b4 <xPortStartScheduler>
 8004552:	e00f      	b.n	8004574 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d10b      	bne.n	8004574 <vTaskStartScheduler+0x7c>
        __asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	607b      	str	r3, [r7, #4]
    }
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004574:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <vTaskStartScheduler+0xa0>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	2000035c 	.word	0x2000035c
 8004584:	08006a40 	.word	0x08006a40
 8004588:	08004bc1 	.word	0x08004bc1
 800458c:	20000358 	.word	0x20000358
 8004590:	20000344 	.word	0x20000344
 8004594:	2000033c 	.word	0x2000033c
 8004598:	2000000c 	.word	0x2000000c

0800459c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80045a0:	4b04      	ldr	r3, [pc, #16]	@ (80045b4 <vTaskSuspendAll+0x18>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a03      	ldr	r2, [pc, #12]	@ (80045b4 <vTaskSuspendAll+0x18>)
 80045a8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80045aa:	bf00      	nop
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	20000360 	.word	0x20000360

080045b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80045c6:	4b42      	ldr	r3, [pc, #264]	@ (80046d0 <xTaskResumeAll+0x118>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <xTaskResumeAll+0x2e>
        __asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	603b      	str	r3, [r7, #0]
    }
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	e7fd      	b.n	80045e2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80045e6:	f001 fa09 	bl	80059fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80045ea:	4b39      	ldr	r3, [pc, #228]	@ (80046d0 <xTaskResumeAll+0x118>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	4a37      	ldr	r2, [pc, #220]	@ (80046d0 <xTaskResumeAll+0x118>)
 80045f2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f4:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <xTaskResumeAll+0x118>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d161      	bne.n	80046c0 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045fc:	4b35      	ldr	r3, [pc, #212]	@ (80046d4 <xTaskResumeAll+0x11c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d05d      	beq.n	80046c0 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004604:	e02e      	b.n	8004664 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004606:	4b34      	ldr	r3, [pc, #208]	@ (80046d8 <xTaskResumeAll+0x120>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3318      	adds	r3, #24
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe ffb2 	bl	800357c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3304      	adds	r3, #4
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe ffad 	bl	800357c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004626:	2201      	movs	r2, #1
 8004628:	409a      	lsls	r2, r3
 800462a:	4b2c      	ldr	r3, [pc, #176]	@ (80046dc <xTaskResumeAll+0x124>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	4a2a      	ldr	r2, [pc, #168]	@ (80046dc <xTaskResumeAll+0x124>)
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4a27      	ldr	r2, [pc, #156]	@ (80046e0 <xTaskResumeAll+0x128>)
 8004642:	441a      	add	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3304      	adds	r3, #4
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f7fe ff39 	bl	80034c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004654:	4b23      	ldr	r3, [pc, #140]	@ (80046e4 <xTaskResumeAll+0x12c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800465e:	4b22      	ldr	r3, [pc, #136]	@ (80046e8 <xTaskResumeAll+0x130>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004664:	4b1c      	ldr	r3, [pc, #112]	@ (80046d8 <xTaskResumeAll+0x120>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1cc      	bne.n	8004606 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004672:	f000 fb3b 	bl	8004cec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004676:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <xTaskResumeAll+0x134>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d010      	beq.n	80046a4 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004682:	f000 f847 	bl	8004714 <xTaskIncrementTick>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 800468c:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <xTaskResumeAll+0x130>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3b01      	subs	r3, #1
 8004696:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f1      	bne.n	8004682 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800469e:	4b13      	ldr	r3, [pc, #76]	@ (80046ec <xTaskResumeAll+0x134>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80046a4:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <xTaskResumeAll+0x130>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80046ac:	2301      	movs	r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80046b0:	4b0f      	ldr	r3, [pc, #60]	@ (80046f0 <xTaskResumeAll+0x138>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80046c0:	f001 f9ce 	bl	8005a60 <vPortExitCritical>

    return xAlreadyYielded;
 80046c4:	68bb      	ldr	r3, [r7, #8]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000360 	.word	0x20000360
 80046d4:	20000338 	.word	0x20000338
 80046d8:	200002f8 	.word	0x200002f8
 80046dc:	20000340 	.word	0x20000340
 80046e0:	20000264 	.word	0x20000264
 80046e4:	20000260 	.word	0x20000260
 80046e8:	2000034c 	.word	0x2000034c
 80046ec:	20000348 	.word	0x20000348
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80046fa:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <xTaskGetTickCount+0x1c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004700:	687b      	ldr	r3, [r7, #4]
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	2000033c 	.word	0x2000033c

08004714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800471e:	4b4f      	ldr	r3, [pc, #316]	@ (800485c <xTaskIncrementTick+0x148>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 808f 	bne.w	8004846 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004728:	4b4d      	ldr	r3, [pc, #308]	@ (8004860 <xTaskIncrementTick+0x14c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004730:	4a4b      	ldr	r2, [pc, #300]	@ (8004860 <xTaskIncrementTick+0x14c>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d121      	bne.n	8004780 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800473c:	4b49      	ldr	r3, [pc, #292]	@ (8004864 <xTaskIncrementTick+0x150>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <xTaskIncrementTick+0x4a>
        __asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	603b      	str	r3, [r7, #0]
    }
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <xTaskIncrementTick+0x46>
 800475e:	4b41      	ldr	r3, [pc, #260]	@ (8004864 <xTaskIncrementTick+0x150>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	4b40      	ldr	r3, [pc, #256]	@ (8004868 <xTaskIncrementTick+0x154>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a3e      	ldr	r2, [pc, #248]	@ (8004864 <xTaskIncrementTick+0x150>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4a3e      	ldr	r2, [pc, #248]	@ (8004868 <xTaskIncrementTick+0x154>)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b3e      	ldr	r3, [pc, #248]	@ (800486c <xTaskIncrementTick+0x158>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	4a3c      	ldr	r2, [pc, #240]	@ (800486c <xTaskIncrementTick+0x158>)
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	f000 fab6 	bl	8004cec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004780:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <xTaskIncrementTick+0x15c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	429a      	cmp	r2, r3
 8004788:	d348      	bcc.n	800481c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800478a:	4b36      	ldr	r3, [pc, #216]	@ (8004864 <xTaskIncrementTick+0x150>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004794:	4b36      	ldr	r3, [pc, #216]	@ (8004870 <xTaskIncrementTick+0x15c>)
 8004796:	f04f 32ff 	mov.w	r2, #4294967295
 800479a:	601a      	str	r2, [r3, #0]
                    break;
 800479c:	e03e      	b.n	800481c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479e:	4b31      	ldr	r3, [pc, #196]	@ (8004864 <xTaskIncrementTick+0x150>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d203      	bcs.n	80047be <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80047b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004870 <xTaskIncrementTick+0x15c>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047bc:	e02e      	b.n	800481c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe feda 	bl	800357c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	3318      	adds	r3, #24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fed1 	bl	800357c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	2201      	movs	r2, #1
 80047e0:	409a      	lsls	r2, r3
 80047e2:	4b24      	ldr	r3, [pc, #144]	@ (8004874 <xTaskIncrementTick+0x160>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	4a22      	ldr	r2, [pc, #136]	@ (8004874 <xTaskIncrementTick+0x160>)
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004878 <xTaskIncrementTick+0x164>)
 80047fa:	441a      	add	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7fe fe5d 	bl	80034c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480c:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <xTaskIncrementTick+0x168>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	429a      	cmp	r2, r3
 8004814:	d3b9      	bcc.n	800478a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8004816:	2301      	movs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800481a:	e7b6      	b.n	800478a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800481c:	4b17      	ldr	r3, [pc, #92]	@ (800487c <xTaskIncrementTick+0x168>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004822:	4915      	ldr	r1, [pc, #84]	@ (8004878 <xTaskIncrementTick+0x164>)
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d901      	bls.n	8004838 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004838:	4b11      	ldr	r3, [pc, #68]	@ (8004880 <xTaskIncrementTick+0x16c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e004      	b.n	8004850 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004846:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <xTaskIncrementTick+0x170>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	4a0d      	ldr	r2, [pc, #52]	@ (8004884 <xTaskIncrementTick+0x170>)
 800484e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004850:	697b      	ldr	r3, [r7, #20]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000360 	.word	0x20000360
 8004860:	2000033c 	.word	0x2000033c
 8004864:	200002f0 	.word	0x200002f0
 8004868:	200002f4 	.word	0x200002f4
 800486c:	20000350 	.word	0x20000350
 8004870:	20000358 	.word	0x20000358
 8004874:	20000340 	.word	0x20000340
 8004878:	20000264 	.word	0x20000264
 800487c:	20000260 	.word	0x20000260
 8004880:	2000034c 	.word	0x2000034c
 8004884:	20000348 	.word	0x20000348

08004888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800488e:	4b27      	ldr	r3, [pc, #156]	@ (800492c <vTaskSwitchContext+0xa4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004896:	4b26      	ldr	r3, [pc, #152]	@ (8004930 <vTaskSwitchContext+0xa8>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800489c:	e040      	b.n	8004920 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800489e:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <vTaskSwitchContext+0xa8>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a4:	4b23      	ldr	r3, [pc, #140]	@ (8004934 <vTaskSwitchContext+0xac>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	f1c3 031f 	rsb	r3, r3, #31
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	491f      	ldr	r1, [pc, #124]	@ (8004938 <vTaskSwitchContext+0xb0>)
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <vTaskSwitchContext+0x5e>
        __asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	607b      	str	r3, [r7, #4]
    }
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <vTaskSwitchContext+0x5a>
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4a11      	ldr	r2, [pc, #68]	@ (8004938 <vTaskSwitchContext+0xb0>)
 80048f2:	4413      	add	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	3308      	adds	r3, #8
 8004908:	429a      	cmp	r2, r3
 800490a:	d104      	bne.n	8004916 <vTaskSwitchContext+0x8e>
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a07      	ldr	r2, [pc, #28]	@ (800493c <vTaskSwitchContext+0xb4>)
 800491e:	6013      	str	r3, [r2, #0]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	20000360 	.word	0x20000360
 8004930:	2000034c 	.word	0x2000034c
 8004934:	20000340 	.word	0x20000340
 8004938:	20000264 	.word	0x20000264
 800493c:	20000260 	.word	0x20000260

08004940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60fb      	str	r3, [r7, #12]
    }
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004968:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <vTaskPlaceOnEventList+0x48>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3318      	adds	r3, #24
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fe fdca 	bl	800350a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004976:	2101      	movs	r1, #1
 8004978:	6838      	ldr	r0, [r7, #0]
 800497a:	f000 fb87 	bl	800508c <prvAddCurrentTaskToDelayedList>
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000260 	.word	0x20000260

0800498c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	617b      	str	r3, [r7, #20]
    }
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	e7fd      	b.n	80049b2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b6:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3318      	adds	r3, #24
 80049bc:	4619      	mov	r1, r3
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7fe fd7f 	bl	80034c2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80049ca:	f04f 33ff 	mov.w	r3, #4294967295
 80049ce:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	68b8      	ldr	r0, [r7, #8]
 80049d4:	f000 fb5a 	bl	800508c <prvAddCurrentTaskToDelayedList>
    }
 80049d8:	bf00      	nop
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000260 	.word	0x20000260

080049e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	60fb      	str	r3, [r7, #12]
    }
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	3318      	adds	r3, #24
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fdb0 	bl	800357c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a94 <xTaskRemoveFromEventList+0xb0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11c      	bne.n	8004a5e <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe fda7 	bl	800357c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	2201      	movs	r2, #1
 8004a34:	409a      	lsls	r2, r3
 8004a36:	4b18      	ldr	r3, [pc, #96]	@ (8004a98 <xTaskRemoveFromEventList+0xb4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	4a16      	ldr	r2, [pc, #88]	@ (8004a98 <xTaskRemoveFromEventList+0xb4>)
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4a13      	ldr	r2, [pc, #76]	@ (8004a9c <xTaskRemoveFromEventList+0xb8>)
 8004a4e:	441a      	add	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7fe fd33 	bl	80034c2 <vListInsertEnd>
 8004a5c:	e005      	b.n	8004a6a <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	3318      	adds	r3, #24
 8004a62:	4619      	mov	r1, r3
 8004a64:	480e      	ldr	r0, [pc, #56]	@ (8004aa0 <xTaskRemoveFromEventList+0xbc>)
 8004a66:	f7fe fd2c 	bl	80034c2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <xTaskRemoveFromEventList+0xc0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d905      	bls.n	8004a84 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <xTaskRemoveFromEventList+0xc4>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e001      	b.n	8004a88 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004a88:	697b      	ldr	r3, [r7, #20]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000360 	.word	0x20000360
 8004a98:	20000340 	.word	0x20000340
 8004a9c:	20000264 	.word	0x20000264
 8004aa0:	200002f8 	.word	0x200002f8
 8004aa4:	20000260 	.word	0x20000260
 8004aa8:	2000034c 	.word	0x2000034c

08004aac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ab4:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <vTaskInternalSetTimeOutState+0x24>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004abc:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <vTaskInternalSetTimeOutState+0x28>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	605a      	str	r2, [r3, #4]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000350 	.word	0x20000350
 8004ad4:	2000033c 	.word	0x2000033c

08004ad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	613b      	str	r3, [r7, #16]
    }
 8004afa:	bf00      	nop
 8004afc:	bf00      	nop
 8004afe:	e7fd      	b.n	8004afc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
    }
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004b1e:	f000 ff6d 	bl	80059fc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004b22:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba0 <xTaskCheckForTimeOut+0xc8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d102      	bne.n	8004b42 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e026      	b.n	8004b90 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b17      	ldr	r3, [pc, #92]	@ (8004ba4 <xTaskCheckForTimeOut+0xcc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d00a      	beq.n	8004b64 <xTaskCheckForTimeOut+0x8c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d305      	bcc.n	8004b64 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e015      	b.n	8004b90 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d20b      	bcs.n	8004b86 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	1ad2      	subs	r2, r2, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff ff96 	bl	8004aac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	e004      	b.n	8004b90 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004b90:	f000 ff66 	bl	8005a60 <vPortExitCritical>

    return xReturn;
 8004b94:	69fb      	ldr	r3, [r7, #28]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	2000033c 	.word	0x2000033c
 8004ba4:	20000350 	.word	0x20000350

08004ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004bac:	4b03      	ldr	r3, [pc, #12]	@ (8004bbc <vTaskMissedYield+0x14>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	2000034c 	.word	0x2000034c

08004bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004bc8:	f000 f852 	bl	8004c70 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <prvIdleTask+0x28>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d9f9      	bls.n	8004bc8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <prvIdleTask+0x2c>)
 8004bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004be4:	e7f0      	b.n	8004bc8 <prvIdleTask+0x8>
 8004be6:	bf00      	nop
 8004be8:	20000264 	.word	0x20000264
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	e00c      	b.n	8004c16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4a12      	ldr	r2, [pc, #72]	@ (8004c50 <prvInitialiseTaskLists+0x60>)
 8004c08:	4413      	add	r3, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fc2c 	bl	8003468 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3301      	adds	r3, #1
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d9ef      	bls.n	8004bfc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004c1c:	480d      	ldr	r0, [pc, #52]	@ (8004c54 <prvInitialiseTaskLists+0x64>)
 8004c1e:	f7fe fc23 	bl	8003468 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004c22:	480d      	ldr	r0, [pc, #52]	@ (8004c58 <prvInitialiseTaskLists+0x68>)
 8004c24:	f7fe fc20 	bl	8003468 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004c28:	480c      	ldr	r0, [pc, #48]	@ (8004c5c <prvInitialiseTaskLists+0x6c>)
 8004c2a:	f7fe fc1d 	bl	8003468 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004c2e:	480c      	ldr	r0, [pc, #48]	@ (8004c60 <prvInitialiseTaskLists+0x70>)
 8004c30:	f7fe fc1a 	bl	8003468 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004c34:	480b      	ldr	r0, [pc, #44]	@ (8004c64 <prvInitialiseTaskLists+0x74>)
 8004c36:	f7fe fc17 	bl	8003468 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <prvInitialiseTaskLists+0x78>)
 8004c3c:	4a05      	ldr	r2, [pc, #20]	@ (8004c54 <prvInitialiseTaskLists+0x64>)
 8004c3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c40:	4b0a      	ldr	r3, [pc, #40]	@ (8004c6c <prvInitialiseTaskLists+0x7c>)
 8004c42:	4a05      	ldr	r2, [pc, #20]	@ (8004c58 <prvInitialiseTaskLists+0x68>)
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000264 	.word	0x20000264
 8004c54:	200002c8 	.word	0x200002c8
 8004c58:	200002dc 	.word	0x200002dc
 8004c5c:	200002f8 	.word	0x200002f8
 8004c60:	2000030c 	.word	0x2000030c
 8004c64:	20000324 	.word	0x20000324
 8004c68:	200002f0 	.word	0x200002f0
 8004c6c:	200002f4 	.word	0x200002f4

08004c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c76:	e019      	b.n	8004cac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004c78:	f000 fec0 	bl	80059fc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c7c:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <prvCheckTasksWaitingTermination+0x50>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fe fc77 	bl	800357c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <prvCheckTasksWaitingTermination+0x54>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc4 <prvCheckTasksWaitingTermination+0x54>)
 8004c96:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <prvCheckTasksWaitingTermination+0x58>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <prvCheckTasksWaitingTermination+0x58>)
 8004ca0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004ca2:	f000 fedd 	bl	8005a60 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f810 	bl	8004ccc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cac:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <prvCheckTasksWaitingTermination+0x58>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e1      	bne.n	8004c78 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2000030c 	.word	0x2000030c
 8004cc4:	20000338 	.word	0x20000338
 8004cc8:	20000320 	.word	0x20000320

08004ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 f89b 	bl	8005e14 <vPortFree>
                vPortFree( pxTCB );
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 f898 	bl	8005e14 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <prvResetNextTaskUnblockTime+0x30>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004cfa:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <prvResetNextTaskUnblockTime+0x34>)
 8004cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004d00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004d02:	e005      	b.n	8004d10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <prvResetNextTaskUnblockTime+0x30>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a04      	ldr	r2, [pc, #16]	@ (8004d20 <prvResetNextTaskUnblockTime+0x34>)
 8004d0e:	6013      	str	r3, [r2, #0]
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	200002f0 	.word	0x200002f0
 8004d20:	20000358 	.word	0x20000358

08004d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <xTaskGetSchedulerState+0x34>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004d32:	2301      	movs	r3, #1
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	e008      	b.n	8004d4a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d38:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <xTaskGetSchedulerState+0x38>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d102      	bne.n	8004d46 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004d40:	2302      	movs	r3, #2
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	e001      	b.n	8004d4a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004d4a:	687b      	ldr	r3, [r7, #4]
    }
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000344 	.word	0x20000344
 8004d5c:	20000360 	.word	0x20000360

08004d60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d05e      	beq.n	8004e34 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7a:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <xTaskPriorityInherit+0xe0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d24e      	bcs.n	8004e22 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	db06      	blt.n	8004d9a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8004e40 <xTaskPriorityInherit+0xe0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	f1c3 0205 	rsb	r2, r3, #5
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6959      	ldr	r1, [r3, #20]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4a26      	ldr	r2, [pc, #152]	@ (8004e44 <xTaskPriorityInherit+0xe4>)
 8004dac:	4413      	add	r3, r2
 8004dae:	4299      	cmp	r1, r3
 8004db0:	d12f      	bne.n	8004e12 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	3304      	adds	r3, #4
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fbe0 	bl	800357c <uxListRemove>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43da      	mvns	r2, r3
 8004dce:	4b1e      	ldr	r3, [pc, #120]	@ (8004e48 <xTaskPriorityInherit+0xe8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <xTaskPriorityInherit+0xe8>)
 8004dd6:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dd8:	4b19      	ldr	r3, [pc, #100]	@ (8004e40 <xTaskPriorityInherit+0xe0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	2201      	movs	r2, #1
 8004de8:	409a      	lsls	r2, r3
 8004dea:	4b17      	ldr	r3, [pc, #92]	@ (8004e48 <xTaskPriorityInherit+0xe8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	4a15      	ldr	r2, [pc, #84]	@ (8004e48 <xTaskPriorityInherit+0xe8>)
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4a10      	ldr	r2, [pc, #64]	@ (8004e44 <xTaskPriorityInherit+0xe4>)
 8004e02:	441a      	add	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f7fe fb59 	bl	80034c2 <vListInsertEnd>
 8004e10:	e004      	b.n	8004e1c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <xTaskPriorityInherit+0xe0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e008      	b.n	8004e34 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e26:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <xTaskPriorityInherit+0xe0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d201      	bcs.n	8004e34 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004e34:	68fb      	ldr	r3, [r7, #12]
    }
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000260 	.word	0x20000260
 8004e44:	20000264 	.word	0x20000264
 8004e48:	20000340 	.word	0x20000340

08004e4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d065      	beq.n	8004f2e <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004e62:	4b35      	ldr	r3, [pc, #212]	@ (8004f38 <xTaskPriorityDisinherit+0xec>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d00b      	beq.n	8004e84 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	60fb      	str	r3, [r7, #12]
    }
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	e7fd      	b.n	8004e80 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60bb      	str	r3, [r7, #8]
    }
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d039      	beq.n	8004f2e <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d135      	bne.n	8004f2e <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fb58 	bl	800357c <uxListRemove>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43da      	mvns	r2, r3
 8004ede:	4b17      	ldr	r3, [pc, #92]	@ (8004f3c <xTaskPriorityDisinherit+0xf0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <xTaskPriorityDisinherit+0xf0>)
 8004ee6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	f1c3 0205 	rsb	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	2201      	movs	r2, #1
 8004f02:	409a      	lsls	r2, r3
 8004f04:	4b0d      	ldr	r3, [pc, #52]	@ (8004f3c <xTaskPriorityDisinherit+0xf0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f3c <xTaskPriorityDisinherit+0xf0>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <xTaskPriorityDisinherit+0xf4>)
 8004f1c:	441a      	add	r2, r3
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f7fe facc 	bl	80034c2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004f2e:	697b      	ldr	r3, [r7, #20]
    }
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000260 	.word	0x20000260
 8004f3c:	20000340 	.word	0x20000340
 8004f40:	20000264 	.word	0x20000264

08004f44 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d079      	beq.n	8005050 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60fb      	str	r3, [r7, #12]
    }
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d902      	bls.n	8004f8c <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e002      	b.n	8004f92 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f90:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d059      	beq.n	8005050 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d154      	bne.n	8005050 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8005058 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d10b      	bne.n	8004fc8 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	60bb      	str	r3, [r7, #8]
    }
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db04      	blt.n	8004fe6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f1c3 0205 	rsb	r2, r3, #5
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	6959      	ldr	r1, [r3, #20]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4a19      	ldr	r2, [pc, #100]	@ (800505c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ff6:	4413      	add	r3, r2
 8004ff8:	4299      	cmp	r1, r3
 8004ffa:	d129      	bne.n	8005050 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe fabb 	bl	800357c <uxListRemove>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	2201      	movs	r2, #1
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43da      	mvns	r2, r3
 8005018:	4b11      	ldr	r3, [pc, #68]	@ (8005060 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4013      	ands	r3, r2
 800501e:	4a10      	ldr	r2, [pc, #64]	@ (8005060 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005020:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	2201      	movs	r2, #1
 8005028:	409a      	lsls	r2, r3
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4313      	orrs	r3, r2
 8005030:	4a0b      	ldr	r2, [pc, #44]	@ (8005060 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4a06      	ldr	r2, [pc, #24]	@ (800505c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005042:	441a      	add	r2, r3
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7fe fa39 	bl	80034c2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005050:	bf00      	nop
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000260 	.word	0x20000260
 800505c:	20000264 	.word	0x20000264
 8005060:	20000340 	.word	0x20000340

08005064 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005068:	4b07      	ldr	r3, [pc, #28]	@ (8005088 <pvTaskIncrementMutexHeldCount+0x24>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005070:	4b05      	ldr	r3, [pc, #20]	@ (8005088 <pvTaskIncrementMutexHeldCount+0x24>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005076:	3201      	adds	r2, #1
 8005078:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800507a:	4b03      	ldr	r3, [pc, #12]	@ (8005088 <pvTaskIncrementMutexHeldCount+0x24>)
 800507c:	681b      	ldr	r3, [r3, #0]
    }
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000260 	.word	0x20000260

0800508c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005096:	4b29      	ldr	r3, [pc, #164]	@ (800513c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800509c:	4b28      	ldr	r3, [pc, #160]	@ (8005140 <prvAddCurrentTaskToDelayedList+0xb4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe fa6a 	bl	800357c <uxListRemove>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050ae:	4b24      	ldr	r3, [pc, #144]	@ (8005140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	2201      	movs	r2, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43da      	mvns	r2, r3
 80050bc:	4b21      	ldr	r3, [pc, #132]	@ (8005144 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4013      	ands	r3, r2
 80050c2:	4a20      	ldr	r2, [pc, #128]	@ (8005144 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d10a      	bne.n	80050e4 <prvAddCurrentTaskToDelayedList+0x58>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	481a      	ldr	r0, [pc, #104]	@ (8005148 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050de:	f7fe f9f0 	bl	80034c2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80050e2:	e026      	b.n	8005132 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ec:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d209      	bcs.n	8005110 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fc:	4b13      	ldr	r3, [pc, #76]	@ (800514c <prvAddCurrentTaskToDelayedList+0xc0>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b0f      	ldr	r3, [pc, #60]	@ (8005140 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7fe f9fe 	bl	800350a <vListInsert>
}
 800510e:	e010      	b.n	8005132 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005110:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b0a      	ldr	r3, [pc, #40]	@ (8005140 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fe f9f4 	bl	800350a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005122:	4b0c      	ldr	r3, [pc, #48]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	429a      	cmp	r2, r3
 800512a:	d202      	bcs.n	8005132 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800512c:	4a09      	ldr	r2, [pc, #36]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xc8>)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6013      	str	r3, [r2, #0]
}
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	2000033c 	.word	0x2000033c
 8005140:	20000260 	.word	0x20000260
 8005144:	20000340 	.word	0x20000340
 8005148:	20000324 	.word	0x20000324
 800514c:	200002f4 	.word	0x200002f4
 8005150:	200002f0 	.word	0x200002f0
 8005154:	20000358 	.word	0x20000358

08005158 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005162:	f000 fae1 	bl	8005728 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005166:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <xTimerCreateTimerTask+0x58>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00b      	beq.n	8005186 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800516e:	4b11      	ldr	r3, [pc, #68]	@ (80051b4 <xTimerCreateTimerTask+0x5c>)
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	2302      	movs	r3, #2
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2300      	movs	r3, #0
 8005178:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800517c:	490e      	ldr	r1, [pc, #56]	@ (80051b8 <xTimerCreateTimerTask+0x60>)
 800517e:	480f      	ldr	r0, [pc, #60]	@ (80051bc <xTimerCreateTimerTask+0x64>)
 8005180:	f7ff f83e 	bl	8004200 <xTaskCreate>
 8005184:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	603b      	str	r3, [r7, #0]
    }
 800519e:	bf00      	nop
 80051a0:	bf00      	nop
 80051a2:	e7fd      	b.n	80051a0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80051a4:	687b      	ldr	r3, [r7, #4]
    }
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000394 	.word	0x20000394
 80051b4:	20000398 	.word	0x20000398
 80051b8:	08006a48 	.word	0x08006a48
 80051bc:	080052f9 	.word	0x080052f9

080051c0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	@ 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <xTimerGenericCommand+0x30>
        __asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	623b      	str	r3, [r7, #32]
    }
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80051f0:	4b19      	ldr	r3, [pc, #100]	@ (8005258 <xTimerGenericCommand+0x98>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d02a      	beq.n	800524e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b05      	cmp	r3, #5
 8005208:	dc18      	bgt.n	800523c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800520a:	f7ff fd8b 	bl	8004d24 <xTaskGetSchedulerState>
 800520e:	4603      	mov	r3, r0
 8005210:	2b02      	cmp	r3, #2
 8005212:	d109      	bne.n	8005228 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005214:	4b10      	ldr	r3, [pc, #64]	@ (8005258 <xTimerGenericCommand+0x98>)
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	f107 0114 	add.w	r1, r7, #20
 800521c:	2300      	movs	r3, #0
 800521e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005220:	f7fe fac6 	bl	80037b0 <xQueueGenericSend>
 8005224:	6278      	str	r0, [r7, #36]	@ 0x24
 8005226:	e012      	b.n	800524e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005228:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <xTimerGenericCommand+0x98>)
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	f107 0114 	add.w	r1, r7, #20
 8005230:	2300      	movs	r3, #0
 8005232:	2200      	movs	r2, #0
 8005234:	f7fe fabc 	bl	80037b0 <xQueueGenericSend>
 8005238:	6278      	str	r0, [r7, #36]	@ 0x24
 800523a:	e008      	b.n	800524e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <xTimerGenericCommand+0x98>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	f107 0114 	add.w	r1, r7, #20
 8005244:	2300      	movs	r3, #0
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	f7fe fbb4 	bl	80039b4 <xQueueGenericSendFromISR>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005250:	4618      	mov	r0, r3
 8005252:	3728      	adds	r7, #40	@ 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000394 	.word	0x20000394

0800525c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005266:	4b23      	ldr	r3, [pc, #140]	@ (80052f4 <prvProcessExpiredTimer+0x98>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3304      	adds	r3, #4
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe f981 	bl	800357c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d023      	beq.n	80052d0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	18d1      	adds	r1, r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	6978      	ldr	r0, [r7, #20]
 8005296:	f000 f8d5 	bl	8005444 <prvInsertTimerInActiveList>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d020      	beq.n	80052e2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a0:	2300      	movs	r3, #0
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2300      	movs	r3, #0
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	2100      	movs	r1, #0
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7ff ff88 	bl	80051c0 <xTimerGenericCommand>
 80052b0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d114      	bne.n	80052e2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
    }
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	e7fd      	b.n	80052cc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	6978      	ldr	r0, [r7, #20]
 80052e8:	4798      	blx	r3
    }
 80052ea:	bf00      	nop
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	2000038c 	.word	0x2000038c

080052f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f859 	bl	80053bc <prvGetNextExpireTime>
 800530a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f805 	bl	8005320 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005316:	f000 f8d7 	bl	80054c8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800531a:	bf00      	nop
 800531c:	e7f0      	b.n	8005300 <prvTimerTask+0x8>
	...

08005320 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800532a:	f7ff f937 	bl	800459c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800532e:	f107 0308 	add.w	r3, r7, #8
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f866 	bl	8005404 <prvSampleTimeNow>
 8005338:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d130      	bne.n	80053a2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <prvProcessTimerOrBlockTask+0x3c>
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	429a      	cmp	r2, r3
 800534c:	d806      	bhi.n	800535c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800534e:	f7ff f933 	bl	80045b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ff81 	bl	800525c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800535a:	e024      	b.n	80053a6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005362:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <prvProcessTimerOrBlockTask+0x90>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <prvProcessTimerOrBlockTask+0x50>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <prvProcessTimerOrBlockTask+0x52>
 8005370:	2300      	movs	r3, #0
 8005372:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005374:	4b0f      	ldr	r3, [pc, #60]	@ (80053b4 <prvProcessTimerOrBlockTask+0x94>)
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4619      	mov	r1, r3
 8005382:	f7fe ff09 	bl	8004198 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005386:	f7ff f917 	bl	80045b8 <xTaskResumeAll>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005390:	4b09      	ldr	r3, [pc, #36]	@ (80053b8 <prvProcessTimerOrBlockTask+0x98>)
 8005392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	f3bf 8f6f 	isb	sy
    }
 80053a0:	e001      	b.n	80053a6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80053a2:	f7ff f909 	bl	80045b8 <xTaskResumeAll>
    }
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000390 	.word	0x20000390
 80053b4:	20000394 	.word	0x20000394
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <prvGetNextExpireTime+0x44>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <prvGetNextExpireTime+0x16>
 80053ce:	2201      	movs	r2, #1
 80053d0:	e000      	b.n	80053d4 <prvGetNextExpireTime+0x18>
 80053d2:	2200      	movs	r2, #0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053e0:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <prvGetNextExpireTime+0x44>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e001      	b.n	80053f0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80053f0:	68fb      	ldr	r3, [r7, #12]
    }
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	2000038c 	.word	0x2000038c

08005404 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800540c:	f7ff f972 	bl	80046f4 <xTaskGetTickCount>
 8005410:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005412:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <prvSampleTimeNow+0x3c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	429a      	cmp	r2, r3
 800541a:	d205      	bcs.n	8005428 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800541c:	f000 f91e 	bl	800565c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e002      	b.n	800542e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800542e:	4a04      	ldr	r2, [pc, #16]	@ (8005440 <prvSampleTimeNow+0x3c>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005434:	68fb      	ldr	r3, [r7, #12]
    }
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	2000039c 	.word	0x2000039c

08005444 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	429a      	cmp	r2, r3
 8005468:	d812      	bhi.n	8005490 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e01b      	b.n	80054b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800547e:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <prvInsertTimerInActiveList+0x7c>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7fe f83e 	bl	800350a <vListInsert>
 800548e:	e012      	b.n	80054b6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d206      	bcs.n	80054a6 <prvInsertTimerInActiveList+0x62>
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e007      	b.n	80054b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054a6:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <prvInsertTimerInActiveList+0x80>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f7fe f82a 	bl	800350a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80054b6:	697b      	ldr	r3, [r7, #20]
    }
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000390 	.word	0x20000390
 80054c4:	2000038c 	.word	0x2000038c

080054c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	@ 0x30
 80054cc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054ce:	e0b2      	b.n	8005636 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f2c0 80af 	blt.w	8005636 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	3304      	adds	r3, #4
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe f847 	bl	800357c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054ee:	1d3b      	adds	r3, r7, #4
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff ff87 	bl	8005404 <prvSampleTimeNow>
 80054f6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	f200 8098 	bhi.w	8005630 <prvProcessReceivedCommands+0x168>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <prvProcessReceivedCommands+0x40>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005531 	.word	0x08005531
 800550c:	08005531 	.word	0x08005531
 8005510:	08005531 	.word	0x08005531
 8005514:	080055a7 	.word	0x080055a7
 8005518:	080055bb 	.word	0x080055bb
 800551c:	08005607 	.word	0x08005607
 8005520:	08005531 	.word	0x08005531
 8005524:	08005531 	.word	0x08005531
 8005528:	080055a7 	.word	0x080055a7
 800552c:	080055bb 	.word	0x080055bb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	18d1      	adds	r1, r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005550:	f7ff ff78 	bl	8005444 <prvInsertTimerInActiveList>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d06c      	beq.n	8005634 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005560:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d061      	beq.n	8005634 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	441a      	add	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	2100      	movs	r1, #0
 8005580:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005582:	f7ff fe1d 	bl	80051c0 <xTimerGenericCommand>
 8005586:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d152      	bne.n	8005634 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61bb      	str	r3, [r7, #24]
    }
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80055b8:	e03d      	b.n	8005636 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	617b      	str	r3, [r7, #20]
    }
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	18d1      	adds	r1, r2, r3
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	6a3a      	ldr	r2, [r7, #32]
 80055fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005600:	f7ff ff20 	bl	8005444 <prvInsertTimerInActiveList>
                        break;
 8005604:	e017      	b.n	8005636 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8005614:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005616:	f000 fbfd 	bl	8005e14 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800561a:	e00c      	b.n	8005636 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800562e:	e002      	b.n	8005636 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <prvProcessReceivedCommands+0x16e>
                        break;
 8005634:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005636:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <prvProcessReceivedCommands+0x190>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f107 0108 	add.w	r1, r7, #8
 800563e:	2200      	movs	r2, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fa65 	bl	8003b10 <xQueueReceive>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	f47f af41 	bne.w	80054d0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800564e:	bf00      	nop
 8005650:	bf00      	nop
 8005652:	3728      	adds	r7, #40	@ 0x28
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000394 	.word	0x20000394

0800565c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005662:	e049      	b.n	80056f8 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005664:	4b2e      	ldr	r3, [pc, #184]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566e:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3304      	adds	r3, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f7fd ff7d 	bl	800357c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d02f      	beq.n	80056f8 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d90e      	bls.n	80056c8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7fd ff22 	bl	800350a <vListInsert>
 80056c6:	e017      	b.n	80056f8 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2300      	movs	r3, #0
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	2100      	movs	r1, #0
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fd74 	bl	80051c0 <xTimerGenericCommand>
 80056d8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	603b      	str	r3, [r7, #0]
    }
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056f8:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1b0      	bne.n	8005664 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005702:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <prvSwitchTimerLists+0xc8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a04      	ldr	r2, [pc, #16]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 800570e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005710:	4a04      	ldr	r2, [pc, #16]	@ (8005724 <prvSwitchTimerLists+0xc8>)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6013      	str	r3, [r2, #0]
    }
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	2000038c 	.word	0x2000038c
 8005724:	20000390 	.word	0x20000390

08005728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800572c:	f000 f966 	bl	80059fc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005730:	4b12      	ldr	r3, [pc, #72]	@ (800577c <prvCheckForValidListAndQueue+0x54>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11d      	bne.n	8005774 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005738:	4811      	ldr	r0, [pc, #68]	@ (8005780 <prvCheckForValidListAndQueue+0x58>)
 800573a:	f7fd fe95 	bl	8003468 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800573e:	4811      	ldr	r0, [pc, #68]	@ (8005784 <prvCheckForValidListAndQueue+0x5c>)
 8005740:	f7fd fe92 	bl	8003468 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005744:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 8005746:	4a0e      	ldr	r2, [pc, #56]	@ (8005780 <prvCheckForValidListAndQueue+0x58>)
 8005748:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800574a:	4b10      	ldr	r3, [pc, #64]	@ (800578c <prvCheckForValidListAndQueue+0x64>)
 800574c:	4a0d      	ldr	r2, [pc, #52]	@ (8005784 <prvCheckForValidListAndQueue+0x5c>)
 800574e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005750:	2200      	movs	r2, #0
 8005752:	210c      	movs	r1, #12
 8005754:	200a      	movs	r0, #10
 8005756:	f7fd ffa5 	bl	80036a4 <xQueueGenericCreate>
 800575a:	4603      	mov	r3, r0
 800575c:	4a07      	ldr	r2, [pc, #28]	@ (800577c <prvCheckForValidListAndQueue+0x54>)
 800575e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005760:	4b06      	ldr	r3, [pc, #24]	@ (800577c <prvCheckForValidListAndQueue+0x54>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <prvCheckForValidListAndQueue+0x54>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4908      	ldr	r1, [pc, #32]	@ (8005790 <prvCheckForValidListAndQueue+0x68>)
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fce8 	bl	8004144 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005774:	f000 f974 	bl	8005a60 <vPortExitCritical>
    }
 8005778:	bf00      	nop
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000394 	.word	0x20000394
 8005780:	20000364 	.word	0x20000364
 8005784:	20000378 	.word	0x20000378
 8005788:	2000038c 	.word	0x2000038c
 800578c:	20000390 	.word	0x20000390
 8005790:	08006a50 	.word	0x08006a50

08005794 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3b04      	subs	r3, #4
 80057a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3b04      	subs	r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80057c4:	4a0c      	ldr	r2, [pc, #48]	@ (80057f8 <pxPortInitialiseStack+0x64>)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3b14      	subs	r3, #20
 80057ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b04      	subs	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f06f 0202 	mvn.w	r2, #2
 80057e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3b20      	subs	r3, #32
 80057e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80057ea:	68fb      	ldr	r3, [r7, #12]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	080057fd 	.word	0x080057fd

080057fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005806:	4b13      	ldr	r3, [pc, #76]	@ (8005854 <prvTaskExitError+0x58>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d00b      	beq.n	8005828 <prvTaskExitError+0x2c>
        __asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60fb      	str	r3, [r7, #12]
    }
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <prvTaskExitError+0x28>
        __asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	60bb      	str	r3, [r7, #8]
    }
 800583a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800583c:	bf00      	nop
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0fc      	beq.n	800583e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000010 	.word	0x20000010
	...

08005860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005860:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <pxCurrentTCBConst2>)
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	f380 8809 	msr	PSP, r0
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8811 	msr	BASEPRI, r0
 800587a:	4770      	bx	lr
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst2>:
 8005880:	20000260 	.word	0x20000260
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop

08005888 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005888:	4808      	ldr	r0, [pc, #32]	@ (80058ac <prvPortStartFirstTask+0x24>)
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f380 8808 	msr	MSP, r0
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8814 	msr	CONTROL, r0
 800589a:	b662      	cpsie	i
 800589c:	b661      	cpsie	f
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	df00      	svc	0
 80058a8:	bf00      	nop
 80058aa:	0000      	.short	0x0000
 80058ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop

080058b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058ba:	4b47      	ldr	r3, [pc, #284]	@ (80059d8 <xPortStartScheduler+0x124>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a47      	ldr	r2, [pc, #284]	@ (80059dc <xPortStartScheduler+0x128>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d10b      	bne.n	80058dc <xPortStartScheduler+0x28>
        __asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	613b      	str	r3, [r7, #16]
    }
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058dc:	4b3e      	ldr	r3, [pc, #248]	@ (80059d8 <xPortStartScheduler+0x124>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3f      	ldr	r2, [pc, #252]	@ (80059e0 <xPortStartScheduler+0x12c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10b      	bne.n	80058fe <xPortStartScheduler+0x4a>
        __asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	60fb      	str	r3, [r7, #12]
    }
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	e7fd      	b.n	80058fa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058fe:	4b39      	ldr	r3, [pc, #228]	@ (80059e4 <xPortStartScheduler+0x130>)
 8005900:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	22ff      	movs	r2, #255	@ 0xff
 800590e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4b31      	ldr	r3, [pc, #196]	@ (80059e8 <xPortStartScheduler+0x134>)
 8005924:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005926:	4b31      	ldr	r3, [pc, #196]	@ (80059ec <xPortStartScheduler+0x138>)
 8005928:	2207      	movs	r2, #7
 800592a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800592c:	e009      	b.n	8005942 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800592e:	4b2f      	ldr	r3, [pc, #188]	@ (80059ec <xPortStartScheduler+0x138>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3b01      	subs	r3, #1
 8005934:	4a2d      	ldr	r2, [pc, #180]	@ (80059ec <xPortStartScheduler+0x138>)
 8005936:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b80      	cmp	r3, #128	@ 0x80
 800594c:	d0ef      	beq.n	800592e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800594e:	4b27      	ldr	r3, [pc, #156]	@ (80059ec <xPortStartScheduler+0x138>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f1c3 0307 	rsb	r3, r3, #7
 8005956:	2b04      	cmp	r3, #4
 8005958:	d00b      	beq.n	8005972 <xPortStartScheduler+0xbe>
        __asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	60bb      	str	r3, [r7, #8]
    }
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	e7fd      	b.n	800596e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005972:	4b1e      	ldr	r3, [pc, #120]	@ (80059ec <xPortStartScheduler+0x138>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	4a1c      	ldr	r2, [pc, #112]	@ (80059ec <xPortStartScheduler+0x138>)
 800597a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800597c:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <xPortStartScheduler+0x138>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005984:	4a19      	ldr	r2, [pc, #100]	@ (80059ec <xPortStartScheduler+0x138>)
 8005986:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005990:	4b17      	ldr	r3, [pc, #92]	@ (80059f0 <xPortStartScheduler+0x13c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <xPortStartScheduler+0x13c>)
 8005996:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800599a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800599c:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <xPortStartScheduler+0x13c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a13      	ldr	r2, [pc, #76]	@ (80059f0 <xPortStartScheduler+0x13c>)
 80059a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059a6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80059a8:	f000 f8e0 	bl	8005b6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80059ac:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <xPortStartScheduler+0x140>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80059b2:	f000 f8ff 	bl	8005bb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059b6:	4b10      	ldr	r3, [pc, #64]	@ (80059f8 <xPortStartScheduler+0x144>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a0f      	ldr	r2, [pc, #60]	@ (80059f8 <xPortStartScheduler+0x144>)
 80059bc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059c0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80059c2:	f7ff ff61 	bl	8005888 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80059c6:	f7fe ff5f 	bl	8004888 <vTaskSwitchContext>
    prvTaskExitError();
 80059ca:	f7ff ff17 	bl	80057fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	e000ed00 	.word	0xe000ed00
 80059dc:	410fc271 	.word	0x410fc271
 80059e0:	410fc270 	.word	0x410fc270
 80059e4:	e000e400 	.word	0xe000e400
 80059e8:	200003a0 	.word	0x200003a0
 80059ec:	200003a4 	.word	0x200003a4
 80059f0:	e000ed20 	.word	0xe000ed20
 80059f4:	20000010 	.word	0x20000010
 80059f8:	e000ef34 	.word	0xe000ef34

080059fc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
        __asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	607b      	str	r3, [r7, #4]
    }
 8005a14:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005a16:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <vPortEnterCritical+0x5c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8005a58 <vPortEnterCritical+0x5c>)
 8005a1e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005a20:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <vPortEnterCritical+0x5c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d110      	bne.n	8005a4a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a28:	4b0c      	ldr	r3, [pc, #48]	@ (8005a5c <vPortEnterCritical+0x60>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <vPortEnterCritical+0x4e>
        __asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	603b      	str	r3, [r7, #0]
    }
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	e7fd      	b.n	8005a46 <vPortEnterCritical+0x4a>
    }
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000010 	.word	0x20000010
 8005a5c:	e000ed04 	.word	0xe000ed04

08005a60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005a66:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <vPortExitCritical+0x50>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <vPortExitCritical+0x26>
        __asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
    }
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005a86:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <vPortExitCritical+0x50>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	4a08      	ldr	r2, [pc, #32]	@ (8005ab0 <vPortExitCritical+0x50>)
 8005a8e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005a90:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <vPortExitCritical+0x50>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <vPortExitCritical+0x44>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	f383 8811 	msr	BASEPRI, r3
    }
 8005aa2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000010 	.word	0x20000010
	...

08005ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ac0:	f3ef 8009 	mrs	r0, PSP
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4b15      	ldr	r3, [pc, #84]	@ (8005b20 <pxCurrentTCBConst>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f01e 0f10 	tst.w	lr, #16
 8005ad0:	bf08      	it	eq
 8005ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ae4:	f380 8811 	msr	BASEPRI, r0
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f7fe feca 	bl	8004888 <vTaskSwitchContext>
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f380 8811 	msr	BASEPRI, r0
 8005afc:	bc09      	pop	{r0, r3}
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	6808      	ldr	r0, [r1, #0]
 8005b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b06:	f01e 0f10 	tst.w	lr, #16
 8005b0a:	bf08      	it	eq
 8005b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b10:	f380 8809 	msr	PSP, r0
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst>:
 8005b20:	20000260 	.word	0x20000260
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
    }
 8005b40:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005b42:	f7fe fde7 	bl	8004714 <xTaskIncrementTick>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <SysTick_Handler+0x40>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	2300      	movs	r3, #0
 8005b56:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f383 8811 	msr	BASEPRI, r3
    }
 8005b5e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <vPortSetupTimerInterrupt+0x38>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <vPortSetupTimerInterrupt+0x3c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <vPortSetupTimerInterrupt+0x40>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	4a09      	ldr	r2, [pc, #36]	@ (8005bb0 <vPortSetupTimerInterrupt+0x44>)
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b8e:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000e010 	.word	0xe000e010
 8005ba4:	e000e018 	.word	0xe000e018
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	10624dd3 	.word	0x10624dd3
 8005bb0:	e000e014 	.word	0xe000e014

08005bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005bc4 <vPortEnableVFP+0x10>
 8005bb8:	6801      	ldr	r1, [r0, #0]
 8005bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bbe:	6001      	str	r1, [r0, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	0000      	.short	0x0000
 8005bc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop

08005bcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005bd2:	f3ef 8305 	mrs	r3, IPSR
 8005bd6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d915      	bls.n	8005c0a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bde:	4a18      	ldr	r2, [pc, #96]	@ (8005c40 <vPortValidateInterruptPriority+0x74>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005be8:	4b16      	ldr	r3, [pc, #88]	@ (8005c44 <vPortValidateInterruptPriority+0x78>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	7afa      	ldrb	r2, [r7, #11]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d20b      	bcs.n	8005c0a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	607b      	str	r3, [r7, #4]
    }
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <vPortValidateInterruptPriority+0x7c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c12:	4b0e      	ldr	r3, [pc, #56]	@ (8005c4c <vPortValidateInterruptPriority+0x80>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d90b      	bls.n	8005c32 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	603b      	str	r3, [r7, #0]
    }
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <vPortValidateInterruptPriority+0x62>
    }
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e3f0 	.word	0xe000e3f0
 8005c44:	200003a0 	.word	0x200003a0
 8005c48:	e000ed0c 	.word	0xe000ed0c
 8005c4c:	200003a4 	.word	0x200003a4

08005c50 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	@ 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005c5c:	f7fe fc9e 	bl	800459c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005c60:	4b66      	ldr	r3, [pc, #408]	@ (8005dfc <pvPortMalloc+0x1ac>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005c68:	f000 f938 	bl	8005edc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c6c:	4b64      	ldr	r3, [pc, #400]	@ (8005e00 <pvPortMalloc+0x1b0>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 80a9 	bne.w	8005dcc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02e      	beq.n	8005cde <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005c80:	2208      	movs	r2, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d228      	bcs.n	8005cde <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d022      	beq.n	8005ce4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f023 0307 	bic.w	r3, r3, #7
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d215      	bcs.n	8005cd8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f023 0307 	bic.w	r3, r3, #7
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d011      	beq.n	8005ce4 <pvPortMalloc+0x94>
        __asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	617b      	str	r3, [r7, #20]
    }
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cdc:	e002      	b.n	8005ce4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	e000      	b.n	8005ce6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ce4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d06f      	beq.n	8005dcc <pvPortMalloc+0x17c>
 8005cec:	4b45      	ldr	r3, [pc, #276]	@ (8005e04 <pvPortMalloc+0x1b4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d86a      	bhi.n	8005dcc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005cf6:	4b44      	ldr	r3, [pc, #272]	@ (8005e08 <pvPortMalloc+0x1b8>)
 8005cf8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005cfa:	4b43      	ldr	r3, [pc, #268]	@ (8005e08 <pvPortMalloc+0x1b8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d00:	e004      	b.n	8005d0c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d903      	bls.n	8005d1e <pvPortMalloc+0xce>
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f1      	bne.n	8005d02 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005d1e:	4b37      	ldr	r3, [pc, #220]	@ (8005dfc <pvPortMalloc+0x1ac>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d051      	beq.n	8005dcc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	4413      	add	r3, r2
 8005d30:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	2308      	movs	r3, #8
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d920      	bls.n	8005d8c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4413      	add	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <pvPortMalloc+0x124>
        __asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	613b      	str	r3, [r7, #16]
    }
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	1ad2      	subs	r2, r2, r3
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d86:	69b8      	ldr	r0, [r7, #24]
 8005d88:	f000 f90a 	bl	8005fa0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e04 <pvPortMalloc+0x1b4>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <pvPortMalloc+0x1b4>)
 8005d98:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e04 <pvPortMalloc+0x1b4>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e0c <pvPortMalloc+0x1bc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d203      	bcs.n	8005dae <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005da6:	4b17      	ldr	r3, [pc, #92]	@ (8005e04 <pvPortMalloc+0x1b4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a18      	ldr	r2, [pc, #96]	@ (8005e0c <pvPortMalloc+0x1bc>)
 8005dac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	4b13      	ldr	r3, [pc, #76]	@ (8005e00 <pvPortMalloc+0x1b0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005dc2:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <pvPortMalloc+0x1c0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	4a11      	ldr	r2, [pc, #68]	@ (8005e10 <pvPortMalloc+0x1c0>)
 8005dca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005dcc:	f7fe fbf4 	bl	80045b8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <pvPortMalloc+0x1a2>
        __asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	60fb      	str	r3, [r7, #12]
    }
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	e7fd      	b.n	8005dee <pvPortMalloc+0x19e>
    return pvReturn;
 8005df2:	69fb      	ldr	r3, [r7, #28]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3728      	adds	r7, #40	@ 0x28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20012fb0 	.word	0x20012fb0
 8005e00:	20012fc4 	.word	0x20012fc4
 8005e04:	20012fb4 	.word	0x20012fb4
 8005e08:	20012fa8 	.word	0x20012fa8
 8005e0c:	20012fb8 	.word	0x20012fb8
 8005e10:	20012fbc 	.word	0x20012fbc

08005e14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d04f      	beq.n	8005ec6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005e26:	2308      	movs	r3, #8
 8005e28:	425b      	negs	r3, r3
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	4b25      	ldr	r3, [pc, #148]	@ (8005ed0 <vPortFree+0xbc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10b      	bne.n	8005e5a <vPortFree+0x46>
        __asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	60fb      	str	r3, [r7, #12]
    }
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	e7fd      	b.n	8005e56 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <vPortFree+0x66>
        __asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	60bb      	str	r3, [r7, #8]
    }
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	e7fd      	b.n	8005e76 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	4b14      	ldr	r3, [pc, #80]	@ (8005ed0 <vPortFree+0xbc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01e      	beq.n	8005ec6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11a      	bne.n	8005ec6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <vPortFree+0xbc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005ea0:	f7fe fb7c 	bl	800459c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed4 <vPortFree+0xc0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	4a09      	ldr	r2, [pc, #36]	@ (8005ed4 <vPortFree+0xc0>)
 8005eb0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eb2:	6938      	ldr	r0, [r7, #16]
 8005eb4:	f000 f874 	bl	8005fa0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005eb8:	4b07      	ldr	r3, [pc, #28]	@ (8005ed8 <vPortFree+0xc4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	4a06      	ldr	r2, [pc, #24]	@ (8005ed8 <vPortFree+0xc4>)
 8005ec0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005ec2:	f7fe fb79 	bl	80045b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005ec6:	bf00      	nop
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20012fc4 	.word	0x20012fc4
 8005ed4:	20012fb4 	.word	0x20012fb4
 8005ed8:	20012fc0 	.word	0x20012fc0

08005edc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ee2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005ee6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005ee8:	4b27      	ldr	r3, [pc, #156]	@ (8005f88 <prvHeapInit+0xac>)
 8005eea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00c      	beq.n	8005f10 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3307      	adds	r3, #7
 8005efa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0307 	bic.w	r3, r3, #7
 8005f02:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <prvHeapInit+0xac>)
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f14:	4a1d      	ldr	r2, [pc, #116]	@ (8005f8c <prvHeapInit+0xb0>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f8c <prvHeapInit+0xb0>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	4413      	add	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005f28:	2208      	movs	r2, #8
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0307 	bic.w	r3, r3, #7
 8005f36:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a15      	ldr	r2, [pc, #84]	@ (8005f90 <prvHeapInit+0xb4>)
 8005f3c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005f3e:	4b14      	ldr	r3, [pc, #80]	@ (8005f90 <prvHeapInit+0xb4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2200      	movs	r2, #0
 8005f44:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005f46:	4b12      	ldr	r3, [pc, #72]	@ (8005f90 <prvHeapInit+0xb4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	1ad2      	subs	r2, r2, r3
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f90 <prvHeapInit+0xb4>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4a0a      	ldr	r2, [pc, #40]	@ (8005f94 <prvHeapInit+0xb8>)
 8005f6a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4a09      	ldr	r2, [pc, #36]	@ (8005f98 <prvHeapInit+0xbc>)
 8005f72:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f74:	4b09      	ldr	r3, [pc, #36]	@ (8005f9c <prvHeapInit+0xc0>)
 8005f76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f7a:	601a      	str	r2, [r3, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	200003a8 	.word	0x200003a8
 8005f8c:	20012fa8 	.word	0x20012fa8
 8005f90:	20012fb0 	.word	0x20012fb0
 8005f94:	20012fb8 	.word	0x20012fb8
 8005f98:	20012fb4 	.word	0x20012fb4
 8005f9c:	20012fc4 	.word	0x20012fc4

08005fa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fa8:	4b28      	ldr	r3, [pc, #160]	@ (800604c <prvInsertBlockIntoFreeList+0xac>)
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e002      	b.n	8005fb4 <prvInsertBlockIntoFreeList+0x14>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d8f7      	bhi.n	8005fae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d108      	bne.n	8005fe2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	441a      	add	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d118      	bne.n	8006028 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b15      	ldr	r3, [pc, #84]	@ (8006050 <prvInsertBlockIntoFreeList+0xb0>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d00d      	beq.n	800601e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	441a      	add	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e008      	b.n	8006030 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800601e:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <prvInsertBlockIntoFreeList+0xb0>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e003      	b.n	8006030 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d002      	beq.n	800603e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20012fa8 	.word	0x20012fa8
 8006050:	20012fb0 	.word	0x20012fb0

08006054 <siprintf>:
 8006054:	b40e      	push	{r1, r2, r3}
 8006056:	b500      	push	{lr}
 8006058:	b09c      	sub	sp, #112	@ 0x70
 800605a:	ab1d      	add	r3, sp, #116	@ 0x74
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	9006      	str	r0, [sp, #24]
 8006060:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006064:	4809      	ldr	r0, [pc, #36]	@ (800608c <siprintf+0x38>)
 8006066:	9107      	str	r1, [sp, #28]
 8006068:	9104      	str	r1, [sp, #16]
 800606a:	4909      	ldr	r1, [pc, #36]	@ (8006090 <siprintf+0x3c>)
 800606c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006070:	9105      	str	r1, [sp, #20]
 8006072:	6800      	ldr	r0, [r0, #0]
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	a902      	add	r1, sp, #8
 8006078:	f000 f9a2 	bl	80063c0 <_svfiprintf_r>
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	b01c      	add	sp, #112	@ 0x70
 8006084:	f85d eb04 	ldr.w	lr, [sp], #4
 8006088:	b003      	add	sp, #12
 800608a:	4770      	bx	lr
 800608c:	20000014 	.word	0x20000014
 8006090:	ffff0208 	.word	0xffff0208

08006094 <memset>:
 8006094:	4402      	add	r2, r0
 8006096:	4603      	mov	r3, r0
 8006098:	4293      	cmp	r3, r2
 800609a:	d100      	bne.n	800609e <memset+0xa>
 800609c:	4770      	bx	lr
 800609e:	f803 1b01 	strb.w	r1, [r3], #1
 80060a2:	e7f9      	b.n	8006098 <memset+0x4>

080060a4 <__errno>:
 80060a4:	4b01      	ldr	r3, [pc, #4]	@ (80060ac <__errno+0x8>)
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	20000014 	.word	0x20000014

080060b0 <__libc_init_array>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	4d0d      	ldr	r5, [pc, #52]	@ (80060e8 <__libc_init_array+0x38>)
 80060b4:	4c0d      	ldr	r4, [pc, #52]	@ (80060ec <__libc_init_array+0x3c>)
 80060b6:	1b64      	subs	r4, r4, r5
 80060b8:	10a4      	asrs	r4, r4, #2
 80060ba:	2600      	movs	r6, #0
 80060bc:	42a6      	cmp	r6, r4
 80060be:	d109      	bne.n	80060d4 <__libc_init_array+0x24>
 80060c0:	4d0b      	ldr	r5, [pc, #44]	@ (80060f0 <__libc_init_array+0x40>)
 80060c2:	4c0c      	ldr	r4, [pc, #48]	@ (80060f4 <__libc_init_array+0x44>)
 80060c4:	f000 fc66 	bl	8006994 <_init>
 80060c8:	1b64      	subs	r4, r4, r5
 80060ca:	10a4      	asrs	r4, r4, #2
 80060cc:	2600      	movs	r6, #0
 80060ce:	42a6      	cmp	r6, r4
 80060d0:	d105      	bne.n	80060de <__libc_init_array+0x2e>
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
 80060d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d8:	4798      	blx	r3
 80060da:	3601      	adds	r6, #1
 80060dc:	e7ee      	b.n	80060bc <__libc_init_array+0xc>
 80060de:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e2:	4798      	blx	r3
 80060e4:	3601      	adds	r6, #1
 80060e6:	e7f2      	b.n	80060ce <__libc_init_array+0x1e>
 80060e8:	08006aac 	.word	0x08006aac
 80060ec:	08006aac 	.word	0x08006aac
 80060f0:	08006aac 	.word	0x08006aac
 80060f4:	08006ab0 	.word	0x08006ab0

080060f8 <__retarget_lock_acquire_recursive>:
 80060f8:	4770      	bx	lr

080060fa <__retarget_lock_release_recursive>:
 80060fa:	4770      	bx	lr

080060fc <memcpy>:
 80060fc:	440a      	add	r2, r1
 80060fe:	4291      	cmp	r1, r2
 8006100:	f100 33ff 	add.w	r3, r0, #4294967295
 8006104:	d100      	bne.n	8006108 <memcpy+0xc>
 8006106:	4770      	bx	lr
 8006108:	b510      	push	{r4, lr}
 800610a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800610e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006112:	4291      	cmp	r1, r2
 8006114:	d1f9      	bne.n	800610a <memcpy+0xe>
 8006116:	bd10      	pop	{r4, pc}

08006118 <_free_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4605      	mov	r5, r0
 800611c:	2900      	cmp	r1, #0
 800611e:	d041      	beq.n	80061a4 <_free_r+0x8c>
 8006120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006124:	1f0c      	subs	r4, r1, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	bfb8      	it	lt
 800612a:	18e4      	addlt	r4, r4, r3
 800612c:	f000 f8e0 	bl	80062f0 <__malloc_lock>
 8006130:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <_free_r+0x90>)
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	b933      	cbnz	r3, 8006144 <_free_r+0x2c>
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	6014      	str	r4, [r2, #0]
 800613a:	4628      	mov	r0, r5
 800613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006140:	f000 b8dc 	b.w	80062fc <__malloc_unlock>
 8006144:	42a3      	cmp	r3, r4
 8006146:	d908      	bls.n	800615a <_free_r+0x42>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	1821      	adds	r1, r4, r0
 800614c:	428b      	cmp	r3, r1
 800614e:	bf01      	itttt	eq
 8006150:	6819      	ldreq	r1, [r3, #0]
 8006152:	685b      	ldreq	r3, [r3, #4]
 8006154:	1809      	addeq	r1, r1, r0
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	e7ed      	b.n	8006136 <_free_r+0x1e>
 800615a:	461a      	mov	r2, r3
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b10b      	cbz	r3, 8006164 <_free_r+0x4c>
 8006160:	42a3      	cmp	r3, r4
 8006162:	d9fa      	bls.n	800615a <_free_r+0x42>
 8006164:	6811      	ldr	r1, [r2, #0]
 8006166:	1850      	adds	r0, r2, r1
 8006168:	42a0      	cmp	r0, r4
 800616a:	d10b      	bne.n	8006184 <_free_r+0x6c>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	4401      	add	r1, r0
 8006170:	1850      	adds	r0, r2, r1
 8006172:	4283      	cmp	r3, r0
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	d1e0      	bne.n	800613a <_free_r+0x22>
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	6053      	str	r3, [r2, #4]
 800617e:	4408      	add	r0, r1
 8006180:	6010      	str	r0, [r2, #0]
 8006182:	e7da      	b.n	800613a <_free_r+0x22>
 8006184:	d902      	bls.n	800618c <_free_r+0x74>
 8006186:	230c      	movs	r3, #12
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	e7d6      	b.n	800613a <_free_r+0x22>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	1821      	adds	r1, r4, r0
 8006190:	428b      	cmp	r3, r1
 8006192:	bf04      	itt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	bf04      	itt	eq
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	6054      	str	r4, [r2, #4]
 80061a2:	e7ca      	b.n	800613a <_free_r+0x22>
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
 80061a6:	bf00      	nop
 80061a8:	2001310c 	.word	0x2001310c

080061ac <sbrk_aligned>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	4e0f      	ldr	r6, [pc, #60]	@ (80061ec <sbrk_aligned+0x40>)
 80061b0:	460c      	mov	r4, r1
 80061b2:	6831      	ldr	r1, [r6, #0]
 80061b4:	4605      	mov	r5, r0
 80061b6:	b911      	cbnz	r1, 80061be <sbrk_aligned+0x12>
 80061b8:	f000 fba6 	bl	8006908 <_sbrk_r>
 80061bc:	6030      	str	r0, [r6, #0]
 80061be:	4621      	mov	r1, r4
 80061c0:	4628      	mov	r0, r5
 80061c2:	f000 fba1 	bl	8006908 <_sbrk_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	d103      	bne.n	80061d2 <sbrk_aligned+0x26>
 80061ca:	f04f 34ff 	mov.w	r4, #4294967295
 80061ce:	4620      	mov	r0, r4
 80061d0:	bd70      	pop	{r4, r5, r6, pc}
 80061d2:	1cc4      	adds	r4, r0, #3
 80061d4:	f024 0403 	bic.w	r4, r4, #3
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d0f8      	beq.n	80061ce <sbrk_aligned+0x22>
 80061dc:	1a21      	subs	r1, r4, r0
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fb92 	bl	8006908 <_sbrk_r>
 80061e4:	3001      	adds	r0, #1
 80061e6:	d1f2      	bne.n	80061ce <sbrk_aligned+0x22>
 80061e8:	e7ef      	b.n	80061ca <sbrk_aligned+0x1e>
 80061ea:	bf00      	nop
 80061ec:	20013108 	.word	0x20013108

080061f0 <_malloc_r>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	1ccd      	adds	r5, r1, #3
 80061f6:	f025 0503 	bic.w	r5, r5, #3
 80061fa:	3508      	adds	r5, #8
 80061fc:	2d0c      	cmp	r5, #12
 80061fe:	bf38      	it	cc
 8006200:	250c      	movcc	r5, #12
 8006202:	2d00      	cmp	r5, #0
 8006204:	4606      	mov	r6, r0
 8006206:	db01      	blt.n	800620c <_malloc_r+0x1c>
 8006208:	42a9      	cmp	r1, r5
 800620a:	d904      	bls.n	8006216 <_malloc_r+0x26>
 800620c:	230c      	movs	r3, #12
 800620e:	6033      	str	r3, [r6, #0]
 8006210:	2000      	movs	r0, #0
 8006212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062ec <_malloc_r+0xfc>
 800621a:	f000 f869 	bl	80062f0 <__malloc_lock>
 800621e:	f8d8 3000 	ldr.w	r3, [r8]
 8006222:	461c      	mov	r4, r3
 8006224:	bb44      	cbnz	r4, 8006278 <_malloc_r+0x88>
 8006226:	4629      	mov	r1, r5
 8006228:	4630      	mov	r0, r6
 800622a:	f7ff ffbf 	bl	80061ac <sbrk_aligned>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	4604      	mov	r4, r0
 8006232:	d158      	bne.n	80062e6 <_malloc_r+0xf6>
 8006234:	f8d8 4000 	ldr.w	r4, [r8]
 8006238:	4627      	mov	r7, r4
 800623a:	2f00      	cmp	r7, #0
 800623c:	d143      	bne.n	80062c6 <_malloc_r+0xd6>
 800623e:	2c00      	cmp	r4, #0
 8006240:	d04b      	beq.n	80062da <_malloc_r+0xea>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	4639      	mov	r1, r7
 8006246:	4630      	mov	r0, r6
 8006248:	eb04 0903 	add.w	r9, r4, r3
 800624c:	f000 fb5c 	bl	8006908 <_sbrk_r>
 8006250:	4581      	cmp	r9, r0
 8006252:	d142      	bne.n	80062da <_malloc_r+0xea>
 8006254:	6821      	ldr	r1, [r4, #0]
 8006256:	1a6d      	subs	r5, r5, r1
 8006258:	4629      	mov	r1, r5
 800625a:	4630      	mov	r0, r6
 800625c:	f7ff ffa6 	bl	80061ac <sbrk_aligned>
 8006260:	3001      	adds	r0, #1
 8006262:	d03a      	beq.n	80062da <_malloc_r+0xea>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	442b      	add	r3, r5
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	f8d8 3000 	ldr.w	r3, [r8]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	bb62      	cbnz	r2, 80062cc <_malloc_r+0xdc>
 8006272:	f8c8 7000 	str.w	r7, [r8]
 8006276:	e00f      	b.n	8006298 <_malloc_r+0xa8>
 8006278:	6822      	ldr	r2, [r4, #0]
 800627a:	1b52      	subs	r2, r2, r5
 800627c:	d420      	bmi.n	80062c0 <_malloc_r+0xd0>
 800627e:	2a0b      	cmp	r2, #11
 8006280:	d917      	bls.n	80062b2 <_malloc_r+0xc2>
 8006282:	1961      	adds	r1, r4, r5
 8006284:	42a3      	cmp	r3, r4
 8006286:	6025      	str	r5, [r4, #0]
 8006288:	bf18      	it	ne
 800628a:	6059      	strne	r1, [r3, #4]
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	bf08      	it	eq
 8006290:	f8c8 1000 	streq.w	r1, [r8]
 8006294:	5162      	str	r2, [r4, r5]
 8006296:	604b      	str	r3, [r1, #4]
 8006298:	4630      	mov	r0, r6
 800629a:	f000 f82f 	bl	80062fc <__malloc_unlock>
 800629e:	f104 000b 	add.w	r0, r4, #11
 80062a2:	1d23      	adds	r3, r4, #4
 80062a4:	f020 0007 	bic.w	r0, r0, #7
 80062a8:	1ac2      	subs	r2, r0, r3
 80062aa:	bf1c      	itt	ne
 80062ac:	1a1b      	subne	r3, r3, r0
 80062ae:	50a3      	strne	r3, [r4, r2]
 80062b0:	e7af      	b.n	8006212 <_malloc_r+0x22>
 80062b2:	6862      	ldr	r2, [r4, #4]
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	bf0c      	ite	eq
 80062b8:	f8c8 2000 	streq.w	r2, [r8]
 80062bc:	605a      	strne	r2, [r3, #4]
 80062be:	e7eb      	b.n	8006298 <_malloc_r+0xa8>
 80062c0:	4623      	mov	r3, r4
 80062c2:	6864      	ldr	r4, [r4, #4]
 80062c4:	e7ae      	b.n	8006224 <_malloc_r+0x34>
 80062c6:	463c      	mov	r4, r7
 80062c8:	687f      	ldr	r7, [r7, #4]
 80062ca:	e7b6      	b.n	800623a <_malloc_r+0x4a>
 80062cc:	461a      	mov	r2, r3
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	d1fb      	bne.n	80062cc <_malloc_r+0xdc>
 80062d4:	2300      	movs	r3, #0
 80062d6:	6053      	str	r3, [r2, #4]
 80062d8:	e7de      	b.n	8006298 <_malloc_r+0xa8>
 80062da:	230c      	movs	r3, #12
 80062dc:	6033      	str	r3, [r6, #0]
 80062de:	4630      	mov	r0, r6
 80062e0:	f000 f80c 	bl	80062fc <__malloc_unlock>
 80062e4:	e794      	b.n	8006210 <_malloc_r+0x20>
 80062e6:	6005      	str	r5, [r0, #0]
 80062e8:	e7d6      	b.n	8006298 <_malloc_r+0xa8>
 80062ea:	bf00      	nop
 80062ec:	2001310c 	.word	0x2001310c

080062f0 <__malloc_lock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	@ (80062f8 <__malloc_lock+0x8>)
 80062f2:	f7ff bf01 	b.w	80060f8 <__retarget_lock_acquire_recursive>
 80062f6:	bf00      	nop
 80062f8:	20013104 	.word	0x20013104

080062fc <__malloc_unlock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	@ (8006304 <__malloc_unlock+0x8>)
 80062fe:	f7ff befc 	b.w	80060fa <__retarget_lock_release_recursive>
 8006302:	bf00      	nop
 8006304:	20013104 	.word	0x20013104

08006308 <__ssputs_r>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	688e      	ldr	r6, [r1, #8]
 800630e:	461f      	mov	r7, r3
 8006310:	42be      	cmp	r6, r7
 8006312:	680b      	ldr	r3, [r1, #0]
 8006314:	4682      	mov	sl, r0
 8006316:	460c      	mov	r4, r1
 8006318:	4690      	mov	r8, r2
 800631a:	d82d      	bhi.n	8006378 <__ssputs_r+0x70>
 800631c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006320:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006324:	d026      	beq.n	8006374 <__ssputs_r+0x6c>
 8006326:	6965      	ldr	r5, [r4, #20]
 8006328:	6909      	ldr	r1, [r1, #16]
 800632a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800632e:	eba3 0901 	sub.w	r9, r3, r1
 8006332:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006336:	1c7b      	adds	r3, r7, #1
 8006338:	444b      	add	r3, r9
 800633a:	106d      	asrs	r5, r5, #1
 800633c:	429d      	cmp	r5, r3
 800633e:	bf38      	it	cc
 8006340:	461d      	movcc	r5, r3
 8006342:	0553      	lsls	r3, r2, #21
 8006344:	d527      	bpl.n	8006396 <__ssputs_r+0x8e>
 8006346:	4629      	mov	r1, r5
 8006348:	f7ff ff52 	bl	80061f0 <_malloc_r>
 800634c:	4606      	mov	r6, r0
 800634e:	b360      	cbz	r0, 80063aa <__ssputs_r+0xa2>
 8006350:	6921      	ldr	r1, [r4, #16]
 8006352:	464a      	mov	r2, r9
 8006354:	f7ff fed2 	bl	80060fc <memcpy>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800635e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	6126      	str	r6, [r4, #16]
 8006366:	6165      	str	r5, [r4, #20]
 8006368:	444e      	add	r6, r9
 800636a:	eba5 0509 	sub.w	r5, r5, r9
 800636e:	6026      	str	r6, [r4, #0]
 8006370:	60a5      	str	r5, [r4, #8]
 8006372:	463e      	mov	r6, r7
 8006374:	42be      	cmp	r6, r7
 8006376:	d900      	bls.n	800637a <__ssputs_r+0x72>
 8006378:	463e      	mov	r6, r7
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	4632      	mov	r2, r6
 800637e:	4641      	mov	r1, r8
 8006380:	f000 faa8 	bl	80068d4 <memmove>
 8006384:	68a3      	ldr	r3, [r4, #8]
 8006386:	1b9b      	subs	r3, r3, r6
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	4433      	add	r3, r6
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	2000      	movs	r0, #0
 8006392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006396:	462a      	mov	r2, r5
 8006398:	f000 fac6 	bl	8006928 <_realloc_r>
 800639c:	4606      	mov	r6, r0
 800639e:	2800      	cmp	r0, #0
 80063a0:	d1e0      	bne.n	8006364 <__ssputs_r+0x5c>
 80063a2:	6921      	ldr	r1, [r4, #16]
 80063a4:	4650      	mov	r0, sl
 80063a6:	f7ff feb7 	bl	8006118 <_free_r>
 80063aa:	230c      	movs	r3, #12
 80063ac:	f8ca 3000 	str.w	r3, [sl]
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e7e9      	b.n	8006392 <__ssputs_r+0x8a>
	...

080063c0 <_svfiprintf_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	4698      	mov	r8, r3
 80063c6:	898b      	ldrh	r3, [r1, #12]
 80063c8:	061b      	lsls	r3, r3, #24
 80063ca:	b09d      	sub	sp, #116	@ 0x74
 80063cc:	4607      	mov	r7, r0
 80063ce:	460d      	mov	r5, r1
 80063d0:	4614      	mov	r4, r2
 80063d2:	d510      	bpl.n	80063f6 <_svfiprintf_r+0x36>
 80063d4:	690b      	ldr	r3, [r1, #16]
 80063d6:	b973      	cbnz	r3, 80063f6 <_svfiprintf_r+0x36>
 80063d8:	2140      	movs	r1, #64	@ 0x40
 80063da:	f7ff ff09 	bl	80061f0 <_malloc_r>
 80063de:	6028      	str	r0, [r5, #0]
 80063e0:	6128      	str	r0, [r5, #16]
 80063e2:	b930      	cbnz	r0, 80063f2 <_svfiprintf_r+0x32>
 80063e4:	230c      	movs	r3, #12
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	b01d      	add	sp, #116	@ 0x74
 80063ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f2:	2340      	movs	r3, #64	@ 0x40
 80063f4:	616b      	str	r3, [r5, #20]
 80063f6:	2300      	movs	r3, #0
 80063f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fa:	2320      	movs	r3, #32
 80063fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006400:	f8cd 800c 	str.w	r8, [sp, #12]
 8006404:	2330      	movs	r3, #48	@ 0x30
 8006406:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80065a4 <_svfiprintf_r+0x1e4>
 800640a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800640e:	f04f 0901 	mov.w	r9, #1
 8006412:	4623      	mov	r3, r4
 8006414:	469a      	mov	sl, r3
 8006416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800641a:	b10a      	cbz	r2, 8006420 <_svfiprintf_r+0x60>
 800641c:	2a25      	cmp	r2, #37	@ 0x25
 800641e:	d1f9      	bne.n	8006414 <_svfiprintf_r+0x54>
 8006420:	ebba 0b04 	subs.w	fp, sl, r4
 8006424:	d00b      	beq.n	800643e <_svfiprintf_r+0x7e>
 8006426:	465b      	mov	r3, fp
 8006428:	4622      	mov	r2, r4
 800642a:	4629      	mov	r1, r5
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff ff6b 	bl	8006308 <__ssputs_r>
 8006432:	3001      	adds	r0, #1
 8006434:	f000 80a7 	beq.w	8006586 <_svfiprintf_r+0x1c6>
 8006438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800643a:	445a      	add	r2, fp
 800643c:	9209      	str	r2, [sp, #36]	@ 0x24
 800643e:	f89a 3000 	ldrb.w	r3, [sl]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 809f 	beq.w	8006586 <_svfiprintf_r+0x1c6>
 8006448:	2300      	movs	r3, #0
 800644a:	f04f 32ff 	mov.w	r2, #4294967295
 800644e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006452:	f10a 0a01 	add.w	sl, sl, #1
 8006456:	9304      	str	r3, [sp, #16]
 8006458:	9307      	str	r3, [sp, #28]
 800645a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800645e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006460:	4654      	mov	r4, sl
 8006462:	2205      	movs	r2, #5
 8006464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006468:	484e      	ldr	r0, [pc, #312]	@ (80065a4 <_svfiprintf_r+0x1e4>)
 800646a:	f7f9 feb9 	bl	80001e0 <memchr>
 800646e:	9a04      	ldr	r2, [sp, #16]
 8006470:	b9d8      	cbnz	r0, 80064aa <_svfiprintf_r+0xea>
 8006472:	06d0      	lsls	r0, r2, #27
 8006474:	bf44      	itt	mi
 8006476:	2320      	movmi	r3, #32
 8006478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800647c:	0711      	lsls	r1, r2, #28
 800647e:	bf44      	itt	mi
 8006480:	232b      	movmi	r3, #43	@ 0x2b
 8006482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006486:	f89a 3000 	ldrb.w	r3, [sl]
 800648a:	2b2a      	cmp	r3, #42	@ 0x2a
 800648c:	d015      	beq.n	80064ba <_svfiprintf_r+0xfa>
 800648e:	9a07      	ldr	r2, [sp, #28]
 8006490:	4654      	mov	r4, sl
 8006492:	2000      	movs	r0, #0
 8006494:	f04f 0c0a 	mov.w	ip, #10
 8006498:	4621      	mov	r1, r4
 800649a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800649e:	3b30      	subs	r3, #48	@ 0x30
 80064a0:	2b09      	cmp	r3, #9
 80064a2:	d94b      	bls.n	800653c <_svfiprintf_r+0x17c>
 80064a4:	b1b0      	cbz	r0, 80064d4 <_svfiprintf_r+0x114>
 80064a6:	9207      	str	r2, [sp, #28]
 80064a8:	e014      	b.n	80064d4 <_svfiprintf_r+0x114>
 80064aa:	eba0 0308 	sub.w	r3, r0, r8
 80064ae:	fa09 f303 	lsl.w	r3, r9, r3
 80064b2:	4313      	orrs	r3, r2
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	46a2      	mov	sl, r4
 80064b8:	e7d2      	b.n	8006460 <_svfiprintf_r+0xa0>
 80064ba:	9b03      	ldr	r3, [sp, #12]
 80064bc:	1d19      	adds	r1, r3, #4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	9103      	str	r1, [sp, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bfbb      	ittet	lt
 80064c6:	425b      	neglt	r3, r3
 80064c8:	f042 0202 	orrlt.w	r2, r2, #2
 80064cc:	9307      	strge	r3, [sp, #28]
 80064ce:	9307      	strlt	r3, [sp, #28]
 80064d0:	bfb8      	it	lt
 80064d2:	9204      	strlt	r2, [sp, #16]
 80064d4:	7823      	ldrb	r3, [r4, #0]
 80064d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80064d8:	d10a      	bne.n	80064f0 <_svfiprintf_r+0x130>
 80064da:	7863      	ldrb	r3, [r4, #1]
 80064dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80064de:	d132      	bne.n	8006546 <_svfiprintf_r+0x186>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	1d1a      	adds	r2, r3, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	9203      	str	r2, [sp, #12]
 80064e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064ec:	3402      	adds	r4, #2
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80065b4 <_svfiprintf_r+0x1f4>
 80064f4:	7821      	ldrb	r1, [r4, #0]
 80064f6:	2203      	movs	r2, #3
 80064f8:	4650      	mov	r0, sl
 80064fa:	f7f9 fe71 	bl	80001e0 <memchr>
 80064fe:	b138      	cbz	r0, 8006510 <_svfiprintf_r+0x150>
 8006500:	9b04      	ldr	r3, [sp, #16]
 8006502:	eba0 000a 	sub.w	r0, r0, sl
 8006506:	2240      	movs	r2, #64	@ 0x40
 8006508:	4082      	lsls	r2, r0
 800650a:	4313      	orrs	r3, r2
 800650c:	3401      	adds	r4, #1
 800650e:	9304      	str	r3, [sp, #16]
 8006510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006514:	4824      	ldr	r0, [pc, #144]	@ (80065a8 <_svfiprintf_r+0x1e8>)
 8006516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800651a:	2206      	movs	r2, #6
 800651c:	f7f9 fe60 	bl	80001e0 <memchr>
 8006520:	2800      	cmp	r0, #0
 8006522:	d036      	beq.n	8006592 <_svfiprintf_r+0x1d2>
 8006524:	4b21      	ldr	r3, [pc, #132]	@ (80065ac <_svfiprintf_r+0x1ec>)
 8006526:	bb1b      	cbnz	r3, 8006570 <_svfiprintf_r+0x1b0>
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	3307      	adds	r3, #7
 800652c:	f023 0307 	bic.w	r3, r3, #7
 8006530:	3308      	adds	r3, #8
 8006532:	9303      	str	r3, [sp, #12]
 8006534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006536:	4433      	add	r3, r6
 8006538:	9309      	str	r3, [sp, #36]	@ 0x24
 800653a:	e76a      	b.n	8006412 <_svfiprintf_r+0x52>
 800653c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006540:	460c      	mov	r4, r1
 8006542:	2001      	movs	r0, #1
 8006544:	e7a8      	b.n	8006498 <_svfiprintf_r+0xd8>
 8006546:	2300      	movs	r3, #0
 8006548:	3401      	adds	r4, #1
 800654a:	9305      	str	r3, [sp, #20]
 800654c:	4619      	mov	r1, r3
 800654e:	f04f 0c0a 	mov.w	ip, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006558:	3a30      	subs	r2, #48	@ 0x30
 800655a:	2a09      	cmp	r2, #9
 800655c:	d903      	bls.n	8006566 <_svfiprintf_r+0x1a6>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0c6      	beq.n	80064f0 <_svfiprintf_r+0x130>
 8006562:	9105      	str	r1, [sp, #20]
 8006564:	e7c4      	b.n	80064f0 <_svfiprintf_r+0x130>
 8006566:	fb0c 2101 	mla	r1, ip, r1, r2
 800656a:	4604      	mov	r4, r0
 800656c:	2301      	movs	r3, #1
 800656e:	e7f0      	b.n	8006552 <_svfiprintf_r+0x192>
 8006570:	ab03      	add	r3, sp, #12
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	462a      	mov	r2, r5
 8006576:	4b0e      	ldr	r3, [pc, #56]	@ (80065b0 <_svfiprintf_r+0x1f0>)
 8006578:	a904      	add	r1, sp, #16
 800657a:	4638      	mov	r0, r7
 800657c:	f3af 8000 	nop.w
 8006580:	1c42      	adds	r2, r0, #1
 8006582:	4606      	mov	r6, r0
 8006584:	d1d6      	bne.n	8006534 <_svfiprintf_r+0x174>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	065b      	lsls	r3, r3, #25
 800658a:	f53f af2d 	bmi.w	80063e8 <_svfiprintf_r+0x28>
 800658e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006590:	e72c      	b.n	80063ec <_svfiprintf_r+0x2c>
 8006592:	ab03      	add	r3, sp, #12
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	462a      	mov	r2, r5
 8006598:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <_svfiprintf_r+0x1f0>)
 800659a:	a904      	add	r1, sp, #16
 800659c:	4638      	mov	r0, r7
 800659e:	f000 f879 	bl	8006694 <_printf_i>
 80065a2:	e7ed      	b.n	8006580 <_svfiprintf_r+0x1c0>
 80065a4:	08006a70 	.word	0x08006a70
 80065a8:	08006a7a 	.word	0x08006a7a
 80065ac:	00000000 	.word	0x00000000
 80065b0:	08006309 	.word	0x08006309
 80065b4:	08006a76 	.word	0x08006a76

080065b8 <_printf_common>:
 80065b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	4616      	mov	r6, r2
 80065be:	4698      	mov	r8, r3
 80065c0:	688a      	ldr	r2, [r1, #8]
 80065c2:	690b      	ldr	r3, [r1, #16]
 80065c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	bfb8      	it	lt
 80065cc:	4613      	movlt	r3, r2
 80065ce:	6033      	str	r3, [r6, #0]
 80065d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065d4:	4607      	mov	r7, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	b10a      	cbz	r2, 80065de <_printf_common+0x26>
 80065da:	3301      	adds	r3, #1
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	0699      	lsls	r1, r3, #26
 80065e2:	bf42      	ittt	mi
 80065e4:	6833      	ldrmi	r3, [r6, #0]
 80065e6:	3302      	addmi	r3, #2
 80065e8:	6033      	strmi	r3, [r6, #0]
 80065ea:	6825      	ldr	r5, [r4, #0]
 80065ec:	f015 0506 	ands.w	r5, r5, #6
 80065f0:	d106      	bne.n	8006600 <_printf_common+0x48>
 80065f2:	f104 0a19 	add.w	sl, r4, #25
 80065f6:	68e3      	ldr	r3, [r4, #12]
 80065f8:	6832      	ldr	r2, [r6, #0]
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dc26      	bgt.n	800664e <_printf_common+0x96>
 8006600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006604:	6822      	ldr	r2, [r4, #0]
 8006606:	3b00      	subs	r3, #0
 8006608:	bf18      	it	ne
 800660a:	2301      	movne	r3, #1
 800660c:	0692      	lsls	r2, r2, #26
 800660e:	d42b      	bmi.n	8006668 <_printf_common+0xb0>
 8006610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006614:	4641      	mov	r1, r8
 8006616:	4638      	mov	r0, r7
 8006618:	47c8      	blx	r9
 800661a:	3001      	adds	r0, #1
 800661c:	d01e      	beq.n	800665c <_printf_common+0xa4>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	6922      	ldr	r2, [r4, #16]
 8006622:	f003 0306 	and.w	r3, r3, #6
 8006626:	2b04      	cmp	r3, #4
 8006628:	bf02      	ittt	eq
 800662a:	68e5      	ldreq	r5, [r4, #12]
 800662c:	6833      	ldreq	r3, [r6, #0]
 800662e:	1aed      	subeq	r5, r5, r3
 8006630:	68a3      	ldr	r3, [r4, #8]
 8006632:	bf0c      	ite	eq
 8006634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006638:	2500      	movne	r5, #0
 800663a:	4293      	cmp	r3, r2
 800663c:	bfc4      	itt	gt
 800663e:	1a9b      	subgt	r3, r3, r2
 8006640:	18ed      	addgt	r5, r5, r3
 8006642:	2600      	movs	r6, #0
 8006644:	341a      	adds	r4, #26
 8006646:	42b5      	cmp	r5, r6
 8006648:	d11a      	bne.n	8006680 <_printf_common+0xc8>
 800664a:	2000      	movs	r0, #0
 800664c:	e008      	b.n	8006660 <_printf_common+0xa8>
 800664e:	2301      	movs	r3, #1
 8006650:	4652      	mov	r2, sl
 8006652:	4641      	mov	r1, r8
 8006654:	4638      	mov	r0, r7
 8006656:	47c8      	blx	r9
 8006658:	3001      	adds	r0, #1
 800665a:	d103      	bne.n	8006664 <_printf_common+0xac>
 800665c:	f04f 30ff 	mov.w	r0, #4294967295
 8006660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006664:	3501      	adds	r5, #1
 8006666:	e7c6      	b.n	80065f6 <_printf_common+0x3e>
 8006668:	18e1      	adds	r1, r4, r3
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	2030      	movs	r0, #48	@ 0x30
 800666e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006672:	4422      	add	r2, r4
 8006674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800667c:	3302      	adds	r3, #2
 800667e:	e7c7      	b.n	8006610 <_printf_common+0x58>
 8006680:	2301      	movs	r3, #1
 8006682:	4622      	mov	r2, r4
 8006684:	4641      	mov	r1, r8
 8006686:	4638      	mov	r0, r7
 8006688:	47c8      	blx	r9
 800668a:	3001      	adds	r0, #1
 800668c:	d0e6      	beq.n	800665c <_printf_common+0xa4>
 800668e:	3601      	adds	r6, #1
 8006690:	e7d9      	b.n	8006646 <_printf_common+0x8e>
	...

08006694 <_printf_i>:
 8006694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	7e0f      	ldrb	r7, [r1, #24]
 800669a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800669c:	2f78      	cmp	r7, #120	@ 0x78
 800669e:	4691      	mov	r9, r2
 80066a0:	4680      	mov	r8, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	469a      	mov	sl, r3
 80066a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066aa:	d807      	bhi.n	80066bc <_printf_i+0x28>
 80066ac:	2f62      	cmp	r7, #98	@ 0x62
 80066ae:	d80a      	bhi.n	80066c6 <_printf_i+0x32>
 80066b0:	2f00      	cmp	r7, #0
 80066b2:	f000 80d2 	beq.w	800685a <_printf_i+0x1c6>
 80066b6:	2f58      	cmp	r7, #88	@ 0x58
 80066b8:	f000 80b9 	beq.w	800682e <_printf_i+0x19a>
 80066bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066c4:	e03a      	b.n	800673c <_printf_i+0xa8>
 80066c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066ca:	2b15      	cmp	r3, #21
 80066cc:	d8f6      	bhi.n	80066bc <_printf_i+0x28>
 80066ce:	a101      	add	r1, pc, #4	@ (adr r1, 80066d4 <_printf_i+0x40>)
 80066d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d4:	0800672d 	.word	0x0800672d
 80066d8:	08006741 	.word	0x08006741
 80066dc:	080066bd 	.word	0x080066bd
 80066e0:	080066bd 	.word	0x080066bd
 80066e4:	080066bd 	.word	0x080066bd
 80066e8:	080066bd 	.word	0x080066bd
 80066ec:	08006741 	.word	0x08006741
 80066f0:	080066bd 	.word	0x080066bd
 80066f4:	080066bd 	.word	0x080066bd
 80066f8:	080066bd 	.word	0x080066bd
 80066fc:	080066bd 	.word	0x080066bd
 8006700:	08006841 	.word	0x08006841
 8006704:	0800676b 	.word	0x0800676b
 8006708:	080067fb 	.word	0x080067fb
 800670c:	080066bd 	.word	0x080066bd
 8006710:	080066bd 	.word	0x080066bd
 8006714:	08006863 	.word	0x08006863
 8006718:	080066bd 	.word	0x080066bd
 800671c:	0800676b 	.word	0x0800676b
 8006720:	080066bd 	.word	0x080066bd
 8006724:	080066bd 	.word	0x080066bd
 8006728:	08006803 	.word	0x08006803
 800672c:	6833      	ldr	r3, [r6, #0]
 800672e:	1d1a      	adds	r2, r3, #4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6032      	str	r2, [r6, #0]
 8006734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800673c:	2301      	movs	r3, #1
 800673e:	e09d      	b.n	800687c <_printf_i+0x1e8>
 8006740:	6833      	ldr	r3, [r6, #0]
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	1d19      	adds	r1, r3, #4
 8006746:	6031      	str	r1, [r6, #0]
 8006748:	0606      	lsls	r6, r0, #24
 800674a:	d501      	bpl.n	8006750 <_printf_i+0xbc>
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	e003      	b.n	8006758 <_printf_i+0xc4>
 8006750:	0645      	lsls	r5, r0, #25
 8006752:	d5fb      	bpl.n	800674c <_printf_i+0xb8>
 8006754:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006758:	2d00      	cmp	r5, #0
 800675a:	da03      	bge.n	8006764 <_printf_i+0xd0>
 800675c:	232d      	movs	r3, #45	@ 0x2d
 800675e:	426d      	negs	r5, r5
 8006760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006764:	4859      	ldr	r0, [pc, #356]	@ (80068cc <_printf_i+0x238>)
 8006766:	230a      	movs	r3, #10
 8006768:	e011      	b.n	800678e <_printf_i+0xfa>
 800676a:	6821      	ldr	r1, [r4, #0]
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	0608      	lsls	r0, r1, #24
 8006770:	f853 5b04 	ldr.w	r5, [r3], #4
 8006774:	d402      	bmi.n	800677c <_printf_i+0xe8>
 8006776:	0649      	lsls	r1, r1, #25
 8006778:	bf48      	it	mi
 800677a:	b2ad      	uxthmi	r5, r5
 800677c:	2f6f      	cmp	r7, #111	@ 0x6f
 800677e:	4853      	ldr	r0, [pc, #332]	@ (80068cc <_printf_i+0x238>)
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	bf14      	ite	ne
 8006784:	230a      	movne	r3, #10
 8006786:	2308      	moveq	r3, #8
 8006788:	2100      	movs	r1, #0
 800678a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800678e:	6866      	ldr	r6, [r4, #4]
 8006790:	60a6      	str	r6, [r4, #8]
 8006792:	2e00      	cmp	r6, #0
 8006794:	bfa2      	ittt	ge
 8006796:	6821      	ldrge	r1, [r4, #0]
 8006798:	f021 0104 	bicge.w	r1, r1, #4
 800679c:	6021      	strge	r1, [r4, #0]
 800679e:	b90d      	cbnz	r5, 80067a4 <_printf_i+0x110>
 80067a0:	2e00      	cmp	r6, #0
 80067a2:	d04b      	beq.n	800683c <_printf_i+0x1a8>
 80067a4:	4616      	mov	r6, r2
 80067a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80067aa:	fb03 5711 	mls	r7, r3, r1, r5
 80067ae:	5dc7      	ldrb	r7, [r0, r7]
 80067b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067b4:	462f      	mov	r7, r5
 80067b6:	42bb      	cmp	r3, r7
 80067b8:	460d      	mov	r5, r1
 80067ba:	d9f4      	bls.n	80067a6 <_printf_i+0x112>
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d10b      	bne.n	80067d8 <_printf_i+0x144>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	07df      	lsls	r7, r3, #31
 80067c4:	d508      	bpl.n	80067d8 <_printf_i+0x144>
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	6861      	ldr	r1, [r4, #4]
 80067ca:	4299      	cmp	r1, r3
 80067cc:	bfde      	ittt	le
 80067ce:	2330      	movle	r3, #48	@ 0x30
 80067d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067d8:	1b92      	subs	r2, r2, r6
 80067da:	6122      	str	r2, [r4, #16]
 80067dc:	f8cd a000 	str.w	sl, [sp]
 80067e0:	464b      	mov	r3, r9
 80067e2:	aa03      	add	r2, sp, #12
 80067e4:	4621      	mov	r1, r4
 80067e6:	4640      	mov	r0, r8
 80067e8:	f7ff fee6 	bl	80065b8 <_printf_common>
 80067ec:	3001      	adds	r0, #1
 80067ee:	d14a      	bne.n	8006886 <_printf_i+0x1f2>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	b004      	add	sp, #16
 80067f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	4833      	ldr	r0, [pc, #204]	@ (80068d0 <_printf_i+0x23c>)
 8006804:	2778      	movs	r7, #120	@ 0x78
 8006806:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	6831      	ldr	r1, [r6, #0]
 800680e:	061f      	lsls	r7, r3, #24
 8006810:	f851 5b04 	ldr.w	r5, [r1], #4
 8006814:	d402      	bmi.n	800681c <_printf_i+0x188>
 8006816:	065f      	lsls	r7, r3, #25
 8006818:	bf48      	it	mi
 800681a:	b2ad      	uxthmi	r5, r5
 800681c:	6031      	str	r1, [r6, #0]
 800681e:	07d9      	lsls	r1, r3, #31
 8006820:	bf44      	itt	mi
 8006822:	f043 0320 	orrmi.w	r3, r3, #32
 8006826:	6023      	strmi	r3, [r4, #0]
 8006828:	b11d      	cbz	r5, 8006832 <_printf_i+0x19e>
 800682a:	2310      	movs	r3, #16
 800682c:	e7ac      	b.n	8006788 <_printf_i+0xf4>
 800682e:	4827      	ldr	r0, [pc, #156]	@ (80068cc <_printf_i+0x238>)
 8006830:	e7e9      	b.n	8006806 <_printf_i+0x172>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	f023 0320 	bic.w	r3, r3, #32
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	e7f6      	b.n	800682a <_printf_i+0x196>
 800683c:	4616      	mov	r6, r2
 800683e:	e7bd      	b.n	80067bc <_printf_i+0x128>
 8006840:	6833      	ldr	r3, [r6, #0]
 8006842:	6825      	ldr	r5, [r4, #0]
 8006844:	6961      	ldr	r1, [r4, #20]
 8006846:	1d18      	adds	r0, r3, #4
 8006848:	6030      	str	r0, [r6, #0]
 800684a:	062e      	lsls	r6, r5, #24
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	d501      	bpl.n	8006854 <_printf_i+0x1c0>
 8006850:	6019      	str	r1, [r3, #0]
 8006852:	e002      	b.n	800685a <_printf_i+0x1c6>
 8006854:	0668      	lsls	r0, r5, #25
 8006856:	d5fb      	bpl.n	8006850 <_printf_i+0x1bc>
 8006858:	8019      	strh	r1, [r3, #0]
 800685a:	2300      	movs	r3, #0
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	4616      	mov	r6, r2
 8006860:	e7bc      	b.n	80067dc <_printf_i+0x148>
 8006862:	6833      	ldr	r3, [r6, #0]
 8006864:	1d1a      	adds	r2, r3, #4
 8006866:	6032      	str	r2, [r6, #0]
 8006868:	681e      	ldr	r6, [r3, #0]
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	2100      	movs	r1, #0
 800686e:	4630      	mov	r0, r6
 8006870:	f7f9 fcb6 	bl	80001e0 <memchr>
 8006874:	b108      	cbz	r0, 800687a <_printf_i+0x1e6>
 8006876:	1b80      	subs	r0, r0, r6
 8006878:	6060      	str	r0, [r4, #4]
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	6123      	str	r3, [r4, #16]
 800687e:	2300      	movs	r3, #0
 8006880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006884:	e7aa      	b.n	80067dc <_printf_i+0x148>
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	4632      	mov	r2, r6
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	47d0      	blx	sl
 8006890:	3001      	adds	r0, #1
 8006892:	d0ad      	beq.n	80067f0 <_printf_i+0x15c>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	079b      	lsls	r3, r3, #30
 8006898:	d413      	bmi.n	80068c2 <_printf_i+0x22e>
 800689a:	68e0      	ldr	r0, [r4, #12]
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	4298      	cmp	r0, r3
 80068a0:	bfb8      	it	lt
 80068a2:	4618      	movlt	r0, r3
 80068a4:	e7a6      	b.n	80067f4 <_printf_i+0x160>
 80068a6:	2301      	movs	r3, #1
 80068a8:	4632      	mov	r2, r6
 80068aa:	4649      	mov	r1, r9
 80068ac:	4640      	mov	r0, r8
 80068ae:	47d0      	blx	sl
 80068b0:	3001      	adds	r0, #1
 80068b2:	d09d      	beq.n	80067f0 <_printf_i+0x15c>
 80068b4:	3501      	adds	r5, #1
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	9903      	ldr	r1, [sp, #12]
 80068ba:	1a5b      	subs	r3, r3, r1
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dcf2      	bgt.n	80068a6 <_printf_i+0x212>
 80068c0:	e7eb      	b.n	800689a <_printf_i+0x206>
 80068c2:	2500      	movs	r5, #0
 80068c4:	f104 0619 	add.w	r6, r4, #25
 80068c8:	e7f5      	b.n	80068b6 <_printf_i+0x222>
 80068ca:	bf00      	nop
 80068cc:	08006a81 	.word	0x08006a81
 80068d0:	08006a92 	.word	0x08006a92

080068d4 <memmove>:
 80068d4:	4288      	cmp	r0, r1
 80068d6:	b510      	push	{r4, lr}
 80068d8:	eb01 0402 	add.w	r4, r1, r2
 80068dc:	d902      	bls.n	80068e4 <memmove+0x10>
 80068de:	4284      	cmp	r4, r0
 80068e0:	4623      	mov	r3, r4
 80068e2:	d807      	bhi.n	80068f4 <memmove+0x20>
 80068e4:	1e43      	subs	r3, r0, #1
 80068e6:	42a1      	cmp	r1, r4
 80068e8:	d008      	beq.n	80068fc <memmove+0x28>
 80068ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068f2:	e7f8      	b.n	80068e6 <memmove+0x12>
 80068f4:	4402      	add	r2, r0
 80068f6:	4601      	mov	r1, r0
 80068f8:	428a      	cmp	r2, r1
 80068fa:	d100      	bne.n	80068fe <memmove+0x2a>
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006906:	e7f7      	b.n	80068f8 <memmove+0x24>

08006908 <_sbrk_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d06      	ldr	r5, [pc, #24]	@ (8006924 <_sbrk_r+0x1c>)
 800690c:	2300      	movs	r3, #0
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	f7fa fa5c 	bl	8000dd0 <_sbrk>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_sbrk_r+0x1a>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_sbrk_r+0x1a>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20013100 	.word	0x20013100

08006928 <_realloc_r>:
 8006928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692c:	4680      	mov	r8, r0
 800692e:	4615      	mov	r5, r2
 8006930:	460c      	mov	r4, r1
 8006932:	b921      	cbnz	r1, 800693e <_realloc_r+0x16>
 8006934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	4611      	mov	r1, r2
 800693a:	f7ff bc59 	b.w	80061f0 <_malloc_r>
 800693e:	b92a      	cbnz	r2, 800694c <_realloc_r+0x24>
 8006940:	f7ff fbea 	bl	8006118 <_free_r>
 8006944:	2400      	movs	r4, #0
 8006946:	4620      	mov	r0, r4
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	f000 f81a 	bl	8006984 <_malloc_usable_size_r>
 8006950:	4285      	cmp	r5, r0
 8006952:	4606      	mov	r6, r0
 8006954:	d802      	bhi.n	800695c <_realloc_r+0x34>
 8006956:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800695a:	d8f4      	bhi.n	8006946 <_realloc_r+0x1e>
 800695c:	4629      	mov	r1, r5
 800695e:	4640      	mov	r0, r8
 8006960:	f7ff fc46 	bl	80061f0 <_malloc_r>
 8006964:	4607      	mov	r7, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d0ec      	beq.n	8006944 <_realloc_r+0x1c>
 800696a:	42b5      	cmp	r5, r6
 800696c:	462a      	mov	r2, r5
 800696e:	4621      	mov	r1, r4
 8006970:	bf28      	it	cs
 8006972:	4632      	movcs	r2, r6
 8006974:	f7ff fbc2 	bl	80060fc <memcpy>
 8006978:	4621      	mov	r1, r4
 800697a:	4640      	mov	r0, r8
 800697c:	f7ff fbcc 	bl	8006118 <_free_r>
 8006980:	463c      	mov	r4, r7
 8006982:	e7e0      	b.n	8006946 <_realloc_r+0x1e>

08006984 <_malloc_usable_size_r>:
 8006984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006988:	1f18      	subs	r0, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfbc      	itt	lt
 800698e:	580b      	ldrlt	r3, [r1, r0]
 8006990:	18c0      	addlt	r0, r0, r3
 8006992:	4770      	bx	lr

08006994 <_init>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr

080069a0 <_fini>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	bf00      	nop
 80069a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a6:	bc08      	pop	{r3}
 80069a8:	469e      	mov	lr, r3
 80069aa:	4770      	bx	lr
