
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007c94  08007c94  00008c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e30  08007e30  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e30  08007e30  00008e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e38  08007e38  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e38  08007e38  00008e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e3c  08007e3c  00008e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007e40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          000145dc  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014648  20014648  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b71  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003153  00000000  00000000  0001cc0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  0001fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed9  00000000  00000000  000210b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bc0  00000000  00000000  00021f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016978  00000000  00000000  00045b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7ec2  00000000  00000000  0005c4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013438b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055e4  00000000  00000000  001343d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a2  00000000  00000000  001399b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c7c 	.word	0x08007c7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007c7c 	.word	0x08007c7c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f28 	.word	0x20012f28
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb7b 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f857 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8bf 	bl	8000790 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <main+0x9c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <main+0x9c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 800061e:	4820      	ldr	r0, [pc, #128]	@ (80006a0 <main+0xa0>)
 8000620:	f004 fc04 	bl	8004e2c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000624:	f004 fa2c 	bl	8004a80 <SEGGER_SYSVIEW_Conf>


  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <main+0xa4>)
 8000634:	22c8      	movs	r2, #200	@ 0xc8
 8000636:	491c      	ldr	r1, [pc, #112]	@ (80006a8 <main+0xa8>)
 8000638:	481c      	ldr	r0, [pc, #112]	@ (80006ac <main+0xac>)
 800063a:	f002 fb81 	bl	8002d40 <xTaskCreate>
 800063e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d00b      	beq.n	800065e <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064a:	f383 8811 	msr	BASEPRI, r3
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2302      	movs	r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <main+0xb0>)
 8000668:	22c8      	movs	r2, #200	@ 0xc8
 800066a:	4912      	ldr	r1, [pc, #72]	@ (80006b4 <main+0xb4>)
 800066c:	4812      	ldr	r0, [pc, #72]	@ (80006b8 <main+0xb8>)
 800066e:	f002 fb67 	bl	8002d40 <xTaskCreate>
 8000672:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d00b      	beq.n	8000692 <main+0x92>
        __asm volatile
 800067a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	60fb      	str	r3, [r7, #12]
    }
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	e7fd      	b.n	800068e <main+0x8e>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000692:	f002 fcab 	bl	8002fec <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	bf00      	nop
 8000698:	e7fd      	b.n	8000696 <main+0x96>
 800069a:	bf00      	nop
 800069c:	e0001000 	.word	0xe0001000
 80006a0:	0003d090 	.word	0x0003d090
 80006a4:	08007c94 	.word	0x08007c94
 80006a8:	08007cac 	.word	0x08007cac
 80006ac:	08000a4d 	.word	0x08000a4d
 80006b0:	08007cb4 	.word	0x08007cb4
 80006b4:	08007ccc 	.word	0x08007ccc
 80006b8:	08000a89 	.word	0x08000a89

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	@ 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 fe4e 	bl	800736c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	@ (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	@ (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000730:	23a8      	movs	r3, #168	@ 0xa8
 8000732:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fdb7 	bl	80012b4 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 f9cc 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f818 	bl	80017a4 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077a:	f000 f9b5 	bl	8000ae8 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	@ 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4ba2      	ldr	r3, [pc, #648]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4aa1      	ldr	r2, [pc, #644]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b9f      	ldr	r3, [pc, #636]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b9b      	ldr	r3, [pc, #620]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a9a      	ldr	r2, [pc, #616]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b98      	ldr	r3, [pc, #608]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b94      	ldr	r3, [pc, #592]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a93      	ldr	r2, [pc, #588]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b91      	ldr	r3, [pc, #580]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b8d      	ldr	r3, [pc, #564]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a8c      	ldr	r2, [pc, #560]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b8a      	ldr	r3, [pc, #552]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b86      	ldr	r3, [pc, #536]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a85      	ldr	r2, [pc, #532]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b83      	ldr	r3, [pc, #524]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b7f      	ldr	r3, [pc, #508]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a7e      	ldr	r2, [pc, #504]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b7c      	ldr	r3, [pc, #496]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4879      	ldr	r0, [pc, #484]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 8000854:	f000 fd14 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4877      	ldr	r0, [pc, #476]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 800085e:	f000 fd0f 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000868:	4875      	ldr	r0, [pc, #468]	@ (8000a40 <MX_GPIO_Init+0x2b0>)
 800086a:	f000 fd09 	bl	8001280 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	486c      	ldr	r0, [pc, #432]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 8000886:	f000 fb5f 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4866      	ldr	r0, [pc, #408]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 80008a2:	f000 fb51 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	485e      	ldr	r0, [pc, #376]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 80008c2:	f000 fb41 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	485a      	ldr	r0, [pc, #360]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80008dc:	f000 fb34 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e0:	2310      	movs	r3, #16
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f0:	2306      	movs	r3, #6
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4852      	ldr	r0, [pc, #328]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80008fc:	f000 fb24 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000900:	23e0      	movs	r3, #224	@ 0xe0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000910:	2305      	movs	r3, #5
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	484a      	ldr	r0, [pc, #296]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 800091c:	f000 fb14 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000920:	2304      	movs	r3, #4
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4845      	ldr	r0, [pc, #276]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000934:	f000 fb08 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	483c      	ldr	r0, [pc, #240]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000956:	f000 faf7 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800095e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4833      	ldr	r0, [pc, #204]	@ (8000a40 <MX_GPIO_Init+0x2b0>)
 8000974:	f000 fae8 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000978:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098a:	2306      	movs	r3, #6
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4829      	ldr	r0, [pc, #164]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 8000996:	f000 fad7 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4825      	ldr	r0, [pc, #148]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80009b0:	f000 faca 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c6:	230a      	movs	r3, #10
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80009d2:	f000 fab9 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <MX_GPIO_Init+0x2b0>)
 80009ea:	f000 faad 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	2312      	movs	r3, #18
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a00:	2304      	movs	r3, #4
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000a0c:	f000 fa9c 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a14:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 8000a26:	f000 fa8f 	bl	8000f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	@ 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400

08000a4c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	@ 0x70
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a54:	f107 000c 	add.w	r0, r7, #12
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <task1_handler+0x34>)
 8000a5c:	2164      	movs	r1, #100	@ 0x64
 8000a5e:	f006 fc41 	bl	80072e4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f006 fb9e 	bl	80071a8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <task1_handler+0x38>)
 8000a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a7c:	bf00      	nop
 8000a7e:	e7e9      	b.n	8000a54 <task1_handler+0x8>
 8000a80:	08007cd4 	.word	0x08007cd4
 8000a84:	e000ed04 	.word	0xe000ed04

08000a88 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09c      	sub	sp, #112	@ 0x70
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a90:	f107 000c 	add.w	r0, r7, #12
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <task2_handler+0x34>)
 8000a98:	2164      	movs	r1, #100	@ 0x64
 8000a9a:	f006 fc23 	bl	80072e4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 fb80 	bl	80071a8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <task2_handler+0x38>)
 8000aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000ab8:	bf00      	nop
 8000aba:	e7e9      	b.n	8000a90 <task2_handler+0x8>
 8000abc:	08007cd4 	.word	0x08007cd4
 8000ac0:	e000ed04 	.word	0xe000ed04

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 f935 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b32:	f003 fbe3 	bl	80042fc <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	@ 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <HAL_InitTick+0xe4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <HAL_InitTick+0xe4>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b64:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <HAL_InitTick+0xe4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 0210 	add.w	r2, r7, #16
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 f81e 	bl	8001bbc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8a:	f001 f803 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000b8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b90:	e004      	b.n	8000b9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b92:	f000 ffff 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000b96:	4603      	mov	r3, r0
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b9e:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <HAL_InitTick+0xe8>)
 8000ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba4:	0c9b      	lsrs	r3, r3, #18
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <HAL_InitTick+0xf0>)
 8000bae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd0:	4817      	ldr	r0, [pc, #92]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bd2:	f001 f825 	bl	8001c20 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11b      	bne.n	8000c1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be4:	4812      	ldr	r0, [pc, #72]	@ (8000c30 <HAL_InitTick+0xec>)
 8000be6:	f001 f875 	bl	8001cd4 <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d111      	bne.n	8000c1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf8:	2036      	movs	r0, #54	@ 0x36
 8000bfa:	f000 f997 	bl	8000f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d808      	bhi.n	8000c16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2036      	movs	r0, #54	@ 0x36
 8000c0a:	f000 f973 	bl	8000ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_InitTick+0xf4>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	e002      	b.n	8000c1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3738      	adds	r7, #56	@ 0x38
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	20000088 	.word	0x20000088
 8000c34:	40001000 	.word	0x40001000
 8000c38:	20000004 	.word	0x20000004

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <TIM6_DAC_IRQHandler+0x10>)
 8000c7a:	f001 f89b 	bl	8001db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000088 	.word	0x20000088

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cb0:	f7ff ffea 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	@ (8000cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f006 fb4f 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fc8f 	bl	8000600 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cf0:	08007e40 	.word	0x08007e40
  ldr r2, =_sbss
 8000cf4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cf8:	20014648 	.word	0x20014648

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <HAL_Init+0x40>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <HAL_Init+0x40>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <HAL_Init+0x40>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f8d8 	bl	8000ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ff08 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fede 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	200000d0 	.word	0x200000d0

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200000d0 	.word	0x200000d0

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	@ (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	@ (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	@ (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff4c 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f06:	f7ff ff61 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffb1 	bl	8000e78 <NVIC_EncodePriority>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff54 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e16b      	b.n	800123c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 815a 	bne.w	8001236 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80b4 	beq.w	8001236 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b60      	ldr	r3, [pc, #384]	@ (8001254 <HAL_GPIO_Init+0x30c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001254 <HAL_GPIO_Init+0x30c>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010de:	4b5d      	ldr	r3, [pc, #372]	@ (8001254 <HAL_GPIO_Init+0x30c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001258 <HAL_GPIO_Init+0x310>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	@ (800125c <HAL_GPIO_Init+0x314>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_GPIO_Init+0x226>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a51      	ldr	r2, [pc, #324]	@ (8001260 <HAL_GPIO_Init+0x318>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x222>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a50      	ldr	r2, [pc, #320]	@ (8001264 <HAL_GPIO_Init+0x31c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x21e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	@ (8001268 <HAL_GPIO_Init+0x320>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x21a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	@ (800126c <HAL_GPIO_Init+0x324>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x216>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	@ (8001270 <HAL_GPIO_Init+0x328>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x212>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	@ (8001274 <HAL_GPIO_Init+0x32c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x20e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	@ (8001278 <HAL_GPIO_Init+0x330>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x20a>
 800114e:	2307      	movs	r3, #7
 8001150:	e00e      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001152:	2308      	movs	r3, #8
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001156:	2306      	movs	r3, #6
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800116e:	2300      	movs	r3, #0
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001180:	4935      	ldr	r1, [pc, #212]	@ (8001258 <HAL_GPIO_Init+0x310>)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <HAL_GPIO_Init+0x334>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a32      	ldr	r2, [pc, #200]	@ (800127c <HAL_GPIO_Init+0x334>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <HAL_GPIO_Init+0x334>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a27      	ldr	r2, [pc, #156]	@ (800127c <HAL_GPIO_Init+0x334>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e2:	4b26      	ldr	r3, [pc, #152]	@ (800127c <HAL_GPIO_Init+0x334>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001206:	4a1d      	ldr	r2, [pc, #116]	@ (800127c <HAL_GPIO_Init+0x334>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_GPIO_Init+0x334>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001230:	4a12      	ldr	r2, [pc, #72]	@ (800127c <HAL_GPIO_Init+0x334>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f67f ae90 	bls.w	8000f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	@ 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40021400 	.word	0x40021400
 8001274:	40021800 	.word	0x40021800
 8001278:	40021c00 	.word	0x40021c00
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e267      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d075      	beq.n	80013be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012d2:	4b88      	ldr	r3, [pc, #544]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d00c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b85      	ldr	r3, [pc, #532]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d112      	bne.n	8001310 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4b82      	ldr	r3, [pc, #520]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012f6:	d10b      	bne.n	8001310 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	4b7e      	ldr	r3, [pc, #504]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d05b      	beq.n	80013bc <HAL_RCC_OscConfig+0x108>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d157      	bne.n	80013bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e242      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001318:	d106      	bne.n	8001328 <HAL_RCC_OscConfig+0x74>
 800131a:	4b76      	ldr	r3, [pc, #472]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a75      	ldr	r2, [pc, #468]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e01d      	b.n	8001364 <HAL_RCC_OscConfig+0xb0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0x98>
 8001332:	4b70      	ldr	r3, [pc, #448]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6f      	ldr	r2, [pc, #444]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b6d      	ldr	r3, [pc, #436]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6c      	ldr	r2, [pc, #432]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0xb0>
 800134c:	4b69      	ldr	r3, [pc, #420]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a68      	ldr	r2, [pc, #416]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b66      	ldr	r3, [pc, #408]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a65      	ldr	r2, [pc, #404]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fcfe 	bl	8000d6c <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fcfa 	bl	8000d6c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	@ 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e207      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b5b      	ldr	r3, [pc, #364]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0xc0>
 8001392:	e014      	b.n	80013be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fcea 	bl	8000d6c <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fce6 	bl	8000d6c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	@ 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1f3      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0xe8>
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d063      	beq.n	8001492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013ca:	4b4a      	ldr	r3, [pc, #296]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b47      	ldr	r3, [pc, #284]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d11c      	bne.n	800141c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b44      	ldr	r3, [pc, #272]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d116      	bne.n	800141c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x152>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e1c7      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4937      	ldr	r1, [pc, #220]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	e03a      	b.n	8001492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <HAL_RCC_OscConfig+0x244>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fc9f 	bl	8000d6c <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fc9b 	bl	8000d6c <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e1a8      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4925      	ldr	r1, [pc, #148]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001466:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <HAL_RCC_OscConfig+0x244>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fc7e 	bl	8000d6c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fc7a 	bl	8000d6c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e187      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d036      	beq.n	800150c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d016      	beq.n	80014d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_RCC_OscConfig+0x248>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fc5e 	bl	8000d6c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc5a 	bl	8000d6c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e167      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x200>
 80014d2:	e01b      	b.n	800150c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HAL_RCC_OscConfig+0x248>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fc47 	bl	8000d6c <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	e00e      	b.n	8001500 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff fc43 	bl	8000d6c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d907      	bls.n	8001500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e150      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
 80014f4:	40023800 	.word	0x40023800
 80014f8:	42470000 	.word	0x42470000
 80014fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	4b88      	ldr	r3, [pc, #544]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ea      	bne.n	80014e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8097 	beq.w	8001648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b81      	ldr	r3, [pc, #516]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b7d      	ldr	r3, [pc, #500]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a7c      	ldr	r2, [pc, #496]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b7a      	ldr	r3, [pc, #488]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b77      	ldr	r3, [pc, #476]	@ (8001728 <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d118      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b74      	ldr	r3, [pc, #464]	@ (8001728 <HAL_RCC_OscConfig+0x474>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a73      	ldr	r2, [pc, #460]	@ (8001728 <HAL_RCC_OscConfig+0x474>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff fc03 	bl	8000d6c <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fbff 	bl	8000d6c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e10c      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4b6a      	ldr	r3, [pc, #424]	@ (8001728 <HAL_RCC_OscConfig+0x474>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x2ea>
 8001590:	4b64      	ldr	r3, [pc, #400]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001594:	4a63      	ldr	r2, [pc, #396]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	@ 0x70
 800159c:	e01c      	b.n	80015d8 <HAL_RCC_OscConfig+0x324>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x30c>
 80015a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x324>
 80015c0:	4b58      	ldr	r3, [pc, #352]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c4:	4a57      	ldr	r2, [pc, #348]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80015cc:	4b55      	ldr	r3, [pc, #340]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d0:	4a54      	ldr	r2, [pc, #336]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d015      	beq.n	800160c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fbc4 	bl	8000d6c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fbc0 	bl	8000d6c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0cb      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fe:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0ee      	beq.n	80015e8 <HAL_RCC_OscConfig+0x334>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff fbae 	bl	8000d6c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff fbaa 	bl	8000d6c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0b5      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162a:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ee      	bne.n	8001614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	4a38      	ldr	r2, [pc, #224]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001646:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a1 	beq.w	8001794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001652:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b08      	cmp	r3, #8
 800165c:	d05c      	beq.n	8001718 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d141      	bne.n	80016ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b31      	ldr	r3, [pc, #196]	@ (800172c <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb7e 	bl	8000d6c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fb7a 	bl	8000d6c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e087      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	3b01      	subs	r3, #1
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	491b      	ldr	r1, [pc, #108]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x478>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fb53 	bl	8000d6c <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff fb4f 	bl	8000d6c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e05c      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x416>
 80016e8:	e054      	b.n	8001794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_RCC_OscConfig+0x478>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb3c 	bl	8000d6c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fb38 	bl	8000d6c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e045      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_RCC_OscConfig+0x470>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x444>
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e038      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000
 800172c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001730:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <HAL_RCC_OscConfig+0x4ec>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d028      	beq.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d121      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d11a      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	4293      	cmp	r3, r2
 800176a:	d111      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0cc      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b68      	ldr	r3, [pc, #416]	@ (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d90c      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b65      	ldr	r3, [pc, #404]	@ (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	@ (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a58      	ldr	r2, [pc, #352]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001802:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a52      	ldr	r2, [pc, #328]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800181a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d044      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d119      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	2b03      	cmp	r3, #3
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3b      	ldr	r3, [pc, #236]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e067      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4934      	ldr	r1, [pc, #208]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff fa6a 	bl	8000d6c <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff fa66 	bl	8000d6c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e04f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b25      	ldr	r3, [pc, #148]	@ (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20c      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4602      	mov	r2, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	490a      	ldr	r1, [pc, #40]	@ (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	5ccb      	ldrb	r3, [r1, r3]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f8fa 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00
 8001960:	40023800 	.word	0x40023800
 8001964:	08007dbc 	.word	0x08007dbc
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001974:	b094      	sub	sp, #80	@ 0x50
 8001976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001988:	4b79      	ldr	r3, [pc, #484]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d00d      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001994:	2b08      	cmp	r3, #8
 8001996:	f200 80e1 	bhi.w	8001b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x34>
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x3a>
 80019a2:	e0db      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b73      	ldr	r3, [pc, #460]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80019a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a8:	e0db      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019aa:	4b73      	ldr	r3, [pc, #460]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x208>)
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ae:	e0d8      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	099b      	lsrs	r3, r3, #6
 80019cc:	2200      	movs	r2, #0
 80019ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019e2:	4622      	mov	r2, r4
 80019e4:	462b      	mov	r3, r5
 80019e6:	f04f 0000 	mov.w	r0, #0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	0159      	lsls	r1, r3, #5
 80019f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f4:	0150      	lsls	r0, r2, #5
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4621      	mov	r1, r4
 80019fc:	1a51      	subs	r1, r2, r1
 80019fe:	6139      	str	r1, [r7, #16]
 8001a00:	4629      	mov	r1, r5
 8001a02:	eb63 0301 	sbc.w	r3, r3, r1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a14:	4659      	mov	r1, fp
 8001a16:	018b      	lsls	r3, r1, #6
 8001a18:	4651      	mov	r1, sl
 8001a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a1e:	4651      	mov	r1, sl
 8001a20:	018a      	lsls	r2, r1, #6
 8001a22:	4651      	mov	r1, sl
 8001a24:	ebb2 0801 	subs.w	r8, r2, r1
 8001a28:	4659      	mov	r1, fp
 8001a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a42:	4690      	mov	r8, r2
 8001a44:	4699      	mov	r9, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	eb18 0303 	adds.w	r3, r8, r3
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	462b      	mov	r3, r5
 8001a50:	eb49 0303 	adc.w	r3, r9, r3
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a62:	4629      	mov	r1, r5
 8001a64:	024b      	lsls	r3, r1, #9
 8001a66:	4621      	mov	r1, r4
 8001a68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	024a      	lsls	r2, r1, #9
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a76:	2200      	movs	r2, #0
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a80:	f7fe fc46 	bl	8000310 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a8c:	e058      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8e:	4b38      	ldr	r3, [pc, #224]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	2200      	movs	r2, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	4611      	mov	r1, r2
 8001a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	464b      	mov	r3, r9
 8001aac:	f04f 0000 	mov.w	r0, #0
 8001ab0:	f04f 0100 	mov.w	r1, #0
 8001ab4:	0159      	lsls	r1, r3, #5
 8001ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aba:	0150      	lsls	r0, r2, #5
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	00eb      	lsls	r3, r5, #3
 8001af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001af6:	00e2      	lsls	r2, r4, #3
 8001af8:	4614      	mov	r4, r2
 8001afa:	461d      	mov	r5, r3
 8001afc:	4643      	mov	r3, r8
 8001afe:	18e3      	adds	r3, r4, r3
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	464b      	mov	r3, r9
 8001b04:	eb45 0303 	adc.w	r3, r5, r3
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b16:	4629      	mov	r1, r5
 8001b18:	028b      	lsls	r3, r1, #10
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b20:	4621      	mov	r1, r4
 8001b22:	028a      	lsls	r2, r1, #10
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	61fa      	str	r2, [r7, #28]
 8001b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b34:	f7fe fbec 	bl	8000310 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b5a:	e002      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3750      	adds	r7, #80	@ 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	00f42400 	.word	0x00f42400
 8001b78:	007a1200 	.word	0x007a1200

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0a9b      	lsrs	r3, r3, #10
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	@ (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08007dcc 	.word	0x08007dcc

08001bbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	220f      	movs	r2, #15
 8001bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001be4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <HAL_RCC_GetClockConfig+0x60>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0207 	and.w	r2, r3, #7
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e041      	b.n	8001cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f839 	bl	8001cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 f9c0 	bl	8001fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d001      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04e      	b.n	8001d8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d022      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d16:	d01d      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d018      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d013      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1c      	ldr	r2, [pc, #112]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00e      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <HAL_TIM_Base_Start_IT+0xd8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d010      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	e007      	b.n	8001d88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800
 8001da4:	40000c00 	.word	0x40000c00
 8001da8:	40010400 	.word	0x40010400
 8001dac:	40014000 	.word	0x40014000
 8001db0:	40001800 	.word	0x40001800

08001db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d020      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01b      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0202 	mvn.w	r2, #2
 8001de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8d2 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8c4 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8d5 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d020      	beq.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0204 	mvn.w	r2, #4
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8ac 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f89e 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8af 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d020      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01b      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0208 	mvn.w	r2, #8
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f886 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f878 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f889 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d020      	beq.n	8001efc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0210 	mvn.w	r2, #16
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f860 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f852 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f863 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0201 	mvn.w	r2, #1
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fdd2 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f906 	bl	8002150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f834 	bl	8001fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00c      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0220 	mvn.w	r2, #32
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8d8 	bl	800213c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a46      	ldr	r2, [pc, #280]	@ (8002110 <TIM_Base_SetConfig+0x12c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d013      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002002:	d00f      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a43      	ldr	r2, [pc, #268]	@ (8002114 <TIM_Base_SetConfig+0x130>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00b      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a42      	ldr	r2, [pc, #264]	@ (8002118 <TIM_Base_SetConfig+0x134>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a41      	ldr	r2, [pc, #260]	@ (800211c <TIM_Base_SetConfig+0x138>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	@ (8002120 <TIM_Base_SetConfig+0x13c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a35      	ldr	r2, [pc, #212]	@ (8002110 <TIM_Base_SetConfig+0x12c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02b      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002044:	d027      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a32      	ldr	r2, [pc, #200]	@ (8002114 <TIM_Base_SetConfig+0x130>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d023      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a31      	ldr	r2, [pc, #196]	@ (8002118 <TIM_Base_SetConfig+0x134>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a30      	ldr	r2, [pc, #192]	@ (800211c <TIM_Base_SetConfig+0x138>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01b      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2f      	ldr	r2, [pc, #188]	@ (8002120 <TIM_Base_SetConfig+0x13c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d017      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2e      	ldr	r2, [pc, #184]	@ (8002124 <TIM_Base_SetConfig+0x140>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <TIM_Base_SetConfig+0x144>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00f      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2c      	ldr	r2, [pc, #176]	@ (800212c <TIM_Base_SetConfig+0x148>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00b      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <TIM_Base_SetConfig+0x14c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2a      	ldr	r2, [pc, #168]	@ (8002134 <TIM_Base_SetConfig+0x150>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d003      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a29      	ldr	r2, [pc, #164]	@ (8002138 <TIM_Base_SetConfig+0x154>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d108      	bne.n	80020a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800209c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <TIM_Base_SetConfig+0x12c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0xf8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a12      	ldr	r2, [pc, #72]	@ (8002120 <TIM_Base_SetConfig+0x13c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f023 0201 	bic.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
  }
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000
 8002114:	40000400 	.word	0x40000400
 8002118:	40000800 	.word	0x40000800
 800211c:	40000c00 	.word	0x40000c00
 8002120:	40010400 	.word	0x40010400
 8002124:	40014000 	.word	0x40014000
 8002128:	40014400 	.word	0x40014400
 800212c:	40014800 	.word	0x40014800
 8002130:	40001800 	.word	0x40001800
 8002134:	40001c00 	.word	0x40001c00
 8002138:	40002000 	.word	0x40002000

0800213c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f103 0208 	add.w	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f103 0208 	add.w	r2, r3, #8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0208 	add.w	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d103      	bne.n	8002226 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e00c      	b.n	8002240 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3308      	adds	r3, #8
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e002      	b.n	8002234 <vListInsert+0x2e>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	d2f6      	bcs.n	800222e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	601a      	str	r2, [r3, #0]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6892      	ldr	r2, [r2, #8]
 800228e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6852      	ldr	r2, [r2, #4]
 8002298:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d103      	bne.n	80022ac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	1e5a      	subs	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <xQueueGenericReset+0x2c>
        __asm volatile
 80022e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	60bb      	str	r3, [r7, #8]
    }
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022f8:	f002 f880 	bl	80043fc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	68f9      	ldr	r1, [r7, #12]
 8002306:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	441a      	add	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	3b01      	subs	r3, #1
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	441a      	add	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	22ff      	movs	r2, #255	@ 0xff
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	22ff      	movs	r2, #255	@ 0xff
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00f      	beq.n	8002376 <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3310      	adds	r3, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f001 f8c6 	bl	80034ec <xTaskRemoveFromEventList>
 8002360:	e009      	b.n	8002376 <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3310      	adds	r3, #16
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fefc 	bl	8002164 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3324      	adds	r3, #36	@ 0x24
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fef7 	bl	8002164 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002376:	f002 f873 	bl	8004460 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	@ 0x30
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	61bb      	str	r3, [r7, #24]
    }
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <xQueueGenericCreate+0x4a>
 80023c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d101      	bne.n	80023d2 <xQueueGenericCreate+0x4e>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <xQueueGenericCreate+0x50>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <xQueueGenericCreate+0x6c>
        __asm volatile
 80023d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	617b      	str	r3, [r7, #20]
    }
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80023f6:	d90b      	bls.n	8002410 <xQueueGenericCreate+0x8c>
        __asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	613b      	str	r3, [r7, #16]
    }
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	3350      	adds	r3, #80	@ 0x50
 8002414:	4618      	mov	r0, r3
 8002416:	f002 f923 	bl	8004660 <pvPortMalloc>
 800241a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3350      	adds	r3, #80	@ 0x50
 800242a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800242c:	79fa      	ldrb	r2, [r7, #7]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f805 	bl	8002448 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800243e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002440:	4618      	mov	r0, r3
 8002442:	3728      	adds	r7, #40	@ 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e002      	b.n	800246a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002476:	2101      	movs	r1, #1
 8002478:	69b8      	ldr	r0, [r7, #24]
 800247a:	f7ff ff27 	bl	80022cc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	2073      	movs	r0, #115	@ 0x73
 800248e:	f004 f811 	bl	80064b4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b090      	sub	sp, #64	@ 0x40
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <xQueueGenericSend+0x34>
        __asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <xQueueGenericSend+0x42>
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <xQueueGenericSend+0x46>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <xQueueGenericSend+0x48>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <xQueueGenericSend+0x64>
        __asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d103      	bne.n	800250e <xQueueGenericSend+0x72>
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <xQueueGenericSend+0x76>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <xQueueGenericSend+0x78>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <xQueueGenericSend+0x94>
        __asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	623b      	str	r3, [r7, #32]
    }
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002530:	f001 f97a 	bl	8003828 <xTaskGetSchedulerState>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <xQueueGenericSend+0xa4>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <xQueueGenericSend+0xa8>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <xQueueGenericSend+0xaa>
 8002544:	2300      	movs	r3, #0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10b      	bne.n	8002562 <xQueueGenericSend+0xc6>
        __asm volatile
 800254a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	61fb      	str	r3, [r7, #28]
    }
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	e7fd      	b.n	800255e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002562:	f001 ff4b 	bl	80043fc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <xQueueGenericSend+0xdc>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d11f      	bne.n	80025b8 <xQueueGenericSend+0x11c>
            {
                traceQUEUE_SEND( pxQueue );
 8002578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257a:	4618      	mov	r0, r3
 800257c:	f004 fd28 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	460b      	mov	r3, r1
 800258a:	4601      	mov	r1, r0
 800258c:	205a      	movs	r0, #90	@ 0x5a
 800258e:	f004 f807 	bl	80065a0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002598:	f000 fa5c 	bl	8002a54 <prvCopyDataToQueue>
 800259c:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <xQueueGenericSend+0x114>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	3324      	adds	r3, #36	@ 0x24
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 ff9e 	bl	80034ec <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025b0:	f001 ff56 	bl	8004460 <vPortExitCritical>
                return pdPASS;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e07d      	b.n	80026b4 <xQueueGenericSend+0x218>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d110      	bne.n	80025e0 <xQueueGenericSend+0x144>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025be:	f001 ff4f 	bl	8004460 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 fd03 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	460b      	mov	r3, r1
 80025d4:	4601      	mov	r1, r0
 80025d6:	205a      	movs	r0, #90	@ 0x5a
 80025d8:	f003 ffe2 	bl	80065a0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	e069      	b.n	80026b4 <xQueueGenericSend+0x218>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <xQueueGenericSend+0x158>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 ffe6 	bl	80035bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025f4:	f001 ff34 	bl	8004460 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025f8:	f000 fd5a 	bl	80030b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025fc:	f001 fefe 	bl	80043fc <vPortEnterCritical>
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002606:	b25b      	sxtb	r3, r3
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d103      	bne.n	8002616 <xQueueGenericSend+0x17a>
 800260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800261c:	b25b      	sxtb	r3, r3
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d103      	bne.n	800262c <xQueueGenericSend+0x190>
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800262c:	f001 ff18 	bl	8004460 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002630:	1d3a      	adds	r2, r7, #4
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f000 ffd5 	bl	80035e8 <xTaskCheckForTimeOut>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d124      	bne.n	800268e <xQueueGenericSend+0x1f2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002644:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002646:	f000 fafd 	bl	8002c44 <prvIsQueueFull>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d018      	beq.n	8002682 <xQueueGenericSend+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002652:	3310      	adds	r3, #16
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fef1 	bl	8003440 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800265e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002660:	f000 fa88 	bl	8002b74 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002664:	f000 fd32 	bl	80030cc <xTaskResumeAll>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	f47f af79 	bne.w	8002562 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <xQueueGenericSend+0x220>)
 8002672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	e76f      	b.n	8002562 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002684:	f000 fa76 	bl	8002b74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002688:	f000 fd20 	bl	80030cc <xTaskResumeAll>
 800268c:	e769      	b.n	8002562 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800268e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002690:	f000 fa70 	bl	8002b74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002694:	f000 fd1a 	bl	80030cc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269a:	4618      	mov	r0, r3
 800269c:	f004 fc98 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	460b      	mov	r3, r1
 80026aa:	4601      	mov	r1, r0
 80026ac:	205a      	movs	r0, #90	@ 0x5a
 80026ae:	f003 ff77 	bl	80065a0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026b2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3738      	adds	r7, #56	@ 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b090      	sub	sp, #64	@ 0x40
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80026d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <xQueueGenericSendFromISR+0x3e>
 80026f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <xQueueGenericSendFromISR+0x42>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <xQueueGenericSendFromISR+0x44>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d103      	bne.n	800272e <xQueueGenericSendFromISR+0x6e>
 8002726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <xQueueGenericSendFromISR+0x72>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <xQueueGenericSendFromISR+0x74>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	623b      	str	r3, [r7, #32]
    }
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002750:	f001 ff44 	bl	80045dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002754:	f3ef 8211 	mrs	r2, BASEPRI
 8002758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	61fa      	str	r2, [r7, #28]
 800276a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800276c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800276e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <xQueueGenericSendFromISR+0xc2>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d149      	bne.n	8002816 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002784:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002788:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800278c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002794:	4618      	mov	r0, r3
 8002796:	f004 fc1b 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 800279a:	4601      	mov	r1, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	461a      	mov	r2, r3
 80027a0:	2060      	movs	r0, #96	@ 0x60
 80027a2:	f003 fe2d 	bl	8006400 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80027ac:	f000 f952 	bl	8002a54 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d112      	bne.n	80027e0 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d026      	beq.n	8002810 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c4:	3324      	adds	r3, #36	@ 0x24
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fe90 	bl	80034ec <xTaskRemoveFromEventList>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01e      	beq.n	8002810 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01b      	beq.n	8002810 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e017      	b.n	8002810 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80027e6:	d10b      	bne.n	8002800 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	617b      	str	r3, [r7, #20]
    }
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002800:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002804:	3301      	adds	r3, #1
 8002806:	b2db      	uxtb	r3, r3
 8002808:	b25a      	sxtb	r2, r3
 800280a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002810:	2301      	movs	r3, #1
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8002814:	e00b      	b.n	800282e <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002818:	4618      	mov	r0, r3
 800281a:	f004 fbd9 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 800281e:	4601      	mov	r1, r0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	2060      	movs	r0, #96	@ 0x60
 8002826:	f003 fdeb 	bl	8006400 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800282a:	2300      	movs	r3, #0
 800282c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800282e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002830:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002838:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800283a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800283c:	4618      	mov	r0, r3
 800283e:	3740      	adds	r7, #64	@ 0x40
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b08f      	sub	sp, #60	@ 0x3c
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <xQueueReceive+0x32>
        __asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	623b      	str	r3, [r7, #32]
    }
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	e7fd      	b.n	8002872 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <xQueueReceive+0x40>
 800287c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <xQueueReceive+0x44>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <xQueueReceive+0x46>
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <xQueueReceive+0x62>
        __asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	61fb      	str	r3, [r7, #28]
    }
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028a6:	f000 ffbf 	bl	8003828 <xTaskGetSchedulerState>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <xQueueReceive+0x72>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <xQueueReceive+0x76>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <xQueueReceive+0x78>
 80028ba:	2300      	movs	r3, #0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <xQueueReceive+0x94>
        __asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	61bb      	str	r3, [r7, #24]
    }
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028d8:	f001 fd90 	bl	80043fc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d024      	beq.n	8002932 <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028ec:	f000 f91c 	bl	8002b28 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 fb6c 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 80028f8:	4604      	mov	r4, r0
 80028fa:	2000      	movs	r0, #0
 80028fc:	f004 fb68 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 8002900:	4602      	mov	r2, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2101      	movs	r1, #1
 8002906:	9100      	str	r1, [sp, #0]
 8002908:	4621      	mov	r1, r4
 800290a:	205c      	movs	r0, #92	@ 0x5c
 800290c:	f003 fe48 	bl	80065a0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	1e5a      	subs	r2, r3, #1
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	3310      	adds	r3, #16
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fde1 	bl	80034ec <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800292a:	f001 fd99 	bl	8004460 <vPortExitCritical>
                return pdPASS;
 800292e:	2301      	movs	r3, #1
 8002930:	e08a      	b.n	8002a48 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002938:	f001 fd92 	bl	8004460 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	4618      	mov	r0, r3
 8002940:	f004 fb46 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 8002944:	4604      	mov	r4, r0
 8002946:	2000      	movs	r0, #0
 8002948:	f004 fb42 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2101      	movs	r1, #1
 8002952:	9100      	str	r1, [sp, #0]
 8002954:	4621      	mov	r1, r4
 8002956:	205c      	movs	r0, #92	@ 0x5c
 8002958:	f003 fe22 	bl	80065a0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800295c:	2300      	movs	r3, #0
 800295e:	e073      	b.n	8002a48 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fe26 	bl	80035bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002970:	2301      	movs	r3, #1
 8002972:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002974:	f001 fd74 	bl	8004460 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002978:	f000 fb9a 	bl	80030b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800297c:	f001 fd3e 	bl	80043fc <vPortEnterCritical>
 8002980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002982:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002986:	b25b      	sxtb	r3, r3
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d103      	bne.n	8002996 <xQueueReceive+0x152>
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800299c:	b25b      	sxtb	r3, r3
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d103      	bne.n	80029ac <xQueueReceive+0x168>
 80029a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029ac:	f001 fd58 	bl	8004460 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029b0:	1d3a      	adds	r2, r7, #4
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fe15 	bl	80035e8 <xTaskCheckForTimeOut>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d124      	bne.n	8002a0e <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029c6:	f000 f927 	bl	8002c18 <prvIsQueueEmpty>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d018      	beq.n	8002a02 <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d2:	3324      	adds	r3, #36	@ 0x24
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fd31 	bl	8003440 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029e0:	f000 f8c8 	bl	8002b74 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029e4:	f000 fb72 	bl	80030cc <xTaskResumeAll>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f47f af74 	bne.w	80028d8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80029f0:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <xQueueReceive+0x20c>)
 80029f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	e76a      	b.n	80028d8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a04:	f000 f8b6 	bl	8002b74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a08:	f000 fb60 	bl	80030cc <xTaskResumeAll>
 8002a0c:	e764      	b.n	80028d8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a10:	f000 f8b0 	bl	8002b74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a14:	f000 fb5a 	bl	80030cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a1a:	f000 f8fd 	bl	8002c18 <prvIsQueueEmpty>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f43f af59 	beq.w	80028d8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 fad1 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 8002a2e:	4604      	mov	r4, r0
 8002a30:	2000      	movs	r0, #0
 8002a32:	f004 facd 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 8002a36:	4602      	mov	r2, r0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	9100      	str	r1, [sp, #0]
 8002a3e:	4621      	mov	r1, r4
 8002a40:	205c      	movs	r0, #92	@ 0x5c
 8002a42:	f003 fdad 	bl	80065a0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a46:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3734      	adds	r7, #52	@ 0x34
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	e000ed04 	.word	0xe000ed04

08002a54 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d14d      	bne.n	8002b16 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fef0 	bl	8003864 <xTaskPriorityDisinherit>
 8002a84:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	e043      	b.n	8002b16 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d119      	bne.n	8002ac8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6858      	ldr	r0, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	f004 fc92 	bl	80073c8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	441a      	add	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d32b      	bcc.n	8002b16 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	e026      	b.n	8002b16 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68d8      	ldr	r0, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	f004 fc78 	bl	80073c8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	425b      	negs	r3, r3
 8002afe:	441a      	add	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d105      	bne.n	8002b16 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002b1e:	697b      	ldr	r3, [r7, #20]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d018      	beq.n	8002b6c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d303      	bcc.n	8002b5c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68d9      	ldr	r1, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	461a      	mov	r2, r3
 8002b66:	6838      	ldr	r0, [r7, #0]
 8002b68:	f004 fc2e 	bl	80073c8 <memcpy>
    }
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b7c:	f001 fc3e 	bl	80043fc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b86:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b88:	e011      	b.n	8002bae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3324      	adds	r3, #36	@ 0x24
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fca8 	bl	80034ec <xTaskRemoveFromEventList>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ba2:	f000 fd89 	bl	80036b8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	dce9      	bgt.n	8002b8a <prvUnlockQueue+0x16>
 8002bb6:	e000      	b.n	8002bba <prvUnlockQueue+0x46>
                        break;
 8002bb8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	22ff      	movs	r2, #255	@ 0xff
 8002bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002bc2:	f001 fc4d 	bl	8004460 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002bc6:	f001 fc19 	bl	80043fc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bd0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bd2:	e011      	b.n	8002bf8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d012      	beq.n	8002c02 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3310      	adds	r3, #16
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fc83 	bl	80034ec <xTaskRemoveFromEventList>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bec:	f000 fd64 	bl	80036b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	dce9      	bgt.n	8002bd4 <prvUnlockQueue+0x60>
 8002c00:	e000      	b.n	8002c04 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c02:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002c0c:	f001 fc28 	bl	8004460 <vPortExitCritical>
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c20:	f001 fbec 	bl	80043fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e001      	b.n	8002c36 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c36:	f001 fc13 	bl	8004460 <vPortExitCritical>

    return xReturn;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c4c:	f001 fbd6 	bl	80043fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d102      	bne.n	8002c62 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e001      	b.n	8002c66 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c66:	f001 fbfb 	bl	8004460 <vPortExitCritical>

    return xReturn;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e01e      	b.n	8002cc2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c84:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <vQueueAddToRegistry+0x60>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d115      	bne.n	8002cbc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c90:	4910      	ldr	r1, [pc, #64]	@ (8002cd4 <vQueueAddToRegistry+0x60>)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002cd4 <vQueueAddToRegistry+0x60>)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f004 f991 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 8002cae:	4601      	mov	r1, r0
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2071      	movs	r0, #113	@ 0x71
 8002cb6:	f003 fba3 	bl	8006400 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002cba:	e006      	b.n	8002cca <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b07      	cmp	r3, #7
 8002cc6:	d9dd      	bls.n	8002c84 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200000d4 	.word	0x200000d4

08002cd8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ce8:	f001 fb88 	bl	80043fc <vPortEnterCritical>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d103      	bne.n	8002d02 <vQueueWaitForMessageRestricted+0x2a>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d103      	bne.n	8002d18 <vQueueWaitForMessageRestricted+0x40>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d18:	f001 fba2 	bl	8004460 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3324      	adds	r3, #36	@ 0x24
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fbad 	bl	800348c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff1e 	bl	8002b74 <prvUnlockQueue>
    }
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	@ 0x30
 8002d44:	af04      	add	r7, sp, #16
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fc83 	bl	8004660 <pvPortMalloc>
 8002d5a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00e      	beq.n	8002d80 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d62:	2058      	movs	r0, #88	@ 0x58
 8002d64:	f001 fc7c 	bl	8004660 <pvPortMalloc>
 8002d68:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d76:	e005      	b.n	8002d84 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d78:	6978      	ldr	r0, [r7, #20]
 8002d7a:	f001 fd53 	bl	8004824 <vPortFree>
 8002d7e:	e001      	b.n	8002d84 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d013      	beq.n	8002db2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9303      	str	r3, [sp, #12]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	9302      	str	r3, [sp, #8]
 8002d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f80e 	bl	8002dc2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002da6:	69f8      	ldr	r0, [r7, #28]
 8002da8:	f000 f8a2 	bl	8002ef0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002dac:	2301      	movs	r3, #1
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	e002      	b.n	8002db8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
 8002db6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002db8:	69bb      	ldr	r3, [r7, #24]
    }
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b088      	sub	sp, #32
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	21a5      	movs	r1, #165	@ 0xa5
 8002ddc:	f004 fac6 	bl	800736c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dea:	3b01      	subs	r3, #1
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f023 0307 	bic.w	r3, r3, #7
 8002df8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	617b      	str	r3, [r7, #20]
    }
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01f      	beq.n	8002e62 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e012      	b.n	8002e4e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	7819      	ldrb	r1, [r3, #0]
 8002e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	3334      	adds	r3, #52	@ 0x34
 8002e38:	460a      	mov	r2, r1
 8002e3a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2b09      	cmp	r3, #9
 8002e52:	d9e9      	bls.n	8002e28 <prvInitialiseNewTask+0x66>
 8002e54:	e000      	b.n	8002e58 <prvInitialiseNewTask+0x96>
            {
                break;
 8002e56:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e60:	e003      	b.n	8002e6a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d901      	bls.n	8002e74 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e70:	2304      	movs	r3, #4
 8002e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e78:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e7e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	3304      	adds	r3, #4
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f98a 	bl	80021a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	3318      	adds	r3, #24
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff f985 	bl	80021a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e9e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	f1c3 0205 	rsb	r2, r3, #5
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb2:	3350      	adds	r3, #80	@ 0x50
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 fa57 	bl	800736c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	3354      	adds	r3, #84	@ 0x54
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 fa50 	bl	800736c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	68f9      	ldr	r1, [r7, #12]
 8002ed0:	69b8      	ldr	r0, [r7, #24]
 8002ed2:	f001 f8df 	bl	8004094 <pxPortInitialiseStack>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ee8:	bf00      	nop
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ef8:	f001 fa80 	bl	80043fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002efc:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <prvAddNewTaskToReadyList+0xe4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a34      	ldr	r2, [pc, #208]	@ (8002fd4 <prvAddNewTaskToReadyList+0xe4>)
 8002f04:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f06:	4b34      	ldr	r3, [pc, #208]	@ (8002fd8 <prvAddNewTaskToReadyList+0xe8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f0e:	4a32      	ldr	r2, [pc, #200]	@ (8002fd8 <prvAddNewTaskToReadyList+0xe8>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f14:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd4 <prvAddNewTaskToReadyList+0xe4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d110      	bne.n	8002f3e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f1c:	f000 fbea 	bl	80036f4 <prvInitialiseTaskLists>
 8002f20:	e00d      	b.n	8002f3e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f22:	4b2e      	ldr	r3, [pc, #184]	@ (8002fdc <prvAddNewTaskToReadyList+0xec>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd8 <prvAddNewTaskToReadyList+0xe8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d802      	bhi.n	8002f3e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f38:	4a27      	ldr	r2, [pc, #156]	@ (8002fd8 <prvAddNewTaskToReadyList+0xe8>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f3e:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <prvAddNewTaskToReadyList+0xf0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	4a26      	ldr	r2, [pc, #152]	@ (8002fe0 <prvAddNewTaskToReadyList+0xf0>)
 8002f46:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f48:	4b25      	ldr	r3, [pc, #148]	@ (8002fe0 <prvAddNewTaskToReadyList+0xf0>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <prvAddNewTaskToReadyList+0x94>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 ff13 	bl	8006d84 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	461d      	mov	r5, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461c      	mov	r4, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	1ae3      	subs	r3, r4, r3
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	462b      	mov	r3, r5
 8002f80:	f001 fe20 	bl	8004bc4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 ff80 	bl	8006e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	2201      	movs	r2, #1
 8002f92:	409a      	lsls	r2, r3
 8002f94:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <prvAddNewTaskToReadyList+0xf4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	4a12      	ldr	r2, [pc, #72]	@ (8002fe4 <prvAddNewTaskToReadyList+0xf4>)
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <prvAddNewTaskToReadyList+0xf8>)
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f7ff f902 	bl	80021be <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fba:	f001 fa51 	bl	8004460 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fbe:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <prvAddNewTaskToReadyList+0xec>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fc6:	4b04      	ldr	r3, [pc, #16]	@ (8002fd8 <prvAddNewTaskToReadyList+0xe8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200001ec 	.word	0x200001ec
 8002fd8:	20000114 	.word	0x20000114
 8002fdc:	200001f8 	.word	0x200001f8
 8002fe0:	20000208 	.word	0x20000208
 8002fe4:	200001f4 	.word	0x200001f4
 8002fe8:	20000118 	.word	0x20000118

08002fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ff2:	4b27      	ldr	r3, [pc, #156]	@ (8003090 <vTaskStartScheduler+0xa4>)
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2282      	movs	r2, #130	@ 0x82
 8002ffe:	4925      	ldr	r1, [pc, #148]	@ (8003094 <vTaskStartScheduler+0xa8>)
 8003000:	4825      	ldr	r0, [pc, #148]	@ (8003098 <vTaskStartScheduler+0xac>)
 8003002:	f7ff fe9d 	bl	8002d40 <xTaskCreate>
 8003006:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800300e:	f000 fd23 	bl	8003a58 <xTimerCreateTimerTask>
 8003012:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d124      	bne.n	8003064 <vTaskStartScheduler+0x78>
        __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	60bb      	str	r3, [r7, #8]
    }
 800302c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800302e:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <vTaskStartScheduler+0xb0>)
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003036:	4b1a      	ldr	r3, [pc, #104]	@ (80030a0 <vTaskStartScheduler+0xb4>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800303c:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <vTaskStartScheduler+0xb8>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003042:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <vTaskStartScheduler+0xbc>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b12      	ldr	r3, [pc, #72]	@ (8003090 <vTaskStartScheduler+0xa4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d102      	bne.n	8003054 <vTaskStartScheduler+0x68>
 800304e:	f003 fe7d 	bl	8006d4c <SEGGER_SYSVIEW_OnIdle>
 8003052:	e004      	b.n	800305e <vTaskStartScheduler+0x72>
 8003054:	4b14      	ldr	r3, [pc, #80]	@ (80030a8 <vTaskStartScheduler+0xbc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f003 fed5 	bl	8006e08 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800305e:	f001 f8a9 	bl	80041b4 <xPortStartScheduler>
 8003062:	e00f      	b.n	8003084 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d10b      	bne.n	8003084 <vTaskStartScheduler+0x98>
        __asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	607b      	str	r3, [r7, #4]
    }
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	e7fd      	b.n	8003080 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <vTaskStartScheduler+0xc0>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000210 	.word	0x20000210
 8003094:	08007cd8 	.word	0x08007cd8
 8003098:	080036d1 	.word	0x080036d1
 800309c:	2000020c 	.word	0x2000020c
 80030a0:	200001f8 	.word	0x200001f8
 80030a4:	200001f0 	.word	0x200001f0
 80030a8:	20000114 	.word	0x20000114
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030b4:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <vTaskSuspendAll+0x18>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	4a03      	ldr	r2, [pc, #12]	@ (80030c8 <vTaskSuspendAll+0x18>)
 80030bc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	20000214 	.word	0x20000214

080030cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030da:	4b3e      	ldr	r3, [pc, #248]	@ (80031d4 <xTaskResumeAll+0x108>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <xTaskResumeAll+0x2e>
        __asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	603b      	str	r3, [r7, #0]
    }
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	e7fd      	b.n	80030f6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030fa:	f001 f97f 	bl	80043fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030fe:	4b35      	ldr	r3, [pc, #212]	@ (80031d4 <xTaskResumeAll+0x108>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3b01      	subs	r3, #1
 8003104:	4a33      	ldr	r2, [pc, #204]	@ (80031d4 <xTaskResumeAll+0x108>)
 8003106:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003108:	4b32      	ldr	r3, [pc, #200]	@ (80031d4 <xTaskResumeAll+0x108>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d159      	bne.n	80031c4 <xTaskResumeAll+0xf8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003110:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <xTaskResumeAll+0x10c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d055      	beq.n	80031c4 <xTaskResumeAll+0xf8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003118:	e032      	b.n	8003180 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800311a:	4b30      	ldr	r3, [pc, #192]	@ (80031dc <xTaskResumeAll+0x110>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3318      	adds	r3, #24
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f8a6 	bl	8002278 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3304      	adds	r3, #4
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f8a1 	bl	8002278 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4618      	mov	r0, r3
 800313a:	f003 fea7 	bl	8006e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	2201      	movs	r2, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	4b26      	ldr	r3, [pc, #152]	@ (80031e0 <xTaskResumeAll+0x114>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	4a24      	ldr	r2, [pc, #144]	@ (80031e0 <xTaskResumeAll+0x114>)
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4a21      	ldr	r2, [pc, #132]	@ (80031e4 <xTaskResumeAll+0x118>)
 800315e:	441a      	add	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3304      	adds	r3, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f7ff f829 	bl	80021be <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003170:	4b1d      	ldr	r3, [pc, #116]	@ (80031e8 <xTaskResumeAll+0x11c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800317a:	4b1c      	ldr	r3, [pc, #112]	@ (80031ec <xTaskResumeAll+0x120>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003180:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <xTaskResumeAll+0x110>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1c8      	bne.n	800311a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800318e:	f000 fb2f 	bl	80037f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003192:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <xTaskResumeAll+0x124>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800319e:	f000 f84b 	bl	8003238 <xTaskIncrementTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80031a8:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <xTaskResumeAll+0x120>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f1      	bne.n	800319e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80031ba:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <xTaskResumeAll+0x124>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031c0:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <xTaskResumeAll+0x120>)
 80031c2:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031c4:	f001 f94c 	bl	8004460 <vPortExitCritical>

    return xAlreadyYielded;
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000214 	.word	0x20000214
 80031d8:	200001ec 	.word	0x200001ec
 80031dc:	200001ac 	.word	0x200001ac
 80031e0:	200001f4 	.word	0x200001f4
 80031e4:	20000118 	.word	0x20000118
 80031e8:	20000114 	.word	0x20000114
 80031ec:	20000200 	.word	0x20000200
 80031f0:	200001fc 	.word	0x200001fc

080031f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <xTaskGetTickCount+0x1c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003200:	687b      	ldr	r3, [r7, #4]
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	200001f0 	.word	0x200001f0

08003214 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800321a:	f001 f9df 	bl	80045dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003222:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <xTaskGetTickCountFromISR+0x20>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003228:	683b      	ldr	r3, [r7, #0]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200001f0 	.word	0x200001f0

08003238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003242:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <xTaskIncrementTick+0x110>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d174      	bne.n	8003334 <xTaskIncrementTick+0xfc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800324a:	4b40      	ldr	r3, [pc, #256]	@ (800334c <xTaskIncrementTick+0x114>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003252:	4a3e      	ldr	r2, [pc, #248]	@ (800334c <xTaskIncrementTick+0x114>)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d121      	bne.n	80032a2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800325e:	4b3c      	ldr	r3, [pc, #240]	@ (8003350 <xTaskIncrementTick+0x118>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <xTaskIncrementTick+0x48>
        __asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	603b      	str	r3, [r7, #0]
    }
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <xTaskIncrementTick+0x44>
 8003280:	4b33      	ldr	r3, [pc, #204]	@ (8003350 <xTaskIncrementTick+0x118>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <xTaskIncrementTick+0x11c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a31      	ldr	r2, [pc, #196]	@ (8003350 <xTaskIncrementTick+0x118>)
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4a31      	ldr	r2, [pc, #196]	@ (8003354 <xTaskIncrementTick+0x11c>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b30      	ldr	r3, [pc, #192]	@ (8003358 <xTaskIncrementTick+0x120>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	4a2f      	ldr	r2, [pc, #188]	@ (8003358 <xTaskIncrementTick+0x120>)
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	f000 faa7 	bl	80037f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032a2:	4b2e      	ldr	r3, [pc, #184]	@ (800335c <xTaskIncrementTick+0x124>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d348      	bcc.n	800333e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <xTaskIncrementTick+0x118>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b6:	4b29      	ldr	r3, [pc, #164]	@ (800335c <xTaskIncrementTick+0x124>)
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	601a      	str	r2, [r3, #0]
                    break;
 80032be:	e03e      	b.n	800333e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c0:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <xTaskIncrementTick+0x118>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d203      	bcs.n	80032e0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032d8:	4a20      	ldr	r2, [pc, #128]	@ (800335c <xTaskIncrementTick+0x124>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032de:	e02e      	b.n	800333e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe ffc7 	bl	8002278 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3318      	adds	r3, #24
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe ffbe 	bl	8002278 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 fdc4 	bl	8006e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	2201      	movs	r2, #1
 800330a:	409a      	lsls	r2, r3
 800330c:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <xTaskIncrementTick+0x128>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4313      	orrs	r3, r2
 8003312:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <xTaskIncrementTick+0x128>)
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4a10      	ldr	r2, [pc, #64]	@ (8003364 <xTaskIncrementTick+0x12c>)
 8003324:	441a      	add	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3304      	adds	r3, #4
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f7fe ff46 	bl	80021be <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003332:	e7bb      	b.n	80032ac <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <xTaskIncrementTick+0x130>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	4a0b      	ldr	r2, [pc, #44]	@ (8003368 <xTaskIncrementTick+0x130>)
 800333c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800333e:	697b      	ldr	r3, [r7, #20]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000214 	.word	0x20000214
 800334c:	200001f0 	.word	0x200001f0
 8003350:	200001a4 	.word	0x200001a4
 8003354:	200001a8 	.word	0x200001a8
 8003358:	20000204 	.word	0x20000204
 800335c:	2000020c 	.word	0x2000020c
 8003360:	200001f4 	.word	0x200001f4
 8003364:	20000118 	.word	0x20000118
 8003368:	200001fc 	.word	0x200001fc

0800336c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003372:	4b2d      	ldr	r3, [pc, #180]	@ (8003428 <vTaskSwitchContext+0xbc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800337a:	4b2c      	ldr	r3, [pc, #176]	@ (800342c <vTaskSwitchContext+0xc0>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003380:	e04e      	b.n	8003420 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003382:	4b2a      	ldr	r3, [pc, #168]	@ (800342c <vTaskSwitchContext+0xc0>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003388:	4b29      	ldr	r3, [pc, #164]	@ (8003430 <vTaskSwitchContext+0xc4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003396:	7afb      	ldrb	r3, [r7, #11]
 8003398:	f1c3 031f 	rsb	r3, r3, #31
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	4925      	ldr	r1, [pc, #148]	@ (8003434 <vTaskSwitchContext+0xc8>)
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <vTaskSwitchContext+0x5e>
        __asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	607b      	str	r3, [r7, #4]
    }
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <vTaskSwitchContext+0x5a>
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4a17      	ldr	r2, [pc, #92]	@ (8003434 <vTaskSwitchContext+0xc8>)
 80033d6:	4413      	add	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	3308      	adds	r3, #8
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d104      	bne.n	80033fa <vTaskSwitchContext+0x8e>
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a0d      	ldr	r2, [pc, #52]	@ (8003438 <vTaskSwitchContext+0xcc>)
 8003402:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <vTaskSwitchContext+0xcc>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <vTaskSwitchContext+0xd0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d102      	bne.n	8003416 <vTaskSwitchContext+0xaa>
 8003410:	f003 fc9c 	bl	8006d4c <SEGGER_SYSVIEW_OnIdle>
}
 8003414:	e004      	b.n	8003420 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <vTaskSwitchContext+0xcc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f003 fcf4 	bl	8006e08 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000214 	.word	0x20000214
 800342c:	20000200 	.word	0x20000200
 8003430:	200001f4 	.word	0x200001f4
 8003434:	20000118 	.word	0x20000118
 8003438:	20000114 	.word	0x20000114
 800343c:	20000210 	.word	0x20000210

08003440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	60fb      	str	r3, [r7, #12]
    }
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003468:	4b07      	ldr	r3, [pc, #28]	@ (8003488 <vTaskPlaceOnEventList+0x48>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3318      	adds	r3, #24
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fe fec8 	bl	8002206 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003476:	2101      	movs	r1, #1
 8003478:	6838      	ldr	r0, [r7, #0]
 800347a:	f000 fa75 	bl	8003968 <prvAddCurrentTaskToDelayedList>
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000114 	.word	0x20000114

0800348c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	617b      	str	r3, [r7, #20]
    }
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	e7fd      	b.n	80034b2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034b6:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <vTaskPlaceOnEventListRestricted+0x5c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3318      	adds	r3, #24
 80034bc:	4619      	mov	r1, r3
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7fe fe7d 	bl	80021be <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
 80034ce:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80034d0:	2024      	movs	r0, #36	@ 0x24
 80034d2:	f002 ff3b 	bl	800634c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	68b8      	ldr	r0, [r7, #8]
 80034da:	f000 fa45 	bl	8003968 <prvAddCurrentTaskToDelayedList>
    }
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000114 	.word	0x20000114

080034ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60fb      	str	r3, [r7, #12]
    }
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	e7fd      	b.n	8003516 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3318      	adds	r3, #24
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe feaa 	bl	8002278 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003524:	4b1f      	ldr	r3, [pc, #124]	@ (80035a4 <xTaskRemoveFromEventList+0xb8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d120      	bne.n	800356e <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	3304      	adds	r3, #4
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe fea1 	bl	8002278 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4618      	mov	r0, r3
 800353a:	f003 fca7 	bl	8006e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	2201      	movs	r2, #1
 8003544:	409a      	lsls	r2, r3
 8003546:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <xTaskRemoveFromEventList+0xbc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <xTaskRemoveFromEventList+0xbc>)
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4a13      	ldr	r2, [pc, #76]	@ (80035ac <xTaskRemoveFromEventList+0xc0>)
 800355e:	441a      	add	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	3304      	adds	r3, #4
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7fe fe29 	bl	80021be <vListInsertEnd>
 800356c:	e005      	b.n	800357a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3318      	adds	r3, #24
 8003572:	4619      	mov	r1, r3
 8003574:	480e      	ldr	r0, [pc, #56]	@ (80035b0 <xTaskRemoveFromEventList+0xc4>)
 8003576:	f7fe fe22 	bl	80021be <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <xTaskRemoveFromEventList+0xc8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	429a      	cmp	r2, r3
 8003586:	d905      	bls.n	8003594 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <xTaskRemoveFromEventList+0xcc>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e001      	b.n	8003598 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003598:	697b      	ldr	r3, [r7, #20]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000214 	.word	0x20000214
 80035a8:	200001f4 	.word	0x200001f4
 80035ac:	20000118 	.word	0x20000118
 80035b0:	200001ac 	.word	0x200001ac
 80035b4:	20000114 	.word	0x20000114
 80035b8:	20000200 	.word	0x20000200

080035bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <vTaskInternalSetTimeOutState+0x24>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <vTaskInternalSetTimeOutState+0x28>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	605a      	str	r2, [r3, #4]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	20000204 	.word	0x20000204
 80035e4:	200001f0 	.word	0x200001f0

080035e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	613b      	str	r3, [r7, #16]
    }
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	60fb      	str	r3, [r7, #12]
    }
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800362e:	f000 fee5 	bl	80043fc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003632:	4b1f      	ldr	r3, [pc, #124]	@ (80036b0 <xTaskCheckForTimeOut+0xc8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364a:	d102      	bne.n	8003652 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e026      	b.n	80036a0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b17      	ldr	r3, [pc, #92]	@ (80036b4 <xTaskCheckForTimeOut+0xcc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d00a      	beq.n	8003674 <xTaskCheckForTimeOut+0x8c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	429a      	cmp	r2, r3
 8003666:	d305      	bcc.n	8003674 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003668:	2301      	movs	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e015      	b.n	80036a0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	429a      	cmp	r2, r3
 800367c:	d20b      	bcs.n	8003696 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1ad2      	subs	r2, r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ff96 	bl	80035bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	e004      	b.n	80036a0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800369c:	2301      	movs	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036a0:	f000 fede 	bl	8004460 <vPortExitCritical>

    return xReturn;
 80036a4:	69fb      	ldr	r3, [r7, #28]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200001f0 	.word	0x200001f0
 80036b4:	20000204 	.word	0x20000204

080036b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036bc:	4b03      	ldr	r3, [pc, #12]	@ (80036cc <vTaskMissedYield+0x14>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	20000200 	.word	0x20000200

080036d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036d8:	f000 f84c 	bl	8003774 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80036dc:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <prvIdleTask+0x20>)
 80036de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80036ec:	bf00      	nop
 80036ee:	e7f3      	b.n	80036d8 <prvIdleTask+0x8>
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	e00c      	b.n	800371a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4a12      	ldr	r2, [pc, #72]	@ (8003754 <prvInitialiseTaskLists+0x60>)
 800370c:	4413      	add	r3, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fd28 	bl	8002164 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3301      	adds	r3, #1
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d9ef      	bls.n	8003700 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003720:	480d      	ldr	r0, [pc, #52]	@ (8003758 <prvInitialiseTaskLists+0x64>)
 8003722:	f7fe fd1f 	bl	8002164 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003726:	480d      	ldr	r0, [pc, #52]	@ (800375c <prvInitialiseTaskLists+0x68>)
 8003728:	f7fe fd1c 	bl	8002164 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800372c:	480c      	ldr	r0, [pc, #48]	@ (8003760 <prvInitialiseTaskLists+0x6c>)
 800372e:	f7fe fd19 	bl	8002164 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003732:	480c      	ldr	r0, [pc, #48]	@ (8003764 <prvInitialiseTaskLists+0x70>)
 8003734:	f7fe fd16 	bl	8002164 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003738:	480b      	ldr	r0, [pc, #44]	@ (8003768 <prvInitialiseTaskLists+0x74>)
 800373a:	f7fe fd13 	bl	8002164 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <prvInitialiseTaskLists+0x78>)
 8003740:	4a05      	ldr	r2, [pc, #20]	@ (8003758 <prvInitialiseTaskLists+0x64>)
 8003742:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003744:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <prvInitialiseTaskLists+0x7c>)
 8003746:	4a05      	ldr	r2, [pc, #20]	@ (800375c <prvInitialiseTaskLists+0x68>)
 8003748:	601a      	str	r2, [r3, #0]
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000118 	.word	0x20000118
 8003758:	2000017c 	.word	0x2000017c
 800375c:	20000190 	.word	0x20000190
 8003760:	200001ac 	.word	0x200001ac
 8003764:	200001c0 	.word	0x200001c0
 8003768:	200001d8 	.word	0x200001d8
 800376c:	200001a4 	.word	0x200001a4
 8003770:	200001a8 	.word	0x200001a8

08003774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800377a:	e019      	b.n	80037b0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800377c:	f000 fe3e 	bl	80043fc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <prvCheckTasksWaitingTermination+0x50>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fd73 	bl	8002278 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <prvCheckTasksWaitingTermination+0x54>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3b01      	subs	r3, #1
 8003798:	4a0b      	ldr	r2, [pc, #44]	@ (80037c8 <prvCheckTasksWaitingTermination+0x54>)
 800379a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800379c:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <prvCheckTasksWaitingTermination+0x58>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <prvCheckTasksWaitingTermination+0x58>)
 80037a4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80037a6:	f000 fe5b 	bl	8004460 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f810 	bl	80037d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <prvCheckTasksWaitingTermination+0x58>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e1      	bne.n	800377c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200001c0 	.word	0x200001c0
 80037c8:	200001ec 	.word	0x200001ec
 80037cc:	200001d4 	.word	0x200001d4

080037d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 f821 	bl	8004824 <vPortFree>
                vPortFree( pxTCB );
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f001 f81e 	bl	8004824 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <prvResetNextTaskUnblockTime+0x30>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037fe:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <prvResetNextTaskUnblockTime+0x34>)
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003806:	e005      	b.n	8003814 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <prvResetNextTaskUnblockTime+0x30>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a04      	ldr	r2, [pc, #16]	@ (8003824 <prvResetNextTaskUnblockTime+0x34>)
 8003812:	6013      	str	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	200001a4 	.word	0x200001a4
 8003824:	2000020c 	.word	0x2000020c

08003828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <xTaskGetSchedulerState+0x34>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003836:	2301      	movs	r3, #1
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e008      	b.n	800384e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <xTaskGetSchedulerState+0x38>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003844:	2302      	movs	r3, #2
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	e001      	b.n	800384e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800384e:	687b      	ldr	r3, [r7, #4]
    }
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	200001f8 	.word	0x200001f8
 8003860:	20000214 	.word	0x20000214

08003864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d06a      	beq.n	8003950 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800387a:	4b38      	ldr	r3, [pc, #224]	@ (800395c <xTaskPriorityDisinherit+0xf8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	429a      	cmp	r2, r3
 8003882:	d00b      	beq.n	800389c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60fb      	str	r3, [r7, #12]
    }
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	60bb      	str	r3, [r7, #8]
    }
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	e7fd      	b.n	80038b8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c0:	1e5a      	subs	r2, r3, #1
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d03e      	beq.n	8003950 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d13a      	bne.n	8003950 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	3304      	adds	r3, #4
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fcca 	bl	8002278 <uxListRemove>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ee:	2201      	movs	r2, #1
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43da      	mvns	r2, r3
 80038f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003960 <xTaskPriorityDisinherit+0xfc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4013      	ands	r3, r2
 80038fc:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <xTaskPriorityDisinherit+0xfc>)
 80038fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	204a      	movs	r0, #74	@ 0x4a
 8003906:	f002 fd3f 	bl	8006388 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003916:	f1c3 0205 	rsb	r2, r3, #5
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	2201      	movs	r2, #1
 8003924:	409a      	lsls	r2, r3
 8003926:	4b0e      	ldr	r3, [pc, #56]	@ (8003960 <xTaskPriorityDisinherit+0xfc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4313      	orrs	r3, r2
 800392c:	4a0c      	ldr	r2, [pc, #48]	@ (8003960 <xTaskPriorityDisinherit+0xfc>)
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4a09      	ldr	r2, [pc, #36]	@ (8003964 <xTaskPriorityDisinherit+0x100>)
 800393e:	441a      	add	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f7fe fc39 	bl	80021be <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003950:	697b      	ldr	r3, [r7, #20]
    }
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000114 	.word	0x20000114
 8003960:	200001f4 	.word	0x200001f4
 8003964:	20000118 	.word	0x20000118

08003968 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003972:	4b32      	ldr	r3, [pc, #200]	@ (8003a3c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3304      	adds	r3, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fc7a 	bl	8002278 <uxListRemove>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800398a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	2201      	movs	r2, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	4b2a      	ldr	r3, [pc, #168]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0xdc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4013      	ands	r3, r2
 800399e:	4a29      	ldr	r2, [pc, #164]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d110      	bne.n	80039cc <prvAddCurrentTaskToDelayedList+0x64>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80039b0:	4b23      	ldr	r3, [pc, #140]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	211b      	movs	r1, #27
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 faaa 	bl	8006f10 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039bc:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4820      	ldr	r0, [pc, #128]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0xe0>)
 80039c6:	f7fe fbfa 	bl	80021be <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039ca:	e032      	b.n	8003a32 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d20f      	bcs.n	8003a04 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039e4:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2104      	movs	r1, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fa90 	bl	8006f10 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039f0:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0xe4>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7fe fc02 	bl	8002206 <vListInsert>
}
 8003a02:	e016      	b.n	8003a32 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003a04:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fa80 	bl	8006f10 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a10:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f7fe fbf2 	bl	8002206 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a22:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d202      	bcs.n	8003a32 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a2c:	4a09      	ldr	r2, [pc, #36]	@ (8003a54 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6013      	str	r3, [r2, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200001f0 	.word	0x200001f0
 8003a40:	20000114 	.word	0x20000114
 8003a44:	200001f4 	.word	0x200001f4
 8003a48:	200001d8 	.word	0x200001d8
 8003a4c:	200001a8 	.word	0x200001a8
 8003a50:	200001a4 	.word	0x200001a4
 8003a54:	2000020c 	.word	0x2000020c

08003a58 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a62:	f000 fae1 	bl	8004028 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a66:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <xTimerCreateTimerTask+0x58>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a6e:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <xTimerCreateTimerTask+0x5c>)
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	2302      	movs	r3, #2
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a7c:	490e      	ldr	r1, [pc, #56]	@ (8003ab8 <xTimerCreateTimerTask+0x60>)
 8003a7e:	480f      	ldr	r0, [pc, #60]	@ (8003abc <xTimerCreateTimerTask+0x64>)
 8003a80:	f7ff f95e 	bl	8002d40 <xTaskCreate>
 8003a84:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10b      	bne.n	8003aa4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	603b      	str	r3, [r7, #0]
    }
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	e7fd      	b.n	8003aa0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003aa4:	687b      	ldr	r3, [r7, #4]
    }
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000248 	.word	0x20000248
 8003ab4:	2000024c 	.word	0x2000024c
 8003ab8:	08007ce0 	.word	0x08007ce0
 8003abc:	08003bf9 	.word	0x08003bf9

08003ac0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	@ 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <xTimerGenericCommand+0x30>
        __asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	623b      	str	r3, [r7, #32]
    }
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	e7fd      	b.n	8003aec <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003af0:	4b19      	ldr	r3, [pc, #100]	@ (8003b58 <xTimerGenericCommand+0x98>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02a      	beq.n	8003b4e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	dc18      	bgt.n	8003b3c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b0a:	f7ff fe8d 	bl	8003828 <xTaskGetSchedulerState>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d109      	bne.n	8003b28 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b14:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <xTimerGenericCommand+0x98>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	f107 0114 	add.w	r1, r7, #20
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b20:	f7fe fcbc 	bl	800249c <xQueueGenericSend>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b26:	e012      	b.n	8003b4e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <xTimerGenericCommand+0x98>)
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	f107 0114 	add.w	r1, r7, #20
 8003b30:	2300      	movs	r3, #0
 8003b32:	2200      	movs	r2, #0
 8003b34:	f7fe fcb2 	bl	800249c <xQueueGenericSend>
 8003b38:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b3a:	e008      	b.n	8003b4e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b3c:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <xTimerGenericCommand+0x98>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	f107 0114 	add.w	r1, r7, #20
 8003b44:	2300      	movs	r3, #0
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	f7fe fdba 	bl	80026c0 <xQueueGenericSendFromISR>
 8003b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	@ 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000248 	.word	0x20000248

08003b5c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b66:	4b23      	ldr	r3, [pc, #140]	@ (8003bf4 <prvProcessExpiredTimer+0x98>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fb7f 	bl	8002278 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d023      	beq.n	8003bd0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	18d1      	adds	r1, r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	6978      	ldr	r0, [r7, #20]
 8003b96:	f000 f8d5 	bl	8003d44 <prvInsertTimerInActiveList>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d020      	beq.n	8003be2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7ff ff88 	bl	8003ac0 <xTimerGenericCommand>
 8003bb0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d114      	bne.n	8003be2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	60fb      	str	r3, [r7, #12]
    }
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	4798      	blx	r3
    }
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000240 	.word	0x20000240

08003bf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c00:	f107 0308 	add.w	r3, r7, #8
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f859 	bl	8003cbc <prvGetNextExpireTime>
 8003c0a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f805 	bl	8003c20 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c16:	f000 f8d7 	bl	8003dc8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c1a:	bf00      	nop
 8003c1c:	e7f0      	b.n	8003c00 <prvTimerTask+0x8>
	...

08003c20 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c2a:	f7ff fa41 	bl	80030b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f866 	bl	8003d04 <prvSampleTimeNow>
 8003c38:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d130      	bne.n	8003ca2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <prvProcessTimerOrBlockTask+0x3c>
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d806      	bhi.n	8003c5c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c4e:	f7ff fa3d 	bl	80030cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff81 	bl	8003b5c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c5a:	e024      	b.n	8003ca6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c62:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <prvProcessTimerOrBlockTask+0x90>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <prvProcessTimerOrBlockTask+0x50>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <prvProcessTimerOrBlockTask+0x52>
 8003c70:	2300      	movs	r3, #0
 8003c72:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c74:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <prvProcessTimerOrBlockTask+0x94>)
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7ff f829 	bl	8002cd8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c86:	f7ff fa21 	bl	80030cc <xTaskResumeAll>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c90:	4b09      	ldr	r3, [pc, #36]	@ (8003cb8 <prvProcessTimerOrBlockTask+0x98>)
 8003c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	f3bf 8f6f 	isb	sy
    }
 8003ca0:	e001      	b.n	8003ca6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ca2:	f7ff fa13 	bl	80030cc <xTaskResumeAll>
    }
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000244 	.word	0x20000244
 8003cb4:	20000248 	.word	0x20000248
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d00 <prvGetNextExpireTime+0x44>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <prvGetNextExpireTime+0x16>
 8003cce:	2201      	movs	r2, #1
 8003cd0:	e000      	b.n	8003cd4 <prvGetNextExpireTime+0x18>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ce0:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <prvGetNextExpireTime+0x44>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e001      	b.n	8003cf0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
    }
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000240 	.word	0x20000240

08003d04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d0c:	f7ff fa72 	bl	80031f4 <xTaskGetTickCount>
 8003d10:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d12:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <prvSampleTimeNow+0x3c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d205      	bcs.n	8003d28 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d1c:	f000 f91e 	bl	8003f5c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e002      	b.n	8003d2e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d2e:	4a04      	ldr	r2, [pc, #16]	@ (8003d40 <prvSampleTimeNow+0x3c>)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d34:	68fb      	ldr	r3, [r7, #12]
    }
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000250 	.word	0x20000250

08003d44 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d812      	bhi.n	8003d90 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d302      	bcc.n	8003d7e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e01b      	b.n	8003db6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d7e:	4b10      	ldr	r3, [pc, #64]	@ (8003dc0 <prvInsertTimerInActiveList+0x7c>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4619      	mov	r1, r3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	f7fe fa3c 	bl	8002206 <vListInsert>
 8003d8e:	e012      	b.n	8003db6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d206      	bcs.n	8003da6 <prvInsertTimerInActiveList+0x62>
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e007      	b.n	8003db6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003da6:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <prvInsertTimerInActiveList+0x80>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f7fe fa28 	bl	8002206 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003db6:	697b      	ldr	r3, [r7, #20]
    }
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000244 	.word	0x20000244
 8003dc4:	20000240 	.word	0x20000240

08003dc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	@ 0x30
 8003dcc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dce:	e0b2      	b.n	8003f36 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f2c0 80af 	blt.w	8003f36 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe fa45 	bl	8002278 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff87 	bl	8003d04 <prvSampleTimeNow>
 8003df6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b09      	cmp	r3, #9
 8003dfc:	f200 8098 	bhi.w	8003f30 <prvProcessReceivedCommands+0x168>
 8003e00:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <prvProcessReceivedCommands+0x40>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e31 	.word	0x08003e31
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e31 	.word	0x08003e31
 8003e14:	08003ea7 	.word	0x08003ea7
 8003e18:	08003ebb 	.word	0x08003ebb
 8003e1c:	08003f07 	.word	0x08003f07
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e31 	.word	0x08003e31
 8003e28:	08003ea7 	.word	0x08003ea7
 8003e2c:	08003ebb 	.word	0x08003ebb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	18d1      	adds	r1, r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e50:	f7ff ff78 	bl	8003d44 <prvInsertTimerInActiveList>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d06c      	beq.n	8003f34 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e60:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d061      	beq.n	8003f34 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	441a      	add	r2, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2100      	movs	r1, #0
 8003e80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e82:	f7ff fe1d 	bl	8003ac0 <xTimerGenericCommand>
 8003e86:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d152      	bne.n	8003f34 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	61bb      	str	r3, [r7, #24]
    }
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	e7fd      	b.n	8003ea2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003eb8:	e03d      	b.n	8003f36 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	617b      	str	r3, [r7, #20]
    }
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	18d1      	adds	r1, r2, r3
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f00:	f7ff ff20 	bl	8003d44 <prvInsertTimerInActiveList>
                        break;
 8003f04:	e017      	b.n	8003f36 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8003f14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f16:	f000 fc85 	bl	8004824 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f1a:	e00c      	b.n	8003f36 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003f2e:	e002      	b.n	8003f36 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <prvProcessReceivedCommands+0x16e>
                        break;
 8003f34:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f36:	4b08      	ldr	r3, [pc, #32]	@ (8003f58 <prvProcessReceivedCommands+0x190>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f107 0108 	add.w	r1, r7, #8
 8003f3e:	2200      	movs	r2, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe fc7f 	bl	8002844 <xQueueReceive>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f47f af41 	bne.w	8003dd0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	3728      	adds	r7, #40	@ 0x28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000248 	.word	0x20000248

08003f5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f62:	e049      	b.n	8003ff8 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f64:	4b2e      	ldr	r3, [pc, #184]	@ (8004020 <prvSwitchTimerLists+0xc4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004020 <prvSwitchTimerLists+0xc4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe f97b 	bl	8002278 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d02f      	beq.n	8003ff8 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d90e      	bls.n	8003fc8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004020 <prvSwitchTimerLists+0xc4>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f7fe f920 	bl	8002206 <vListInsert>
 8003fc6:	e017      	b.n	8003ff8 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff fd74 	bl	8003ac0 <xTimerGenericCommand>
 8003fd8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	603b      	str	r3, [r7, #0]
    }
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ff8:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <prvSwitchTimerLists+0xc4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1b0      	bne.n	8003f64 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004002:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <prvSwitchTimerLists+0xc4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <prvSwitchTimerLists+0xc8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a04      	ldr	r2, [pc, #16]	@ (8004020 <prvSwitchTimerLists+0xc4>)
 800400e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004010:	4a04      	ldr	r2, [pc, #16]	@ (8004024 <prvSwitchTimerLists+0xc8>)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	6013      	str	r3, [r2, #0]
    }
 8004016:	bf00      	nop
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000240 	.word	0x20000240
 8004024:	20000244 	.word	0x20000244

08004028 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800402c:	f000 f9e6 	bl	80043fc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004030:	4b12      	ldr	r3, [pc, #72]	@ (800407c <prvCheckForValidListAndQueue+0x54>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d11d      	bne.n	8004074 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004038:	4811      	ldr	r0, [pc, #68]	@ (8004080 <prvCheckForValidListAndQueue+0x58>)
 800403a:	f7fe f893 	bl	8002164 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800403e:	4811      	ldr	r0, [pc, #68]	@ (8004084 <prvCheckForValidListAndQueue+0x5c>)
 8004040:	f7fe f890 	bl	8002164 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004044:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <prvCheckForValidListAndQueue+0x60>)
 8004046:	4a0e      	ldr	r2, [pc, #56]	@ (8004080 <prvCheckForValidListAndQueue+0x58>)
 8004048:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800404a:	4b10      	ldr	r3, [pc, #64]	@ (800408c <prvCheckForValidListAndQueue+0x64>)
 800404c:	4a0d      	ldr	r2, [pc, #52]	@ (8004084 <prvCheckForValidListAndQueue+0x5c>)
 800404e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004050:	2200      	movs	r2, #0
 8004052:	210c      	movs	r1, #12
 8004054:	200a      	movs	r0, #10
 8004056:	f7fe f995 	bl	8002384 <xQueueGenericCreate>
 800405a:	4603      	mov	r3, r0
 800405c:	4a07      	ldr	r2, [pc, #28]	@ (800407c <prvCheckForValidListAndQueue+0x54>)
 800405e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004060:	4b06      	ldr	r3, [pc, #24]	@ (800407c <prvCheckForValidListAndQueue+0x54>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004068:	4b04      	ldr	r3, [pc, #16]	@ (800407c <prvCheckForValidListAndQueue+0x54>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4908      	ldr	r1, [pc, #32]	@ (8004090 <prvCheckForValidListAndQueue+0x68>)
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fe00 	bl	8002c74 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004074:	f000 f9f4 	bl	8004460 <vPortExitCritical>
    }
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000248 	.word	0x20000248
 8004080:	20000218 	.word	0x20000218
 8004084:	2000022c 	.word	0x2000022c
 8004088:	20000240 	.word	0x20000240
 800408c:	20000244 	.word	0x20000244
 8004090:	08007ce8 	.word	0x08007ce8

08004094 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b04      	subs	r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3b04      	subs	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3b04      	subs	r3, #4
 80040c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040c4:	4a0c      	ldr	r2, [pc, #48]	@ (80040f8 <pxPortInitialiseStack+0x64>)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b14      	subs	r3, #20
 80040ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b04      	subs	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f06f 0202 	mvn.w	r2, #2
 80040e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3b20      	subs	r3, #32
 80040e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	080040fd 	.word	0x080040fd

080040fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004106:	4b13      	ldr	r3, [pc, #76]	@ (8004154 <prvTaskExitError+0x58>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d00b      	beq.n	8004128 <prvTaskExitError+0x2c>
        __asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
    }
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <prvTaskExitError+0x28>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60bb      	str	r3, [r7, #8]
    }
 800413a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800413c:	bf00      	nop
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0fc      	beq.n	800413e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000010 	.word	0x20000010
	...

08004160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004160:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <pxCurrentTCBConst2>)
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	6808      	ldr	r0, [r1, #0]
 8004166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416a:	f380 8809 	msr	PSP, r0
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f380 8811 	msr	BASEPRI, r0
 800417a:	4770      	bx	lr
 800417c:	f3af 8000 	nop.w

08004180 <pxCurrentTCBConst2>:
 8004180:	20000114 	.word	0x20000114
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004188:	4808      	ldr	r0, [pc, #32]	@ (80041ac <prvPortStartFirstTask+0x24>)
 800418a:	6800      	ldr	r0, [r0, #0]
 800418c:	6800      	ldr	r0, [r0, #0]
 800418e:	f380 8808 	msr	MSP, r0
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8814 	msr	CONTROL, r0
 800419a:	b662      	cpsie	i
 800419c:	b661      	cpsie	f
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	df00      	svc	0
 80041a8:	bf00      	nop
 80041aa:	0000      	.short	0x0000
 80041ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop

080041b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041ba:	4b47      	ldr	r3, [pc, #284]	@ (80042d8 <xPortStartScheduler+0x124>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a47      	ldr	r2, [pc, #284]	@ (80042dc <xPortStartScheduler+0x128>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10b      	bne.n	80041dc <xPortStartScheduler+0x28>
        __asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	613b      	str	r3, [r7, #16]
    }
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041dc:	4b3e      	ldr	r3, [pc, #248]	@ (80042d8 <xPortStartScheduler+0x124>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a3f      	ldr	r2, [pc, #252]	@ (80042e0 <xPortStartScheduler+0x12c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10b      	bne.n	80041fe <xPortStartScheduler+0x4a>
        __asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	60fb      	str	r3, [r7, #12]
    }
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	e7fd      	b.n	80041fa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041fe:	4b39      	ldr	r3, [pc, #228]	@ (80042e4 <xPortStartScheduler+0x130>)
 8004200:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	22ff      	movs	r2, #255	@ 0xff
 800420e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4b31      	ldr	r3, [pc, #196]	@ (80042e8 <xPortStartScheduler+0x134>)
 8004224:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004226:	4b31      	ldr	r3, [pc, #196]	@ (80042ec <xPortStartScheduler+0x138>)
 8004228:	2207      	movs	r2, #7
 800422a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800422c:	e009      	b.n	8004242 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800422e:	4b2f      	ldr	r3, [pc, #188]	@ (80042ec <xPortStartScheduler+0x138>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3b01      	subs	r3, #1
 8004234:	4a2d      	ldr	r2, [pc, #180]	@ (80042ec <xPortStartScheduler+0x138>)
 8004236:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b80      	cmp	r3, #128	@ 0x80
 800424c:	d0ef      	beq.n	800422e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800424e:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <xPortStartScheduler+0x138>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1c3 0307 	rsb	r3, r3, #7
 8004256:	2b04      	cmp	r3, #4
 8004258:	d00b      	beq.n	8004272 <xPortStartScheduler+0xbe>
        __asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	60bb      	str	r3, [r7, #8]
    }
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	e7fd      	b.n	800426e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004272:	4b1e      	ldr	r3, [pc, #120]	@ (80042ec <xPortStartScheduler+0x138>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <xPortStartScheduler+0x138>)
 800427a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800427c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <xPortStartScheduler+0x138>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004284:	4a19      	ldr	r2, [pc, #100]	@ (80042ec <xPortStartScheduler+0x138>)
 8004286:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004290:	4b17      	ldr	r3, [pc, #92]	@ (80042f0 <xPortStartScheduler+0x13c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a16      	ldr	r2, [pc, #88]	@ (80042f0 <xPortStartScheduler+0x13c>)
 8004296:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800429a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <xPortStartScheduler+0x13c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a13      	ldr	r2, [pc, #76]	@ (80042f0 <xPortStartScheduler+0x13c>)
 80042a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80042a6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042a8:	f000 f968 	bl	800457c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042ac:	4b11      	ldr	r3, [pc, #68]	@ (80042f4 <xPortStartScheduler+0x140>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042b2:	f000 f987 	bl	80045c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042b6:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <xPortStartScheduler+0x144>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a0f      	ldr	r2, [pc, #60]	@ (80042f8 <xPortStartScheduler+0x144>)
 80042bc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80042c0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042c2:	f7ff ff61 	bl	8004188 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042c6:	f7ff f851 	bl	800336c <vTaskSwitchContext>
    prvTaskExitError();
 80042ca:	f7ff ff17 	bl	80040fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	e000ed00 	.word	0xe000ed00
 80042dc:	410fc271 	.word	0x410fc271
 80042e0:	410fc270 	.word	0x410fc270
 80042e4:	e000e400 	.word	0xe000e400
 80042e8:	20000254 	.word	0x20000254
 80042ec:	20000258 	.word	0x20000258
 80042f0:	e000ed20 	.word	0xe000ed20
 80042f4:	20000010 	.word	0x20000010
 80042f8:	e000ef34 	.word	0xe000ef34

080042fc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004302:	4b38      	ldr	r3, [pc, #224]	@ (80043e4 <vInitPrioGroupValue+0xe8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a38      	ldr	r2, [pc, #224]	@ (80043e8 <vInitPrioGroupValue+0xec>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10b      	bne.n	8004324 <vInitPrioGroupValue+0x28>
        __asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	613b      	str	r3, [r7, #16]
    }
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004324:	4b2f      	ldr	r3, [pc, #188]	@ (80043e4 <vInitPrioGroupValue+0xe8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a30      	ldr	r2, [pc, #192]	@ (80043ec <vInitPrioGroupValue+0xf0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10b      	bne.n	8004346 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	60fb      	str	r3, [r7, #12]
    }
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004346:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <vInitPrioGroupValue+0xf4>)
 8004348:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	22ff      	movs	r2, #255	@ 0xff
 8004356:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004368:	b2da      	uxtb	r2, r3
 800436a:	4b22      	ldr	r3, [pc, #136]	@ (80043f4 <vInitPrioGroupValue+0xf8>)
 800436c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800436e:	4b22      	ldr	r3, [pc, #136]	@ (80043f8 <vInitPrioGroupValue+0xfc>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004374:	e009      	b.n	800438a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004376:	4b20      	ldr	r3, [pc, #128]	@ (80043f8 <vInitPrioGroupValue+0xfc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3b01      	subs	r3, #1
 800437c:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <vInitPrioGroupValue+0xfc>)
 800437e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004392:	2b80      	cmp	r3, #128	@ 0x80
 8004394:	d0ef      	beq.n	8004376 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004396:	4b18      	ldr	r3, [pc, #96]	@ (80043f8 <vInitPrioGroupValue+0xfc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f1c3 0307 	rsb	r3, r3, #7
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d00b      	beq.n	80043ba <vInitPrioGroupValue+0xbe>
        __asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60bb      	str	r3, [r7, #8]
    }
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	e7fd      	b.n	80043b6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043ba:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <vInitPrioGroupValue+0xfc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	4a0d      	ldr	r2, [pc, #52]	@ (80043f8 <vInitPrioGroupValue+0xfc>)
 80043c2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043c4:	4b0c      	ldr	r3, [pc, #48]	@ (80043f8 <vInitPrioGroupValue+0xfc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043cc:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <vInitPrioGroupValue+0xfc>)
 80043ce:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	e000ed00 	.word	0xe000ed00
 80043e8:	410fc271 	.word	0x410fc271
 80043ec:	410fc270 	.word	0x410fc270
 80043f0:	e000e400 	.word	0xe000e400
 80043f4:	20000254 	.word	0x20000254
 80043f8:	20000258 	.word	0x20000258

080043fc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
        __asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
    }
 8004414:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004416:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <vPortEnterCritical+0x5c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	4a0e      	ldr	r2, [pc, #56]	@ (8004458 <vPortEnterCritical+0x5c>)
 800441e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004420:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <vPortEnterCritical+0x5c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d110      	bne.n	800444a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <vPortEnterCritical+0x60>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <vPortEnterCritical+0x4e>
        __asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	603b      	str	r3, [r7, #0]
    }
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <vPortEnterCritical+0x4a>
    }
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000010 	.word	0x20000010
 800445c:	e000ed04 	.word	0xe000ed04

08004460 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004466:	4b12      	ldr	r3, [pc, #72]	@ (80044b0 <vPortExitCritical+0x50>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <vPortExitCritical+0x26>
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
    }
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	e7fd      	b.n	8004482 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <vPortExitCritical+0x50>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a08      	ldr	r2, [pc, #32]	@ (80044b0 <vPortExitCritical+0x50>)
 800448e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004490:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <vPortExitCritical+0x50>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <vPortExitCritical+0x44>
 8004498:	2300      	movs	r3, #0
 800449a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f383 8811 	msr	BASEPRI, r3
    }
 80044a2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	20000010 	.word	0x20000010
	...

080044c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044c0:	f3ef 8009 	mrs	r0, PSP
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <pxCurrentTCBConst>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	f01e 0f10 	tst.w	lr, #16
 80044d0:	bf08      	it	eq
 80044d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80044e4:	f380 8811 	msr	BASEPRI, r0
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f7fe ff3c 	bl	800336c <vTaskSwitchContext>
 80044f4:	f04f 0000 	mov.w	r0, #0
 80044f8:	f380 8811 	msr	BASEPRI, r0
 80044fc:	bc09      	pop	{r0, r3}
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	6808      	ldr	r0, [r1, #0]
 8004502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004506:	f01e 0f10 	tst.w	lr, #16
 800450a:	bf08      	it	eq
 800450c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004510:	f380 8809 	msr	PSP, r0
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	f3af 8000 	nop.w

08004520 <pxCurrentTCBConst>:
 8004520:	20000114 	.word	0x20000114
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop

08004528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
        __asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
    }
 8004540:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004542:	f002 fb89 	bl	8006c58 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004546:	f7fe fe77 	bl	8003238 <xTaskIncrementTick>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004550:	f002 fbe0 	bl	8006d14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004554:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <SysTick_Handler+0x50>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e001      	b.n	8004562 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800455e:	f002 fbbd 	bl	8006cdc <SEGGER_SYSVIEW_RecordExitISR>
 8004562:	2300      	movs	r3, #0
 8004564:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	f383 8811 	msr	BASEPRI, r3
    }
 800456c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <vPortSetupTimerInterrupt+0x34>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004586:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <vPortSetupTimerInterrupt+0x38>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <vPortSetupTimerInterrupt+0x3c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0a      	ldr	r2, [pc, #40]	@ (80045bc <vPortSetupTimerInterrupt+0x40>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	4a09      	ldr	r2, [pc, #36]	@ (80045c0 <vPortSetupTimerInterrupt+0x44>)
 800459a:	3b01      	subs	r3, #1
 800459c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800459e:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <vPortSetupTimerInterrupt+0x34>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010
 80045b4:	e000e018 	.word	0xe000e018
 80045b8:	20000000 	.word	0x20000000
 80045bc:	10624dd3 	.word	0x10624dd3
 80045c0:	e000e014 	.word	0xe000e014

080045c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80045d4 <vPortEnableVFP+0x10>
 80045c8:	6801      	ldr	r1, [r0, #0]
 80045ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045ce:	6001      	str	r1, [r0, #0]
 80045d0:	4770      	bx	lr
 80045d2:	0000      	.short	0x0000
 80045d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop

080045dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045e2:	f3ef 8305 	mrs	r3, IPSR
 80045e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d915      	bls.n	800461a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ee:	4a18      	ldr	r2, [pc, #96]	@ (8004650 <vPortValidateInterruptPriority+0x74>)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045f8:	4b16      	ldr	r3, [pc, #88]	@ (8004654 <vPortValidateInterruptPriority+0x78>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	7afa      	ldrb	r2, [r7, #11]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d20b      	bcs.n	800461a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	607b      	str	r3, [r7, #4]
    }
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	e7fd      	b.n	8004616 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800461a:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <vPortValidateInterruptPriority+0x7c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004622:	4b0e      	ldr	r3, [pc, #56]	@ (800465c <vPortValidateInterruptPriority+0x80>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d90b      	bls.n	8004642 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	603b      	str	r3, [r7, #0]
    }
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	e7fd      	b.n	800463e <vPortValidateInterruptPriority+0x62>
    }
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e3f0 	.word	0xe000e3f0
 8004654:	20000254 	.word	0x20000254
 8004658:	e000ed0c 	.word	0xe000ed0c
 800465c:	20000258 	.word	0x20000258

08004660 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	@ 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800466c:	f7fe fd20 	bl	80030b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004670:	4b66      	ldr	r3, [pc, #408]	@ (800480c <pvPortMalloc+0x1ac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004678:	f000 f938 	bl	80048ec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800467c:	4b64      	ldr	r3, [pc, #400]	@ (8004810 <pvPortMalloc+0x1b0>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 80a9 	bne.w	80047dc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d02e      	beq.n	80046ee <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004690:	2208      	movs	r2, #8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d228      	bcs.n	80046ee <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800469c:	2208      	movs	r2, #8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d022      	beq.n	80046f4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f023 0307 	bic.w	r3, r3, #7
 80046b4:	3308      	adds	r3, #8
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d215      	bcs.n	80046e8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f023 0307 	bic.w	r3, r3, #7
 80046c2:	3308      	adds	r3, #8
 80046c4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d011      	beq.n	80046f4 <pvPortMalloc+0x94>
        __asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	617b      	str	r3, [r7, #20]
    }
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046ec:	e002      	b.n	80046f4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	e000      	b.n	80046f6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046f4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d06f      	beq.n	80047dc <pvPortMalloc+0x17c>
 80046fc:	4b45      	ldr	r3, [pc, #276]	@ (8004814 <pvPortMalloc+0x1b4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d86a      	bhi.n	80047dc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004706:	4b44      	ldr	r3, [pc, #272]	@ (8004818 <pvPortMalloc+0x1b8>)
 8004708:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800470a:	4b43      	ldr	r3, [pc, #268]	@ (8004818 <pvPortMalloc+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004710:	e004      	b.n	800471c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	429a      	cmp	r2, r3
 8004724:	d903      	bls.n	800472e <pvPortMalloc+0xce>
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f1      	bne.n	8004712 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800472e:	4b37      	ldr	r3, [pc, #220]	@ (800480c <pvPortMalloc+0x1ac>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004734:	429a      	cmp	r2, r3
 8004736:	d051      	beq.n	80047dc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2208      	movs	r2, #8
 800473e:	4413      	add	r3, r2
 8004740:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	1ad2      	subs	r2, r2, r3
 8004752:	2308      	movs	r3, #8
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	429a      	cmp	r2, r3
 8004758:	d920      	bls.n	800479c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800475a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <pvPortMalloc+0x124>
        __asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	613b      	str	r3, [r7, #16]
    }
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004796:	69b8      	ldr	r0, [r7, #24]
 8004798:	f000 f90a 	bl	80049b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800479c:	4b1d      	ldr	r3, [pc, #116]	@ (8004814 <pvPortMalloc+0x1b4>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004814 <pvPortMalloc+0x1b4>)
 80047a8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <pvPortMalloc+0x1b4>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <pvPortMalloc+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d203      	bcs.n	80047be <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047b6:	4b17      	ldr	r3, [pc, #92]	@ (8004814 <pvPortMalloc+0x1b4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a18      	ldr	r2, [pc, #96]	@ (800481c <pvPortMalloc+0x1bc>)
 80047bc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	4b13      	ldr	r3, [pc, #76]	@ (8004810 <pvPortMalloc+0x1b0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047d2:	4b13      	ldr	r3, [pc, #76]	@ (8004820 <pvPortMalloc+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	4a11      	ldr	r2, [pc, #68]	@ (8004820 <pvPortMalloc+0x1c0>)
 80047da:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047dc:	f7fe fc76 	bl	80030cc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00b      	beq.n	8004802 <pvPortMalloc+0x1a2>
        __asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	60fb      	str	r3, [r7, #12]
    }
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	e7fd      	b.n	80047fe <pvPortMalloc+0x19e>
    return pvReturn;
 8004802:	69fb      	ldr	r3, [r7, #28]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3728      	adds	r7, #40	@ 0x28
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20012e64 	.word	0x20012e64
 8004810:	20012e78 	.word	0x20012e78
 8004814:	20012e68 	.word	0x20012e68
 8004818:	20012e5c 	.word	0x20012e5c
 800481c:	20012e6c 	.word	0x20012e6c
 8004820:	20012e70 	.word	0x20012e70

08004824 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04f      	beq.n	80048d6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004836:	2308      	movs	r3, #8
 8004838:	425b      	negs	r3, r3
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4413      	add	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <vPortFree+0xbc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <vPortFree+0x46>
        __asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60fb      	str	r3, [r7, #12]
    }
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	e7fd      	b.n	8004866 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <vPortFree+0x66>
        __asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60bb      	str	r3, [r7, #8]
    }
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <vPortFree+0xbc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01e      	beq.n	80048d6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11a      	bne.n	80048d6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <vPortFree+0xbc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80048b0:	f7fe fbfe 	bl	80030b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <vPortFree+0xc0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4413      	add	r3, r2
 80048be:	4a09      	ldr	r2, [pc, #36]	@ (80048e4 <vPortFree+0xc0>)
 80048c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048c2:	6938      	ldr	r0, [r7, #16]
 80048c4:	f000 f874 	bl	80049b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048c8:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <vPortFree+0xc4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	4a06      	ldr	r2, [pc, #24]	@ (80048e8 <vPortFree+0xc4>)
 80048d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048d2:	f7fe fbfb 	bl	80030cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80048d6:	bf00      	nop
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20012e78 	.word	0x20012e78
 80048e4:	20012e68 	.word	0x20012e68
 80048e8:	20012e74 	.word	0x20012e74

080048ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048f2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80048f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048f8:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <prvHeapInit+0xac>)
 80048fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3307      	adds	r3, #7
 800490a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0307 	bic.w	r3, r3, #7
 8004912:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	4a1f      	ldr	r2, [pc, #124]	@ (8004998 <prvHeapInit+0xac>)
 800491c:	4413      	add	r3, r2
 800491e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004924:	4a1d      	ldr	r2, [pc, #116]	@ (800499c <prvHeapInit+0xb0>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800492a:	4b1c      	ldr	r3, [pc, #112]	@ (800499c <prvHeapInit+0xb0>)
 800492c:	2200      	movs	r2, #0
 800492e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4413      	add	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004938:	2208      	movs	r2, #8
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0307 	bic.w	r3, r3, #7
 8004946:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a15      	ldr	r2, [pc, #84]	@ (80049a0 <prvHeapInit+0xb4>)
 800494c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800494e:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <prvHeapInit+0xb4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004956:	4b12      	ldr	r3, [pc, #72]	@ (80049a0 <prvHeapInit+0xb4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800496c:	4b0c      	ldr	r3, [pc, #48]	@ (80049a0 <prvHeapInit+0xb4>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4a0a      	ldr	r2, [pc, #40]	@ (80049a4 <prvHeapInit+0xb8>)
 800497a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a09      	ldr	r2, [pc, #36]	@ (80049a8 <prvHeapInit+0xbc>)
 8004982:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004984:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <prvHeapInit+0xc0>)
 8004986:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800498a:	601a      	str	r2, [r3, #0]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	2000025c 	.word	0x2000025c
 800499c:	20012e5c 	.word	0x20012e5c
 80049a0:	20012e64 	.word	0x20012e64
 80049a4:	20012e6c 	.word	0x20012e6c
 80049a8:	20012e68 	.word	0x20012e68
 80049ac:	20012e78 	.word	0x20012e78

080049b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049b8:	4b28      	ldr	r3, [pc, #160]	@ (8004a5c <prvInsertBlockIntoFreeList+0xac>)
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e002      	b.n	80049c4 <prvInsertBlockIntoFreeList+0x14>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d8f7      	bhi.n	80049be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	4413      	add	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d108      	bne.n	80049f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	441a      	add	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	441a      	add	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d118      	bne.n	8004a38 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <prvInsertBlockIntoFreeList+0xb0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d00d      	beq.n	8004a2e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e008      	b.n	8004a40 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a60 <prvInsertBlockIntoFreeList+0xb0>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e003      	b.n	8004a40 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d002      	beq.n	8004a4e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20012e5c 	.word	0x20012e5c
 8004a60:	20012e64 	.word	0x20012e64

08004a64 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a68:	4803      	ldr	r0, [pc, #12]	@ (8004a78 <_cbSendSystemDesc+0x14>)
 8004a6a:	f002 f89f 	bl	8006bac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a6e:	4803      	ldr	r0, [pc, #12]	@ (8004a7c <_cbSendSystemDesc+0x18>)
 8004a70:	f002 f89c 	bl	8006bac <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	08007cf0 	.word	0x08007cf0
 8004a7c:	08007d34 	.word	0x08007d34

08004a80 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a84:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a8e:	4a06      	ldr	r2, [pc, #24]	@ (8004aa8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004a90:	f001 fc08 	bl	80062a4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a94:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004a98:	f001 fc48 	bl	800632c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	08004a65 	.word	0x08004a65
 8004aa8:	08007dd4 	.word	0x08007dd4

08004aac <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	e033      	b.n	8004b20 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ab8:	491e      	ldr	r1, [pc, #120]	@ (8004b34 <_cbSendTaskList+0x88>)
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	491a      	ldr	r1, [pc, #104]	@ (8004b34 <_cbSendTaskList+0x88>)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	4c16      	ldr	r4, [pc, #88]	@ (8004b34 <_cbSendTaskList+0x88>)
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4423      	add	r3, r4
 8004ae8:	3308      	adds	r3, #8
 8004aea:	681c      	ldr	r4, [r3, #0]
 8004aec:	4d11      	ldr	r5, [pc, #68]	@ (8004b34 <_cbSendTaskList+0x88>)
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	442b      	add	r3, r5
 8004afa:	330c      	adds	r3, #12
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	4e0d      	ldr	r6, [pc, #52]	@ (8004b34 <_cbSendTaskList+0x88>)
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4433      	add	r3, r6
 8004b0c:	3310      	adds	r3, #16
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	462b      	mov	r3, r5
 8004b14:	4622      	mov	r2, r4
 8004b16:	f000 f8bd 	bl	8004c94 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <_cbSendTaskList+0x8c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d3c6      	bcc.n	8004ab8 <_cbSendTaskList+0xc>
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b34:	20012e7c 	.word	0x20012e7c
 8004b38:	20012f1c 	.word	0x20012f1c

08004b3c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b44:	f7fe fb66 	bl	8003214 <xTaskGetTickCountFromISR>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	469a      	mov	sl, r3
 8004b4e:	4693      	mov	fp, r2
 8004b50:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	f04f 0a00 	mov.w	sl, #0
 8004b60:	f04f 0b00 	mov.w	fp, #0
 8004b64:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004b68:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004b6c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004b70:	4652      	mov	r2, sl
 8004b72:	465b      	mov	r3, fp
 8004b74:	1a14      	subs	r4, r2, r0
 8004b76:	eb63 0501 	sbc.w	r5, r3, r1
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	00ab      	lsls	r3, r5, #2
 8004b84:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004b88:	00a2      	lsls	r2, r4, #2
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	461d      	mov	r5, r3
 8004b8e:	eb14 0800 	adds.w	r8, r4, r0
 8004b92:	eb45 0901 	adc.w	r9, r5, r1
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004baa:	4690      	mov	r8, r2
 8004bac:	4699      	mov	r9, r3
 8004bae:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004bc4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004bd2:	2205      	movs	r2, #5
 8004bd4:	492b      	ldr	r1, [pc, #172]	@ (8004c84 <SYSVIEW_AddTask+0xc0>)
 8004bd6:	68b8      	ldr	r0, [r7, #8]
 8004bd8:	f002 fbb8 	bl	800734c <memcmp>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d04b      	beq.n	8004c7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004be2:	4b29      	ldr	r3, [pc, #164]	@ (8004c88 <SYSVIEW_AddTask+0xc4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b07      	cmp	r3, #7
 8004be8:	d903      	bls.n	8004bf2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bea:	4828      	ldr	r0, [pc, #160]	@ (8004c8c <SYSVIEW_AddTask+0xc8>)
 8004bec:	f002 faf0 	bl	80071d0 <SEGGER_SYSVIEW_Warn>
    return;
 8004bf0:	e044      	b.n	8004c7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004bf2:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <SYSVIEW_AddTask+0xc4>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4926      	ldr	r1, [pc, #152]	@ (8004c90 <SYSVIEW_AddTask+0xcc>)
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c06:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <SYSVIEW_AddTask+0xc4>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4921      	ldr	r1, [pc, #132]	@ (8004c90 <SYSVIEW_AddTask+0xcc>)
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3304      	adds	r3, #4
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c88 <SYSVIEW_AddTask+0xc4>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	491b      	ldr	r1, [pc, #108]	@ (8004c90 <SYSVIEW_AddTask+0xcc>)
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <SYSVIEW_AddTask+0xc4>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4916      	ldr	r1, [pc, #88]	@ (8004c90 <SYSVIEW_AddTask+0xcc>)
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	330c      	adds	r3, #12
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c48:	4b0f      	ldr	r3, [pc, #60]	@ (8004c88 <SYSVIEW_AddTask+0xc4>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4910      	ldr	r1, [pc, #64]	@ (8004c90 <SYSVIEW_AddTask+0xcc>)
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3310      	adds	r3, #16
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <SYSVIEW_AddTask+0xc4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a08      	ldr	r2, [pc, #32]	@ (8004c88 <SYSVIEW_AddTask+0xc4>)
 8004c66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f80e 	bl	8004c94 <SYSVIEW_SendTaskInfo>
 8004c78:	e000      	b.n	8004c7c <SYSVIEW_AddTask+0xb8>
    return;
 8004c7a:	bf00      	nop

}
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	08007d44 	.word	0x08007d44
 8004c88:	20012f1c 	.word	0x20012f1c
 8004c8c:	08007d4c 	.word	0x08007d4c
 8004c90:	20012e7c 	.word	0x20012e7c

08004c94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	@ 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ca2:	f107 0314 	add.w	r3, r7, #20
 8004ca6:	2214      	movs	r2, #20
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f002 fb5e 	bl	800736c <memset>
  TaskInfo.TaskID     = TaskID;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fe77 	bl	80069bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004cce:	bf00      	nop
 8004cd0:	3728      	adds	r7, #40	@ 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <__NVIC_EnableIRQ>:
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	db0b      	blt.n	8004d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	f003 021f 	and.w	r2, r3, #31
 8004cf0:	4907      	ldr	r1, [pc, #28]	@ (8004d10 <__NVIC_EnableIRQ+0x38>)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8004cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	e000e100 	.word	0xe000e100

08004d14 <__NVIC_SetPriority>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	db0a      	blt.n	8004d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	490c      	ldr	r1, [pc, #48]	@ (8004d60 <__NVIC_SetPriority+0x4c>)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	0112      	lsls	r2, r2, #4
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	440b      	add	r3, r1
 8004d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d3c:	e00a      	b.n	8004d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4908      	ldr	r1, [pc, #32]	@ (8004d64 <__NVIC_SetPriority+0x50>)
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	3b04      	subs	r3, #4
 8004d4c:	0112      	lsls	r2, r2, #4
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	440b      	add	r3, r1
 8004d52:	761a      	strb	r2, [r3, #24]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000e100 	.word	0xe000e100
 8004d64:	e000ed00 	.word	0xe000ed00

08004d68 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004d6e:	f002 fa8b 	bl	8007288 <SEGGER_SYSVIEW_IsStarted>
 8004d72:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004d7a:	f001 fca3 	bl	80066c4 <SEGGER_SYSVIEW_Start>
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004d92:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <_cbOnUARTRx+0x3c>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d806      	bhi.n	8004da8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <_cbOnUARTRx+0x3c>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <_cbOnUARTRx+0x3c>)
 8004da4:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004da6:	e009      	b.n	8004dbc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004da8:	f7ff ffde 	bl	8004d68 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <_cbOnUARTRx+0x3c>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	2201      	movs	r2, #1
 8004db6:	4619      	mov	r1, r3
 8004db8:	f000 fb9a 	bl	80054f0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004dbc:	bf00      	nop
}
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20000014 	.word	0x20000014

08004dc8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004dd0:	4b14      	ldr	r3, [pc, #80]	@ (8004e24 <_cbOnUARTTx+0x5c>)
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d80f      	bhi.n	8004df8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004dd8:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <_cbOnUARTTx+0x5c>)
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <_cbOnUARTTx+0x60>)
 8004de0:	5c9a      	ldrb	r2, [r3, r2]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004de6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e24 <_cbOnUARTTx+0x5c>)
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	3301      	adds	r3, #1
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <_cbOnUARTTx+0x5c>)
 8004df0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004df6:	e00f      	b.n	8004e18 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004df8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <_cbOnUARTTx+0x5c>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fa19 	bl	8005238 <SEGGER_RTT_ReadUpBufferNoLock>
 8004e06:	4603      	mov	r3, r0
 8004e08:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	da02      	bge.n	8004e16 <_cbOnUARTTx+0x4e>
    r = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e000      	b.n	8004e18 <_cbOnUARTTx+0x50>
  }
Done:
 8004e16:	bf00      	nop
  return r;
 8004e18:	68fb      	ldr	r3, [r7, #12]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000014 	.word	0x20000014
 8004e28:	08007ddc 	.word	0x08007ddc

08004e2c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004e34:	4a04      	ldr	r2, [pc, #16]	@ (8004e48 <SEGGER_UART_init+0x1c>)
 8004e36:	4905      	ldr	r1, [pc, #20]	@ (8004e4c <SEGGER_UART_init+0x20>)
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f863 	bl	8004f04 <HIF_UART_Init>
}
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	08004d89 	.word	0x08004d89
 8004e4c:	08004dc9 	.word	0x08004dc9

08004e50 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004e56:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed0 <USART2_IRQHandler+0x80>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d011      	beq.n	8004e8a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004e66:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <USART2_IRQHandler+0x84>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 030b 	and.w	r3, r3, #11
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d108      	bne.n	8004e8a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004e78:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <USART2_IRQHandler+0x88>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004e80:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <USART2_IRQHandler+0x88>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	79fa      	ldrb	r2, [r7, #7]
 8004e86:	4610      	mov	r0, r2
 8004e88:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01a      	beq.n	8004eca <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004e94:	4b11      	ldr	r3, [pc, #68]	@ (8004edc <USART2_IRQHandler+0x8c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d015      	beq.n	8004ec8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <USART2_IRQHandler+0x8c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1dfa      	adds	r2, r7, #7
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4798      	blx	r3
 8004ea6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004eae:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <USART2_IRQHandler+0x90>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee0 <USART2_IRQHandler+0x90>)
 8004eb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e006      	b.n	8004eca <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004ebc:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <USART2_IRQHandler+0x80>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004ec0:	79fa      	ldrb	r2, [r7, #7]
 8004ec2:	4b04      	ldr	r3, [pc, #16]	@ (8004ed4 <USART2_IRQHandler+0x84>)
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e000      	b.n	8004eca <USART2_IRQHandler+0x7a>
      return;
 8004ec8:	bf00      	nop
    }
  }
}
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40004400 	.word	0x40004400
 8004ed4:	40004404 	.word	0x40004404
 8004ed8:	20012f20 	.word	0x20012f20
 8004edc:	20012f24 	.word	0x20012f24
 8004ee0:	4000440c 	.word	0x4000440c

08004ee4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a04      	ldr	r2, [pc, #16]	@ (8004f00 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef2:	6013      	str	r3, [r2, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	4000440c 	.word	0x4000440c

08004f04 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004f10:	4b2e      	ldr	r3, [pc, #184]	@ (8004fcc <HIF_UART_Init+0xc8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2d      	ldr	r2, [pc, #180]	@ (8004fcc <HIF_UART_Init+0xc8>)
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f1a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd0 <HIF_UART_Init+0xcc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd0 <HIF_UART_Init+0xcc>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004f28:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd4 <HIF_UART_Init+0xd0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f34:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004f3c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004f3e:	4a25      	ldr	r2, [pc, #148]	@ (8004fd4 <HIF_UART_Init+0xd0>)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004f44:	4b24      	ldr	r3, [pc, #144]	@ (8004fd8 <HIF_UART_Init+0xd4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f50:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004f58:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd8 <HIF_UART_Init+0xd4>)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004f60:	4b1e      	ldr	r3, [pc, #120]	@ (8004fdc <HIF_UART_Init+0xd8>)
 8004f62:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8004f66:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004f68:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <HIF_UART_Init+0xdc>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe4 <HIF_UART_Init+0xe0>)
 8004f70:	2280      	movs	r2, #128	@ 0x80
 8004f72:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <HIF_UART_Init+0xe4>)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f92:	d302      	bcc.n	8004f9a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004f94:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004f98:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	4a11      	ldr	r2, [pc, #68]	@ (8004fec <HIF_UART_Init+0xe8>)
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004faa:	4a11      	ldr	r2, [pc, #68]	@ (8004ff0 <HIF_UART_Init+0xec>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004fb0:	4a10      	ldr	r2, [pc, #64]	@ (8004ff4 <HIF_UART_Init+0xf0>)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004fb6:	2106      	movs	r1, #6
 8004fb8:	2026      	movs	r0, #38	@ 0x26
 8004fba:	f7ff feab 	bl	8004d14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004fbe:	2026      	movs	r0, #38	@ 0x26
 8004fc0:	f7ff fe8a 	bl	8004cd8 <__NVIC_EnableIRQ>
}
 8004fc4:	bf00      	nop
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40023840 	.word	0x40023840
 8004fd0:	40023830 	.word	0x40023830
 8004fd4:	40020020 	.word	0x40020020
 8004fd8:	40020000 	.word	0x40020000
 8004fdc:	4000440c 	.word	0x4000440c
 8004fe0:	40004410 	.word	0x40004410
 8004fe4:	40004414 	.word	0x40004414
 8004fe8:	0501bd00 	.word	0x0501bd00
 8004fec:	40004408 	.word	0x40004408
 8004ff0:	20012f20 	.word	0x20012f20
 8004ff4:	20012f24 	.word	0x20012f24

08004ff8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004ffe:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <_DoInit+0x98>)
 8005000:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2203      	movs	r2, #3
 8005006:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2203      	movs	r2, #3
 800500c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a20      	ldr	r2, [pc, #128]	@ (8005094 <_DoInit+0x9c>)
 8005012:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a20      	ldr	r2, [pc, #128]	@ (8005098 <_DoInit+0xa0>)
 8005018:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005020:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a17      	ldr	r2, [pc, #92]	@ (8005094 <_DoInit+0x9c>)
 8005038:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a17      	ldr	r2, [pc, #92]	@ (800509c <_DoInit+0xa4>)
 800503e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2210      	movs	r2, #16
 8005044:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3307      	adds	r3, #7
 800505c:	4a10      	ldr	r2, [pc, #64]	@ (80050a0 <_DoInit+0xa8>)
 800505e:	6810      	ldr	r0, [r2, #0]
 8005060:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005062:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a0e      	ldr	r2, [pc, #56]	@ (80050a4 <_DoInit+0xac>)
 800506a:	6810      	ldr	r0, [r2, #0]
 800506c:	6018      	str	r0, [r3, #0]
 800506e:	8891      	ldrh	r1, [r2, #4]
 8005070:	7992      	ldrb	r2, [r2, #6]
 8005072:	8099      	strh	r1, [r3, #4]
 8005074:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005076:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005080:	f3bf 8f5f 	dmb	sy
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	20012f28 	.word	0x20012f28
 8005094:	08007d9c 	.word	0x08007d9c
 8005098:	20012fd0 	.word	0x20012fd0
 800509c:	200133d0 	.word	0x200133d0
 80050a0:	08007da8 	.word	0x08007da8
 80050a4:	08007dac 	.word	0x08007dac

080050a8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	@ 0x28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80050b4:	2300      	movs	r3, #0
 80050b6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d905      	bls.n	80050d8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d6:	e007      	b.n	80050e8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	1acb      	subs	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	3b01      	subs	r3, #1
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bf28      	it	cs
 80050f6:	4613      	movcs	r3, r2
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80050fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4293      	cmp	r3, r2
 8005100:	bf28      	it	cs
 8005102:	4613      	movcs	r3, r2
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	6978      	ldr	r0, [r7, #20]
 8005116:	f002 f957 	bl	80073c8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800511a:	6a3a      	ldr	r2, [r7, #32]
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	4413      	add	r3, r2
 8005120:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	4413      	add	r3, r2
 8005128:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	4413      	add	r3, r2
 8005138:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	429a      	cmp	r2, r3
 8005142:	d101      	bne.n	8005148 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005148:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1b2      	bne.n	80050be <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005158:	6a3b      	ldr	r3, [r7, #32]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3728      	adds	r7, #40	@ 0x28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005162:	b580      	push	{r7, lr}
 8005164:	b088      	sub	sp, #32
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d911      	bls.n	80051aa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	6938      	ldr	r0, [r7, #16]
 8005196:	f002 f917 	bl	80073c8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800519a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	441a      	add	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80051a8:	e01f      	b.n	80051ea <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	6938      	ldr	r0, [r7, #16]
 80051be:	f002 f903 	bl	80073c8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	4413      	add	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4619      	mov	r1, r3
 80051da:	6938      	ldr	r0, [r7, #16]
 80051dc:	f002 f8f4 	bl	80073c8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	60da      	str	r2, [r3, #12]
}
 80051ea:	bf00      	nop
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80051f2:	b480      	push	{r7}
 80051f4:	b087      	sub	sp, #28
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	429a      	cmp	r2, r3
 800520c:	d808      	bhi.n	8005220 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4413      	add	r3, r2
 800521a:	3b01      	subs	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	e004      	b.n	800522a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
  }
  return r;
 800522a:	697b      	ldr	r3, [r7, #20]
}
 800522c:	4618      	mov	r0, r3
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b08c      	sub	sp, #48	@ 0x30
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005244:	4b3e      	ldr	r3, [pc, #248]	@ (8005340 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005252:	f7ff fed1 	bl	8004ff8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	4613      	mov	r3, r2
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4a37      	ldr	r2, [pc, #220]	@ (8005340 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005264:	4413      	add	r3, r2
 8005266:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005278:	2300      	movs	r3, #0
 800527a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800527c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	429a      	cmp	r2, r3
 8005282:	d92b      	bls.n	80052dc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4293      	cmp	r3, r2
 8005294:	bf28      	it	cs
 8005296:	4613      	movcs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a0:	4413      	add	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	6939      	ldr	r1, [r7, #16]
 80052a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052aa:	f002 f88d 	bl	80073c8 <memcpy>
    NumBytesRead += NumBytesRem;
 80052ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4413      	add	r3, r2
 80052b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80052b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d101      	bne.n	80052dc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80052d8:	2300      	movs	r3, #0
 80052da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bf28      	it	cs
 80052ec:	4613      	movcs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d019      	beq.n	800532a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fc:	4413      	add	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	6939      	ldr	r1, [r7, #16]
 8005304:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005306:	f002 f85f 	bl	80073c8 <memcpy>
    NumBytesRead += NumBytesRem;
 800530a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4413      	add	r3, r2
 8005310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4413      	add	r3, r2
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005334:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005338:	4618      	mov	r0, r3
 800533a:	3730      	adds	r7, #48	@ 0x30
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20012f28 	.word	0x20012f28

08005344 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	@ 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005350:	4b3e      	ldr	r3, [pc, #248]	@ (800544c <SEGGER_RTT_ReadNoLock+0x108>)
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <SEGGER_RTT_ReadNoLock+0x1e>
 800535e:	f7ff fe4b 	bl	8004ff8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	3360      	adds	r3, #96	@ 0x60
 800536e:	4a37      	ldr	r2, [pc, #220]	@ (800544c <SEGGER_RTT_ReadNoLock+0x108>)
 8005370:	4413      	add	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	429a      	cmp	r2, r3
 800538e:	d92b      	bls.n	80053e8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4293      	cmp	r3, r2
 80053a0:	bf28      	it	cs
 80053a2:	4613      	movcs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	4413      	add	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	6939      	ldr	r1, [r7, #16]
 80053b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053b6:	f002 f807 	bl	80073c8 <memcpy>
    NumBytesRead += NumBytesRem;
 80053ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4413      	add	r3, r2
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80053c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d101      	bne.n	80053e8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80053e4:	2300      	movs	r3, #0
 80053e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4293      	cmp	r3, r2
 80053f6:	bf28      	it	cs
 80053f8:	4613      	movcs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d019      	beq.n	8005436 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	4413      	add	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005412:	f001 ffd9 	bl	80073c8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4413      	add	r3, r2
 800541c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800541e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	4413      	add	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800542e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005440:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005444:	4618      	mov	r0, r3
 8005446:	3730      	adds	r7, #48	@ 0x30
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20012f28 	.word	0x20012f28

08005450 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4613      	mov	r3, r2
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4413      	add	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	3360      	adds	r3, #96	@ 0x60
 800546c:	4a1f      	ldr	r2, [pc, #124]	@ (80054ec <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800546e:	4413      	add	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d029      	beq.n	80054ce <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800547a:	2b02      	cmp	r3, #2
 800547c:	d82e      	bhi.n	80054dc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005482:	2b01      	cmp	r3, #1
 8005484:	d013      	beq.n	80054ae <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005486:	e029      	b.n	80054dc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005488:	6978      	ldr	r0, [r7, #20]
 800548a:	f7ff feb2 	bl	80051f2 <_GetAvailWriteSpace>
 800548e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d202      	bcs.n	800549e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005498:	2300      	movs	r3, #0
 800549a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800549c:	e021      	b.n	80054e2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	6978      	ldr	r0, [r7, #20]
 80054a8:	f7ff fe5b 	bl	8005162 <_WriteNoCheck>
    break;
 80054ac:	e019      	b.n	80054e2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80054ae:	6978      	ldr	r0, [r7, #20]
 80054b0:	f7ff fe9f 	bl	80051f2 <_GetAvailWriteSpace>
 80054b4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bf28      	it	cs
 80054be:	4613      	movcs	r3, r2
 80054c0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	69b9      	ldr	r1, [r7, #24]
 80054c6:	6978      	ldr	r0, [r7, #20]
 80054c8:	f7ff fe4b 	bl	8005162 <_WriteNoCheck>
    break;
 80054cc:	e009      	b.n	80054e2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	6978      	ldr	r0, [r7, #20]
 80054d4:	f7ff fde8 	bl	80050a8 <_WriteBlocking>
 80054d8:	61f8      	str	r0, [r7, #28]
    break;
 80054da:	e002      	b.n	80054e2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
    break;
 80054e0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80054e2:	69fb      	ldr	r3, [r7, #28]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20012f28 	.word	0x20012f28

080054f0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80054fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800550a:	f7ff fd75 	bl	8004ff8 <_DoInit>
  SEGGER_RTT_LOCK();
 800550e:	f3ef 8311 	mrs	r3, BASEPRI
 8005512:	f04f 0120 	mov.w	r1, #32
 8005516:	f381 8811 	msr	BASEPRI, r1
 800551a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff ff95 	bl	8005450 <SEGGER_RTT_WriteDownBufferNoLock>
 8005526:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800552e:	697b      	ldr	r3, [r7, #20]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20012f28 	.word	0x20012f28

0800553c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800554a:	4b3d      	ldr	r3, [pc, #244]	@ (8005640 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005558:	f7ff fd4e 	bl	8004ff8 <_DoInit>
  SEGGER_RTT_LOCK();
 800555c:	f3ef 8311 	mrs	r3, BASEPRI
 8005560:	f04f 0120 	mov.w	r1, #32
 8005564:	f381 8811 	msr	BASEPRI, r1
 8005568:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800556a:	4b35      	ldr	r3, [pc, #212]	@ (8005640 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800556c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005572:	6939      	ldr	r1, [r7, #16]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	4613      	mov	r3, r2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	440b      	add	r3, r1
 8005582:	3304      	adds	r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d008      	beq.n	800559c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3301      	adds	r3, #1
 800558e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	429a      	cmp	r2, r3
 8005598:	dbeb      	blt.n	8005572 <SEGGER_RTT_AllocUpBuffer+0x36>
 800559a:	e000      	b.n	800559e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800559c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	da3f      	bge.n	8005628 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80055a8:	6939      	ldr	r1, [r7, #16]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	440b      	add	r3, r1
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80055bc:	6939      	ldr	r1, [r7, #16]
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	4613      	mov	r3, r2
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	4413      	add	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	440b      	add	r3, r1
 80055cc:	3304      	adds	r3, #4
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80055d2:	6939      	ldr	r1, [r7, #16]
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	4613      	mov	r3, r2
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	440b      	add	r3, r1
 80055e0:	3320      	adds	r3, #32
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80055e6:	6939      	ldr	r1, [r7, #16]
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	4613      	mov	r3, r2
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	4413      	add	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	440b      	add	r3, r1
 80055f4:	3328      	adds	r3, #40	@ 0x28
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80055fa:	6939      	ldr	r1, [r7, #16]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	4613      	mov	r3, r2
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	4413      	add	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	440b      	add	r3, r1
 8005608:	3324      	adds	r3, #36	@ 0x24
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800560e:	6939      	ldr	r1, [r7, #16]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	440b      	add	r3, r1
 800561c:	332c      	adds	r3, #44	@ 0x2c
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005622:	f3bf 8f5f 	dmb	sy
 8005626:	e002      	b.n	800562e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
 800562c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005634:	69fb      	ldr	r3, [r7, #28]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20012f28 	.word	0x20012f28

08005644 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005652:	4b33      	ldr	r3, [pc, #204]	@ (8005720 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005660:	f7ff fcca 	bl	8004ff8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005664:	4b2e      	ldr	r3, [pc, #184]	@ (8005720 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005666:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	461a      	mov	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4293      	cmp	r3, r2
 8005672:	d24d      	bcs.n	8005710 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005674:	f3ef 8311 	mrs	r3, BASEPRI
 8005678:	f04f 0120 	mov.w	r1, #32
 800567c:	f381 8811 	msr	BASEPRI, r1
 8005680:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d031      	beq.n	80056ec <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4613      	mov	r3, r2
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4413      	add	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	440b      	add	r3, r1
 8005696:	3360      	adds	r3, #96	@ 0x60
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800569c:	6979      	ldr	r1, [r7, #20]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	4413      	add	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	440b      	add	r3, r1
 80056aa:	3364      	adds	r3, #100	@ 0x64
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80056b0:	6979      	ldr	r1, [r7, #20]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4413      	add	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	440b      	add	r3, r1
 80056be:	3368      	adds	r3, #104	@ 0x68
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80056c4:	6979      	ldr	r1, [r7, #20]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4613      	mov	r3, r2
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	4413      	add	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	440b      	add	r3, r1
 80056d2:	3370      	adds	r3, #112	@ 0x70
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80056d8:	6979      	ldr	r1, [r7, #20]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	336c      	adds	r3, #108	@ 0x6c
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80056ec:	6979      	ldr	r1, [r7, #20]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4413      	add	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	440b      	add	r3, r1
 80056fa:	3374      	adds	r3, #116	@ 0x74
 80056fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056fe:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005700:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e002      	b.n	8005716 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005710:	f04f 33ff 	mov.w	r3, #4294967295
 8005714:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005716:	69fb      	ldr	r3, [r7, #28]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20012f28 	.word	0x20012f28

08005724 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005734:	e002      	b.n	800573c <_EncodeStr+0x18>
    Len++;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	3301      	adds	r3, #1
 800573a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f6      	bne.n	8005736 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d901      	bls.n	8005754 <_EncodeStr+0x30>
    Len = Limit;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2bfe      	cmp	r3, #254	@ 0xfe
 8005758:	d806      	bhi.n	8005768 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	60fa      	str	r2, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	e011      	b.n	800578c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	60fa      	str	r2, [r7, #12]
 800576e:	22ff      	movs	r2, #255	@ 0xff
 8005770:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	60fa      	str	r2, [r7, #12]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	0a19      	lsrs	r1, r3, #8
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	60fa      	str	r2, [r7, #12]
 8005788:	b2ca      	uxtb	r2, r1
 800578a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005790:	e00a      	b.n	80057a8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	1c53      	adds	r3, r2, #1
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	60f9      	str	r1, [r7, #12]
 800579e:	7812      	ldrb	r2, [r2, #0]
 80057a0:	701a      	strb	r2, [r3, #0]
    n++;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3301      	adds	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3f0      	bcc.n	8005792 <_EncodeStr+0x6e>
  }
  return pPayload;
 80057b0:	68fb      	ldr	r3, [r7, #12]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3304      	adds	r3, #4
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057de:	4b35      	ldr	r3, [pc, #212]	@ (80058b4 <_HandleIncomingPacket+0xdc>)
 80057e0:	7e1b      	ldrb	r3, [r3, #24]
 80057e2:	4618      	mov	r0, r3
 80057e4:	1cfb      	adds	r3, r7, #3
 80057e6:	2201      	movs	r2, #1
 80057e8:	4619      	mov	r1, r3
 80057ea:	f7ff fdab 	bl	8005344 <SEGGER_RTT_ReadNoLock>
 80057ee:	4603      	mov	r3, r0
 80057f0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	dd59      	ble.n	80058ac <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	2b80      	cmp	r3, #128	@ 0x80
 80057fc:	d032      	beq.n	8005864 <_HandleIncomingPacket+0x8c>
 80057fe:	2b80      	cmp	r3, #128	@ 0x80
 8005800:	dc42      	bgt.n	8005888 <_HandleIncomingPacket+0xb0>
 8005802:	2b07      	cmp	r3, #7
 8005804:	dc16      	bgt.n	8005834 <_HandleIncomingPacket+0x5c>
 8005806:	2b00      	cmp	r3, #0
 8005808:	dd3e      	ble.n	8005888 <_HandleIncomingPacket+0xb0>
 800580a:	3b01      	subs	r3, #1
 800580c:	2b06      	cmp	r3, #6
 800580e:	d83b      	bhi.n	8005888 <_HandleIncomingPacket+0xb0>
 8005810:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <_HandleIncomingPacket+0x40>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	0800583b 	.word	0x0800583b
 800581c:	08005841 	.word	0x08005841
 8005820:	08005847 	.word	0x08005847
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005853 	.word	0x08005853
 800582c:	08005859 	.word	0x08005859
 8005830:	0800585f 	.word	0x0800585f
 8005834:	2b7f      	cmp	r3, #127	@ 0x7f
 8005836:	d034      	beq.n	80058a2 <_HandleIncomingPacket+0xca>
 8005838:	e026      	b.n	8005888 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800583a:	f000 ff43 	bl	80066c4 <SEGGER_SYSVIEW_Start>
      break;
 800583e:	e035      	b.n	80058ac <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005840:	f000 fffc 	bl	800683c <SEGGER_SYSVIEW_Stop>
      break;
 8005844:	e032      	b.n	80058ac <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005846:	f001 f9d5 	bl	8006bf4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800584a:	e02f      	b.n	80058ac <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800584c:	f001 f99a 	bl	8006b84 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005850:	e02c      	b.n	80058ac <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005852:	f001 f819 	bl	8006888 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005856:	e029      	b.n	80058ac <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005858:	f001 fc68 	bl	800712c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800585c:	e026      	b.n	80058ac <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800585e:	f001 fc47 	bl	80070f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005862:	e023      	b.n	80058ac <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005864:	4b13      	ldr	r3, [pc, #76]	@ (80058b4 <_HandleIncomingPacket+0xdc>)
 8005866:	7e1b      	ldrb	r3, [r3, #24]
 8005868:	4618      	mov	r0, r3
 800586a:	1cfb      	adds	r3, r7, #3
 800586c:	2201      	movs	r2, #1
 800586e:	4619      	mov	r1, r3
 8005870:	f7ff fd68 	bl	8005344 <SEGGER_RTT_ReadNoLock>
 8005874:	4603      	mov	r3, r0
 8005876:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	dd13      	ble.n	80058a6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fbb5 	bl	8006ff0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005886:	e00e      	b.n	80058a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	b25b      	sxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	da0c      	bge.n	80058aa <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005890:	4b08      	ldr	r3, [pc, #32]	@ (80058b4 <_HandleIncomingPacket+0xdc>)
 8005892:	7e1b      	ldrb	r3, [r3, #24]
 8005894:	4618      	mov	r0, r3
 8005896:	1cfb      	adds	r3, r7, #3
 8005898:	2201      	movs	r2, #1
 800589a:	4619      	mov	r1, r3
 800589c:	f7ff fd52 	bl	8005344 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80058a0:	e003      	b.n	80058aa <_HandleIncomingPacket+0xd2>
      break;
 80058a2:	bf00      	nop
 80058a4:	e002      	b.n	80058ac <_HandleIncomingPacket+0xd4>
      break;
 80058a6:	bf00      	nop
 80058a8:	e000      	b.n	80058ac <_HandleIncomingPacket+0xd4>
      break;
 80058aa:	bf00      	nop
    }
  }
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200143e8 	.word	0x200143e8

080058b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08c      	sub	sp, #48	@ 0x30
 80058bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80058be:	2301      	movs	r3, #1
 80058c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80058c2:	1d3b      	adds	r3, r7, #4
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058cc:	4b32      	ldr	r3, [pc, #200]	@ (8005998 <_TrySendOverflowPacket+0xe0>)
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d2:	e00b      	b.n	80058ec <_TrySendOverflowPacket+0x34>
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058da:	1c59      	adds	r1, r3, #1
 80058dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80058de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e8:	09db      	lsrs	r3, r3, #7
 80058ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80058f0:	d8f0      	bhi.n	80058d4 <_TrySendOverflowPacket+0x1c>
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005900:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005902:	4b26      	ldr	r3, [pc, #152]	@ (800599c <_TrySendOverflowPacket+0xe4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005908:	4b23      	ldr	r3, [pc, #140]	@ (8005998 <_TrySendOverflowPacket+0xe0>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	e00b      	b.n	8005934 <_TrySendOverflowPacket+0x7c>
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	b2da      	uxtb	r2, r3
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	6279      	str	r1, [r7, #36]	@ 0x24
 8005926:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	09db      	lsrs	r3, r3, #7
 8005932:	623b      	str	r3, [r7, #32]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2b7f      	cmp	r3, #127	@ 0x7f
 8005938:	d8f0      	bhi.n	800591c <_TrySendOverflowPacket+0x64>
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800594a:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <_TrySendOverflowPacket+0xe0>)
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	4618      	mov	r0, r3
 8005950:	1d3b      	adds	r3, r7, #4
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	461a      	mov	r2, r3
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	4619      	mov	r1, r3
 800595c:	f7fa fc38 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005960:	4603      	mov	r3, r0
 8005962:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005964:	f7ff fabe 	bl	8004ee4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800596e:	4a0a      	ldr	r2, [pc, #40]	@ (8005998 <_TrySendOverflowPacket+0xe0>)
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005974:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <_TrySendOverflowPacket+0xe0>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	3b01      	subs	r3, #1
 800597a:	b2da      	uxtb	r2, r3
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <_TrySendOverflowPacket+0xe0>)
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e004      	b.n	800598c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005982:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <_TrySendOverflowPacket+0xe0>)
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	3301      	adds	r3, #1
 8005988:	4a03      	ldr	r2, [pc, #12]	@ (8005998 <_TrySendOverflowPacket+0xe0>)
 800598a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800598c:	693b      	ldr	r3, [r7, #16]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3730      	adds	r7, #48	@ 0x30
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200143e8 	.word	0x200143e8
 800599c:	e0001004 	.word	0xe0001004

080059a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80059ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005b64 <_SendPacket+0x1c4>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d010      	beq.n	80059d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80059b4:	4b6b      	ldr	r3, [pc, #428]	@ (8005b64 <_SendPacket+0x1c4>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80a5 	beq.w	8005b08 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80059be:	4b69      	ldr	r3, [pc, #420]	@ (8005b64 <_SendPacket+0x1c4>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d109      	bne.n	80059da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80059c6:	f7ff ff77 	bl	80058b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80059ca:	4b66      	ldr	r3, [pc, #408]	@ (8005b64 <_SendPacket+0x1c4>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	f040 809c 	bne.w	8005b0c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80059d4:	e001      	b.n	80059da <_SendPacket+0x3a>
    goto Send;
 80059d6:	bf00      	nop
 80059d8:	e000      	b.n	80059dc <_SendPacket+0x3c>
Send:
 80059da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b1f      	cmp	r3, #31
 80059e0:	d809      	bhi.n	80059f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80059e2:	4b60      	ldr	r3, [pc, #384]	@ (8005b64 <_SendPacket+0x1c4>)
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	fa22 f303 	lsr.w	r3, r2, r3
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f040 808d 	bne.w	8005b10 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b17      	cmp	r3, #23
 80059fa:	d807      	bhi.n	8005a0c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e03d      	b.n	8005a88 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a18:	d912      	bls.n	8005a40 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	09da      	lsrs	r2, r3, #7
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	3a01      	subs	r2, #1
 8005a32:	60fa      	str	r2, [r7, #12]
 8005a34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e006      	b.n	8005a4e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a52:	d912      	bls.n	8005a7a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	09da      	lsrs	r2, r3, #7
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	60fa      	str	r2, [r7, #12]
 8005a6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	e006      	b.n	8005a88 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a88:	4b37      	ldr	r3, [pc, #220]	@ (8005b68 <_SendPacket+0x1c8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a8e:	4b35      	ldr	r3, [pc, #212]	@ (8005b64 <_SendPacket+0x1c4>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	e00b      	b.n	8005aba <_SendPacket+0x11a>
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	1c59      	adds	r1, r3, #1
 8005aaa:	6279      	str	r1, [r7, #36]	@ 0x24
 8005aac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	09db      	lsrs	r3, r3, #7
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005abe:	d8f0      	bhi.n	8005aa2 <_SendPacket+0x102>
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005ad0:	4b24      	ldr	r3, [pc, #144]	@ (8005b64 <_SendPacket+0x1c4>)
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	f7fa fb76 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005ae8:	f7ff f9fc 	bl	8004ee4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005af2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b64 <_SendPacket+0x1c4>)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	60d3      	str	r3, [r2, #12]
 8005af8:	e00b      	b.n	8005b12 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005afa:	4b1a      	ldr	r3, [pc, #104]	@ (8005b64 <_SendPacket+0x1c4>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	4b18      	ldr	r3, [pc, #96]	@ (8005b64 <_SendPacket+0x1c4>)
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e004      	b.n	8005b12 <_SendPacket+0x172>
    goto SendDone;
 8005b08:	bf00      	nop
 8005b0a:	e002      	b.n	8005b12 <_SendPacket+0x172>
      goto SendDone;
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <_SendPacket+0x172>
      goto SendDone;
 8005b10:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b12:	4b14      	ldr	r3, [pc, #80]	@ (8005b64 <_SendPacket+0x1c4>)
 8005b14:	7e1b      	ldrb	r3, [r3, #24]
 8005b16:	4619      	mov	r1, r3
 8005b18:	4a14      	ldr	r2, [pc, #80]	@ (8005b6c <_SendPacket+0x1cc>)
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	440b      	add	r3, r1
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4413      	add	r3, r2
 8005b24:	336c      	adds	r3, #108	@ 0x6c
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4b0e      	ldr	r3, [pc, #56]	@ (8005b64 <_SendPacket+0x1c4>)
 8005b2a:	7e1b      	ldrb	r3, [r3, #24]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	490f      	ldr	r1, [pc, #60]	@ (8005b6c <_SendPacket+0x1cc>)
 8005b30:	4603      	mov	r3, r0
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4403      	add	r3, r0
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	440b      	add	r3, r1
 8005b3a:	3370      	adds	r3, #112	@ 0x70
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d00b      	beq.n	8005b5a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b42:	4b08      	ldr	r3, [pc, #32]	@ (8005b64 <_SendPacket+0x1c4>)
 8005b44:	789b      	ldrb	r3, [r3, #2]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d107      	bne.n	8005b5a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <_SendPacket+0x1c4>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b50:	f7ff fe42 	bl	80057d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b54:	4b03      	ldr	r3, [pc, #12]	@ (8005b64 <_SendPacket+0x1c4>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b5a:	bf00      	nop
 8005b5c:	3728      	adds	r7, #40	@ 0x28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200143e8 	.word	0x200143e8
 8005b68:	e0001004 	.word	0xe0001004
 8005b6c:	20012f28 	.word	0x20012f28

08005b70 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	@ 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	3301      	adds	r3, #1
 8005b86:	2b80      	cmp	r3, #128	@ 0x80
 8005b88:	d80a      	bhi.n	8005ba0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	1c59      	adds	r1, r3, #1
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6051      	str	r1, [r2, #4]
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b80      	cmp	r3, #128	@ 0x80
 8005ba6:	d15a      	bne.n	8005c5e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	e00b      	b.n	8005be2 <_StoreChar+0x72>
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005be6:	d8f0      	bhi.n	8005bca <_StoreChar+0x5a>
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	e00b      	b.n	8005c1a <_StoreChar+0xaa>
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	1c59      	adds	r1, r3, #1
 8005c0a:	61f9      	str	r1, [r7, #28]
 8005c0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	701a      	strb	r2, [r3, #0]
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	09db      	lsrs	r3, r3, #7
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c1e:	d8f0      	bhi.n	8005c02 <_StoreChar+0x92>
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	61fa      	str	r2, [r7, #28]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	221a      	movs	r2, #26
 8005c36:	6939      	ldr	r1, [r7, #16]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff feb1 	bl	80059a0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fdbb 	bl	80057be <_PreparePacket>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	611a      	str	r2, [r3, #16]
  }
}
 8005c5e:	bf00      	nop
 8005c60:	3728      	adds	r7, #40	@ 0x28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	@ 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c82:	e007      	b.n	8005c94 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	623b      	str	r3, [r7, #32]
    Width++;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	3301      	adds	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d2f3      	bcs.n	8005c84 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d901      	bls.n	8005ca8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d000      	beq.n	8005cb4 <_PrintUnsigned+0x4c>
 8005cb2:	e01f      	b.n	8005cf4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01c      	beq.n	8005cf4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <_PrintUnsigned+0x68>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <_PrintUnsigned+0x68>
        c = '0';
 8005cca:	2330      	movs	r3, #48	@ 0x30
 8005ccc:	76fb      	strb	r3, [r7, #27]
 8005cce:	e001      	b.n	8005cd4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cd4:	e007      	b.n	8005ce6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005cdc:	7efb      	ldrb	r3, [r7, #27]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff ff45 	bl	8005b70 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <_PrintUnsigned+0x8c>
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d3f0      	bcc.n	8005cd6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d903      	bls.n	8005d02 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	e009      	b.n	8005d16 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d200      	bcs.n	8005d16 <_PrintUnsigned+0xae>
        break;
 8005d14:	e005      	b.n	8005d22 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d20:	e7e8      	b.n	8005cf4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d30:	fb02 f303 	mul.w	r3, r2, r3
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005d3a:	4a15      	ldr	r2, [pc, #84]	@ (8005d90 <_PrintUnsigned+0x128>)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	4413      	add	r3, r2
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff ff13 	bl	8005b70 <_StoreChar>
    Digit /= Base;
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e3      	bne.n	8005d22 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d011      	beq.n	8005d88 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00e      	beq.n	8005d88 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d6a:	e006      	b.n	8005d7a <_PrintUnsigned+0x112>
        FieldWidth--;
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005d72:	2120      	movs	r1, #32
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff fefb 	bl	8005b70 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <_PrintUnsigned+0x120>
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d3f1      	bcc.n	8005d6c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005d88:	bf00      	nop
 8005d8a:	3728      	adds	r7, #40	@ 0x28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	08007dec 	.word	0x08007dec

08005d94 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bfb8      	it	lt
 8005da8:	425b      	neglt	r3, r3
 8005daa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005dac:	2301      	movs	r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005db0:	e007      	b.n	8005dc2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005dba:	613b      	str	r3, [r7, #16]
    Width++;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	daf3      	bge.n	8005db2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d901      	bls.n	8005dd6 <_PrintInt+0x42>
    Width = NumDigits;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <_PrintInt+0x5e>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db04      	blt.n	8005dec <_PrintInt+0x58>
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <_PrintInt+0x5e>
    FieldWidth--;
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <_PrintInt+0x6e>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <_PrintInt+0x9c>
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d111      	bne.n	8005e30 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00e      	beq.n	8005e30 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e12:	e006      	b.n	8005e22 <_PrintInt+0x8e>
        FieldWidth--;
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff fea7 	bl	8005b70 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <_PrintInt+0x9c>
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d3f1      	bcc.n	8005e14 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	da07      	bge.n	8005e46 <_PrintInt+0xb2>
    v = -v;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	425b      	negs	r3, r3
 8005e3a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005e3c:	212d      	movs	r1, #45	@ 0x2d
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff fe96 	bl	8005b70 <_StoreChar>
 8005e44:	e008      	b.n	8005e58 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005e50:	212b      	movs	r1, #43	@ 0x2b
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff fe8c 	bl	8005b70 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d019      	beq.n	8005e96 <_PrintInt+0x102>
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d114      	bne.n	8005e96 <_PrintInt+0x102>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d111      	bne.n	8005e96 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e78:	e006      	b.n	8005e88 <_PrintInt+0xf4>
        FieldWidth--;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005e80:	2130      	movs	r1, #48	@ 0x30
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff fe74 	bl	8005b70 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <_PrintInt+0x102>
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d3f1      	bcc.n	8005e7a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff fedf 	bl	8005c68 <_PrintUnsigned>
}
 8005eaa:	bf00      	nop
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b098      	sub	sp, #96	@ 0x60
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec4:	f04f 0120 	mov.w	r1, #32
 8005ec8:	f381 8811 	msr	BASEPRI, r1
 8005ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ece:	48b7      	ldr	r0, [pc, #732]	@ (80061ac <_VPrintTarget+0x2f8>)
 8005ed0:	f7ff fc75 	bl	80057be <_PreparePacket>
 8005ed4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ed6:	4bb5      	ldr	r3, [pc, #724]	@ (80061ac <_VPrintTarget+0x2f8>)
 8005ed8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005efa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 8183 	beq.w	800620a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005f04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f08:	2b25      	cmp	r3, #37	@ 0x25
 8005f0a:	f040 8170 	bne.w	80061ee <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005f12:	2301      	movs	r3, #1
 8005f14:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005f1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f22:	3b23      	subs	r3, #35	@ 0x23
 8005f24:	2b0d      	cmp	r3, #13
 8005f26:	d83f      	bhi.n	8005fa8 <_VPrintTarget+0xf4>
 8005f28:	a201      	add	r2, pc, #4	@ (adr r2, 8005f30 <_VPrintTarget+0x7c>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005fa9 	.word	0x08005fa9
 8005f38:	08005fa9 	.word	0x08005fa9
 8005f3c:	08005fa9 	.word	0x08005fa9
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005fa9 	.word	0x08005fa9
 8005f48:	08005fa9 	.word	0x08005fa9
 8005f4c:	08005fa9 	.word	0x08005fa9
 8005f50:	08005f89 	.word	0x08005f89
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005f69 	.word	0x08005f69
 8005f5c:	08005fa9 	.word	0x08005fa9
 8005f60:	08005fa9 	.word	0x08005fa9
 8005f64:	08005f79 	.word	0x08005f79
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e01a      	b.n	8005fae <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f7a:	f043 0302 	orr.w	r3, r3, #2
 8005f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e012      	b.n	8005fae <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f8a:	f043 0304 	orr.w	r3, r3, #4
 8005f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e00a      	b.n	8005fae <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f9a:	f043 0308 	orr.w	r3, r3, #8
 8005f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	e002      	b.n	8005fae <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fac:	bf00      	nop
        }
      } while (v);
 8005fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1b0      	bne.n	8005f16 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fc4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005fc6:	d912      	bls.n	8005fee <_VPrintTarget+0x13a>
 8005fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fcc:	2b39      	cmp	r3, #57	@ 0x39
 8005fce:	d80e      	bhi.n	8005fee <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3b30      	subs	r3, #48	@ 0x30
 8005fea:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005fec:	e7e4      	b.n	8005fb8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006000:	d11d      	bne.n	800603e <_VPrintTarget+0x18a>
        sFormat++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3301      	adds	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006010:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006014:	2b2f      	cmp	r3, #47	@ 0x2f
 8006016:	d912      	bls.n	800603e <_VPrintTarget+0x18a>
 8006018:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800601c:	2b39      	cmp	r3, #57	@ 0x39
 800601e:	d80e      	bhi.n	800603e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006026:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	461a      	mov	r2, r3
 8006032:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006036:	4413      	add	r3, r2
 8006038:	3b30      	subs	r3, #48	@ 0x30
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800603c:	e7e4      	b.n	8006008 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006046:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800604a:	2b6c      	cmp	r3, #108	@ 0x6c
 800604c:	d003      	beq.n	8006056 <_VPrintTarget+0x1a2>
 800604e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006052:	2b68      	cmp	r3, #104	@ 0x68
 8006054:	d107      	bne.n	8006066 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006064:	e7ef      	b.n	8006046 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006066:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800606a:	2b25      	cmp	r3, #37	@ 0x25
 800606c:	f000 80b3 	beq.w	80061d6 <_VPrintTarget+0x322>
 8006070:	2b25      	cmp	r3, #37	@ 0x25
 8006072:	f2c0 80b7 	blt.w	80061e4 <_VPrintTarget+0x330>
 8006076:	2b78      	cmp	r3, #120	@ 0x78
 8006078:	f300 80b4 	bgt.w	80061e4 <_VPrintTarget+0x330>
 800607c:	2b58      	cmp	r3, #88	@ 0x58
 800607e:	f2c0 80b1 	blt.w	80061e4 <_VPrintTarget+0x330>
 8006082:	3b58      	subs	r3, #88	@ 0x58
 8006084:	2b20      	cmp	r3, #32
 8006086:	f200 80ad 	bhi.w	80061e4 <_VPrintTarget+0x330>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <_VPrintTarget+0x1dc>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	08006187 	.word	0x08006187
 8006094:	080061e5 	.word	0x080061e5
 8006098:	080061e5 	.word	0x080061e5
 800609c:	080061e5 	.word	0x080061e5
 80060a0:	080061e5 	.word	0x080061e5
 80060a4:	080061e5 	.word	0x080061e5
 80060a8:	080061e5 	.word	0x080061e5
 80060ac:	080061e5 	.word	0x080061e5
 80060b0:	080061e5 	.word	0x080061e5
 80060b4:	080061e5 	.word	0x080061e5
 80060b8:	080061e5 	.word	0x080061e5
 80060bc:	08006115 	.word	0x08006115
 80060c0:	0800613b 	.word	0x0800613b
 80060c4:	080061e5 	.word	0x080061e5
 80060c8:	080061e5 	.word	0x080061e5
 80060cc:	080061e5 	.word	0x080061e5
 80060d0:	080061e5 	.word	0x080061e5
 80060d4:	080061e5 	.word	0x080061e5
 80060d8:	080061e5 	.word	0x080061e5
 80060dc:	080061e5 	.word	0x080061e5
 80060e0:	080061e5 	.word	0x080061e5
 80060e4:	080061e5 	.word	0x080061e5
 80060e8:	080061e5 	.word	0x080061e5
 80060ec:	080061e5 	.word	0x080061e5
 80060f0:	080061b1 	.word	0x080061b1
 80060f4:	080061e5 	.word	0x080061e5
 80060f8:	080061e5 	.word	0x080061e5
 80060fc:	080061e5 	.word	0x080061e5
 8006100:	080061e5 	.word	0x080061e5
 8006104:	08006161 	.word	0x08006161
 8006108:	080061e5 	.word	0x080061e5
 800610c:	080061e5 	.word	0x080061e5
 8006110:	08006187 	.word	0x08006187
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	1d19      	adds	r1, r3, #4
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6011      	str	r1, [r2, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006128:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800612c:	f107 0314 	add.w	r3, r7, #20
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fd1c 	bl	8005b70 <_StoreChar>
        break;
 8006138:	e055      	b.n	80061e6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	1d19      	adds	r1, r3, #4
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6011      	str	r1, [r2, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006148:	f107 0014 	add.w	r0, r7, #20
 800614c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006156:	220a      	movs	r2, #10
 8006158:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800615a:	f7ff fe1b 	bl	8005d94 <_PrintInt>
        break;
 800615e:	e042      	b.n	80061e6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	1d19      	adds	r1, r3, #4
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6011      	str	r1, [r2, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800616e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006170:	f107 0014 	add.w	r0, r7, #20
 8006174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617e:	220a      	movs	r2, #10
 8006180:	f7ff fd72 	bl	8005c68 <_PrintUnsigned>
        break;
 8006184:	e02f      	b.n	80061e6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	1d19      	adds	r1, r3, #4
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6011      	str	r1, [r2, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006194:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006196:	f107 0014 	add.w	r0, r7, #20
 800619a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a4:	2210      	movs	r2, #16
 80061a6:	f7ff fd5f 	bl	8005c68 <_PrintUnsigned>
        break;
 80061aa:	e01c      	b.n	80061e6 <_VPrintTarget+0x332>
 80061ac:	20014418 	.word	0x20014418
      case 'p':
        v = va_arg(*pParamList, int);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	1d19      	adds	r1, r3, #4
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80061be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061c0:	f107 0014 	add.w	r0, r7, #20
 80061c4:	2300      	movs	r3, #0
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	2308      	movs	r3, #8
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2308      	movs	r3, #8
 80061ce:	2210      	movs	r2, #16
 80061d0:	f7ff fd4a 	bl	8005c68 <_PrintUnsigned>
        break;
 80061d4:	e007      	b.n	80061e6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80061d6:	f107 0314 	add.w	r3, r7, #20
 80061da:	2125      	movs	r1, #37	@ 0x25
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fcc7 	bl	8005b70 <_StoreChar>
        break;
 80061e2:	e000      	b.n	80061e6 <_VPrintTarget+0x332>
      default:
        break;
 80061e4:	bf00      	nop
      }
      sFormat++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e007      	b.n	80061fe <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80061ee:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80061f2:	f107 0314 	add.w	r3, r7, #20
 80061f6:	4611      	mov	r1, r2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fcb9 	bl	8005b70 <_StoreChar>
    }
  } while (*sFormat);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f47f ae72 	bne.w	8005eec <_VPrintTarget+0x38>
 8006208:	e000      	b.n	800620c <_VPrintTarget+0x358>
      break;
 800620a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d041      	beq.n	8006296 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	643b      	str	r3, [r7, #64]	@ 0x40
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006222:	e00b      	b.n	800623c <_VPrintTarget+0x388>
 8006224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006226:	b2da      	uxtb	r2, r3
 8006228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800622a:	1c59      	adds	r1, r3, #1
 800622c:	6439      	str	r1, [r7, #64]	@ 0x40
 800622e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006238:	09db      	lsrs	r3, r3, #7
 800623a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800623c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006240:	d8f0      	bhi.n	8006224 <_VPrintTarget+0x370>
 8006242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	643a      	str	r2, [r7, #64]	@ 0x40
 8006248:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006250:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006256:	2300      	movs	r3, #0
 8006258:	637b      	str	r3, [r7, #52]	@ 0x34
 800625a:	e00b      	b.n	8006274 <_VPrintTarget+0x3c0>
 800625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625e:	b2da      	uxtb	r2, r3
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	1c59      	adds	r1, r3, #1
 8006264:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006266:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006270:	09db      	lsrs	r3, r3, #7
 8006272:	637b      	str	r3, [r7, #52]	@ 0x34
 8006274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006276:	2b7f      	cmp	r3, #127	@ 0x7f
 8006278:	d8f0      	bhi.n	800625c <_VPrintTarget+0x3a8>
 800627a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006288:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	69b9      	ldr	r1, [r7, #24]
 800628e:	221a      	movs	r2, #26
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fb85 	bl	80059a0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800629c:	bf00      	nop
 800629e:	3758      	adds	r7, #88	@ 0x58
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062b2:	2300      	movs	r3, #0
 80062b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80062b8:	4917      	ldr	r1, [pc, #92]	@ (8006318 <SEGGER_SYSVIEW_Init+0x74>)
 80062ba:	4818      	ldr	r0, [pc, #96]	@ (800631c <SEGGER_SYSVIEW_Init+0x78>)
 80062bc:	f7ff f93e 	bl	800553c <SEGGER_RTT_AllocUpBuffer>
 80062c0:	4603      	mov	r3, r0
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	4b16      	ldr	r3, [pc, #88]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 80062c6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80062c8:	4b15      	ldr	r3, [pc, #84]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 80062ca:	785a      	ldrb	r2, [r3, #1]
 80062cc:	4b14      	ldr	r3, [pc, #80]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 80062ce:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062d0:	4b13      	ldr	r3, [pc, #76]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 80062d2:	7e1b      	ldrb	r3, [r3, #24]
 80062d4:	4618      	mov	r0, r3
 80062d6:	2300      	movs	r3, #0
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	2308      	movs	r3, #8
 80062dc:	4a11      	ldr	r2, [pc, #68]	@ (8006324 <SEGGER_SYSVIEW_Init+0x80>)
 80062de:	490f      	ldr	r1, [pc, #60]	@ (800631c <SEGGER_SYSVIEW_Init+0x78>)
 80062e0:	f7ff f9b0 	bl	8005644 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80062e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006328 <SEGGER_SYSVIEW_Init+0x84>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 80062f0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80062f2:	4a0b      	ldr	r2, [pc, #44]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80062f8:	4a09      	ldr	r2, [pc, #36]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80062fe:	4a08      	ldr	r2, [pc, #32]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006304:	4a06      	ldr	r2, [pc, #24]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800630a:	4b05      	ldr	r3, [pc, #20]	@ (8006320 <SEGGER_SYSVIEW_Init+0x7c>)
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	200133e0 	.word	0x200133e0
 800631c:	08007db4 	.word	0x08007db4
 8006320:	200143e8 	.word	0x200143e8
 8006324:	200143e0 	.word	0x200143e0
 8006328:	e0001004 	.word	0xe0001004

0800632c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006334:	4a04      	ldr	r2, [pc, #16]	@ (8006348 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6113      	str	r3, [r2, #16]
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	200143e8 	.word	0x200143e8

0800634c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006354:	f3ef 8311 	mrs	r3, BASEPRI
 8006358:	f04f 0120 	mov.w	r1, #32
 800635c:	f381 8811 	msr	BASEPRI, r1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	4808      	ldr	r0, [pc, #32]	@ (8006384 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006364:	f7ff fa2b 	bl	80057be <_PreparePacket>
 8006368:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	68b8      	ldr	r0, [r7, #8]
 8006370:	f7ff fb16 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f383 8811 	msr	BASEPRI, r3
}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20014418 	.word	0x20014418

08006388 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006392:	f3ef 8311 	mrs	r3, BASEPRI
 8006396:	f04f 0120 	mov.w	r1, #32
 800639a:	f381 8811 	msr	BASEPRI, r1
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	4816      	ldr	r0, [pc, #88]	@ (80063fc <SEGGER_SYSVIEW_RecordU32+0x74>)
 80063a2:	f7ff fa0c 	bl	80057be <_PreparePacket>
 80063a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	e00b      	b.n	80063ce <SEGGER_SYSVIEW_RecordU32+0x46>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	1c59      	adds	r1, r3, #1
 80063be:	61f9      	str	r1, [r7, #28]
 80063c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d2:	d8f0      	bhi.n	80063b6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	61fa      	str	r2, [r7, #28]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	68f9      	ldr	r1, [r7, #12]
 80063e8:	6938      	ldr	r0, [r7, #16]
 80063ea:	f7ff fad9 	bl	80059a0 <_SendPacket>
  RECORD_END();
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f383 8811 	msr	BASEPRI, r3
}
 80063f4:	bf00      	nop
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20014418 	.word	0x20014418

08006400 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	@ 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800640c:	f3ef 8311 	mrs	r3, BASEPRI
 8006410:	f04f 0120 	mov.w	r1, #32
 8006414:	f381 8811 	msr	BASEPRI, r1
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	4825      	ldr	r0, [pc, #148]	@ (80064b0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800641c:	f7ff f9cf 	bl	80057be <_PreparePacket>
 8006420:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800642e:	e00b      	b.n	8006448 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	b2da      	uxtb	r2, r3
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	1c59      	adds	r1, r3, #1
 8006438:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800643a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	09db      	lsrs	r3, r3, #7
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644a:	2b7f      	cmp	r3, #127	@ 0x7f
 800644c:	d8f0      	bhi.n	8006430 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	623b      	str	r3, [r7, #32]
 8006466:	e00b      	b.n	8006480 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	b2da      	uxtb	r2, r3
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	1c59      	adds	r1, r3, #1
 8006470:	6279      	str	r1, [r7, #36]	@ 0x24
 8006472:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	09db      	lsrs	r3, r3, #7
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b7f      	cmp	r3, #127	@ 0x7f
 8006484:	d8f0      	bhi.n	8006468 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	627a      	str	r2, [r7, #36]	@ 0x24
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	69b8      	ldr	r0, [r7, #24]
 800649c:	f7ff fa80 	bl	80059a0 <_SendPacket>
  RECORD_END();
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f383 8811 	msr	BASEPRI, r3
}
 80064a6:	bf00      	nop
 80064a8:	3730      	adds	r7, #48	@ 0x30
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20014418 	.word	0x20014418

080064b4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08e      	sub	sp, #56	@ 0x38
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80064c2:	f3ef 8311 	mrs	r3, BASEPRI
 80064c6:	f04f 0120 	mov.w	r1, #32
 80064ca:	f381 8811 	msr	BASEPRI, r1
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	4832      	ldr	r0, [pc, #200]	@ (800659c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80064d2:	f7ff f974 	bl	80057be <_PreparePacket>
 80064d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80064e4:	e00b      	b.n	80064fe <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	6379      	str	r1, [r7, #52]	@ 0x34
 80064f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	09db      	lsrs	r3, r3, #7
 80064fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	2b7f      	cmp	r3, #127	@ 0x7f
 8006502:	d8f0      	bhi.n	80064e6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	637a      	str	r2, [r7, #52]	@ 0x34
 800650a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006512:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800651c:	e00b      	b.n	8006536 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	b2da      	uxtb	r2, r3
 8006522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006528:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	09db      	lsrs	r3, r3, #7
 8006534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	2b7f      	cmp	r3, #127	@ 0x7f
 800653a:	d8f0      	bhi.n	800651e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800653c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	e00b      	b.n	800656e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006560:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	09db      	lsrs	r3, r3, #7
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b7f      	cmp	r3, #127	@ 0x7f
 8006572:	d8f0      	bhi.n	8006556 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	627a      	str	r2, [r7, #36]	@ 0x24
 800657a:	6a3a      	ldr	r2, [r7, #32]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	6979      	ldr	r1, [r7, #20]
 8006588:	69b8      	ldr	r0, [r7, #24]
 800658a:	f7ff fa09 	bl	80059a0 <_SendPacket>
  RECORD_END();
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f383 8811 	msr	BASEPRI, r3
}
 8006594:	bf00      	nop
 8006596:	3738      	adds	r7, #56	@ 0x38
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20014418 	.word	0x20014418

080065a0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b090      	sub	sp, #64	@ 0x40
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065ae:	f3ef 8311 	mrs	r3, BASEPRI
 80065b2:	f04f 0120 	mov.w	r1, #32
 80065b6:	f381 8811 	msr	BASEPRI, r1
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	4840      	ldr	r0, [pc, #256]	@ (80066c0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80065be:	f7ff f8fe 	bl	80057be <_PreparePacket>
 80065c2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065d0:	e00b      	b.n	80065ea <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d8:	1c59      	adds	r1, r3, #1
 80065da:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80065dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e6:	09db      	lsrs	r3, r3, #7
 80065e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ee:	d8f0      	bhi.n	80065d2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80065f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	633b      	str	r3, [r7, #48]	@ 0x30
 8006608:	e00b      	b.n	8006622 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	b2da      	uxtb	r2, r3
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	1c59      	adds	r1, r3, #1
 8006612:	6379      	str	r1, [r7, #52]	@ 0x34
 8006614:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	09db      	lsrs	r3, r3, #7
 8006620:	633b      	str	r3, [r7, #48]	@ 0x30
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	2b7f      	cmp	r3, #127	@ 0x7f
 8006626:	d8f0      	bhi.n	800660a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	637a      	str	r2, [r7, #52]	@ 0x34
 800662e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006636:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006640:	e00b      	b.n	800665a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006644:	b2da      	uxtb	r2, r3
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	1c59      	adds	r1, r3, #1
 800664a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800664c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006656:	09db      	lsrs	r3, r3, #7
 8006658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665c:	2b7f      	cmp	r3, #127	@ 0x7f
 800665e:	d8f0      	bhi.n	8006642 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
 8006674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006676:	623b      	str	r3, [r7, #32]
 8006678:	e00b      	b.n	8006692 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	b2da      	uxtb	r2, r3
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	1c59      	adds	r1, r3, #1
 8006682:	6279      	str	r1, [r7, #36]	@ 0x24
 8006684:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	09db      	lsrs	r3, r3, #7
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	2b7f      	cmp	r3, #127	@ 0x7f
 8006696:	d8f0      	bhi.n	800667a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	627a      	str	r2, [r7, #36]	@ 0x24
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	6979      	ldr	r1, [r7, #20]
 80066ac:	69b8      	ldr	r0, [r7, #24]
 80066ae:	f7ff f977 	bl	80059a0 <_SendPacket>
  RECORD_END();
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	f383 8811 	msr	BASEPRI, r3
}
 80066b8:	bf00      	nop
 80066ba:	3740      	adds	r7, #64	@ 0x40
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20014418 	.word	0x20014418

080066c4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08c      	sub	sp, #48	@ 0x30
 80066c8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80066ca:	4b59      	ldr	r3, [pc, #356]	@ (8006830 <SEGGER_SYSVIEW_Start+0x16c>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80066d0:	f3ef 8311 	mrs	r3, BASEPRI
 80066d4:	f04f 0120 	mov.w	r1, #32
 80066d8:	f381 8811 	msr	BASEPRI, r1
 80066dc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80066de:	4b54      	ldr	r3, [pc, #336]	@ (8006830 <SEGGER_SYSVIEW_Start+0x16c>)
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	220a      	movs	r2, #10
 80066e4:	4953      	ldr	r1, [pc, #332]	@ (8006834 <SEGGER_SYSVIEW_Start+0x170>)
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7f9 fd72 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80066f2:	f7fe fbf7 	bl	8004ee4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80066f6:	200a      	movs	r0, #10
 80066f8:	f7ff fe28 	bl	800634c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006700:	f04f 0120 	mov.w	r1, #32
 8006704:	f381 8811 	msr	BASEPRI, r1
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	484b      	ldr	r0, [pc, #300]	@ (8006838 <SEGGER_SYSVIEW_Start+0x174>)
 800670c:	f7ff f857 	bl	80057be <_PreparePacket>
 8006710:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800671a:	4b45      	ldr	r3, [pc, #276]	@ (8006830 <SEGGER_SYSVIEW_Start+0x16c>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006720:	e00b      	b.n	800673a <SEGGER_SYSVIEW_Start+0x76>
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	b2da      	uxtb	r2, r3
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800672c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	09db      	lsrs	r3, r3, #7
 8006738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	2b7f      	cmp	r3, #127	@ 0x7f
 800673e:	d8f0      	bhi.n	8006722 <SEGGER_SYSVIEW_Start+0x5e>
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
 8006754:	4b36      	ldr	r3, [pc, #216]	@ (8006830 <SEGGER_SYSVIEW_Start+0x16c>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	e00b      	b.n	8006774 <SEGGER_SYSVIEW_Start+0xb0>
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	b2da      	uxtb	r2, r3
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	6279      	str	r1, [r7, #36]	@ 0x24
 8006766:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	09db      	lsrs	r3, r3, #7
 8006772:	623b      	str	r3, [r7, #32]
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	2b7f      	cmp	r3, #127	@ 0x7f
 8006778:	d8f0      	bhi.n	800675c <SEGGER_SYSVIEW_Start+0x98>
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006780:	6a3a      	ldr	r2, [r7, #32]
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	4b28      	ldr	r3, [pc, #160]	@ (8006830 <SEGGER_SYSVIEW_Start+0x16c>)
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	e00b      	b.n	80067ae <SEGGER_SYSVIEW_Start+0xea>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	b2da      	uxtb	r2, r3
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	1c59      	adds	r1, r3, #1
 800679e:	61f9      	str	r1, [r7, #28]
 80067a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	09db      	lsrs	r3, r3, #7
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80067b2:	d8f0      	bhi.n	8006796 <SEGGER_SYSVIEW_Start+0xd2>
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	61fa      	str	r2, [r7, #28]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	2300      	movs	r3, #0
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	e00b      	b.n	80067e6 <SEGGER_SYSVIEW_Start+0x122>
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	6179      	str	r1, [r7, #20]
 80067d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	09db      	lsrs	r3, r3, #7
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ea:	d8f0      	bhi.n	80067ce <SEGGER_SYSVIEW_Start+0x10a>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	617a      	str	r2, [r7, #20]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067fc:	2218      	movs	r2, #24
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff f8cd 	bl	80059a0 <_SendPacket>
      RECORD_END();
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800680c:	4b08      	ldr	r3, [pc, #32]	@ (8006830 <SEGGER_SYSVIEW_Start+0x16c>)
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006814:	4b06      	ldr	r3, [pc, #24]	@ (8006830 <SEGGER_SYSVIEW_Start+0x16c>)
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800681a:	f000 f9eb 	bl	8006bf4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800681e:	f000 f9b1 	bl	8006b84 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006822:	f000 fc83 	bl	800712c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006826:	bf00      	nop
 8006828:	3730      	adds	r7, #48	@ 0x30
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	200143e8 	.word	0x200143e8
 8006834:	08007de0 	.word	0x08007de0
 8006838:	20014418 	.word	0x20014418

0800683c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006842:	f3ef 8311 	mrs	r3, BASEPRI
 8006846:	f04f 0120 	mov.w	r1, #32
 800684a:	f381 8811 	msr	BASEPRI, r1
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	480b      	ldr	r0, [pc, #44]	@ (8006880 <SEGGER_SYSVIEW_Stop+0x44>)
 8006852:	f7fe ffb4 	bl	80057be <_PreparePacket>
 8006856:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <SEGGER_SYSVIEW_Stop+0x48>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006860:	220b      	movs	r2, #11
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6838      	ldr	r0, [r7, #0]
 8006866:	f7ff f89b 	bl	80059a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800686a:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <SEGGER_SYSVIEW_Stop+0x48>)
 800686c:	2200      	movs	r2, #0
 800686e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f383 8811 	msr	BASEPRI, r3
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20014418 	.word	0x20014418
 8006884:	200143e8 	.word	0x200143e8

08006888 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b08c      	sub	sp, #48	@ 0x30
 800688c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800688e:	f3ef 8311 	mrs	r3, BASEPRI
 8006892:	f04f 0120 	mov.w	r1, #32
 8006896:	f381 8811 	msr	BASEPRI, r1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	4845      	ldr	r0, [pc, #276]	@ (80069b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800689e:	f7fe ff8e 	bl	80057be <_PreparePacket>
 80068a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ac:	4b42      	ldr	r3, [pc, #264]	@ (80069b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b2:	e00b      	b.n	80068cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80068b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c8:	09db      	lsrs	r3, r3, #7
 80068ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80068d0:	d8f0      	bhi.n	80068b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80068d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e6:	4b34      	ldr	r3, [pc, #208]	@ (80069b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	623b      	str	r3, [r7, #32]
 80068ec:	e00b      	b.n	8006906 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	1c59      	adds	r1, r3, #1
 80068f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80068f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	09db      	lsrs	r3, r3, #7
 8006904:	623b      	str	r3, [r7, #32]
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	2b7f      	cmp	r3, #127	@ 0x7f
 800690a:	d8f0      	bhi.n	80068ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	627a      	str	r2, [r7, #36]	@ 0x24
 8006912:	6a3a      	ldr	r2, [r7, #32]
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	4b25      	ldr	r3, [pc, #148]	@ (80069b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	e00b      	b.n	8006940 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	61f9      	str	r1, [r7, #28]
 8006932:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	09db      	lsrs	r3, r3, #7
 800693e:	61bb      	str	r3, [r7, #24]
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b7f      	cmp	r3, #127	@ 0x7f
 8006944:	d8f0      	bhi.n	8006928 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	61fa      	str	r2, [r7, #28]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	e00b      	b.n	8006978 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	6179      	str	r1, [r7, #20]
 800696a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	09db      	lsrs	r3, r3, #7
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2b7f      	cmp	r3, #127	@ 0x7f
 800697c:	d8f0      	bhi.n	8006960 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	617a      	str	r2, [r7, #20]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800698e:	2218      	movs	r2, #24
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	68b8      	ldr	r0, [r7, #8]
 8006994:	f7ff f804 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800699e:	4b06      	ldr	r3, [pc, #24]	@ (80069b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80069a6:	4b04      	ldr	r3, [pc, #16]	@ (80069b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	4798      	blx	r3
  }
}
 80069ac:	bf00      	nop
 80069ae:	3730      	adds	r7, #48	@ 0x30
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20014418 	.word	0x20014418
 80069b8:	200143e8 	.word	0x200143e8

080069bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b092      	sub	sp, #72	@ 0x48
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80069c4:	f3ef 8311 	mrs	r3, BASEPRI
 80069c8:	f04f 0120 	mov.w	r1, #32
 80069cc:	f381 8811 	msr	BASEPRI, r1
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	486a      	ldr	r0, [pc, #424]	@ (8006b7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80069d4:	f7fe fef3 	bl	80057be <_PreparePacket>
 80069d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	4b66      	ldr	r3, [pc, #408]	@ (8006b80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ee:	e00b      	b.n	8006a08 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80069f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	6479      	str	r1, [r7, #68]	@ 0x44
 80069fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a04:	09db      	lsrs	r3, r3, #7
 8006a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a0c:	d8f0      	bhi.n	80069f0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a28:	e00b      	b.n	8006a42 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a30:	1c59      	adds	r1, r3, #1
 8006a32:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3e:	09db      	lsrs	r3, r3, #7
 8006a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a46:	d8f0      	bhi.n	8006a2a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a56:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	4619      	mov	r1, r3
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7fe fe5f 	bl	8005724 <_EncodeStr>
 8006a66:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a68:	2209      	movs	r2, #9
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	6938      	ldr	r0, [r7, #16]
 8006a6e:	f7fe ff97 	bl	80059a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b40      	ldr	r3, [pc, #256]	@ (8006b80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a86:	e00b      	b.n	8006aa0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	6379      	str	r1, [r7, #52]	@ 0x34
 8006a92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	09db      	lsrs	r3, r3, #7
 8006a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa4:	d8f0      	bhi.n	8006a88 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	637a      	str	r2, [r7, #52]	@ 0x34
 8006aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ac0:	e00b      	b.n	8006ada <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac8:	1c59      	adds	r1, r3, #1
 8006aca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006acc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad6:	09db      	lsrs	r3, r3, #7
 8006ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ade:	d8f0      	bhi.n	8006ac2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	e00b      	b.n	8006b14 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	09db      	lsrs	r3, r3, #7
 8006b12:	623b      	str	r3, [r7, #32]
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b18:	d8f0      	bhi.n	8006afc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b20:	6a3a      	ldr	r2, [r7, #32]
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	e00b      	b.n	8006b4c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	1c59      	adds	r1, r3, #1
 8006b3c:	61f9      	str	r1, [r7, #28]
 8006b3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	09db      	lsrs	r3, r3, #7
 8006b4a:	61bb      	str	r3, [r7, #24]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b50:	d8f0      	bhi.n	8006b34 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	61fa      	str	r2, [r7, #28]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b62:	2215      	movs	r2, #21
 8006b64:	68f9      	ldr	r1, [r7, #12]
 8006b66:	6938      	ldr	r0, [r7, #16]
 8006b68:	f7fe ff1a 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f383 8811 	msr	BASEPRI, r3
}
 8006b72:	bf00      	nop
 8006b74:	3748      	adds	r7, #72	@ 0x48
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20014418 	.word	0x20014418
 8006b80:	200143e8 	.word	0x200143e8

08006b84 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b88:	4b07      	ldr	r3, [pc, #28]	@ (8006ba8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006b90:	4b05      	ldr	r3, [pc, #20]	@ (8006ba8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006b9a:	4b03      	ldr	r3, [pc, #12]	@ (8006ba8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	4798      	blx	r3
  }
}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200143e8 	.word	0x200143e8

08006bac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb8:	f04f 0120 	mov.w	r1, #32
 8006bbc:	f381 8811 	msr	BASEPRI, r1
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	480b      	ldr	r0, [pc, #44]	@ (8006bf0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006bc4:	f7fe fdfb 	bl	80057be <_PreparePacket>
 8006bc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bca:	2280      	movs	r2, #128	@ 0x80
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	6938      	ldr	r0, [r7, #16]
 8006bd0:	f7fe fda8 	bl	8005724 <_EncodeStr>
 8006bd4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006bd6:	220e      	movs	r2, #14
 8006bd8:	68f9      	ldr	r1, [r7, #12]
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f7fe fee0 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f383 8811 	msr	BASEPRI, r3
}
 8006be6:	bf00      	nop
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20014418 	.word	0x20014418

08006bf4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006bfa:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01a      	beq.n	8006c38 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006c02:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d015      	beq.n	8006c38 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006c0c:	4b10      	ldr	r3, [pc, #64]	@ (8006c50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4798      	blx	r3
 8006c14:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c18:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	f04f 0300 	mov.w	r3, #0
 8006c26:	000a      	movs	r2, r1
 8006c28:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4621      	mov	r1, r4
 8006c30:	200d      	movs	r0, #13
 8006c32:	f7ff fbe5 	bl	8006400 <SEGGER_SYSVIEW_RecordU32x2>
 8006c36:	e006      	b.n	8006c46 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006c38:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	200c      	movs	r0, #12
 8006c40:	f7ff fba2 	bl	8006388 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd90      	pop	{r4, r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200143e8 	.word	0x200143e8
 8006c54:	e0001004 	.word	0xe0001004

08006c58 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c62:	f04f 0120 	mov.w	r1, #32
 8006c66:	f381 8811 	msr	BASEPRI, r1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	4819      	ldr	r0, [pc, #100]	@ (8006cd4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c6e:	f7fe fda6 	bl	80057be <_PreparePacket>
 8006c72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c78:	4b17      	ldr	r3, [pc, #92]	@ (8006cd8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	e00b      	b.n	8006ca4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	1c59      	adds	r1, r3, #1
 8006c94:	6179      	str	r1, [r7, #20]
 8006c96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	09db      	lsrs	r3, r3, #7
 8006ca2:	613b      	str	r3, [r7, #16]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ca8:	d8f0      	bhi.n	8006c8c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	617a      	str	r2, [r7, #20]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006cba:	2202      	movs	r2, #2
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	68b8      	ldr	r0, [r7, #8]
 8006cc0:	f7fe fe6e 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f383 8811 	msr	BASEPRI, r3
}
 8006cca:	bf00      	nop
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20014418 	.word	0x20014418
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce6:	f04f 0120 	mov.w	r1, #32
 8006cea:	f381 8811 	msr	BASEPRI, r1
 8006cee:	607b      	str	r3, [r7, #4]
 8006cf0:	4807      	ldr	r0, [pc, #28]	@ (8006d10 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006cf2:	f7fe fd64 	bl	80057be <_PreparePacket>
 8006cf6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6838      	ldr	r0, [r7, #0]
 8006cfe:	f7fe fe4f 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f383 8811 	msr	BASEPRI, r3
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20014418 	.word	0x20014418

08006d14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d1e:	f04f 0120 	mov.w	r1, #32
 8006d22:	f381 8811 	msr	BASEPRI, r1
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	4807      	ldr	r0, [pc, #28]	@ (8006d48 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d2a:	f7fe fd48 	bl	80057be <_PreparePacket>
 8006d2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d30:	2212      	movs	r2, #18
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6838      	ldr	r0, [r7, #0]
 8006d36:	f7fe fe33 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f383 8811 	msr	BASEPRI, r3
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20014418 	.word	0x20014418

08006d4c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d52:	f3ef 8311 	mrs	r3, BASEPRI
 8006d56:	f04f 0120 	mov.w	r1, #32
 8006d5a:	f381 8811 	msr	BASEPRI, r1
 8006d5e:	607b      	str	r3, [r7, #4]
 8006d60:	4807      	ldr	r0, [pc, #28]	@ (8006d80 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d62:	f7fe fd2c 	bl	80057be <_PreparePacket>
 8006d66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006d68:	2211      	movs	r2, #17
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6838      	ldr	r0, [r7, #0]
 8006d6e:	f7fe fe17 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f383 8811 	msr	BASEPRI, r3
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20014418 	.word	0x20014418

08006d84 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d90:	f04f 0120 	mov.w	r1, #32
 8006d94:	f381 8811 	msr	BASEPRI, r1
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	4819      	ldr	r0, [pc, #100]	@ (8006e00 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006d9c:	f7fe fd0f 	bl	80057be <_PreparePacket>
 8006da0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006da6:	4b17      	ldr	r3, [pc, #92]	@ (8006e04 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	61fb      	str	r3, [r7, #28]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	e00b      	b.n	8006dd2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	1c59      	adds	r1, r3, #1
 8006dc2:	61f9      	str	r1, [r7, #28]
 8006dc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	09db      	lsrs	r3, r3, #7
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd6:	d8f0      	bhi.n	8006dba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	61fa      	str	r2, [r7, #28]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006de8:	2208      	movs	r2, #8
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	6938      	ldr	r0, [r7, #16]
 8006dee:	f7fe fdd7 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f383 8811 	msr	BASEPRI, r3
}
 8006df8:	bf00      	nop
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20014418 	.word	0x20014418
 8006e04:	200143e8 	.word	0x200143e8

08006e08 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e10:	f3ef 8311 	mrs	r3, BASEPRI
 8006e14:	f04f 0120 	mov.w	r1, #32
 8006e18:	f381 8811 	msr	BASEPRI, r1
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	4819      	ldr	r0, [pc, #100]	@ (8006e84 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e20:	f7fe fccd 	bl	80057be <_PreparePacket>
 8006e24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e2a:	4b17      	ldr	r3, [pc, #92]	@ (8006e88 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	61fb      	str	r3, [r7, #28]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e00b      	b.n	8006e56 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	1c59      	adds	r1, r3, #1
 8006e46:	61f9      	str	r1, [r7, #28]
 8006e48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	09db      	lsrs	r3, r3, #7
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e5a:	d8f0      	bhi.n	8006e3e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	61fa      	str	r2, [r7, #28]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	6938      	ldr	r0, [r7, #16]
 8006e72:	f7fe fd95 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f383 8811 	msr	BASEPRI, r3
}
 8006e7c:	bf00      	nop
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20014418 	.word	0x20014418
 8006e88:	200143e8 	.word	0x200143e8

08006e8c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e94:	f3ef 8311 	mrs	r3, BASEPRI
 8006e98:	f04f 0120 	mov.w	r1, #32
 8006e9c:	f381 8811 	msr	BASEPRI, r1
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	4819      	ldr	r0, [pc, #100]	@ (8006f08 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ea4:	f7fe fc8b 	bl	80057be <_PreparePacket>
 8006ea8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eae:	4b17      	ldr	r3, [pc, #92]	@ (8006f0c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	61bb      	str	r3, [r7, #24]
 8006ec0:	e00b      	b.n	8006eda <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	1c59      	adds	r1, r3, #1
 8006eca:	61f9      	str	r1, [r7, #28]
 8006ecc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	09db      	lsrs	r3, r3, #7
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ede:	d8f0      	bhi.n	8006ec2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	61fa      	str	r2, [r7, #28]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ef0:	2206      	movs	r2, #6
 8006ef2:	68f9      	ldr	r1, [r7, #12]
 8006ef4:	6938      	ldr	r0, [r7, #16]
 8006ef6:	f7fe fd53 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f383 8811 	msr	BASEPRI, r3
}
 8006f00:	bf00      	nop
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20014418 	.word	0x20014418
 8006f0c:	200143e8 	.word	0x200143e8

08006f10 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	@ 0x28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f1e:	f04f 0120 	mov.w	r1, #32
 8006f22:	f381 8811 	msr	BASEPRI, r1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	4827      	ldr	r0, [pc, #156]	@ (8006fc8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f2a:	f7fe fc48 	bl	80057be <_PreparePacket>
 8006f2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f34:	4b25      	ldr	r3, [pc, #148]	@ (8006fcc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	623b      	str	r3, [r7, #32]
 8006f46:	e00b      	b.n	8006f60 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	1c59      	adds	r1, r3, #1
 8006f50:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	09db      	lsrs	r3, r3, #7
 8006f5e:	623b      	str	r3, [r7, #32]
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f64:	d8f0      	bhi.n	8006f48 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f6c:	6a3a      	ldr	r2, [r7, #32]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e00b      	b.n	8006f98 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	1c59      	adds	r1, r3, #1
 8006f88:	61f9      	str	r1, [r7, #28]
 8006f8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	09db      	lsrs	r3, r3, #7
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f9c:	d8f0      	bhi.n	8006f80 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	61fa      	str	r2, [r7, #28]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006fae:	2207      	movs	r2, #7
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	6938      	ldr	r0, [r7, #16]
 8006fb4:	f7fe fcf4 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f383 8811 	msr	BASEPRI, r3
}
 8006fbe:	bf00      	nop
 8006fc0:	3728      	adds	r7, #40	@ 0x28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20014418 	.word	0x20014418
 8006fcc:	200143e8 	.word	0x200143e8

08006fd0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006fd8:	4b04      	ldr	r3, [pc, #16]	@ (8006fec <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	1ad3      	subs	r3, r2, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	200143e8 	.word	0x200143e8

08006ff0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08c      	sub	sp, #48	@ 0x30
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80070e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d06d      	beq.n	80070de <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007002:	4b39      	ldr	r3, [pc, #228]	@ (80070e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007008:	2300      	movs	r3, #0
 800700a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800700c:	e008      	b.n	8007020 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	3301      	adds	r3, #1
 800701e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007024:	429a      	cmp	r2, r3
 8007026:	d3f2      	bcc.n	800700e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007028:	e000      	b.n	800702c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800702a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d055      	beq.n	80070de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007032:	f3ef 8311 	mrs	r3, BASEPRI
 8007036:	f04f 0120 	mov.w	r1, #32
 800703a:	f381 8811 	msr	BASEPRI, r1
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	482a      	ldr	r0, [pc, #168]	@ (80070ec <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007042:	f7fe fbbc 	bl	80057be <_PreparePacket>
 8007046:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	623b      	str	r3, [r7, #32]
 8007054:	e00b      	b.n	800706e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	1c59      	adds	r1, r3, #1
 800705e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007060:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	09db      	lsrs	r3, r3, #7
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	2b7f      	cmp	r3, #127	@ 0x7f
 8007072:	d8f0      	bhi.n	8007056 <SEGGER_SYSVIEW_SendModule+0x66>
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	627a      	str	r2, [r7, #36]	@ 0x24
 800707a:	6a3a      	ldr	r2, [r7, #32]
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	e00b      	b.n	80070a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	1c59      	adds	r1, r3, #1
 8007098:	61f9      	str	r1, [r7, #28]
 800709a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	09db      	lsrs	r3, r3, #7
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ac:	d8f0      	bhi.n	8007090 <SEGGER_SYSVIEW_SendModule+0xa0>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	61fa      	str	r2, [r7, #28]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2280      	movs	r2, #128	@ 0x80
 80070c4:	4619      	mov	r1, r3
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7fe fb2c 	bl	8005724 <_EncodeStr>
 80070cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80070ce:	2216      	movs	r2, #22
 80070d0:	68f9      	ldr	r1, [r7, #12]
 80070d2:	6938      	ldr	r0, [r7, #16]
 80070d4:	f7fe fc64 	bl	80059a0 <_SendPacket>
      RECORD_END();
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80070de:	bf00      	nop
 80070e0:	3730      	adds	r7, #48	@ 0x30
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20014410 	.word	0x20014410
 80070ec:	20014418 	.word	0x20014418

080070f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80070f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00f      	beq.n	800711e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80070fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007128 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1f2      	bne.n	8007104 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20014410 	.word	0x20014410

0800712c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007132:	f3ef 8311 	mrs	r3, BASEPRI
 8007136:	f04f 0120 	mov.w	r1, #32
 800713a:	f381 8811 	msr	BASEPRI, r1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	4817      	ldr	r0, [pc, #92]	@ (80071a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007142:	f7fe fb3c 	bl	80057be <_PreparePacket>
 8007146:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	4b14      	ldr	r3, [pc, #80]	@ (80071a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	613b      	str	r3, [r7, #16]
 8007156:	e00b      	b.n	8007170 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	6179      	str	r1, [r7, #20]
 8007162:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	09db      	lsrs	r3, r3, #7
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b7f      	cmp	r3, #127	@ 0x7f
 8007174:	d8f0      	bhi.n	8007158 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	617a      	str	r2, [r7, #20]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007186:	221b      	movs	r2, #27
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	68b8      	ldr	r0, [r7, #8]
 800718c:	f7fe fc08 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f383 8811 	msr	BASEPRI, r3
}
 8007196:	bf00      	nop
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20014418 	.word	0x20014418
 80071a4:	20014414 	.word	0x20014414

080071a8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80071a8:	b40f      	push	{r0, r1, r2, r3}
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80071b6:	1d3b      	adds	r3, r7, #4
 80071b8:	461a      	mov	r2, r3
 80071ba:	2100      	movs	r1, #0
 80071bc:	6938      	ldr	r0, [r7, #16]
 80071be:	f7fe fe79 	bl	8005eb4 <_VPrintTarget>
  va_end(ParamList);
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071cc:	b004      	add	sp, #16
 80071ce:	4770      	bx	lr

080071d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	@ 0x28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071d8:	f3ef 8311 	mrs	r3, BASEPRI
 80071dc:	f04f 0120 	mov.w	r1, #32
 80071e0:	f381 8811 	msr	BASEPRI, r1
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	4827      	ldr	r0, [pc, #156]	@ (8007284 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071e8:	f7fe fae9 	bl	80057be <_PreparePacket>
 80071ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071ee:	2280      	movs	r2, #128	@ 0x80
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	6938      	ldr	r0, [r7, #16]
 80071f4:	f7fe fa96 	bl	8005724 <_EncodeStr>
 80071f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071fe:	2301      	movs	r3, #1
 8007200:	623b      	str	r3, [r7, #32]
 8007202:	e00b      	b.n	800721c <SEGGER_SYSVIEW_Warn+0x4c>
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720a:	1c59      	adds	r1, r3, #1
 800720c:	6279      	str	r1, [r7, #36]	@ 0x24
 800720e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	09db      	lsrs	r3, r3, #7
 800721a:	623b      	str	r3, [r7, #32]
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007220:	d8f0      	bhi.n	8007204 <SEGGER_SYSVIEW_Warn+0x34>
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	627a      	str	r2, [r7, #36]	@ 0x24
 8007228:	6a3a      	ldr	r2, [r7, #32]
 800722a:	b2d2      	uxtb	r2, r2
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	2300      	movs	r3, #0
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e00b      	b.n	8007254 <SEGGER_SYSVIEW_Warn+0x84>
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	b2da      	uxtb	r2, r3
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	1c59      	adds	r1, r3, #1
 8007244:	61f9      	str	r1, [r7, #28]
 8007246:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	09db      	lsrs	r3, r3, #7
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2b7f      	cmp	r3, #127	@ 0x7f
 8007258:	d8f0      	bhi.n	800723c <SEGGER_SYSVIEW_Warn+0x6c>
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	61fa      	str	r2, [r7, #28]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800726a:	221a      	movs	r2, #26
 800726c:	68f9      	ldr	r1, [r7, #12]
 800726e:	6938      	ldr	r0, [r7, #16]
 8007270:	f7fe fb96 	bl	80059a0 <_SendPacket>
  RECORD_END();
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f383 8811 	msr	BASEPRI, r3
}
 800727a:	bf00      	nop
 800727c:	3728      	adds	r7, #40	@ 0x28
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20014418 	.word	0x20014418

08007288 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800728c:	4b13      	ldr	r3, [pc, #76]	@ (80072dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800728e:	7e1b      	ldrb	r3, [r3, #24]
 8007290:	4619      	mov	r1, r3
 8007292:	4a13      	ldr	r2, [pc, #76]	@ (80072e0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007294:	460b      	mov	r3, r1
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	440b      	add	r3, r1
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	336c      	adds	r3, #108	@ 0x6c
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	4b0e      	ldr	r3, [pc, #56]	@ (80072dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072a4:	7e1b      	ldrb	r3, [r3, #24]
 80072a6:	4618      	mov	r0, r3
 80072a8:	490d      	ldr	r1, [pc, #52]	@ (80072e0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80072aa:	4603      	mov	r3, r0
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4403      	add	r3, r0
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	440b      	add	r3, r1
 80072b4:	3370      	adds	r3, #112	@ 0x70
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d00b      	beq.n	80072d4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072be:	789b      	ldrb	r3, [r3, #2]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d107      	bne.n	80072d4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80072ca:	f7fe fa85 	bl	80057d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80072ce:	4b03      	ldr	r3, [pc, #12]	@ (80072dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80072d4:	4b01      	ldr	r3, [pc, #4]	@ (80072dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	200143e8 	.word	0x200143e8
 80072e0:	20012f28 	.word	0x20012f28

080072e4 <sniprintf>:
 80072e4:	b40c      	push	{r2, r3}
 80072e6:	b530      	push	{r4, r5, lr}
 80072e8:	4b17      	ldr	r3, [pc, #92]	@ (8007348 <sniprintf+0x64>)
 80072ea:	1e0c      	subs	r4, r1, #0
 80072ec:	681d      	ldr	r5, [r3, #0]
 80072ee:	b09d      	sub	sp, #116	@ 0x74
 80072f0:	da08      	bge.n	8007304 <sniprintf+0x20>
 80072f2:	238b      	movs	r3, #139	@ 0x8b
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295
 80072fa:	b01d      	add	sp, #116	@ 0x74
 80072fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007300:	b002      	add	sp, #8
 8007302:	4770      	bx	lr
 8007304:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007308:	f8ad 3014 	strh.w	r3, [sp, #20]
 800730c:	bf14      	ite	ne
 800730e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007312:	4623      	moveq	r3, r4
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	9307      	str	r3, [sp, #28]
 8007318:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800731c:	9002      	str	r0, [sp, #8]
 800731e:	9006      	str	r0, [sp, #24]
 8007320:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007324:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007326:	ab21      	add	r3, sp, #132	@ 0x84
 8007328:	a902      	add	r1, sp, #8
 800732a:	4628      	mov	r0, r5
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	f000 f9ad 	bl	800768c <_svfiprintf_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	bfbc      	itt	lt
 8007336:	238b      	movlt	r3, #139	@ 0x8b
 8007338:	602b      	strlt	r3, [r5, #0]
 800733a:	2c00      	cmp	r4, #0
 800733c:	d0dd      	beq.n	80072fa <sniprintf+0x16>
 800733e:	9b02      	ldr	r3, [sp, #8]
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
 8007344:	e7d9      	b.n	80072fa <sniprintf+0x16>
 8007346:	bf00      	nop
 8007348:	2000001c 	.word	0x2000001c

0800734c <memcmp>:
 800734c:	b510      	push	{r4, lr}
 800734e:	3901      	subs	r1, #1
 8007350:	4402      	add	r2, r0
 8007352:	4290      	cmp	r0, r2
 8007354:	d101      	bne.n	800735a <memcmp+0xe>
 8007356:	2000      	movs	r0, #0
 8007358:	e005      	b.n	8007366 <memcmp+0x1a>
 800735a:	7803      	ldrb	r3, [r0, #0]
 800735c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007360:	42a3      	cmp	r3, r4
 8007362:	d001      	beq.n	8007368 <memcmp+0x1c>
 8007364:	1b18      	subs	r0, r3, r4
 8007366:	bd10      	pop	{r4, pc}
 8007368:	3001      	adds	r0, #1
 800736a:	e7f2      	b.n	8007352 <memcmp+0x6>

0800736c <memset>:
 800736c:	4402      	add	r2, r0
 800736e:	4603      	mov	r3, r0
 8007370:	4293      	cmp	r3, r2
 8007372:	d100      	bne.n	8007376 <memset+0xa>
 8007374:	4770      	bx	lr
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7f9      	b.n	8007370 <memset+0x4>

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	4d0d      	ldr	r5, [pc, #52]	@ (80073b4 <__libc_init_array+0x38>)
 8007380:	4c0d      	ldr	r4, [pc, #52]	@ (80073b8 <__libc_init_array+0x3c>)
 8007382:	1b64      	subs	r4, r4, r5
 8007384:	10a4      	asrs	r4, r4, #2
 8007386:	2600      	movs	r6, #0
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	4d0b      	ldr	r5, [pc, #44]	@ (80073bc <__libc_init_array+0x40>)
 800738e:	4c0c      	ldr	r4, [pc, #48]	@ (80073c0 <__libc_init_array+0x44>)
 8007390:	f000 fc74 	bl	8007c7c <_init>
 8007394:	1b64      	subs	r4, r4, r5
 8007396:	10a4      	asrs	r4, r4, #2
 8007398:	2600      	movs	r6, #0
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	08007e38 	.word	0x08007e38
 80073b8:	08007e38 	.word	0x08007e38
 80073bc:	08007e38 	.word	0x08007e38
 80073c0:	08007e3c 	.word	0x08007e3c

080073c4 <__retarget_lock_acquire_recursive>:
 80073c4:	4770      	bx	lr

080073c6 <__retarget_lock_release_recursive>:
 80073c6:	4770      	bx	lr

080073c8 <memcpy>:
 80073c8:	440a      	add	r2, r1
 80073ca:	4291      	cmp	r1, r2
 80073cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80073d0:	d100      	bne.n	80073d4 <memcpy+0xc>
 80073d2:	4770      	bx	lr
 80073d4:	b510      	push	{r4, lr}
 80073d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073de:	4291      	cmp	r1, r2
 80073e0:	d1f9      	bne.n	80073d6 <memcpy+0xe>
 80073e2:	bd10      	pop	{r4, pc}

080073e4 <_free_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4605      	mov	r5, r0
 80073e8:	2900      	cmp	r1, #0
 80073ea:	d041      	beq.n	8007470 <_free_r+0x8c>
 80073ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f0:	1f0c      	subs	r4, r1, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfb8      	it	lt
 80073f6:	18e4      	addlt	r4, r4, r3
 80073f8:	f000 f8e0 	bl	80075bc <__malloc_lock>
 80073fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007474 <_free_r+0x90>)
 80073fe:	6813      	ldr	r3, [r2, #0]
 8007400:	b933      	cbnz	r3, 8007410 <_free_r+0x2c>
 8007402:	6063      	str	r3, [r4, #4]
 8007404:	6014      	str	r4, [r2, #0]
 8007406:	4628      	mov	r0, r5
 8007408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800740c:	f000 b8dc 	b.w	80075c8 <__malloc_unlock>
 8007410:	42a3      	cmp	r3, r4
 8007412:	d908      	bls.n	8007426 <_free_r+0x42>
 8007414:	6820      	ldr	r0, [r4, #0]
 8007416:	1821      	adds	r1, r4, r0
 8007418:	428b      	cmp	r3, r1
 800741a:	bf01      	itttt	eq
 800741c:	6819      	ldreq	r1, [r3, #0]
 800741e:	685b      	ldreq	r3, [r3, #4]
 8007420:	1809      	addeq	r1, r1, r0
 8007422:	6021      	streq	r1, [r4, #0]
 8007424:	e7ed      	b.n	8007402 <_free_r+0x1e>
 8007426:	461a      	mov	r2, r3
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	b10b      	cbz	r3, 8007430 <_free_r+0x4c>
 800742c:	42a3      	cmp	r3, r4
 800742e:	d9fa      	bls.n	8007426 <_free_r+0x42>
 8007430:	6811      	ldr	r1, [r2, #0]
 8007432:	1850      	adds	r0, r2, r1
 8007434:	42a0      	cmp	r0, r4
 8007436:	d10b      	bne.n	8007450 <_free_r+0x6c>
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	4401      	add	r1, r0
 800743c:	1850      	adds	r0, r2, r1
 800743e:	4283      	cmp	r3, r0
 8007440:	6011      	str	r1, [r2, #0]
 8007442:	d1e0      	bne.n	8007406 <_free_r+0x22>
 8007444:	6818      	ldr	r0, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	6053      	str	r3, [r2, #4]
 800744a:	4408      	add	r0, r1
 800744c:	6010      	str	r0, [r2, #0]
 800744e:	e7da      	b.n	8007406 <_free_r+0x22>
 8007450:	d902      	bls.n	8007458 <_free_r+0x74>
 8007452:	230c      	movs	r3, #12
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	e7d6      	b.n	8007406 <_free_r+0x22>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	1821      	adds	r1, r4, r0
 800745c:	428b      	cmp	r3, r1
 800745e:	bf04      	itt	eq
 8007460:	6819      	ldreq	r1, [r3, #0]
 8007462:	685b      	ldreq	r3, [r3, #4]
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	bf04      	itt	eq
 8007468:	1809      	addeq	r1, r1, r0
 800746a:	6021      	streq	r1, [r4, #0]
 800746c:	6054      	str	r4, [r2, #4]
 800746e:	e7ca      	b.n	8007406 <_free_r+0x22>
 8007470:	bd38      	pop	{r3, r4, r5, pc}
 8007472:	bf00      	nop
 8007474:	20014640 	.word	0x20014640

08007478 <sbrk_aligned>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	4e0f      	ldr	r6, [pc, #60]	@ (80074b8 <sbrk_aligned+0x40>)
 800747c:	460c      	mov	r4, r1
 800747e:	6831      	ldr	r1, [r6, #0]
 8007480:	4605      	mov	r5, r0
 8007482:	b911      	cbnz	r1, 800748a <sbrk_aligned+0x12>
 8007484:	f000 fba6 	bl	8007bd4 <_sbrk_r>
 8007488:	6030      	str	r0, [r6, #0]
 800748a:	4621      	mov	r1, r4
 800748c:	4628      	mov	r0, r5
 800748e:	f000 fba1 	bl	8007bd4 <_sbrk_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	d103      	bne.n	800749e <sbrk_aligned+0x26>
 8007496:	f04f 34ff 	mov.w	r4, #4294967295
 800749a:	4620      	mov	r0, r4
 800749c:	bd70      	pop	{r4, r5, r6, pc}
 800749e:	1cc4      	adds	r4, r0, #3
 80074a0:	f024 0403 	bic.w	r4, r4, #3
 80074a4:	42a0      	cmp	r0, r4
 80074a6:	d0f8      	beq.n	800749a <sbrk_aligned+0x22>
 80074a8:	1a21      	subs	r1, r4, r0
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 fb92 	bl	8007bd4 <_sbrk_r>
 80074b0:	3001      	adds	r0, #1
 80074b2:	d1f2      	bne.n	800749a <sbrk_aligned+0x22>
 80074b4:	e7ef      	b.n	8007496 <sbrk_aligned+0x1e>
 80074b6:	bf00      	nop
 80074b8:	2001463c 	.word	0x2001463c

080074bc <_malloc_r>:
 80074bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c0:	1ccd      	adds	r5, r1, #3
 80074c2:	f025 0503 	bic.w	r5, r5, #3
 80074c6:	3508      	adds	r5, #8
 80074c8:	2d0c      	cmp	r5, #12
 80074ca:	bf38      	it	cc
 80074cc:	250c      	movcc	r5, #12
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	4606      	mov	r6, r0
 80074d2:	db01      	blt.n	80074d8 <_malloc_r+0x1c>
 80074d4:	42a9      	cmp	r1, r5
 80074d6:	d904      	bls.n	80074e2 <_malloc_r+0x26>
 80074d8:	230c      	movs	r3, #12
 80074da:	6033      	str	r3, [r6, #0]
 80074dc:	2000      	movs	r0, #0
 80074de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075b8 <_malloc_r+0xfc>
 80074e6:	f000 f869 	bl	80075bc <__malloc_lock>
 80074ea:	f8d8 3000 	ldr.w	r3, [r8]
 80074ee:	461c      	mov	r4, r3
 80074f0:	bb44      	cbnz	r4, 8007544 <_malloc_r+0x88>
 80074f2:	4629      	mov	r1, r5
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7ff ffbf 	bl	8007478 <sbrk_aligned>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	4604      	mov	r4, r0
 80074fe:	d158      	bne.n	80075b2 <_malloc_r+0xf6>
 8007500:	f8d8 4000 	ldr.w	r4, [r8]
 8007504:	4627      	mov	r7, r4
 8007506:	2f00      	cmp	r7, #0
 8007508:	d143      	bne.n	8007592 <_malloc_r+0xd6>
 800750a:	2c00      	cmp	r4, #0
 800750c:	d04b      	beq.n	80075a6 <_malloc_r+0xea>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	4639      	mov	r1, r7
 8007512:	4630      	mov	r0, r6
 8007514:	eb04 0903 	add.w	r9, r4, r3
 8007518:	f000 fb5c 	bl	8007bd4 <_sbrk_r>
 800751c:	4581      	cmp	r9, r0
 800751e:	d142      	bne.n	80075a6 <_malloc_r+0xea>
 8007520:	6821      	ldr	r1, [r4, #0]
 8007522:	1a6d      	subs	r5, r5, r1
 8007524:	4629      	mov	r1, r5
 8007526:	4630      	mov	r0, r6
 8007528:	f7ff ffa6 	bl	8007478 <sbrk_aligned>
 800752c:	3001      	adds	r0, #1
 800752e:	d03a      	beq.n	80075a6 <_malloc_r+0xea>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	442b      	add	r3, r5
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	f8d8 3000 	ldr.w	r3, [r8]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	bb62      	cbnz	r2, 8007598 <_malloc_r+0xdc>
 800753e:	f8c8 7000 	str.w	r7, [r8]
 8007542:	e00f      	b.n	8007564 <_malloc_r+0xa8>
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	1b52      	subs	r2, r2, r5
 8007548:	d420      	bmi.n	800758c <_malloc_r+0xd0>
 800754a:	2a0b      	cmp	r2, #11
 800754c:	d917      	bls.n	800757e <_malloc_r+0xc2>
 800754e:	1961      	adds	r1, r4, r5
 8007550:	42a3      	cmp	r3, r4
 8007552:	6025      	str	r5, [r4, #0]
 8007554:	bf18      	it	ne
 8007556:	6059      	strne	r1, [r3, #4]
 8007558:	6863      	ldr	r3, [r4, #4]
 800755a:	bf08      	it	eq
 800755c:	f8c8 1000 	streq.w	r1, [r8]
 8007560:	5162      	str	r2, [r4, r5]
 8007562:	604b      	str	r3, [r1, #4]
 8007564:	4630      	mov	r0, r6
 8007566:	f000 f82f 	bl	80075c8 <__malloc_unlock>
 800756a:	f104 000b 	add.w	r0, r4, #11
 800756e:	1d23      	adds	r3, r4, #4
 8007570:	f020 0007 	bic.w	r0, r0, #7
 8007574:	1ac2      	subs	r2, r0, r3
 8007576:	bf1c      	itt	ne
 8007578:	1a1b      	subne	r3, r3, r0
 800757a:	50a3      	strne	r3, [r4, r2]
 800757c:	e7af      	b.n	80074de <_malloc_r+0x22>
 800757e:	6862      	ldr	r2, [r4, #4]
 8007580:	42a3      	cmp	r3, r4
 8007582:	bf0c      	ite	eq
 8007584:	f8c8 2000 	streq.w	r2, [r8]
 8007588:	605a      	strne	r2, [r3, #4]
 800758a:	e7eb      	b.n	8007564 <_malloc_r+0xa8>
 800758c:	4623      	mov	r3, r4
 800758e:	6864      	ldr	r4, [r4, #4]
 8007590:	e7ae      	b.n	80074f0 <_malloc_r+0x34>
 8007592:	463c      	mov	r4, r7
 8007594:	687f      	ldr	r7, [r7, #4]
 8007596:	e7b6      	b.n	8007506 <_malloc_r+0x4a>
 8007598:	461a      	mov	r2, r3
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	42a3      	cmp	r3, r4
 800759e:	d1fb      	bne.n	8007598 <_malloc_r+0xdc>
 80075a0:	2300      	movs	r3, #0
 80075a2:	6053      	str	r3, [r2, #4]
 80075a4:	e7de      	b.n	8007564 <_malloc_r+0xa8>
 80075a6:	230c      	movs	r3, #12
 80075a8:	6033      	str	r3, [r6, #0]
 80075aa:	4630      	mov	r0, r6
 80075ac:	f000 f80c 	bl	80075c8 <__malloc_unlock>
 80075b0:	e794      	b.n	80074dc <_malloc_r+0x20>
 80075b2:	6005      	str	r5, [r0, #0]
 80075b4:	e7d6      	b.n	8007564 <_malloc_r+0xa8>
 80075b6:	bf00      	nop
 80075b8:	20014640 	.word	0x20014640

080075bc <__malloc_lock>:
 80075bc:	4801      	ldr	r0, [pc, #4]	@ (80075c4 <__malloc_lock+0x8>)
 80075be:	f7ff bf01 	b.w	80073c4 <__retarget_lock_acquire_recursive>
 80075c2:	bf00      	nop
 80075c4:	20014638 	.word	0x20014638

080075c8 <__malloc_unlock>:
 80075c8:	4801      	ldr	r0, [pc, #4]	@ (80075d0 <__malloc_unlock+0x8>)
 80075ca:	f7ff befc 	b.w	80073c6 <__retarget_lock_release_recursive>
 80075ce:	bf00      	nop
 80075d0:	20014638 	.word	0x20014638

080075d4 <__ssputs_r>:
 80075d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	688e      	ldr	r6, [r1, #8]
 80075da:	461f      	mov	r7, r3
 80075dc:	42be      	cmp	r6, r7
 80075de:	680b      	ldr	r3, [r1, #0]
 80075e0:	4682      	mov	sl, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	4690      	mov	r8, r2
 80075e6:	d82d      	bhi.n	8007644 <__ssputs_r+0x70>
 80075e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075f0:	d026      	beq.n	8007640 <__ssputs_r+0x6c>
 80075f2:	6965      	ldr	r5, [r4, #20]
 80075f4:	6909      	ldr	r1, [r1, #16]
 80075f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075fa:	eba3 0901 	sub.w	r9, r3, r1
 80075fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007602:	1c7b      	adds	r3, r7, #1
 8007604:	444b      	add	r3, r9
 8007606:	106d      	asrs	r5, r5, #1
 8007608:	429d      	cmp	r5, r3
 800760a:	bf38      	it	cc
 800760c:	461d      	movcc	r5, r3
 800760e:	0553      	lsls	r3, r2, #21
 8007610:	d527      	bpl.n	8007662 <__ssputs_r+0x8e>
 8007612:	4629      	mov	r1, r5
 8007614:	f7ff ff52 	bl	80074bc <_malloc_r>
 8007618:	4606      	mov	r6, r0
 800761a:	b360      	cbz	r0, 8007676 <__ssputs_r+0xa2>
 800761c:	6921      	ldr	r1, [r4, #16]
 800761e:	464a      	mov	r2, r9
 8007620:	f7ff fed2 	bl	80073c8 <memcpy>
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800762a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	6126      	str	r6, [r4, #16]
 8007632:	6165      	str	r5, [r4, #20]
 8007634:	444e      	add	r6, r9
 8007636:	eba5 0509 	sub.w	r5, r5, r9
 800763a:	6026      	str	r6, [r4, #0]
 800763c:	60a5      	str	r5, [r4, #8]
 800763e:	463e      	mov	r6, r7
 8007640:	42be      	cmp	r6, r7
 8007642:	d900      	bls.n	8007646 <__ssputs_r+0x72>
 8007644:	463e      	mov	r6, r7
 8007646:	6820      	ldr	r0, [r4, #0]
 8007648:	4632      	mov	r2, r6
 800764a:	4641      	mov	r1, r8
 800764c:	f000 faa8 	bl	8007ba0 <memmove>
 8007650:	68a3      	ldr	r3, [r4, #8]
 8007652:	1b9b      	subs	r3, r3, r6
 8007654:	60a3      	str	r3, [r4, #8]
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	4433      	add	r3, r6
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	2000      	movs	r0, #0
 800765e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007662:	462a      	mov	r2, r5
 8007664:	f000 fac6 	bl	8007bf4 <_realloc_r>
 8007668:	4606      	mov	r6, r0
 800766a:	2800      	cmp	r0, #0
 800766c:	d1e0      	bne.n	8007630 <__ssputs_r+0x5c>
 800766e:	6921      	ldr	r1, [r4, #16]
 8007670:	4650      	mov	r0, sl
 8007672:	f7ff feb7 	bl	80073e4 <_free_r>
 8007676:	230c      	movs	r3, #12
 8007678:	f8ca 3000 	str.w	r3, [sl]
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	e7e9      	b.n	800765e <__ssputs_r+0x8a>
	...

0800768c <_svfiprintf_r>:
 800768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007690:	4698      	mov	r8, r3
 8007692:	898b      	ldrh	r3, [r1, #12]
 8007694:	061b      	lsls	r3, r3, #24
 8007696:	b09d      	sub	sp, #116	@ 0x74
 8007698:	4607      	mov	r7, r0
 800769a:	460d      	mov	r5, r1
 800769c:	4614      	mov	r4, r2
 800769e:	d510      	bpl.n	80076c2 <_svfiprintf_r+0x36>
 80076a0:	690b      	ldr	r3, [r1, #16]
 80076a2:	b973      	cbnz	r3, 80076c2 <_svfiprintf_r+0x36>
 80076a4:	2140      	movs	r1, #64	@ 0x40
 80076a6:	f7ff ff09 	bl	80074bc <_malloc_r>
 80076aa:	6028      	str	r0, [r5, #0]
 80076ac:	6128      	str	r0, [r5, #16]
 80076ae:	b930      	cbnz	r0, 80076be <_svfiprintf_r+0x32>
 80076b0:	230c      	movs	r3, #12
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	b01d      	add	sp, #116	@ 0x74
 80076ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076be:	2340      	movs	r3, #64	@ 0x40
 80076c0:	616b      	str	r3, [r5, #20]
 80076c2:	2300      	movs	r3, #0
 80076c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c6:	2320      	movs	r3, #32
 80076c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d0:	2330      	movs	r3, #48	@ 0x30
 80076d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007870 <_svfiprintf_r+0x1e4>
 80076d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076da:	f04f 0901 	mov.w	r9, #1
 80076de:	4623      	mov	r3, r4
 80076e0:	469a      	mov	sl, r3
 80076e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e6:	b10a      	cbz	r2, 80076ec <_svfiprintf_r+0x60>
 80076e8:	2a25      	cmp	r2, #37	@ 0x25
 80076ea:	d1f9      	bne.n	80076e0 <_svfiprintf_r+0x54>
 80076ec:	ebba 0b04 	subs.w	fp, sl, r4
 80076f0:	d00b      	beq.n	800770a <_svfiprintf_r+0x7e>
 80076f2:	465b      	mov	r3, fp
 80076f4:	4622      	mov	r2, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7ff ff6b 	bl	80075d4 <__ssputs_r>
 80076fe:	3001      	adds	r0, #1
 8007700:	f000 80a7 	beq.w	8007852 <_svfiprintf_r+0x1c6>
 8007704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007706:	445a      	add	r2, fp
 8007708:	9209      	str	r2, [sp, #36]	@ 0x24
 800770a:	f89a 3000 	ldrb.w	r3, [sl]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 809f 	beq.w	8007852 <_svfiprintf_r+0x1c6>
 8007714:	2300      	movs	r3, #0
 8007716:	f04f 32ff 	mov.w	r2, #4294967295
 800771a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800771e:	f10a 0a01 	add.w	sl, sl, #1
 8007722:	9304      	str	r3, [sp, #16]
 8007724:	9307      	str	r3, [sp, #28]
 8007726:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800772a:	931a      	str	r3, [sp, #104]	@ 0x68
 800772c:	4654      	mov	r4, sl
 800772e:	2205      	movs	r2, #5
 8007730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007734:	484e      	ldr	r0, [pc, #312]	@ (8007870 <_svfiprintf_r+0x1e4>)
 8007736:	f7f8 fd9b 	bl	8000270 <memchr>
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	b9d8      	cbnz	r0, 8007776 <_svfiprintf_r+0xea>
 800773e:	06d0      	lsls	r0, r2, #27
 8007740:	bf44      	itt	mi
 8007742:	2320      	movmi	r3, #32
 8007744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007748:	0711      	lsls	r1, r2, #28
 800774a:	bf44      	itt	mi
 800774c:	232b      	movmi	r3, #43	@ 0x2b
 800774e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007752:	f89a 3000 	ldrb.w	r3, [sl]
 8007756:	2b2a      	cmp	r3, #42	@ 0x2a
 8007758:	d015      	beq.n	8007786 <_svfiprintf_r+0xfa>
 800775a:	9a07      	ldr	r2, [sp, #28]
 800775c:	4654      	mov	r4, sl
 800775e:	2000      	movs	r0, #0
 8007760:	f04f 0c0a 	mov.w	ip, #10
 8007764:	4621      	mov	r1, r4
 8007766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800776a:	3b30      	subs	r3, #48	@ 0x30
 800776c:	2b09      	cmp	r3, #9
 800776e:	d94b      	bls.n	8007808 <_svfiprintf_r+0x17c>
 8007770:	b1b0      	cbz	r0, 80077a0 <_svfiprintf_r+0x114>
 8007772:	9207      	str	r2, [sp, #28]
 8007774:	e014      	b.n	80077a0 <_svfiprintf_r+0x114>
 8007776:	eba0 0308 	sub.w	r3, r0, r8
 800777a:	fa09 f303 	lsl.w	r3, r9, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	9304      	str	r3, [sp, #16]
 8007782:	46a2      	mov	sl, r4
 8007784:	e7d2      	b.n	800772c <_svfiprintf_r+0xa0>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	1d19      	adds	r1, r3, #4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	9103      	str	r1, [sp, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfbb      	ittet	lt
 8007792:	425b      	neglt	r3, r3
 8007794:	f042 0202 	orrlt.w	r2, r2, #2
 8007798:	9307      	strge	r3, [sp, #28]
 800779a:	9307      	strlt	r3, [sp, #28]
 800779c:	bfb8      	it	lt
 800779e:	9204      	strlt	r2, [sp, #16]
 80077a0:	7823      	ldrb	r3, [r4, #0]
 80077a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a4:	d10a      	bne.n	80077bc <_svfiprintf_r+0x130>
 80077a6:	7863      	ldrb	r3, [r4, #1]
 80077a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80077aa:	d132      	bne.n	8007812 <_svfiprintf_r+0x186>
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	1d1a      	adds	r2, r3, #4
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	9203      	str	r2, [sp, #12]
 80077b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077b8:	3402      	adds	r4, #2
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007880 <_svfiprintf_r+0x1f4>
 80077c0:	7821      	ldrb	r1, [r4, #0]
 80077c2:	2203      	movs	r2, #3
 80077c4:	4650      	mov	r0, sl
 80077c6:	f7f8 fd53 	bl	8000270 <memchr>
 80077ca:	b138      	cbz	r0, 80077dc <_svfiprintf_r+0x150>
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	eba0 000a 	sub.w	r0, r0, sl
 80077d2:	2240      	movs	r2, #64	@ 0x40
 80077d4:	4082      	lsls	r2, r0
 80077d6:	4313      	orrs	r3, r2
 80077d8:	3401      	adds	r4, #1
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e0:	4824      	ldr	r0, [pc, #144]	@ (8007874 <_svfiprintf_r+0x1e8>)
 80077e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077e6:	2206      	movs	r2, #6
 80077e8:	f7f8 fd42 	bl	8000270 <memchr>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d036      	beq.n	800785e <_svfiprintf_r+0x1d2>
 80077f0:	4b21      	ldr	r3, [pc, #132]	@ (8007878 <_svfiprintf_r+0x1ec>)
 80077f2:	bb1b      	cbnz	r3, 800783c <_svfiprintf_r+0x1b0>
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	3307      	adds	r3, #7
 80077f8:	f023 0307 	bic.w	r3, r3, #7
 80077fc:	3308      	adds	r3, #8
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007802:	4433      	add	r3, r6
 8007804:	9309      	str	r3, [sp, #36]	@ 0x24
 8007806:	e76a      	b.n	80076de <_svfiprintf_r+0x52>
 8007808:	fb0c 3202 	mla	r2, ip, r2, r3
 800780c:	460c      	mov	r4, r1
 800780e:	2001      	movs	r0, #1
 8007810:	e7a8      	b.n	8007764 <_svfiprintf_r+0xd8>
 8007812:	2300      	movs	r3, #0
 8007814:	3401      	adds	r4, #1
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	4619      	mov	r1, r3
 800781a:	f04f 0c0a 	mov.w	ip, #10
 800781e:	4620      	mov	r0, r4
 8007820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007824:	3a30      	subs	r2, #48	@ 0x30
 8007826:	2a09      	cmp	r2, #9
 8007828:	d903      	bls.n	8007832 <_svfiprintf_r+0x1a6>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0c6      	beq.n	80077bc <_svfiprintf_r+0x130>
 800782e:	9105      	str	r1, [sp, #20]
 8007830:	e7c4      	b.n	80077bc <_svfiprintf_r+0x130>
 8007832:	fb0c 2101 	mla	r1, ip, r1, r2
 8007836:	4604      	mov	r4, r0
 8007838:	2301      	movs	r3, #1
 800783a:	e7f0      	b.n	800781e <_svfiprintf_r+0x192>
 800783c:	ab03      	add	r3, sp, #12
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	462a      	mov	r2, r5
 8007842:	4b0e      	ldr	r3, [pc, #56]	@ (800787c <_svfiprintf_r+0x1f0>)
 8007844:	a904      	add	r1, sp, #16
 8007846:	4638      	mov	r0, r7
 8007848:	f3af 8000 	nop.w
 800784c:	1c42      	adds	r2, r0, #1
 800784e:	4606      	mov	r6, r0
 8007850:	d1d6      	bne.n	8007800 <_svfiprintf_r+0x174>
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	065b      	lsls	r3, r3, #25
 8007856:	f53f af2d 	bmi.w	80076b4 <_svfiprintf_r+0x28>
 800785a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800785c:	e72c      	b.n	80076b8 <_svfiprintf_r+0x2c>
 800785e:	ab03      	add	r3, sp, #12
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	462a      	mov	r2, r5
 8007864:	4b05      	ldr	r3, [pc, #20]	@ (800787c <_svfiprintf_r+0x1f0>)
 8007866:	a904      	add	r1, sp, #16
 8007868:	4638      	mov	r0, r7
 800786a:	f000 f879 	bl	8007960 <_printf_i>
 800786e:	e7ed      	b.n	800784c <_svfiprintf_r+0x1c0>
 8007870:	08007dfc 	.word	0x08007dfc
 8007874:	08007e06 	.word	0x08007e06
 8007878:	00000000 	.word	0x00000000
 800787c:	080075d5 	.word	0x080075d5
 8007880:	08007e02 	.word	0x08007e02

08007884 <_printf_common>:
 8007884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	4616      	mov	r6, r2
 800788a:	4698      	mov	r8, r3
 800788c:	688a      	ldr	r2, [r1, #8]
 800788e:	690b      	ldr	r3, [r1, #16]
 8007890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007894:	4293      	cmp	r3, r2
 8007896:	bfb8      	it	lt
 8007898:	4613      	movlt	r3, r2
 800789a:	6033      	str	r3, [r6, #0]
 800789c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078a0:	4607      	mov	r7, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	b10a      	cbz	r2, 80078aa <_printf_common+0x26>
 80078a6:	3301      	adds	r3, #1
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	0699      	lsls	r1, r3, #26
 80078ae:	bf42      	ittt	mi
 80078b0:	6833      	ldrmi	r3, [r6, #0]
 80078b2:	3302      	addmi	r3, #2
 80078b4:	6033      	strmi	r3, [r6, #0]
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	f015 0506 	ands.w	r5, r5, #6
 80078bc:	d106      	bne.n	80078cc <_printf_common+0x48>
 80078be:	f104 0a19 	add.w	sl, r4, #25
 80078c2:	68e3      	ldr	r3, [r4, #12]
 80078c4:	6832      	ldr	r2, [r6, #0]
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	dc26      	bgt.n	800791a <_printf_common+0x96>
 80078cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078d0:	6822      	ldr	r2, [r4, #0]
 80078d2:	3b00      	subs	r3, #0
 80078d4:	bf18      	it	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	0692      	lsls	r2, r2, #26
 80078da:	d42b      	bmi.n	8007934 <_printf_common+0xb0>
 80078dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078e0:	4641      	mov	r1, r8
 80078e2:	4638      	mov	r0, r7
 80078e4:	47c8      	blx	r9
 80078e6:	3001      	adds	r0, #1
 80078e8:	d01e      	beq.n	8007928 <_printf_common+0xa4>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	f003 0306 	and.w	r3, r3, #6
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	bf02      	ittt	eq
 80078f6:	68e5      	ldreq	r5, [r4, #12]
 80078f8:	6833      	ldreq	r3, [r6, #0]
 80078fa:	1aed      	subeq	r5, r5, r3
 80078fc:	68a3      	ldr	r3, [r4, #8]
 80078fe:	bf0c      	ite	eq
 8007900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007904:	2500      	movne	r5, #0
 8007906:	4293      	cmp	r3, r2
 8007908:	bfc4      	itt	gt
 800790a:	1a9b      	subgt	r3, r3, r2
 800790c:	18ed      	addgt	r5, r5, r3
 800790e:	2600      	movs	r6, #0
 8007910:	341a      	adds	r4, #26
 8007912:	42b5      	cmp	r5, r6
 8007914:	d11a      	bne.n	800794c <_printf_common+0xc8>
 8007916:	2000      	movs	r0, #0
 8007918:	e008      	b.n	800792c <_printf_common+0xa8>
 800791a:	2301      	movs	r3, #1
 800791c:	4652      	mov	r2, sl
 800791e:	4641      	mov	r1, r8
 8007920:	4638      	mov	r0, r7
 8007922:	47c8      	blx	r9
 8007924:	3001      	adds	r0, #1
 8007926:	d103      	bne.n	8007930 <_printf_common+0xac>
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007930:	3501      	adds	r5, #1
 8007932:	e7c6      	b.n	80078c2 <_printf_common+0x3e>
 8007934:	18e1      	adds	r1, r4, r3
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	2030      	movs	r0, #48	@ 0x30
 800793a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800793e:	4422      	add	r2, r4
 8007940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007948:	3302      	adds	r3, #2
 800794a:	e7c7      	b.n	80078dc <_printf_common+0x58>
 800794c:	2301      	movs	r3, #1
 800794e:	4622      	mov	r2, r4
 8007950:	4641      	mov	r1, r8
 8007952:	4638      	mov	r0, r7
 8007954:	47c8      	blx	r9
 8007956:	3001      	adds	r0, #1
 8007958:	d0e6      	beq.n	8007928 <_printf_common+0xa4>
 800795a:	3601      	adds	r6, #1
 800795c:	e7d9      	b.n	8007912 <_printf_common+0x8e>
	...

08007960 <_printf_i>:
 8007960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	7e0f      	ldrb	r7, [r1, #24]
 8007966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007968:	2f78      	cmp	r7, #120	@ 0x78
 800796a:	4691      	mov	r9, r2
 800796c:	4680      	mov	r8, r0
 800796e:	460c      	mov	r4, r1
 8007970:	469a      	mov	sl, r3
 8007972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007976:	d807      	bhi.n	8007988 <_printf_i+0x28>
 8007978:	2f62      	cmp	r7, #98	@ 0x62
 800797a:	d80a      	bhi.n	8007992 <_printf_i+0x32>
 800797c:	2f00      	cmp	r7, #0
 800797e:	f000 80d2 	beq.w	8007b26 <_printf_i+0x1c6>
 8007982:	2f58      	cmp	r7, #88	@ 0x58
 8007984:	f000 80b9 	beq.w	8007afa <_printf_i+0x19a>
 8007988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800798c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007990:	e03a      	b.n	8007a08 <_printf_i+0xa8>
 8007992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007996:	2b15      	cmp	r3, #21
 8007998:	d8f6      	bhi.n	8007988 <_printf_i+0x28>
 800799a:	a101      	add	r1, pc, #4	@ (adr r1, 80079a0 <_printf_i+0x40>)
 800799c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a0:	080079f9 	.word	0x080079f9
 80079a4:	08007a0d 	.word	0x08007a0d
 80079a8:	08007989 	.word	0x08007989
 80079ac:	08007989 	.word	0x08007989
 80079b0:	08007989 	.word	0x08007989
 80079b4:	08007989 	.word	0x08007989
 80079b8:	08007a0d 	.word	0x08007a0d
 80079bc:	08007989 	.word	0x08007989
 80079c0:	08007989 	.word	0x08007989
 80079c4:	08007989 	.word	0x08007989
 80079c8:	08007989 	.word	0x08007989
 80079cc:	08007b0d 	.word	0x08007b0d
 80079d0:	08007a37 	.word	0x08007a37
 80079d4:	08007ac7 	.word	0x08007ac7
 80079d8:	08007989 	.word	0x08007989
 80079dc:	08007989 	.word	0x08007989
 80079e0:	08007b2f 	.word	0x08007b2f
 80079e4:	08007989 	.word	0x08007989
 80079e8:	08007a37 	.word	0x08007a37
 80079ec:	08007989 	.word	0x08007989
 80079f0:	08007989 	.word	0x08007989
 80079f4:	08007acf 	.word	0x08007acf
 80079f8:	6833      	ldr	r3, [r6, #0]
 80079fa:	1d1a      	adds	r2, r3, #4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6032      	str	r2, [r6, #0]
 8007a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e09d      	b.n	8007b48 <_printf_i+0x1e8>
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	6820      	ldr	r0, [r4, #0]
 8007a10:	1d19      	adds	r1, r3, #4
 8007a12:	6031      	str	r1, [r6, #0]
 8007a14:	0606      	lsls	r6, r0, #24
 8007a16:	d501      	bpl.n	8007a1c <_printf_i+0xbc>
 8007a18:	681d      	ldr	r5, [r3, #0]
 8007a1a:	e003      	b.n	8007a24 <_printf_i+0xc4>
 8007a1c:	0645      	lsls	r5, r0, #25
 8007a1e:	d5fb      	bpl.n	8007a18 <_printf_i+0xb8>
 8007a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a24:	2d00      	cmp	r5, #0
 8007a26:	da03      	bge.n	8007a30 <_printf_i+0xd0>
 8007a28:	232d      	movs	r3, #45	@ 0x2d
 8007a2a:	426d      	negs	r5, r5
 8007a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a30:	4859      	ldr	r0, [pc, #356]	@ (8007b98 <_printf_i+0x238>)
 8007a32:	230a      	movs	r3, #10
 8007a34:	e011      	b.n	8007a5a <_printf_i+0xfa>
 8007a36:	6821      	ldr	r1, [r4, #0]
 8007a38:	6833      	ldr	r3, [r6, #0]
 8007a3a:	0608      	lsls	r0, r1, #24
 8007a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a40:	d402      	bmi.n	8007a48 <_printf_i+0xe8>
 8007a42:	0649      	lsls	r1, r1, #25
 8007a44:	bf48      	it	mi
 8007a46:	b2ad      	uxthmi	r5, r5
 8007a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a4a:	4853      	ldr	r0, [pc, #332]	@ (8007b98 <_printf_i+0x238>)
 8007a4c:	6033      	str	r3, [r6, #0]
 8007a4e:	bf14      	ite	ne
 8007a50:	230a      	movne	r3, #10
 8007a52:	2308      	moveq	r3, #8
 8007a54:	2100      	movs	r1, #0
 8007a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a5a:	6866      	ldr	r6, [r4, #4]
 8007a5c:	60a6      	str	r6, [r4, #8]
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	bfa2      	ittt	ge
 8007a62:	6821      	ldrge	r1, [r4, #0]
 8007a64:	f021 0104 	bicge.w	r1, r1, #4
 8007a68:	6021      	strge	r1, [r4, #0]
 8007a6a:	b90d      	cbnz	r5, 8007a70 <_printf_i+0x110>
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	d04b      	beq.n	8007b08 <_printf_i+0x1a8>
 8007a70:	4616      	mov	r6, r2
 8007a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a76:	fb03 5711 	mls	r7, r3, r1, r5
 8007a7a:	5dc7      	ldrb	r7, [r0, r7]
 8007a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a80:	462f      	mov	r7, r5
 8007a82:	42bb      	cmp	r3, r7
 8007a84:	460d      	mov	r5, r1
 8007a86:	d9f4      	bls.n	8007a72 <_printf_i+0x112>
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d10b      	bne.n	8007aa4 <_printf_i+0x144>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	07df      	lsls	r7, r3, #31
 8007a90:	d508      	bpl.n	8007aa4 <_printf_i+0x144>
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	6861      	ldr	r1, [r4, #4]
 8007a96:	4299      	cmp	r1, r3
 8007a98:	bfde      	ittt	le
 8007a9a:	2330      	movle	r3, #48	@ 0x30
 8007a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007aa4:	1b92      	subs	r2, r2, r6
 8007aa6:	6122      	str	r2, [r4, #16]
 8007aa8:	f8cd a000 	str.w	sl, [sp]
 8007aac:	464b      	mov	r3, r9
 8007aae:	aa03      	add	r2, sp, #12
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	f7ff fee6 	bl	8007884 <_printf_common>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d14a      	bne.n	8007b52 <_printf_i+0x1f2>
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	b004      	add	sp, #16
 8007ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f043 0320 	orr.w	r3, r3, #32
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	4833      	ldr	r0, [pc, #204]	@ (8007b9c <_printf_i+0x23c>)
 8007ad0:	2778      	movs	r7, #120	@ 0x78
 8007ad2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	6831      	ldr	r1, [r6, #0]
 8007ada:	061f      	lsls	r7, r3, #24
 8007adc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ae0:	d402      	bmi.n	8007ae8 <_printf_i+0x188>
 8007ae2:	065f      	lsls	r7, r3, #25
 8007ae4:	bf48      	it	mi
 8007ae6:	b2ad      	uxthmi	r5, r5
 8007ae8:	6031      	str	r1, [r6, #0]
 8007aea:	07d9      	lsls	r1, r3, #31
 8007aec:	bf44      	itt	mi
 8007aee:	f043 0320 	orrmi.w	r3, r3, #32
 8007af2:	6023      	strmi	r3, [r4, #0]
 8007af4:	b11d      	cbz	r5, 8007afe <_printf_i+0x19e>
 8007af6:	2310      	movs	r3, #16
 8007af8:	e7ac      	b.n	8007a54 <_printf_i+0xf4>
 8007afa:	4827      	ldr	r0, [pc, #156]	@ (8007b98 <_printf_i+0x238>)
 8007afc:	e7e9      	b.n	8007ad2 <_printf_i+0x172>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	f023 0320 	bic.w	r3, r3, #32
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	e7f6      	b.n	8007af6 <_printf_i+0x196>
 8007b08:	4616      	mov	r6, r2
 8007b0a:	e7bd      	b.n	8007a88 <_printf_i+0x128>
 8007b0c:	6833      	ldr	r3, [r6, #0]
 8007b0e:	6825      	ldr	r5, [r4, #0]
 8007b10:	6961      	ldr	r1, [r4, #20]
 8007b12:	1d18      	adds	r0, r3, #4
 8007b14:	6030      	str	r0, [r6, #0]
 8007b16:	062e      	lsls	r6, r5, #24
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	d501      	bpl.n	8007b20 <_printf_i+0x1c0>
 8007b1c:	6019      	str	r1, [r3, #0]
 8007b1e:	e002      	b.n	8007b26 <_printf_i+0x1c6>
 8007b20:	0668      	lsls	r0, r5, #25
 8007b22:	d5fb      	bpl.n	8007b1c <_printf_i+0x1bc>
 8007b24:	8019      	strh	r1, [r3, #0]
 8007b26:	2300      	movs	r3, #0
 8007b28:	6123      	str	r3, [r4, #16]
 8007b2a:	4616      	mov	r6, r2
 8007b2c:	e7bc      	b.n	8007aa8 <_printf_i+0x148>
 8007b2e:	6833      	ldr	r3, [r6, #0]
 8007b30:	1d1a      	adds	r2, r3, #4
 8007b32:	6032      	str	r2, [r6, #0]
 8007b34:	681e      	ldr	r6, [r3, #0]
 8007b36:	6862      	ldr	r2, [r4, #4]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7f8 fb98 	bl	8000270 <memchr>
 8007b40:	b108      	cbz	r0, 8007b46 <_printf_i+0x1e6>
 8007b42:	1b80      	subs	r0, r0, r6
 8007b44:	6060      	str	r0, [r4, #4]
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b50:	e7aa      	b.n	8007aa8 <_printf_i+0x148>
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	4632      	mov	r2, r6
 8007b56:	4649      	mov	r1, r9
 8007b58:	4640      	mov	r0, r8
 8007b5a:	47d0      	blx	sl
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d0ad      	beq.n	8007abc <_printf_i+0x15c>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	079b      	lsls	r3, r3, #30
 8007b64:	d413      	bmi.n	8007b8e <_printf_i+0x22e>
 8007b66:	68e0      	ldr	r0, [r4, #12]
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	4298      	cmp	r0, r3
 8007b6c:	bfb8      	it	lt
 8007b6e:	4618      	movlt	r0, r3
 8007b70:	e7a6      	b.n	8007ac0 <_printf_i+0x160>
 8007b72:	2301      	movs	r3, #1
 8007b74:	4632      	mov	r2, r6
 8007b76:	4649      	mov	r1, r9
 8007b78:	4640      	mov	r0, r8
 8007b7a:	47d0      	blx	sl
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d09d      	beq.n	8007abc <_printf_i+0x15c>
 8007b80:	3501      	adds	r5, #1
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	9903      	ldr	r1, [sp, #12]
 8007b86:	1a5b      	subs	r3, r3, r1
 8007b88:	42ab      	cmp	r3, r5
 8007b8a:	dcf2      	bgt.n	8007b72 <_printf_i+0x212>
 8007b8c:	e7eb      	b.n	8007b66 <_printf_i+0x206>
 8007b8e:	2500      	movs	r5, #0
 8007b90:	f104 0619 	add.w	r6, r4, #25
 8007b94:	e7f5      	b.n	8007b82 <_printf_i+0x222>
 8007b96:	bf00      	nop
 8007b98:	08007e0d 	.word	0x08007e0d
 8007b9c:	08007e1e 	.word	0x08007e1e

08007ba0 <memmove>:
 8007ba0:	4288      	cmp	r0, r1
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	eb01 0402 	add.w	r4, r1, r2
 8007ba8:	d902      	bls.n	8007bb0 <memmove+0x10>
 8007baa:	4284      	cmp	r4, r0
 8007bac:	4623      	mov	r3, r4
 8007bae:	d807      	bhi.n	8007bc0 <memmove+0x20>
 8007bb0:	1e43      	subs	r3, r0, #1
 8007bb2:	42a1      	cmp	r1, r4
 8007bb4:	d008      	beq.n	8007bc8 <memmove+0x28>
 8007bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bbe:	e7f8      	b.n	8007bb2 <memmove+0x12>
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	428a      	cmp	r2, r1
 8007bc6:	d100      	bne.n	8007bca <memmove+0x2a>
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bd2:	e7f7      	b.n	8007bc4 <memmove+0x24>

08007bd4 <_sbrk_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d06      	ldr	r5, [pc, #24]	@ (8007bf0 <_sbrk_r+0x1c>)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	f000 f83e 	bl	8007c60 <_sbrk>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_sbrk_r+0x1a>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_sbrk_r+0x1a>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20014634 	.word	0x20014634

08007bf4 <_realloc_r>:
 8007bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	4615      	mov	r5, r2
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	b921      	cbnz	r1, 8007c0a <_realloc_r+0x16>
 8007c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c04:	4611      	mov	r1, r2
 8007c06:	f7ff bc59 	b.w	80074bc <_malloc_r>
 8007c0a:	b92a      	cbnz	r2, 8007c18 <_realloc_r+0x24>
 8007c0c:	f7ff fbea 	bl	80073e4 <_free_r>
 8007c10:	2400      	movs	r4, #0
 8007c12:	4620      	mov	r0, r4
 8007c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c18:	f000 f81a 	bl	8007c50 <_malloc_usable_size_r>
 8007c1c:	4285      	cmp	r5, r0
 8007c1e:	4606      	mov	r6, r0
 8007c20:	d802      	bhi.n	8007c28 <_realloc_r+0x34>
 8007c22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c26:	d8f4      	bhi.n	8007c12 <_realloc_r+0x1e>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	f7ff fc46 	bl	80074bc <_malloc_r>
 8007c30:	4607      	mov	r7, r0
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d0ec      	beq.n	8007c10 <_realloc_r+0x1c>
 8007c36:	42b5      	cmp	r5, r6
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	bf28      	it	cs
 8007c3e:	4632      	movcs	r2, r6
 8007c40:	f7ff fbc2 	bl	80073c8 <memcpy>
 8007c44:	4621      	mov	r1, r4
 8007c46:	4640      	mov	r0, r8
 8007c48:	f7ff fbcc 	bl	80073e4 <_free_r>
 8007c4c:	463c      	mov	r4, r7
 8007c4e:	e7e0      	b.n	8007c12 <_realloc_r+0x1e>

08007c50 <_malloc_usable_size_r>:
 8007c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c54:	1f18      	subs	r0, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	bfbc      	itt	lt
 8007c5a:	580b      	ldrlt	r3, [r1, r0]
 8007c5c:	18c0      	addlt	r0, r0, r3
 8007c5e:	4770      	bx	lr

08007c60 <_sbrk>:
 8007c60:	4a04      	ldr	r2, [pc, #16]	@ (8007c74 <_sbrk+0x14>)
 8007c62:	6811      	ldr	r1, [r2, #0]
 8007c64:	4603      	mov	r3, r0
 8007c66:	b909      	cbnz	r1, 8007c6c <_sbrk+0xc>
 8007c68:	4903      	ldr	r1, [pc, #12]	@ (8007c78 <_sbrk+0x18>)
 8007c6a:	6011      	str	r1, [r2, #0]
 8007c6c:	6810      	ldr	r0, [r2, #0]
 8007c6e:	4403      	add	r3, r0
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	4770      	bx	lr
 8007c74:	20014644 	.word	0x20014644
 8007c78:	20014648 	.word	0x20014648

08007c7c <_init>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr

08007c88 <_fini>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr
